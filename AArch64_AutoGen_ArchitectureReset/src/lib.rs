#![no_std]
#![allow(non_snake_case)]
#![allow(unused_assignments)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(dead_code)]
#![allow(unreachable_code)]
#![allow(unused_doc_comments)]
#![allow(non_upper_case_globals)]
//! BOREALIS GENERATED FILE
extern crate alloc;
use Mk_ICC_SRE_EL1_Type::*;
use PAR_EL1_write::*;
use MPAM3_EL3_read::*;
use MPAM1_EL1_read::*;
use u_update_ICC_SRE_EL1_Type_DIB::*;
use SDER32_EL3_write::*;
use Mk_TTBR1_EL1_Type::*;
use u__UNKNOWN_bits::*;
use ICC_IGRPEN1_EL1_read::*;
use MPAM3_EL3_write::*;
use PAR_EL1_read::*;
use u_update_ICC_IGRPEN1_EL1_Type_Enable::*;
use ICC_CTLR_EL1_read::*;
use Mk_MPAM3_EL3_Type::*;
use Mk_ICC_CTLR_EL1_Type::*;
use ICC_BPR1_EL1_read::*;
use Mk_SDER32_EL3_Type::*;
use TTBR1_EL1_read::*;
use ICC_SRE_EL1_write::*;
use Mk_ICC_BPR1_EL1_Type::*;
use u_update_MPAM3_EL3_Type_TRAPLOWER::*;
use Mk_ICC_IGRPEN1_EL1_Type::*;
use TTBR0_EL2_read::*;
use ICC_BPR1_EL1_write::*;
use Mk_TTBR0_EL2_Type::*;
use u_update_ICC_SRE_EL1_Type_DFB::*;
use u_update_MPAM3_EL3_Type_MPAMEN::*;
use TTBR0_EL2_write::*;
use u_update_ICC_SRE_EL1_Type_SRE::*;
use VTTBR_EL2_read::*;
use ICC_IGRPEN1_EL1_write::*;
use Mk_MPAM1_EL1_Type::*;
use Mk_VTTBR_EL2_Type::*;
use VTTBR_EL2_write::*;
use Mk_PAR_EL1_Type::*;
use SDER32_EL3_read::*;
use TTBR0_EL1_read::*;
use ICC_SRE_EL1_read::*;
use TTBR0_EL1_write::*;
use Mk_TTBR0_EL1_Type::*;
use IsFeatureImplemented::*;
use HaveAArch32::*;
use MPAM1_EL1_write::*;
use ICC_CTLR_EL1_write::*;
use u_update_MPAM1_EL1_Type_MPAMEN::*;
use Bit::*;
use TTBR1_EL1_write::*;
use common::*;
pub fn AArch64_AutoGen_ArchitectureReset<T: Tracer>(
    state: &mut State,
    tracer: &T,
    cold: bool,
) -> () {
    #[derive(Default)]
    struct FunctionState {
        gs_39384: bool,
        ga_34444: ProductType782ac6922b48c20d,
        gs_40298: bool,
        ga_34468: ProductType782ac6922b48c20d,
        gs_39386: bool,
        gs_39056: bool,
        gs_39917: bool,
        gs_39912: bool,
        gs_39187: bool,
        ga_34548: ProductType782ac6922b48c20d,
        gs_41008: bool,
        gs_39398: bool,
        gs_38448: bool,
        ga_34516: ProductType782ac6922b48c20d,
        gs_38455: bool,
        gs_39392: bool,
        gs_39410: bool,
        gs_39422: bool,
        gs_40974: bool,
        gs_39911: bool,
        gs_40998: bool,
        gs_40963: bool,
        ga_34496: ProductType782ac6922b48c20d,
        gs_41672: bool,
        gs_39186: bool,
        gs_40331: bool,
        gs_41015: bool,
        gs_40523: bool,
        ga_34568: ProductType782ac6922b48c20d,
        gs_41036: bool,
        ga_34484: ProductType782ac6922b48c20d,
        gs_39188: bool,
        gs_39924: bool,
        gs_41002: bool,
        ga_33899: ProductType5c790c8ef59cc8b2,
        gs_41050: bool,
        ga_31544: ProductType5c790c8ef59cc8b2,
        ga_34528: ProductType782ac6922b48c20d,
        gs_40312: bool,
        ga_33891: ProductType5c790c8ef59cc8b2,
        gs_38107: bool,
        gs_38124: bool,
        gs_39423: bool,
        gs_41049: bool,
        ga_34456: ProductType782ac6922b48c20d,
        gs_39322: bool,
        gs_39409: bool,
        ga_33877: ProductType5c790c8ef59cc8b2,
        gs_39414: bool,
        ga_34492: ProductType782ac6922b48c20d,
        ga_34536: ProductType782ac6922b48c20d,
        gs_40965: bool,
        ga_34464: ProductType782ac6922b48c20d,
        gs_41681: bool,
        gs_39185: bool,
        gs_40125: bool,
        gs_39895: bool,
        gs_38976: bool,
        gs_39190: bool,
        gs_38979: bool,
        gs_39395: bool,
        gs_40122: bool,
        gs_38520: bool,
        gs_39907: bool,
        ga_34436: ProductType782ac6922b48c20d,
        gs_40130: bool,
        gs_39914: bool,
        gs_38123: bool,
        gs_39921: bool,
        gs_40127: bool,
        ga_33873: ProductType5c790c8ef59cc8b2,
        gs_41047: bool,
        ga_34480: ProductType782ac6922b48c20d,
        gs_39418: bool,
        gs_40126: bool,
        gs_38981: bool,
        gs_40297: bool,
        gs_40979: bool,
        ga_33869: ProductType5c790c8ef59cc8b2,
        gs_38163: bool,
        gs_39396: bool,
        gs_40318: bool,
        gs_39923: bool,
        gs_40997: bool,
        gs_39061: bool,
        ga_34532: ProductType782ac6922b48c20d,
        gs_38113: bool,
        ga_31491: ProductType5c790c8ef59cc8b2,
        gs_39424: bool,
        ga_34440: ProductType782ac6922b48c20d,
        gs_40308: bool,
        gs_38132: bool,
        ga_31556: ProductType5c790c8ef59cc8b2,
        gs_39058: bool,
        gs_40999: bool,
        gs_40977: bool,
        gs_38518: bool,
        ga_31548: ProductType5c790c8ef59cc8b2,
        gs_41016: bool,
        gs_40124: bool,
        gs_40129: bool,
        gs_43402: bool,
        gs_38121: bool,
        gs_38973: bool,
        ga_34448: ProductType782ac6922b48c20d,
        gs_40978: bool,
        ga_34540: ProductType782ac6922b48c20d,
        gs_41039: bool,
        gs_38982: bool,
        gs_38975: bool,
        gs_38447: bool,
        gs_39323: bool,
        gs_40313: bool,
        gs_40530: bool,
        gs_39798: bool,
        gs_39908: bool,
        gs_40302: bool,
        gs_41017: bool,
        gs_40314: bool,
        gs_39915: bool,
        gs_41001: bool,
        gs_40300: bool,
        gs_40128: bool,
        gs_40310: bool,
        gs_41000: bool,
        ga_34500: ProductType782ac6922b48c20d,
        gs_39420: bool,
        gs_39407: bool,
        gs_39415: bool,
        gs_41043: bool,
        gs_39379: bool,
        gs_39797: bool,
        gs_40311: bool,
        gs_39391: bool,
        gs_41051: bool,
        ga_34544: ProductType782ac6922b48c20d,
        ga_32752: ProductType5c790c8ef59cc8b2,
        ga_34556: ProductType782ac6922b48c20d,
        ga_34504: ProductType782ac6922b48c20d,
        ga_31443: ProductType5c790c8ef59cc8b2,
        gs_38129: bool,
        gs_41004: bool,
        gs_40966: bool,
        gs_40307: bool,
        gs_38130: bool,
        gs_38978: bool,
        gs_40964: bool,
        gs_38126: bool,
        ga_33895: ProductType5c790c8ef59cc8b2,
        gs_38122: bool,
        ga_34524: ProductType782ac6922b48c20d,
        gs_38116: bool,
        gs_39376: bool,
        gs_39421: bool,
        ga_34476: ProductType782ac6922b48c20d,
        gs_38980: bool,
        gs_39417: bool,
        gs_38106: bool,
        gs_41038: bool,
        ga_34488: ProductType782ac6922b48c20d,
        gs_38454: bool,
        gs_38112: bool,
        gs_39920: bool,
        gs_41700: bool,
        gs_39922: bool,
        gs_41007: bool,
        gs_38117: bool,
        gs_39909: bool,
        gs_38128: bool,
        gs_39990: bool,
        ga_31552: ProductType5c790c8ef59cc8b2,
        gs_40970: bool,
        gs_40316: bool,
        gs_38453: bool,
        gs_41010: bool,
        gs_39389: bool,
        ga_34472: ProductType782ac6922b48c20d,
        gs_40317: bool,
        ga_34512: ProductType782ac6922b48c20d,
        gs_39916: bool,
        gs_38977: bool,
        ga_34432: ProductType782ac6922b48c20d,
        ga_32969: ProductType5c790c8ef59cc8b2,
        gs_39066: bool,
        gs_38108: bool,
        gs_41037: bool,
        gs_41005: bool,
        gs_39408: bool,
        gs_41009: bool,
        gs_39906: bool,
        gs_40976: bool,
        gs_39062: bool,
        gs_39999: bool,
        gs_38131: bool,
        gs_40303: bool,
        gs_39425: bool,
        gs_39400: bool,
        gs_38125: bool,
        gs_40971: bool,
        gs_38974: bool,
        gs_40975: bool,
        gs_39057: bool,
        gs_39063: bool,
        gs_39419: bool,
        gs_39913: bool,
        gs_38457: bool,
        gs_39189: bool,
        gs_41052: bool,
        ga_34520: ProductType782ac6922b48c20d,
        gs_39910: bool,
        gs_40315: bool,
        gs_39388: bool,
        gs_39925: bool,
        gs_39397: bool,
        gs_39387: bool,
        gs_40301: bool,
        gs_41014: bool,
        ga_34552: ProductType782ac6922b48c20d,
        gs_38456: bool,
        gs_39416: bool,
        gs_38458: bool,
        gs_38127: bool,
        gs_40131: bool,
        gs_40328: bool,
        gs_39918: bool,
        ga_34452: ProductType782ac6922b48c20d,
        gs_40299: bool,
        gs_39399: bool,
        gs_39383: bool,
        gs_38519: bool,
        gs_41003: bool,
        ga_34508: ProductType782ac6922b48c20d,
        gs_40123: bool,
        gs_40309: bool,
        gs_39385: bool,
        gs_41006: bool,
        ga_34460: ProductType782ac6922b48c20d,
        ga_34564: ProductType782ac6922b48c20d,
        gs_39799: bool,
        gs_39919: bool,
        gs_41044: bool,
        gs_39390: bool,
        gs_41048: bool,
        ga_34560: ProductType782ac6922b48c20d,
        cold: bool,
    }
    let fn_state = FunctionState {
        cold,
        ..Default::default()
    };
    return block_0(state, tracer, fn_state);
    fn block_0<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_0_0: const #103160u : u32
        let s_0_0: u32 = 103160;
        // D s_0_1: read-reg s_0_0:struct
        let s_0_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_0 as isize);
            tracer.read_register(s_0_0 as isize, value);
            value
        };
        // C s_0_2: const #103160u : u32
        let s_0_2: u32 = 103160;
        // N s_0_3: write-reg s_0_2 <= s_0_1
        let s_0_3: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_2 as isize, s_0_1);
            tracer.write_register(s_0_2 as isize, s_0_1);
        };
        // C s_0_4: const #103160u : u32
        let s_0_4: u32 = 103160;
        // D s_0_5: read-reg s_0_4:struct
        let s_0_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_4 as isize);
            tracer.read_register(s_0_4 as isize, value);
            value
        };
        // C s_0_6: const #103160u : u32
        let s_0_6: u32 = 103160;
        // N s_0_7: write-reg s_0_6 <= s_0_5
        let s_0_7: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_6 as isize, s_0_5);
            tracer.write_register(s_0_6 as isize, s_0_5);
        };
        // C s_0_8: const #90312u : u32
        let s_0_8: u32 = 90312;
        // D s_0_9: read-reg s_0_8:struct
        let s_0_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_8 as isize);
            tracer.read_register(s_0_8 as isize, value);
            value
        };
        // C s_0_10: const #90312u : u32
        let s_0_10: u32 = 90312;
        // N s_0_11: write-reg s_0_10 <= s_0_9
        let s_0_11: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_10 as isize, s_0_9);
            tracer.write_register(s_0_10 as isize, s_0_9);
        };
        // C s_0_12: const #90312u : u32
        let s_0_12: u32 = 90312;
        // D s_0_13: read-reg s_0_12:struct
        let s_0_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_12 as isize);
            tracer.read_register(s_0_12 as isize, value);
            value
        };
        // C s_0_14: const #90312u : u32
        let s_0_14: u32 = 90312;
        // N s_0_15: write-reg s_0_14 <= s_0_13
        let s_0_15: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_14 as isize, s_0_13);
            tracer.write_register(s_0_14 as isize, s_0_13);
        };
        // C s_0_16: const #90600u : u32
        let s_0_16: u32 = 90600;
        // D s_0_17: read-reg s_0_16:struct
        let s_0_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_16 as isize);
            tracer.read_register(s_0_16 as isize, value);
            value
        };
        // C s_0_18: const #90600u : u32
        let s_0_18: u32 = 90600;
        // N s_0_19: write-reg s_0_18 <= s_0_17
        let s_0_19: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_18 as isize, s_0_17);
            tracer.write_register(s_0_18 as isize, s_0_17);
        };
        // C s_0_20: const #15328u : u32
        let s_0_20: u32 = 15328;
        // D s_0_21: read-reg s_0_20:struct
        let s_0_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_20 as isize);
            tracer.read_register(s_0_20 as isize, value);
            value
        };
        // C s_0_22: const #15328u : u32
        let s_0_22: u32 = 15328;
        // N s_0_23: write-reg s_0_22 <= s_0_21
        let s_0_23: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_22 as isize, s_0_21);
            tracer.write_register(s_0_22 as isize, s_0_21);
        };
        // C s_0_24: const #15328u : u32
        let s_0_24: u32 = 15328;
        // D s_0_25: read-reg s_0_24:struct
        let s_0_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_24 as isize);
            tracer.read_register(s_0_24 as isize, value);
            value
        };
        // C s_0_26: const #15328u : u32
        let s_0_26: u32 = 15328;
        // N s_0_27: write-reg s_0_26 <= s_0_25
        let s_0_27: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_26 as isize, s_0_25);
            tracer.write_register(s_0_26 as isize, s_0_25);
        };
        // C s_0_28: const #0u : u8
        let s_0_28: bool = false;
        // S s_0_29: call Bit(s_0_28)
        let s_0_29: bool = Bit(state, tracer, s_0_28);
        // C s_0_30: const #15328u : u32
        let s_0_30: u32 = 15328;
        // D s_0_31: read-reg s_0_30:struct
        let s_0_31: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_30 as isize);
            tracer.read_register(s_0_30 as isize, value);
            value
        };
        // C s_0_32: const #15328u : u32
        let s_0_32: u32 = 15328;
        // N s_0_33: write-reg s_0_32 <= s_0_31
        let s_0_33: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_32 as isize, s_0_31);
            tracer.write_register(s_0_32 as isize, s_0_31);
        };
        // C s_0_34: const #1u : u8
        let s_0_34: bool = true;
        // S s_0_35: call Bit(s_0_34)
        let s_0_35: bool = Bit(state, tracer, s_0_34);
        // C s_0_36: const #15328u : u32
        let s_0_36: u32 = 15328;
        // D s_0_37: read-reg s_0_36:struct
        let s_0_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_36 as isize);
            tracer.read_register(s_0_36 as isize, value);
            value
        };
        // C s_0_38: const #15328u : u32
        let s_0_38: u32 = 15328;
        // N s_0_39: write-reg s_0_38 <= s_0_37
        let s_0_39: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_38 as isize, s_0_37);
            tracer.write_register(s_0_38 as isize, s_0_37);
        };
        // C s_0_40: const #15328u : u32
        let s_0_40: u32 = 15328;
        // D s_0_41: read-reg s_0_40:struct
        let s_0_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_40 as isize);
            tracer.read_register(s_0_40 as isize, value);
            value
        };
        // C s_0_42: const #15328u : u32
        let s_0_42: u32 = 15328;
        // N s_0_43: write-reg s_0_42 <= s_0_41
        let s_0_43: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_42 as isize, s_0_41);
            tracer.write_register(s_0_42 as isize, s_0_41);
        };
        // C s_0_44: const #0u : u8
        let s_0_44: bool = false;
        // S s_0_45: call Bit(s_0_44)
        let s_0_45: bool = Bit(state, tracer, s_0_44);
        // C s_0_46: const #15328u : u32
        let s_0_46: u32 = 15328;
        // D s_0_47: read-reg s_0_46:struct
        let s_0_47: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_46 as isize);
            tracer.read_register(s_0_46 as isize, value);
            value
        };
        // C s_0_48: const #15328u : u32
        let s_0_48: u32 = 15328;
        // N s_0_49: write-reg s_0_48 <= s_0_47
        let s_0_49: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_48 as isize, s_0_47);
            tracer.write_register(s_0_48 as isize, s_0_47);
        };
        // C s_0_50: const #19144u : u32
        let s_0_50: u32 = 19144;
        // D s_0_51: read-reg s_0_50:struct
        let s_0_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_50 as isize);
            tracer.read_register(s_0_50 as isize, value);
            value
        };
        // C s_0_52: const #19144u : u32
        let s_0_52: u32 = 19144;
        // N s_0_53: write-reg s_0_52 <= s_0_51
        let s_0_53: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_52 as isize, s_0_51);
            tracer.write_register(s_0_52 as isize, s_0_51);
        };
        // C s_0_54: const #19144u : u32
        let s_0_54: u32 = 19144;
        // D s_0_55: read-reg s_0_54:struct
        let s_0_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_54 as isize);
            tracer.read_register(s_0_54 as isize, value);
            value
        };
        // C s_0_56: const #19144u : u32
        let s_0_56: u32 = 19144;
        // N s_0_57: write-reg s_0_56 <= s_0_55
        let s_0_57: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_56 as isize, s_0_55);
            tracer.write_register(s_0_56 as isize, s_0_55);
        };
        // C s_0_58: const #19144u : u32
        let s_0_58: u32 = 19144;
        // D s_0_59: read-reg s_0_58:struct
        let s_0_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_58 as isize);
            tracer.read_register(s_0_58 as isize, value);
            value
        };
        // C s_0_60: const #19144u : u32
        let s_0_60: u32 = 19144;
        // N s_0_61: write-reg s_0_60 <= s_0_59
        let s_0_61: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_60 as isize, s_0_59);
            tracer.write_register(s_0_60 as isize, s_0_59);
        };
        // C s_0_62: const #19144u : u32
        let s_0_62: u32 = 19144;
        // D s_0_63: read-reg s_0_62:struct
        let s_0_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_62 as isize);
            tracer.read_register(s_0_62 as isize, value);
            value
        };
        // C s_0_64: const #19144u : u32
        let s_0_64: u32 = 19144;
        // N s_0_65: write-reg s_0_64 <= s_0_63
        let s_0_65: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_64 as isize, s_0_63);
            tracer.write_register(s_0_64 as isize, s_0_63);
        };
        // C s_0_66: const #19144u : u32
        let s_0_66: u32 = 19144;
        // D s_0_67: read-reg s_0_66:struct
        let s_0_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_66 as isize);
            tracer.read_register(s_0_66 as isize, value);
            value
        };
        // C s_0_68: const #19144u : u32
        let s_0_68: u32 = 19144;
        // N s_0_69: write-reg s_0_68 <= s_0_67
        let s_0_69: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_68 as isize, s_0_67);
            tracer.write_register(s_0_68 as isize, s_0_67);
        };
        // C s_0_70: const #19144u : u32
        let s_0_70: u32 = 19144;
        // D s_0_71: read-reg s_0_70:struct
        let s_0_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_70 as isize);
            tracer.read_register(s_0_70 as isize, value);
            value
        };
        // C s_0_72: const #19144u : u32
        let s_0_72: u32 = 19144;
        // N s_0_73: write-reg s_0_72 <= s_0_71
        let s_0_73: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_72 as isize, s_0_71);
            tracer.write_register(s_0_72 as isize, s_0_71);
        };
        // C s_0_74: const #19144u : u32
        let s_0_74: u32 = 19144;
        // D s_0_75: read-reg s_0_74:struct
        let s_0_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_74 as isize);
            tracer.read_register(s_0_74 as isize, value);
            value
        };
        // C s_0_76: const #19144u : u32
        let s_0_76: u32 = 19144;
        // N s_0_77: write-reg s_0_76 <= s_0_75
        let s_0_77: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_76 as isize, s_0_75);
            tracer.write_register(s_0_76 as isize, s_0_75);
        };
        // C s_0_78: const #19144u : u32
        let s_0_78: u32 = 19144;
        // D s_0_79: read-reg s_0_78:struct
        let s_0_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_78 as isize);
            tracer.read_register(s_0_78 as isize, value);
            value
        };
        // C s_0_80: const #19144u : u32
        let s_0_80: u32 = 19144;
        // N s_0_81: write-reg s_0_80 <= s_0_79
        let s_0_81: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_80 as isize, s_0_79);
            tracer.write_register(s_0_80 as isize, s_0_79);
        };
        // C s_0_82: const #19144u : u32
        let s_0_82: u32 = 19144;
        // D s_0_83: read-reg s_0_82:struct
        let s_0_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_82 as isize);
            tracer.read_register(s_0_82 as isize, value);
            value
        };
        // C s_0_84: const #19144u : u32
        let s_0_84: u32 = 19144;
        // N s_0_85: write-reg s_0_84 <= s_0_83
        let s_0_85: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_84 as isize, s_0_83);
            tracer.write_register(s_0_84 as isize, s_0_83);
        };
        // C s_0_86: const #19144u : u32
        let s_0_86: u32 = 19144;
        // D s_0_87: read-reg s_0_86:struct
        let s_0_87: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_86 as isize);
            tracer.read_register(s_0_86 as isize, value);
            value
        };
        // C s_0_88: const #19144u : u32
        let s_0_88: u32 = 19144;
        // N s_0_89: write-reg s_0_88 <= s_0_87
        let s_0_89: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_88 as isize, s_0_87);
            tracer.write_register(s_0_88 as isize, s_0_87);
        };
        // C s_0_90: const #19144u : u32
        let s_0_90: u32 = 19144;
        // D s_0_91: read-reg s_0_90:struct
        let s_0_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_90 as isize);
            tracer.read_register(s_0_90 as isize, value);
            value
        };
        // C s_0_92: const #19144u : u32
        let s_0_92: u32 = 19144;
        // N s_0_93: write-reg s_0_92 <= s_0_91
        let s_0_93: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_92 as isize, s_0_91);
            tracer.write_register(s_0_92 as isize, s_0_91);
        };
        // C s_0_94: const #19144u : u32
        let s_0_94: u32 = 19144;
        // D s_0_95: read-reg s_0_94:struct
        let s_0_95: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_94 as isize);
            tracer.read_register(s_0_94 as isize, value);
            value
        };
        // C s_0_96: const #19144u : u32
        let s_0_96: u32 = 19144;
        // N s_0_97: write-reg s_0_96 <= s_0_95
        let s_0_97: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_0_96 as isize, s_0_95);
            tracer.write_register(s_0_96 as isize, s_0_95);
        };
        // C s_0_98: const #19144u : u32
        let s_0_98: u32 = 19144;
        // D s_0_99: read-reg s_0_98:struct
        let s_0_99: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_98 as isize);
            tracer.read_register(s_0_98 as isize, value);
            value
        };
        // C s_0_100: const #19144u : u32
        let s_0_100: u32 = 19144;
        // N s_0_101: write-reg s_0_100 <= s_0_99
        let s_0_101: () = {
            state
                .write_register::<ProductType5c790c8ef59cc8b2>(s_0_100 as isize, s_0_99);
            tracer.write_register(s_0_100 as isize, s_0_99);
        };
        // C s_0_102: const #19144u : u32
        let s_0_102: u32 = 19144;
        // D s_0_103: read-reg s_0_102:struct
        let s_0_103: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_102 as isize);
            tracer.read_register(s_0_102 as isize, value);
            value
        };
        // C s_0_104: const #19144u : u32
        let s_0_104: u32 = 19144;
        // N s_0_105: write-reg s_0_104 <= s_0_103
        let s_0_105: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_104 as isize, s_0_103);
            tracer.write_register(s_0_104 as isize, s_0_103);
        };
        // C s_0_106: const #0u : u8
        let s_0_106: bool = false;
        // S s_0_107: call Bit(s_0_106)
        let s_0_107: bool = Bit(state, tracer, s_0_106);
        // C s_0_108: const #19144u : u32
        let s_0_108: u32 = 19144;
        // D s_0_109: read-reg s_0_108:struct
        let s_0_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_108 as isize);
            tracer.read_register(s_0_108 as isize, value);
            value
        };
        // C s_0_110: const #19144u : u32
        let s_0_110: u32 = 19144;
        // N s_0_111: write-reg s_0_110 <= s_0_109
        let s_0_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_110 as isize, s_0_109);
            tracer.write_register(s_0_110 as isize, s_0_109);
        };
        // C s_0_112: const #19144u : u32
        let s_0_112: u32 = 19144;
        // D s_0_113: read-reg s_0_112:struct
        let s_0_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_112 as isize);
            tracer.read_register(s_0_112 as isize, value);
            value
        };
        // C s_0_114: const #19144u : u32
        let s_0_114: u32 = 19144;
        // N s_0_115: write-reg s_0_114 <= s_0_113
        let s_0_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_114 as isize, s_0_113);
            tracer.write_register(s_0_114 as isize, s_0_113);
        };
        // C s_0_116: const #19144u : u32
        let s_0_116: u32 = 19144;
        // D s_0_117: read-reg s_0_116:struct
        let s_0_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_116 as isize);
            tracer.read_register(s_0_116 as isize, value);
            value
        };
        // C s_0_118: const #19144u : u32
        let s_0_118: u32 = 19144;
        // N s_0_119: write-reg s_0_118 <= s_0_117
        let s_0_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_118 as isize, s_0_117);
            tracer.write_register(s_0_118 as isize, s_0_117);
        };
        // C s_0_120: const #19144u : u32
        let s_0_120: u32 = 19144;
        // D s_0_121: read-reg s_0_120:struct
        let s_0_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_120 as isize);
            tracer.read_register(s_0_120 as isize, value);
            value
        };
        // C s_0_122: const #19144u : u32
        let s_0_122: u32 = 19144;
        // N s_0_123: write-reg s_0_122 <= s_0_121
        let s_0_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_122 as isize, s_0_121);
            tracer.write_register(s_0_122 as isize, s_0_121);
        };
        // C s_0_124: const #19144u : u32
        let s_0_124: u32 = 19144;
        // D s_0_125: read-reg s_0_124:struct
        let s_0_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_124 as isize);
            tracer.read_register(s_0_124 as isize, value);
            value
        };
        // C s_0_126: const #19144u : u32
        let s_0_126: u32 = 19144;
        // N s_0_127: write-reg s_0_126 <= s_0_125
        let s_0_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_126 as isize, s_0_125);
            tracer.write_register(s_0_126 as isize, s_0_125);
        };
        // C s_0_128: const #19144u : u32
        let s_0_128: u32 = 19144;
        // D s_0_129: read-reg s_0_128:struct
        let s_0_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_128 as isize);
            tracer.read_register(s_0_128 as isize, value);
            value
        };
        // C s_0_130: const #19144u : u32
        let s_0_130: u32 = 19144;
        // N s_0_131: write-reg s_0_130 <= s_0_129
        let s_0_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_130 as isize, s_0_129);
            tracer.write_register(s_0_130 as isize, s_0_129);
        };
        // C s_0_132: const #19144u : u32
        let s_0_132: u32 = 19144;
        // D s_0_133: read-reg s_0_132:struct
        let s_0_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_132 as isize);
            tracer.read_register(s_0_132 as isize, value);
            value
        };
        // C s_0_134: const #19144u : u32
        let s_0_134: u32 = 19144;
        // N s_0_135: write-reg s_0_134 <= s_0_133
        let s_0_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_134 as isize, s_0_133);
            tracer.write_register(s_0_134 as isize, s_0_133);
        };
        // C s_0_136: const #19144u : u32
        let s_0_136: u32 = 19144;
        // D s_0_137: read-reg s_0_136:struct
        let s_0_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_136 as isize);
            tracer.read_register(s_0_136 as isize, value);
            value
        };
        // C s_0_138: const #19144u : u32
        let s_0_138: u32 = 19144;
        // N s_0_139: write-reg s_0_138 <= s_0_137
        let s_0_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_138 as isize, s_0_137);
            tracer.write_register(s_0_138 as isize, s_0_137);
        };
        // C s_0_140: const #19144u : u32
        let s_0_140: u32 = 19144;
        // D s_0_141: read-reg s_0_140:struct
        let s_0_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_140 as isize);
            tracer.read_register(s_0_140 as isize, value);
            value
        };
        // C s_0_142: const #19144u : u32
        let s_0_142: u32 = 19144;
        // N s_0_143: write-reg s_0_142 <= s_0_141
        let s_0_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_142 as isize, s_0_141);
            tracer.write_register(s_0_142 as isize, s_0_141);
        };
        // C s_0_144: const #19144u : u32
        let s_0_144: u32 = 19144;
        // D s_0_145: read-reg s_0_144:struct
        let s_0_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_144 as isize);
            tracer.read_register(s_0_144 as isize, value);
            value
        };
        // C s_0_146: const #19144u : u32
        let s_0_146: u32 = 19144;
        // N s_0_147: write-reg s_0_146 <= s_0_145
        let s_0_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_146 as isize, s_0_145);
            tracer.write_register(s_0_146 as isize, s_0_145);
        };
        // C s_0_148: const #19144u : u32
        let s_0_148: u32 = 19144;
        // D s_0_149: read-reg s_0_148:struct
        let s_0_149: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_148 as isize);
            tracer.read_register(s_0_148 as isize, value);
            value
        };
        // C s_0_150: const #19144u : u32
        let s_0_150: u32 = 19144;
        // N s_0_151: write-reg s_0_150 <= s_0_149
        let s_0_151: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_150 as isize, s_0_149);
            tracer.write_register(s_0_150 as isize, s_0_149);
        };
        // C s_0_152: const #19144u : u32
        let s_0_152: u32 = 19144;
        // D s_0_153: read-reg s_0_152:struct
        let s_0_153: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_152 as isize);
            tracer.read_register(s_0_152 as isize, value);
            value
        };
        // C s_0_154: const #19144u : u32
        let s_0_154: u32 = 19144;
        // N s_0_155: write-reg s_0_154 <= s_0_153
        let s_0_155: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_154 as isize, s_0_153);
            tracer.write_register(s_0_154 as isize, s_0_153);
        };
        // C s_0_156: const #19144u : u32
        let s_0_156: u32 = 19144;
        // D s_0_157: read-reg s_0_156:struct
        let s_0_157: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_156 as isize);
            tracer.read_register(s_0_156 as isize, value);
            value
        };
        // C s_0_158: const #19144u : u32
        let s_0_158: u32 = 19144;
        // N s_0_159: write-reg s_0_158 <= s_0_157
        let s_0_159: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_158 as isize, s_0_157);
            tracer.write_register(s_0_158 as isize, s_0_157);
        };
        // C s_0_160: const #19144u : u32
        let s_0_160: u32 = 19144;
        // D s_0_161: read-reg s_0_160:struct
        let s_0_161: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_160 as isize);
            tracer.read_register(s_0_160 as isize, value);
            value
        };
        // C s_0_162: const #19144u : u32
        let s_0_162: u32 = 19144;
        // N s_0_163: write-reg s_0_162 <= s_0_161
        let s_0_163: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_162 as isize, s_0_161);
            tracer.write_register(s_0_162 as isize, s_0_161);
        };
        // C s_0_164: const #19144u : u32
        let s_0_164: u32 = 19144;
        // D s_0_165: read-reg s_0_164:struct
        let s_0_165: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_164 as isize);
            tracer.read_register(s_0_164 as isize, value);
            value
        };
        // C s_0_166: const #19144u : u32
        let s_0_166: u32 = 19144;
        // N s_0_167: write-reg s_0_166 <= s_0_165
        let s_0_167: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_166 as isize, s_0_165);
            tracer.write_register(s_0_166 as isize, s_0_165);
        };
        // C s_0_168: const #19144u : u32
        let s_0_168: u32 = 19144;
        // D s_0_169: read-reg s_0_168:struct
        let s_0_169: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_168 as isize);
            tracer.read_register(s_0_168 as isize, value);
            value
        };
        // C s_0_170: const #19144u : u32
        let s_0_170: u32 = 19144;
        // N s_0_171: write-reg s_0_170 <= s_0_169
        let s_0_171: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_170 as isize, s_0_169);
            tracer.write_register(s_0_170 as isize, s_0_169);
        };
        // C s_0_172: const #19144u : u32
        let s_0_172: u32 = 19144;
        // D s_0_173: read-reg s_0_172:struct
        let s_0_173: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_172 as isize);
            tracer.read_register(s_0_172 as isize, value);
            value
        };
        // C s_0_174: const #19144u : u32
        let s_0_174: u32 = 19144;
        // N s_0_175: write-reg s_0_174 <= s_0_173
        let s_0_175: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_174 as isize, s_0_173);
            tracer.write_register(s_0_174 as isize, s_0_173);
        };
        // C s_0_176: const #19144u : u32
        let s_0_176: u32 = 19144;
        // D s_0_177: read-reg s_0_176:struct
        let s_0_177: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_176 as isize);
            tracer.read_register(s_0_176 as isize, value);
            value
        };
        // C s_0_178: const #19144u : u32
        let s_0_178: u32 = 19144;
        // N s_0_179: write-reg s_0_178 <= s_0_177
        let s_0_179: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_178 as isize, s_0_177);
            tracer.write_register(s_0_178 as isize, s_0_177);
        };
        // C s_0_180: const #19144u : u32
        let s_0_180: u32 = 19144;
        // D s_0_181: read-reg s_0_180:struct
        let s_0_181: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_180 as isize);
            tracer.read_register(s_0_180 as isize, value);
            value
        };
        // C s_0_182: const #19144u : u32
        let s_0_182: u32 = 19144;
        // N s_0_183: write-reg s_0_182 <= s_0_181
        let s_0_183: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_182 as isize, s_0_181);
            tracer.write_register(s_0_182 as isize, s_0_181);
        };
        // C s_0_184: const #19144u : u32
        let s_0_184: u32 = 19144;
        // D s_0_185: read-reg s_0_184:struct
        let s_0_185: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_184 as isize);
            tracer.read_register(s_0_184 as isize, value);
            value
        };
        // C s_0_186: const #19144u : u32
        let s_0_186: u32 = 19144;
        // N s_0_187: write-reg s_0_186 <= s_0_185
        let s_0_187: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_186 as isize, s_0_185);
            tracer.write_register(s_0_186 as isize, s_0_185);
        };
        // C s_0_188: const #19144u : u32
        let s_0_188: u32 = 19144;
        // D s_0_189: read-reg s_0_188:struct
        let s_0_189: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_188 as isize);
            tracer.read_register(s_0_188 as isize, value);
            value
        };
        // C s_0_190: const #19144u : u32
        let s_0_190: u32 = 19144;
        // N s_0_191: write-reg s_0_190 <= s_0_189
        let s_0_191: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_190 as isize, s_0_189);
            tracer.write_register(s_0_190 as isize, s_0_189);
        };
        // C s_0_192: const #19144u : u32
        let s_0_192: u32 = 19144;
        // D s_0_193: read-reg s_0_192:struct
        let s_0_193: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_192 as isize);
            tracer.read_register(s_0_192 as isize, value);
            value
        };
        // C s_0_194: const #19144u : u32
        let s_0_194: u32 = 19144;
        // N s_0_195: write-reg s_0_194 <= s_0_193
        let s_0_195: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_194 as isize, s_0_193);
            tracer.write_register(s_0_194 as isize, s_0_193);
        };
        // C s_0_196: const #19144u : u32
        let s_0_196: u32 = 19144;
        // D s_0_197: read-reg s_0_196:struct
        let s_0_197: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_196 as isize);
            tracer.read_register(s_0_196 as isize, value);
            value
        };
        // C s_0_198: const #19144u : u32
        let s_0_198: u32 = 19144;
        // N s_0_199: write-reg s_0_198 <= s_0_197
        let s_0_199: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_198 as isize, s_0_197);
            tracer.write_register(s_0_198 as isize, s_0_197);
        };
        // C s_0_200: const #19144u : u32
        let s_0_200: u32 = 19144;
        // D s_0_201: read-reg s_0_200:struct
        let s_0_201: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_200 as isize);
            tracer.read_register(s_0_200 as isize, value);
            value
        };
        // C s_0_202: const #19144u : u32
        let s_0_202: u32 = 19144;
        // N s_0_203: write-reg s_0_202 <= s_0_201
        let s_0_203: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_202 as isize, s_0_201);
            tracer.write_register(s_0_202 as isize, s_0_201);
        };
        // C s_0_204: const #19144u : u32
        let s_0_204: u32 = 19144;
        // D s_0_205: read-reg s_0_204:struct
        let s_0_205: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_204 as isize);
            tracer.read_register(s_0_204 as isize, value);
            value
        };
        // C s_0_206: const #19144u : u32
        let s_0_206: u32 = 19144;
        // N s_0_207: write-reg s_0_206 <= s_0_205
        let s_0_207: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_206 as isize, s_0_205);
            tracer.write_register(s_0_206 as isize, s_0_205);
        };
        // C s_0_208: const #19144u : u32
        let s_0_208: u32 = 19144;
        // D s_0_209: read-reg s_0_208:struct
        let s_0_209: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_208 as isize);
            tracer.read_register(s_0_208 as isize, value);
            value
        };
        // C s_0_210: const #19144u : u32
        let s_0_210: u32 = 19144;
        // N s_0_211: write-reg s_0_210 <= s_0_209
        let s_0_211: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_210 as isize, s_0_209);
            tracer.write_register(s_0_210 as isize, s_0_209);
        };
        // C s_0_212: const #19144u : u32
        let s_0_212: u32 = 19144;
        // D s_0_213: read-reg s_0_212:struct
        let s_0_213: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_212 as isize);
            tracer.read_register(s_0_212 as isize, value);
            value
        };
        // C s_0_214: const #19144u : u32
        let s_0_214: u32 = 19144;
        // N s_0_215: write-reg s_0_214 <= s_0_213
        let s_0_215: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_214 as isize, s_0_213);
            tracer.write_register(s_0_214 as isize, s_0_213);
        };
        // C s_0_216: const #19144u : u32
        let s_0_216: u32 = 19144;
        // D s_0_217: read-reg s_0_216:struct
        let s_0_217: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_216 as isize);
            tracer.read_register(s_0_216 as isize, value);
            value
        };
        // C s_0_218: const #19144u : u32
        let s_0_218: u32 = 19144;
        // N s_0_219: write-reg s_0_218 <= s_0_217
        let s_0_219: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_218 as isize, s_0_217);
            tracer.write_register(s_0_218 as isize, s_0_217);
        };
        // C s_0_220: const #19144u : u32
        let s_0_220: u32 = 19144;
        // D s_0_221: read-reg s_0_220:struct
        let s_0_221: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_220 as isize);
            tracer.read_register(s_0_220 as isize, value);
            value
        };
        // C s_0_222: const #19144u : u32
        let s_0_222: u32 = 19144;
        // N s_0_223: write-reg s_0_222 <= s_0_221
        let s_0_223: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_222 as isize, s_0_221);
            tracer.write_register(s_0_222 as isize, s_0_221);
        };
        // C s_0_224: const #19144u : u32
        let s_0_224: u32 = 19144;
        // D s_0_225: read-reg s_0_224:struct
        let s_0_225: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_224 as isize);
            tracer.read_register(s_0_224 as isize, value);
            value
        };
        // C s_0_226: const #19144u : u32
        let s_0_226: u32 = 19144;
        // N s_0_227: write-reg s_0_226 <= s_0_225
        let s_0_227: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_226 as isize, s_0_225);
            tracer.write_register(s_0_226 as isize, s_0_225);
        };
        // C s_0_228: const #19144u : u32
        let s_0_228: u32 = 19144;
        // D s_0_229: read-reg s_0_228:struct
        let s_0_229: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_228 as isize);
            tracer.read_register(s_0_228 as isize, value);
            value
        };
        // C s_0_230: const #19144u : u32
        let s_0_230: u32 = 19144;
        // N s_0_231: write-reg s_0_230 <= s_0_229
        let s_0_231: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_230 as isize, s_0_229);
            tracer.write_register(s_0_230 as isize, s_0_229);
        };
        // C s_0_232: const #19144u : u32
        let s_0_232: u32 = 19144;
        // D s_0_233: read-reg s_0_232:struct
        let s_0_233: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_232 as isize);
            tracer.read_register(s_0_232 as isize, value);
            value
        };
        // C s_0_234: const #19144u : u32
        let s_0_234: u32 = 19144;
        // N s_0_235: write-reg s_0_234 <= s_0_233
        let s_0_235: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_234 as isize, s_0_233);
            tracer.write_register(s_0_234 as isize, s_0_233);
        };
        // C s_0_236: const #0u : u8
        let s_0_236: bool = false;
        // S s_0_237: call Bit(s_0_236)
        let s_0_237: bool = Bit(state, tracer, s_0_236);
        // C s_0_238: const #19144u : u32
        let s_0_238: u32 = 19144;
        // D s_0_239: read-reg s_0_238:struct
        let s_0_239: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_238 as isize);
            tracer.read_register(s_0_238 as isize, value);
            value
        };
        // C s_0_240: const #19144u : u32
        let s_0_240: u32 = 19144;
        // N s_0_241: write-reg s_0_240 <= s_0_239
        let s_0_241: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_240 as isize, s_0_239);
            tracer.write_register(s_0_240 as isize, s_0_239);
        };
        // C s_0_242: const #19144u : u32
        let s_0_242: u32 = 19144;
        // D s_0_243: read-reg s_0_242:struct
        let s_0_243: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_242 as isize);
            tracer.read_register(s_0_242 as isize, value);
            value
        };
        // C s_0_244: const #19144u : u32
        let s_0_244: u32 = 19144;
        // N s_0_245: write-reg s_0_244 <= s_0_243
        let s_0_245: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_244 as isize, s_0_243);
            tracer.write_register(s_0_244 as isize, s_0_243);
        };
        // C s_0_246: const #19144u : u32
        let s_0_246: u32 = 19144;
        // D s_0_247: read-reg s_0_246:struct
        let s_0_247: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_246 as isize);
            tracer.read_register(s_0_246 as isize, value);
            value
        };
        // C s_0_248: const #19144u : u32
        let s_0_248: u32 = 19144;
        // N s_0_249: write-reg s_0_248 <= s_0_247
        let s_0_249: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_248 as isize, s_0_247);
            tracer.write_register(s_0_248 as isize, s_0_247);
        };
        // C s_0_250: const #19144u : u32
        let s_0_250: u32 = 19144;
        // D s_0_251: read-reg s_0_250:struct
        let s_0_251: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_250 as isize);
            tracer.read_register(s_0_250 as isize, value);
            value
        };
        // C s_0_252: const #19144u : u32
        let s_0_252: u32 = 19144;
        // N s_0_253: write-reg s_0_252 <= s_0_251
        let s_0_253: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_252 as isize, s_0_251);
            tracer.write_register(s_0_252 as isize, s_0_251);
        };
        // C s_0_254: const #19144u : u32
        let s_0_254: u32 = 19144;
        // D s_0_255: read-reg s_0_254:struct
        let s_0_255: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_254 as isize);
            tracer.read_register(s_0_254 as isize, value);
            value
        };
        // C s_0_256: const #19144u : u32
        let s_0_256: u32 = 19144;
        // N s_0_257: write-reg s_0_256 <= s_0_255
        let s_0_257: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_256 as isize, s_0_255);
            tracer.write_register(s_0_256 as isize, s_0_255);
        };
        // C s_0_258: const #19144u : u32
        let s_0_258: u32 = 19144;
        // D s_0_259: read-reg s_0_258:struct
        let s_0_259: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_258 as isize);
            tracer.read_register(s_0_258 as isize, value);
            value
        };
        // C s_0_260: const #19144u : u32
        let s_0_260: u32 = 19144;
        // N s_0_261: write-reg s_0_260 <= s_0_259
        let s_0_261: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_260 as isize, s_0_259);
            tracer.write_register(s_0_260 as isize, s_0_259);
        };
        // C s_0_262: const #19144u : u32
        let s_0_262: u32 = 19144;
        // D s_0_263: read-reg s_0_262:struct
        let s_0_263: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_262 as isize);
            tracer.read_register(s_0_262 as isize, value);
            value
        };
        // C s_0_264: const #19144u : u32
        let s_0_264: u32 = 19144;
        // N s_0_265: write-reg s_0_264 <= s_0_263
        let s_0_265: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_264 as isize, s_0_263);
            tracer.write_register(s_0_264 as isize, s_0_263);
        };
        // C s_0_266: const #19144u : u32
        let s_0_266: u32 = 19144;
        // D s_0_267: read-reg s_0_266:struct
        let s_0_267: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_266 as isize);
            tracer.read_register(s_0_266 as isize, value);
            value
        };
        // C s_0_268: const #19144u : u32
        let s_0_268: u32 = 19144;
        // N s_0_269: write-reg s_0_268 <= s_0_267
        let s_0_269: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_268 as isize, s_0_267);
            tracer.write_register(s_0_268 as isize, s_0_267);
        };
        // C s_0_270: const #19144u : u32
        let s_0_270: u32 = 19144;
        // D s_0_271: read-reg s_0_270:struct
        let s_0_271: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_270 as isize);
            tracer.read_register(s_0_270 as isize, value);
            value
        };
        // C s_0_272: const #19144u : u32
        let s_0_272: u32 = 19144;
        // N s_0_273: write-reg s_0_272 <= s_0_271
        let s_0_273: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_272 as isize, s_0_271);
            tracer.write_register(s_0_272 as isize, s_0_271);
        };
        // C s_0_274: const #90880u : u32
        let s_0_274: u32 = 90880;
        // D s_0_275: read-reg s_0_274:struct
        let s_0_275: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_274 as isize);
            tracer.read_register(s_0_274 as isize, value);
            value
        };
        // C s_0_276: const #90880u : u32
        let s_0_276: u32 = 90880;
        // N s_0_277: write-reg s_0_276 <= s_0_275
        let s_0_277: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_276 as isize, s_0_275);
            tracer.write_register(s_0_276 as isize, s_0_275);
        };
        // C s_0_278: const #20032u : u32
        let s_0_278: u32 = 20032;
        // D s_0_279: read-reg s_0_278:struct
        let s_0_279: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_278 as isize);
            tracer.read_register(s_0_278 as isize, value);
            value
        };
        // C s_0_280: const #20032u : u32
        let s_0_280: u32 = 20032;
        // N s_0_281: write-reg s_0_280 <= s_0_279
        let s_0_281: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_280 as isize, s_0_279);
            tracer.write_register(s_0_280 as isize, s_0_279);
        };
        // C s_0_282: const #20032u : u32
        let s_0_282: u32 = 20032;
        // D s_0_283: read-reg s_0_282:struct
        let s_0_283: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_282 as isize);
            tracer.read_register(s_0_282 as isize, value);
            value
        };
        // C s_0_284: const #20032u : u32
        let s_0_284: u32 = 20032;
        // N s_0_285: write-reg s_0_284 <= s_0_283
        let s_0_285: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_284 as isize, s_0_283);
            tracer.write_register(s_0_284 as isize, s_0_283);
        };
        // C s_0_286: const #20072u : u32
        let s_0_286: u32 = 20072;
        // D s_0_287: read-reg s_0_286:struct
        let s_0_287: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_286 as isize);
            tracer.read_register(s_0_286 as isize, value);
            value
        };
        // C s_0_288: const #20072u : u32
        let s_0_288: u32 = 20072;
        // N s_0_289: write-reg s_0_288 <= s_0_287
        let s_0_289: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_288 as isize, s_0_287);
            tracer.write_register(s_0_288 as isize, s_0_287);
        };
        // C s_0_290: const #20072u : u32
        let s_0_290: u32 = 20072;
        // D s_0_291: read-reg s_0_290:struct
        let s_0_291: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_290 as isize);
            tracer.read_register(s_0_290 as isize, value);
            value
        };
        // C s_0_292: const #20072u : u32
        let s_0_292: u32 = 20072;
        // N s_0_293: write-reg s_0_292 <= s_0_291
        let s_0_293: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_292 as isize, s_0_291);
            tracer.write_register(s_0_292 as isize, s_0_291);
        };
        // C s_0_294: const #20072u : u32
        let s_0_294: u32 = 20072;
        // D s_0_295: read-reg s_0_294:struct
        let s_0_295: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_294 as isize);
            tracer.read_register(s_0_294 as isize, value);
            value
        };
        // C s_0_296: const #20072u : u32
        let s_0_296: u32 = 20072;
        // N s_0_297: write-reg s_0_296 <= s_0_295
        let s_0_297: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_296 as isize, s_0_295);
            tracer.write_register(s_0_296 as isize, s_0_295);
        };
        // C s_0_298: const #20072u : u32
        let s_0_298: u32 = 20072;
        // D s_0_299: read-reg s_0_298:struct
        let s_0_299: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_298 as isize);
            tracer.read_register(s_0_298 as isize, value);
            value
        };
        // C s_0_300: const #20072u : u32
        let s_0_300: u32 = 20072;
        // N s_0_301: write-reg s_0_300 <= s_0_299
        let s_0_301: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_300 as isize, s_0_299);
            tracer.write_register(s_0_300 as isize, s_0_299);
        };
        // C s_0_302: const #90424u : u32
        let s_0_302: u32 = 90424;
        // D s_0_303: read-reg s_0_302:struct
        let s_0_303: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_302 as isize);
            tracer.read_register(s_0_302 as isize, value);
            value
        };
        // C s_0_304: const #90424u : u32
        let s_0_304: u32 = 90424;
        // N s_0_305: write-reg s_0_304 <= s_0_303
        let s_0_305: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_304 as isize, s_0_303);
            tracer.write_register(s_0_304 as isize, s_0_303);
        };
        // C s_0_306: const #90424u : u32
        let s_0_306: u32 = 90424;
        // D s_0_307: read-reg s_0_306:struct
        let s_0_307: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_306 as isize);
            tracer.read_register(s_0_306 as isize, value);
            value
        };
        // C s_0_308: const #90424u : u32
        let s_0_308: u32 = 90424;
        // N s_0_309: write-reg s_0_308 <= s_0_307
        let s_0_309: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_308 as isize, s_0_307);
            tracer.write_register(s_0_308 as isize, s_0_307);
        };
        // C s_0_310: const #17168u : u32
        let s_0_310: u32 = 17168;
        // D s_0_311: read-reg s_0_310:struct
        let s_0_311: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_310 as isize);
            tracer.read_register(s_0_310 as isize, value);
            value
        };
        // C s_0_312: const #17168u : u32
        let s_0_312: u32 = 17168;
        // N s_0_313: write-reg s_0_312 <= s_0_311
        let s_0_313: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_312 as isize, s_0_311);
            tracer.write_register(s_0_312 as isize, s_0_311);
        };
        // C s_0_314: const #15752u : u32
        let s_0_314: u32 = 15752;
        // D s_0_315: read-reg s_0_314:struct
        let s_0_315: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_0_314 as isize);
            tracer.read_register(s_0_314 as isize, value);
            value
        };
        // C s_0_316: const #15752u : u32
        let s_0_316: u32 = 15752;
        // N s_0_317: write-reg s_0_316 <= s_0_315
        let s_0_317: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_0_316 as isize, s_0_315);
            tracer.write_register(s_0_316 as isize, s_0_315);
        };
        // D s_0_318: read-var cold:u8
        let s_0_318: bool = fn_state.cold;
        // D s_0_319: not s_0_318
        let s_0_319: bool = !s_0_318;
        // N s_0_320: branch s_0_319 b1155 b1
        if s_0_319 {
            return block_1155(state, tracer, fn_state);
        } else {
            return block_1(state, tracer, fn_state);
        };
    }
    fn block_1<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1_0: const #0u : u8
        let s_1_0: bool = false;
        // D s_1_1: write-var gs#38106 <= s_1_0
        fn_state.gs_38106 = s_1_0;
        // N s_1_2: jump b2
        return block_2(state, tracer, fn_state);
    }
    fn block_2<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_2_0: read-var gs#38106:u8
        let s_2_0: bool = fn_state.gs_38106;
        // N s_2_1: branch s_2_0 b1154 b3
        if s_2_0 {
            return block_1154(state, tracer, fn_state);
        } else {
            return block_3(state, tracer, fn_state);
        };
    }
    fn block_3<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_3_0: const #1s : i64
        let s_3_0: i64 = 1;
        // C s_3_1: cast zx s_3_0 -> i
        let s_3_1: i128 = (i128::try_from(s_3_0).unwrap());
        // S s_3_2: call __UNKNOWN_bits(s_3_1)
        let s_3_2: Bits = u__UNKNOWN_bits(state, tracer, s_3_1);
        // C s_3_3: const #15752u : u32
        let s_3_3: u32 = 15752;
        // D s_3_4: read-reg s_3_3:struct
        let s_3_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_3_3 as isize);
            tracer.read_register(s_3_3 as isize, value);
            value
        };
        // C s_3_5: const #15752u : u32
        let s_3_5: u32 = 15752;
        // N s_3_6: write-reg s_3_5 <= s_3_4
        let s_3_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_3_5 as isize, s_3_4);
            tracer.write_register(s_3_5 as isize, s_3_4);
        };
        // N s_3_7: jump b4
        return block_4(state, tracer, fn_state);
    }
    fn block_4<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_4_0: read-var cold:u8
        let s_4_0: bool = fn_state.cold;
        // D s_4_1: not s_4_0
        let s_4_1: bool = !s_4_0;
        // N s_4_2: branch s_4_1 b1153 b5
        if s_4_1 {
            return block_1153(state, tracer, fn_state);
        } else {
            return block_5(state, tracer, fn_state);
        };
    }
    fn block_5<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_5_0: const #0u : u8
        let s_5_0: bool = false;
        // D s_5_1: write-var gs#38107 <= s_5_0
        fn_state.gs_38107 = s_5_0;
        // N s_5_2: jump b6
        return block_6(state, tracer, fn_state);
    }
    fn block_6<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_6_0: read-var gs#38107:u8
        let s_6_0: bool = fn_state.gs_38107;
        // N s_6_1: branch s_6_0 b1152 b7
        if s_6_0 {
            return block_1152(state, tracer, fn_state);
        } else {
            return block_7(state, tracer, fn_state);
        };
    }
    fn block_7<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_7_0: const #1s : i64
        let s_7_0: i64 = 1;
        // C s_7_1: cast zx s_7_0 -> i
        let s_7_1: i128 = (i128::try_from(s_7_0).unwrap());
        // S s_7_2: call __UNKNOWN_bits(s_7_1)
        let s_7_2: Bits = u__UNKNOWN_bits(state, tracer, s_7_1);
        // C s_7_3: const #15752u : u32
        let s_7_3: u32 = 15752;
        // D s_7_4: read-reg s_7_3:struct
        let s_7_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_7_3 as isize);
            tracer.read_register(s_7_3 as isize, value);
            value
        };
        // C s_7_5: const #15752u : u32
        let s_7_5: u32 = 15752;
        // N s_7_6: write-reg s_7_5 <= s_7_4
        let s_7_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_7_5 as isize, s_7_4);
            tracer.write_register(s_7_5 as isize, s_7_4);
        };
        // N s_7_7: jump b8
        return block_8(state, tracer, fn_state);
    }
    fn block_8<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_8_0: read-var cold:u8
        let s_8_0: bool = fn_state.cold;
        // D s_8_1: not s_8_0
        let s_8_1: bool = !s_8_0;
        // N s_8_2: branch s_8_1 b1151 b9
        if s_8_1 {
            return block_1151(state, tracer, fn_state);
        } else {
            return block_9(state, tracer, fn_state);
        };
    }
    fn block_9<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_9_0: const #0u : u8
        let s_9_0: bool = false;
        // D s_9_1: write-var gs#38108 <= s_9_0
        fn_state.gs_38108 = s_9_0;
        // N s_9_2: jump b10
        return block_10(state, tracer, fn_state);
    }
    fn block_10<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_10_0: read-var gs#38108:u8
        let s_10_0: bool = fn_state.gs_38108;
        // N s_10_1: branch s_10_0 b1150 b11
        if s_10_0 {
            return block_1150(state, tracer, fn_state);
        } else {
            return block_11(state, tracer, fn_state);
        };
    }
    fn block_11<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_11_0: const #1s : i64
        let s_11_0: i64 = 1;
        // C s_11_1: cast zx s_11_0 -> i
        let s_11_1: i128 = (i128::try_from(s_11_0).unwrap());
        // S s_11_2: call __UNKNOWN_bits(s_11_1)
        let s_11_2: Bits = u__UNKNOWN_bits(state, tracer, s_11_1);
        // C s_11_3: const #15752u : u32
        let s_11_3: u32 = 15752;
        // D s_11_4: read-reg s_11_3:struct
        let s_11_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_11_3 as isize);
            tracer.read_register(s_11_3 as isize, value);
            value
        };
        // C s_11_5: const #15752u : u32
        let s_11_5: u32 = 15752;
        // N s_11_6: write-reg s_11_5 <= s_11_4
        let s_11_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_11_5 as isize, s_11_4);
            tracer.write_register(s_11_5 as isize, s_11_4);
        };
        // N s_11_7: jump b12
        return block_12(state, tracer, fn_state);
    }
    fn block_12<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_12_0: const #15752u : u32
        let s_12_0: u32 = 15752;
        // D s_12_1: read-reg s_12_0:struct
        let s_12_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_12_0 as isize);
            tracer.read_register(s_12_0 as isize, value);
            value
        };
        // C s_12_2: const #15752u : u32
        let s_12_2: u32 = 15752;
        // N s_12_3: write-reg s_12_2 <= s_12_1
        let s_12_3: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_12_2 as isize, s_12_1);
            tracer.write_register(s_12_2 as isize, s_12_1);
        };
        // D s_12_4: read-var cold:u8
        let s_12_4: bool = fn_state.cold;
        // D s_12_5: not s_12_4
        let s_12_5: bool = !s_12_4;
        // N s_12_6: branch s_12_5 b1149 b13
        if s_12_5 {
            return block_1149(state, tracer, fn_state);
        } else {
            return block_13(state, tracer, fn_state);
        };
    }
    fn block_13<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_13_0: const #0u : u8
        let s_13_0: bool = false;
        // D s_13_1: write-var gs#38112 <= s_13_0
        fn_state.gs_38112 = s_13_0;
        // N s_13_2: jump b14
        return block_14(state, tracer, fn_state);
    }
    fn block_14<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_14_0: read-var gs#38112:u8
        let s_14_0: bool = fn_state.gs_38112;
        // N s_14_1: branch s_14_0 b1148 b15
        if s_14_0 {
            return block_1148(state, tracer, fn_state);
        } else {
            return block_15(state, tracer, fn_state);
        };
    }
    fn block_15<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_15_0: const #1s : i64
        let s_15_0: i64 = 1;
        // C s_15_1: cast zx s_15_0 -> i
        let s_15_1: i128 = (i128::try_from(s_15_0).unwrap());
        // S s_15_2: call __UNKNOWN_bits(s_15_1)
        let s_15_2: Bits = u__UNKNOWN_bits(state, tracer, s_15_1);
        // C s_15_3: const #15752u : u32
        let s_15_3: u32 = 15752;
        // D s_15_4: read-reg s_15_3:struct
        let s_15_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_15_3 as isize);
            tracer.read_register(s_15_3 as isize, value);
            value
        };
        // C s_15_5: const #15752u : u32
        let s_15_5: u32 = 15752;
        // N s_15_6: write-reg s_15_5 <= s_15_4
        let s_15_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_15_5 as isize, s_15_4);
            tracer.write_register(s_15_5 as isize, s_15_4);
        };
        // N s_15_7: jump b16
        return block_16(state, tracer, fn_state);
    }
    fn block_16<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_16_0: read-var cold:u8
        let s_16_0: bool = fn_state.cold;
        // D s_16_1: not s_16_0
        let s_16_1: bool = !s_16_0;
        // N s_16_2: branch s_16_1 b1147 b17
        if s_16_1 {
            return block_1147(state, tracer, fn_state);
        } else {
            return block_17(state, tracer, fn_state);
        };
    }
    fn block_17<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_17_0: const #0u : u8
        let s_17_0: bool = false;
        // D s_17_1: write-var gs#38113 <= s_17_0
        fn_state.gs_38113 = s_17_0;
        // N s_17_2: jump b18
        return block_18(state, tracer, fn_state);
    }
    fn block_18<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_18_0: read-var gs#38113:u8
        let s_18_0: bool = fn_state.gs_38113;
        // N s_18_1: branch s_18_0 b1146 b19
        if s_18_0 {
            return block_1146(state, tracer, fn_state);
        } else {
            return block_19(state, tracer, fn_state);
        };
    }
    fn block_19<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_19_0: const #1s : i64
        let s_19_0: i64 = 1;
        // C s_19_1: cast zx s_19_0 -> i
        let s_19_1: i128 = (i128::try_from(s_19_0).unwrap());
        // S s_19_2: call __UNKNOWN_bits(s_19_1)
        let s_19_2: Bits = u__UNKNOWN_bits(state, tracer, s_19_1);
        // C s_19_3: const #15752u : u32
        let s_19_3: u32 = 15752;
        // D s_19_4: read-reg s_19_3:struct
        let s_19_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_19_3 as isize);
            tracer.read_register(s_19_3 as isize, value);
            value
        };
        // C s_19_5: const #15752u : u32
        let s_19_5: u32 = 15752;
        // N s_19_6: write-reg s_19_5 <= s_19_4
        let s_19_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_19_5 as isize, s_19_4);
            tracer.write_register(s_19_5 as isize, s_19_4);
        };
        // N s_19_7: jump b20
        return block_20(state, tracer, fn_state);
    }
    fn block_20<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_20_0: const #0u : u8
        let s_20_0: bool = false;
        // S s_20_1: call Bit(s_20_0)
        let s_20_1: bool = Bit(state, tracer, s_20_0);
        // C s_20_2: const #15752u : u32
        let s_20_2: u32 = 15752;
        // D s_20_3: read-reg s_20_2:struct
        let s_20_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_20_2 as isize);
            tracer.read_register(s_20_2 as isize, value);
            value
        };
        // C s_20_4: const #15752u : u32
        let s_20_4: u32 = 15752;
        // N s_20_5: write-reg s_20_4 <= s_20_3
        let s_20_5: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_20_4 as isize, s_20_3);
            tracer.write_register(s_20_4 as isize, s_20_3);
        };
        // D s_20_6: read-var cold:u8
        let s_20_6: bool = fn_state.cold;
        // D s_20_7: not s_20_6
        let s_20_7: bool = !s_20_6;
        // N s_20_8: branch s_20_7 b1145 b21
        if s_20_7 {
            return block_1145(state, tracer, fn_state);
        } else {
            return block_21(state, tracer, fn_state);
        };
    }
    fn block_21<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_21_0: const #0u : u8
        let s_21_0: bool = false;
        // D s_21_1: write-var gs#38116 <= s_21_0
        fn_state.gs_38116 = s_21_0;
        // N s_21_2: jump b22
        return block_22(state, tracer, fn_state);
    }
    fn block_22<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_22_0: read-var gs#38116:u8
        let s_22_0: bool = fn_state.gs_38116;
        // N s_22_1: branch s_22_0 b1144 b23
        if s_22_0 {
            return block_1144(state, tracer, fn_state);
        } else {
            return block_23(state, tracer, fn_state);
        };
    }
    fn block_23<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_23_0: const #1s : i64
        let s_23_0: i64 = 1;
        // C s_23_1: cast zx s_23_0 -> i
        let s_23_1: i128 = (i128::try_from(s_23_0).unwrap());
        // S s_23_2: call __UNKNOWN_bits(s_23_1)
        let s_23_2: Bits = u__UNKNOWN_bits(state, tracer, s_23_1);
        // C s_23_3: const #15752u : u32
        let s_23_3: u32 = 15752;
        // D s_23_4: read-reg s_23_3:struct
        let s_23_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_23_3 as isize);
            tracer.read_register(s_23_3 as isize, value);
            value
        };
        // C s_23_5: const #15752u : u32
        let s_23_5: u32 = 15752;
        // N s_23_6: write-reg s_23_5 <= s_23_4
        let s_23_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_23_5 as isize, s_23_4);
            tracer.write_register(s_23_5 as isize, s_23_4);
        };
        // N s_23_7: jump b24
        return block_24(state, tracer, fn_state);
    }
    fn block_24<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_24_0: read-var cold:u8
        let s_24_0: bool = fn_state.cold;
        // D s_24_1: not s_24_0
        let s_24_1: bool = !s_24_0;
        // N s_24_2: branch s_24_1 b1143 b25
        if s_24_1 {
            return block_1143(state, tracer, fn_state);
        } else {
            return block_25(state, tracer, fn_state);
        };
    }
    fn block_25<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_25_0: const #0u : u8
        let s_25_0: bool = false;
        // D s_25_1: write-var gs#38117 <= s_25_0
        fn_state.gs_38117 = s_25_0;
        // N s_25_2: jump b26
        return block_26(state, tracer, fn_state);
    }
    fn block_26<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_26_0: read-var gs#38117:u8
        let s_26_0: bool = fn_state.gs_38117;
        // N s_26_1: branch s_26_0 b1142 b27
        if s_26_0 {
            return block_1142(state, tracer, fn_state);
        } else {
            return block_27(state, tracer, fn_state);
        };
    }
    fn block_27<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_27_0: const #1s : i64
        let s_27_0: i64 = 1;
        // C s_27_1: cast zx s_27_0 -> i
        let s_27_1: i128 = (i128::try_from(s_27_0).unwrap());
        // S s_27_2: call __UNKNOWN_bits(s_27_1)
        let s_27_2: Bits = u__UNKNOWN_bits(state, tracer, s_27_1);
        // C s_27_3: const #15752u : u32
        let s_27_3: u32 = 15752;
        // D s_27_4: read-reg s_27_3:struct
        let s_27_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_27_3 as isize);
            tracer.read_register(s_27_3 as isize, value);
            value
        };
        // C s_27_5: const #15752u : u32
        let s_27_5: u32 = 15752;
        // N s_27_6: write-reg s_27_5 <= s_27_4
        let s_27_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_27_5 as isize, s_27_4);
            tracer.write_register(s_27_5 as isize, s_27_4);
        };
        // N s_27_7: jump b28
        return block_28(state, tracer, fn_state);
    }
    fn block_28<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_28_0: const #15752u : u32
        let s_28_0: u32 = 15752;
        // D s_28_1: read-reg s_28_0:struct
        let s_28_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_28_0 as isize);
            tracer.read_register(s_28_0 as isize, value);
            value
        };
        // C s_28_2: const #15752u : u32
        let s_28_2: u32 = 15752;
        // N s_28_3: write-reg s_28_2 <= s_28_1
        let s_28_3: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_28_2 as isize, s_28_1);
            tracer.write_register(s_28_2 as isize, s_28_1);
        };
        // D s_28_4: read-var cold:u8
        let s_28_4: bool = fn_state.cold;
        // D s_28_5: not s_28_4
        let s_28_5: bool = !s_28_4;
        // N s_28_6: branch s_28_5 b1141 b29
        if s_28_5 {
            return block_1141(state, tracer, fn_state);
        } else {
            return block_29(state, tracer, fn_state);
        };
    }
    fn block_29<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_29_0: const #0u : u8
        let s_29_0: bool = false;
        // D s_29_1: write-var gs#38121 <= s_29_0
        fn_state.gs_38121 = s_29_0;
        // N s_29_2: jump b30
        return block_30(state, tracer, fn_state);
    }
    fn block_30<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_30_0: read-var gs#38121:u8
        let s_30_0: bool = fn_state.gs_38121;
        // N s_30_1: branch s_30_0 b1140 b31
        if s_30_0 {
            return block_1140(state, tracer, fn_state);
        } else {
            return block_31(state, tracer, fn_state);
        };
    }
    fn block_31<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_31_0: const #1s : i64
        let s_31_0: i64 = 1;
        // C s_31_1: cast zx s_31_0 -> i
        let s_31_1: i128 = (i128::try_from(s_31_0).unwrap());
        // S s_31_2: call __UNKNOWN_bits(s_31_1)
        let s_31_2: Bits = u__UNKNOWN_bits(state, tracer, s_31_1);
        // C s_31_3: const #15752u : u32
        let s_31_3: u32 = 15752;
        // D s_31_4: read-reg s_31_3:struct
        let s_31_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_31_3 as isize);
            tracer.read_register(s_31_3 as isize, value);
            value
        };
        // C s_31_5: const #15752u : u32
        let s_31_5: u32 = 15752;
        // N s_31_6: write-reg s_31_5 <= s_31_4
        let s_31_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_31_5 as isize, s_31_4);
            tracer.write_register(s_31_5 as isize, s_31_4);
        };
        // N s_31_7: jump b32
        return block_32(state, tracer, fn_state);
    }
    fn block_32<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_32_0: read-var cold:u8
        let s_32_0: bool = fn_state.cold;
        // D s_32_1: not s_32_0
        let s_32_1: bool = !s_32_0;
        // N s_32_2: branch s_32_1 b1139 b33
        if s_32_1 {
            return block_1139(state, tracer, fn_state);
        } else {
            return block_33(state, tracer, fn_state);
        };
    }
    fn block_33<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_33_0: const #0u : u8
        let s_33_0: bool = false;
        // D s_33_1: write-var gs#38122 <= s_33_0
        fn_state.gs_38122 = s_33_0;
        // N s_33_2: jump b34
        return block_34(state, tracer, fn_state);
    }
    fn block_34<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_34_0: read-var gs#38122:u8
        let s_34_0: bool = fn_state.gs_38122;
        // N s_34_1: branch s_34_0 b1138 b35
        if s_34_0 {
            return block_1138(state, tracer, fn_state);
        } else {
            return block_35(state, tracer, fn_state);
        };
    }
    fn block_35<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_35_0: const #1s : i64
        let s_35_0: i64 = 1;
        // C s_35_1: cast zx s_35_0 -> i
        let s_35_1: i128 = (i128::try_from(s_35_0).unwrap());
        // S s_35_2: call __UNKNOWN_bits(s_35_1)
        let s_35_2: Bits = u__UNKNOWN_bits(state, tracer, s_35_1);
        // C s_35_3: const #15752u : u32
        let s_35_3: u32 = 15752;
        // D s_35_4: read-reg s_35_3:struct
        let s_35_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_35_3 as isize);
            tracer.read_register(s_35_3 as isize, value);
            value
        };
        // C s_35_5: const #15752u : u32
        let s_35_5: u32 = 15752;
        // N s_35_6: write-reg s_35_5 <= s_35_4
        let s_35_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_35_5 as isize, s_35_4);
            tracer.write_register(s_35_5 as isize, s_35_4);
        };
        // N s_35_7: jump b36
        return block_36(state, tracer, fn_state);
    }
    fn block_36<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_36_0: read-var cold:u8
        let s_36_0: bool = fn_state.cold;
        // D s_36_1: not s_36_0
        let s_36_1: bool = !s_36_0;
        // N s_36_2: branch s_36_1 b1137 b37
        if s_36_1 {
            return block_1137(state, tracer, fn_state);
        } else {
            return block_37(state, tracer, fn_state);
        };
    }
    fn block_37<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_37_0: const #0u : u8
        let s_37_0: bool = false;
        // D s_37_1: write-var gs#38123 <= s_37_0
        fn_state.gs_38123 = s_37_0;
        // N s_37_2: jump b38
        return block_38(state, tracer, fn_state);
    }
    fn block_38<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_38_0: read-var gs#38123:u8
        let s_38_0: bool = fn_state.gs_38123;
        // N s_38_1: branch s_38_0 b1136 b39
        if s_38_0 {
            return block_1136(state, tracer, fn_state);
        } else {
            return block_39(state, tracer, fn_state);
        };
    }
    fn block_39<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_39_0: const #1s : i64
        let s_39_0: i64 = 1;
        // C s_39_1: cast zx s_39_0 -> i
        let s_39_1: i128 = (i128::try_from(s_39_0).unwrap());
        // S s_39_2: call __UNKNOWN_bits(s_39_1)
        let s_39_2: Bits = u__UNKNOWN_bits(state, tracer, s_39_1);
        // C s_39_3: const #15752u : u32
        let s_39_3: u32 = 15752;
        // D s_39_4: read-reg s_39_3:struct
        let s_39_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_39_3 as isize);
            tracer.read_register(s_39_3 as isize, value);
            value
        };
        // C s_39_5: const #15752u : u32
        let s_39_5: u32 = 15752;
        // N s_39_6: write-reg s_39_5 <= s_39_4
        let s_39_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_39_5 as isize, s_39_4);
            tracer.write_register(s_39_5 as isize, s_39_4);
        };
        // N s_39_7: jump b40
        return block_40(state, tracer, fn_state);
    }
    fn block_40<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_40_0: read-var cold:u8
        let s_40_0: bool = fn_state.cold;
        // D s_40_1: not s_40_0
        let s_40_1: bool = !s_40_0;
        // N s_40_2: branch s_40_1 b1135 b41
        if s_40_1 {
            return block_1135(state, tracer, fn_state);
        } else {
            return block_41(state, tracer, fn_state);
        };
    }
    fn block_41<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_41_0: const #0u : u8
        let s_41_0: bool = false;
        // D s_41_1: write-var gs#38124 <= s_41_0
        fn_state.gs_38124 = s_41_0;
        // N s_41_2: jump b42
        return block_42(state, tracer, fn_state);
    }
    fn block_42<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_42_0: read-var gs#38124:u8
        let s_42_0: bool = fn_state.gs_38124;
        // N s_42_1: branch s_42_0 b1134 b43
        if s_42_0 {
            return block_1134(state, tracer, fn_state);
        } else {
            return block_43(state, tracer, fn_state);
        };
    }
    fn block_43<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_43_0: const #1s : i64
        let s_43_0: i64 = 1;
        // C s_43_1: cast zx s_43_0 -> i
        let s_43_1: i128 = (i128::try_from(s_43_0).unwrap());
        // S s_43_2: call __UNKNOWN_bits(s_43_1)
        let s_43_2: Bits = u__UNKNOWN_bits(state, tracer, s_43_1);
        // C s_43_3: const #15752u : u32
        let s_43_3: u32 = 15752;
        // D s_43_4: read-reg s_43_3:struct
        let s_43_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_43_3 as isize);
            tracer.read_register(s_43_3 as isize, value);
            value
        };
        // C s_43_5: const #15752u : u32
        let s_43_5: u32 = 15752;
        // N s_43_6: write-reg s_43_5 <= s_43_4
        let s_43_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_43_5 as isize, s_43_4);
            tracer.write_register(s_43_5 as isize, s_43_4);
        };
        // N s_43_7: jump b44
        return block_44(state, tracer, fn_state);
    }
    fn block_44<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_44_0: read-var cold:u8
        let s_44_0: bool = fn_state.cold;
        // D s_44_1: not s_44_0
        let s_44_1: bool = !s_44_0;
        // N s_44_2: branch s_44_1 b1133 b45
        if s_44_1 {
            return block_1133(state, tracer, fn_state);
        } else {
            return block_45(state, tracer, fn_state);
        };
    }
    fn block_45<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_45_0: const #0u : u8
        let s_45_0: bool = false;
        // D s_45_1: write-var gs#38125 <= s_45_0
        fn_state.gs_38125 = s_45_0;
        // N s_45_2: jump b46
        return block_46(state, tracer, fn_state);
    }
    fn block_46<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_46_0: read-var gs#38125:u8
        let s_46_0: bool = fn_state.gs_38125;
        // N s_46_1: branch s_46_0 b1132 b47
        if s_46_0 {
            return block_1132(state, tracer, fn_state);
        } else {
            return block_47(state, tracer, fn_state);
        };
    }
    fn block_47<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_47_0: const #2s : i64
        let s_47_0: i64 = 2;
        // C s_47_1: cast zx s_47_0 -> i
        let s_47_1: i128 = (i128::try_from(s_47_0).unwrap());
        // S s_47_2: call __UNKNOWN_bits(s_47_1)
        let s_47_2: Bits = u__UNKNOWN_bits(state, tracer, s_47_1);
        // C s_47_3: const #15752u : u32
        let s_47_3: u32 = 15752;
        // D s_47_4: read-reg s_47_3:struct
        let s_47_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_47_3 as isize);
            tracer.read_register(s_47_3 as isize, value);
            value
        };
        // C s_47_5: const #15752u : u32
        let s_47_5: u32 = 15752;
        // N s_47_6: write-reg s_47_5 <= s_47_4
        let s_47_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_47_5 as isize, s_47_4);
            tracer.write_register(s_47_5 as isize, s_47_4);
        };
        // N s_47_7: jump b48
        return block_48(state, tracer, fn_state);
    }
    fn block_48<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_48_0: read-var cold:u8
        let s_48_0: bool = fn_state.cold;
        // D s_48_1: not s_48_0
        let s_48_1: bool = !s_48_0;
        // N s_48_2: branch s_48_1 b1131 b49
        if s_48_1 {
            return block_1131(state, tracer, fn_state);
        } else {
            return block_49(state, tracer, fn_state);
        };
    }
    fn block_49<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_49_0: const #0u : u8
        let s_49_0: bool = false;
        // D s_49_1: write-var gs#38126 <= s_49_0
        fn_state.gs_38126 = s_49_0;
        // N s_49_2: jump b50
        return block_50(state, tracer, fn_state);
    }
    fn block_50<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_50_0: read-var gs#38126:u8
        let s_50_0: bool = fn_state.gs_38126;
        // N s_50_1: branch s_50_0 b1130 b51
        if s_50_0 {
            return block_1130(state, tracer, fn_state);
        } else {
            return block_51(state, tracer, fn_state);
        };
    }
    fn block_51<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_51_0: const #2s : i64
        let s_51_0: i64 = 2;
        // C s_51_1: cast zx s_51_0 -> i
        let s_51_1: i128 = (i128::try_from(s_51_0).unwrap());
        // S s_51_2: call __UNKNOWN_bits(s_51_1)
        let s_51_2: Bits = u__UNKNOWN_bits(state, tracer, s_51_1);
        // C s_51_3: const #15752u : u32
        let s_51_3: u32 = 15752;
        // D s_51_4: read-reg s_51_3:struct
        let s_51_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_51_3 as isize);
            tracer.read_register(s_51_3 as isize, value);
            value
        };
        // C s_51_5: const #15752u : u32
        let s_51_5: u32 = 15752;
        // N s_51_6: write-reg s_51_5 <= s_51_4
        let s_51_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_51_5 as isize, s_51_4);
            tracer.write_register(s_51_5 as isize, s_51_4);
        };
        // N s_51_7: jump b52
        return block_52(state, tracer, fn_state);
    }
    fn block_52<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_52_0: read-var cold:u8
        let s_52_0: bool = fn_state.cold;
        // D s_52_1: not s_52_0
        let s_52_1: bool = !s_52_0;
        // N s_52_2: branch s_52_1 b1129 b53
        if s_52_1 {
            return block_1129(state, tracer, fn_state);
        } else {
            return block_53(state, tracer, fn_state);
        };
    }
    fn block_53<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_53_0: const #0u : u8
        let s_53_0: bool = false;
        // D s_53_1: write-var gs#38127 <= s_53_0
        fn_state.gs_38127 = s_53_0;
        // N s_53_2: jump b54
        return block_54(state, tracer, fn_state);
    }
    fn block_54<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_54_0: read-var gs#38127:u8
        let s_54_0: bool = fn_state.gs_38127;
        // N s_54_1: branch s_54_0 b1128 b55
        if s_54_0 {
            return block_1128(state, tracer, fn_state);
        } else {
            return block_55(state, tracer, fn_state);
        };
    }
    fn block_55<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_55_0: const #1s : i64
        let s_55_0: i64 = 1;
        // C s_55_1: cast zx s_55_0 -> i
        let s_55_1: i128 = (i128::try_from(s_55_0).unwrap());
        // S s_55_2: call __UNKNOWN_bits(s_55_1)
        let s_55_2: Bits = u__UNKNOWN_bits(state, tracer, s_55_1);
        // C s_55_3: const #15752u : u32
        let s_55_3: u32 = 15752;
        // D s_55_4: read-reg s_55_3:struct
        let s_55_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_55_3 as isize);
            tracer.read_register(s_55_3 as isize, value);
            value
        };
        // C s_55_5: const #15752u : u32
        let s_55_5: u32 = 15752;
        // N s_55_6: write-reg s_55_5 <= s_55_4
        let s_55_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_55_5 as isize, s_55_4);
            tracer.write_register(s_55_5 as isize, s_55_4);
        };
        // N s_55_7: jump b56
        return block_56(state, tracer, fn_state);
    }
    fn block_56<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_56_0: read-var cold:u8
        let s_56_0: bool = fn_state.cold;
        // D s_56_1: not s_56_0
        let s_56_1: bool = !s_56_0;
        // N s_56_2: branch s_56_1 b1127 b57
        if s_56_1 {
            return block_1127(state, tracer, fn_state);
        } else {
            return block_57(state, tracer, fn_state);
        };
    }
    fn block_57<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_57_0: const #0u : u8
        let s_57_0: bool = false;
        // D s_57_1: write-var gs#38128 <= s_57_0
        fn_state.gs_38128 = s_57_0;
        // N s_57_2: jump b58
        return block_58(state, tracer, fn_state);
    }
    fn block_58<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_58_0: read-var gs#38128:u8
        let s_58_0: bool = fn_state.gs_38128;
        // N s_58_1: branch s_58_0 b1126 b59
        if s_58_0 {
            return block_1126(state, tracer, fn_state);
        } else {
            return block_59(state, tracer, fn_state);
        };
    }
    fn block_59<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_59_0: const #1s : i64
        let s_59_0: i64 = 1;
        // C s_59_1: cast zx s_59_0 -> i
        let s_59_1: i128 = (i128::try_from(s_59_0).unwrap());
        // S s_59_2: call __UNKNOWN_bits(s_59_1)
        let s_59_2: Bits = u__UNKNOWN_bits(state, tracer, s_59_1);
        // C s_59_3: const #15752u : u32
        let s_59_3: u32 = 15752;
        // D s_59_4: read-reg s_59_3:struct
        let s_59_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_59_3 as isize);
            tracer.read_register(s_59_3 as isize, value);
            value
        };
        // C s_59_5: const #15752u : u32
        let s_59_5: u32 = 15752;
        // N s_59_6: write-reg s_59_5 <= s_59_4
        let s_59_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_59_5 as isize, s_59_4);
            tracer.write_register(s_59_5 as isize, s_59_4);
        };
        // N s_59_7: jump b60
        return block_60(state, tracer, fn_state);
    }
    fn block_60<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_60_0: read-var cold:u8
        let s_60_0: bool = fn_state.cold;
        // D s_60_1: not s_60_0
        let s_60_1: bool = !s_60_0;
        // N s_60_2: branch s_60_1 b1125 b61
        if s_60_1 {
            return block_1125(state, tracer, fn_state);
        } else {
            return block_61(state, tracer, fn_state);
        };
    }
    fn block_61<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_61_0: const #0u : u8
        let s_61_0: bool = false;
        // D s_61_1: write-var gs#38129 <= s_61_0
        fn_state.gs_38129 = s_61_0;
        // N s_61_2: jump b62
        return block_62(state, tracer, fn_state);
    }
    fn block_62<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_62_0: read-var gs#38129:u8
        let s_62_0: bool = fn_state.gs_38129;
        // N s_62_1: branch s_62_0 b1124 b63
        if s_62_0 {
            return block_1124(state, tracer, fn_state);
        } else {
            return block_63(state, tracer, fn_state);
        };
    }
    fn block_63<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_63_0: const #1s : i64
        let s_63_0: i64 = 1;
        // C s_63_1: cast zx s_63_0 -> i
        let s_63_1: i128 = (i128::try_from(s_63_0).unwrap());
        // S s_63_2: call __UNKNOWN_bits(s_63_1)
        let s_63_2: Bits = u__UNKNOWN_bits(state, tracer, s_63_1);
        // C s_63_3: const #15752u : u32
        let s_63_3: u32 = 15752;
        // D s_63_4: read-reg s_63_3:struct
        let s_63_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_63_3 as isize);
            tracer.read_register(s_63_3 as isize, value);
            value
        };
        // C s_63_5: const #15752u : u32
        let s_63_5: u32 = 15752;
        // N s_63_6: write-reg s_63_5 <= s_63_4
        let s_63_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_63_5 as isize, s_63_4);
            tracer.write_register(s_63_5 as isize, s_63_4);
        };
        // N s_63_7: jump b64
        return block_64(state, tracer, fn_state);
    }
    fn block_64<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_64_0: read-var cold:u8
        let s_64_0: bool = fn_state.cold;
        // D s_64_1: not s_64_0
        let s_64_1: bool = !s_64_0;
        // N s_64_2: branch s_64_1 b1123 b65
        if s_64_1 {
            return block_1123(state, tracer, fn_state);
        } else {
            return block_65(state, tracer, fn_state);
        };
    }
    fn block_65<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_65_0: const #0u : u8
        let s_65_0: bool = false;
        // D s_65_1: write-var gs#38130 <= s_65_0
        fn_state.gs_38130 = s_65_0;
        // N s_65_2: jump b66
        return block_66(state, tracer, fn_state);
    }
    fn block_66<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_66_0: read-var gs#38130:u8
        let s_66_0: bool = fn_state.gs_38130;
        // N s_66_1: branch s_66_0 b1122 b67
        if s_66_0 {
            return block_1122(state, tracer, fn_state);
        } else {
            return block_67(state, tracer, fn_state);
        };
    }
    fn block_67<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_67_0: const #1s : i64
        let s_67_0: i64 = 1;
        // C s_67_1: cast zx s_67_0 -> i
        let s_67_1: i128 = (i128::try_from(s_67_0).unwrap());
        // S s_67_2: call __UNKNOWN_bits(s_67_1)
        let s_67_2: Bits = u__UNKNOWN_bits(state, tracer, s_67_1);
        // C s_67_3: const #15752u : u32
        let s_67_3: u32 = 15752;
        // D s_67_4: read-reg s_67_3:struct
        let s_67_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_67_3 as isize);
            tracer.read_register(s_67_3 as isize, value);
            value
        };
        // C s_67_5: const #15752u : u32
        let s_67_5: u32 = 15752;
        // N s_67_6: write-reg s_67_5 <= s_67_4
        let s_67_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_67_5 as isize, s_67_4);
            tracer.write_register(s_67_5 as isize, s_67_4);
        };
        // N s_67_7: jump b68
        return block_68(state, tracer, fn_state);
    }
    fn block_68<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_68_0: read-var cold:u8
        let s_68_0: bool = fn_state.cold;
        // D s_68_1: not s_68_0
        let s_68_1: bool = !s_68_0;
        // N s_68_2: branch s_68_1 b1121 b69
        if s_68_1 {
            return block_1121(state, tracer, fn_state);
        } else {
            return block_69(state, tracer, fn_state);
        };
    }
    fn block_69<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_69_0: const #0u : u8
        let s_69_0: bool = false;
        // D s_69_1: write-var gs#38131 <= s_69_0
        fn_state.gs_38131 = s_69_0;
        // N s_69_2: jump b70
        return block_70(state, tracer, fn_state);
    }
    fn block_70<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_70_0: read-var gs#38131:u8
        let s_70_0: bool = fn_state.gs_38131;
        // N s_70_1: branch s_70_0 b1120 b71
        if s_70_0 {
            return block_1120(state, tracer, fn_state);
        } else {
            return block_71(state, tracer, fn_state);
        };
    }
    fn block_71<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_71_0: const #1s : i64
        let s_71_0: i64 = 1;
        // C s_71_1: cast zx s_71_0 -> i
        let s_71_1: i128 = (i128::try_from(s_71_0).unwrap());
        // S s_71_2: call __UNKNOWN_bits(s_71_1)
        let s_71_2: Bits = u__UNKNOWN_bits(state, tracer, s_71_1);
        // C s_71_3: const #15752u : u32
        let s_71_3: u32 = 15752;
        // D s_71_4: read-reg s_71_3:struct
        let s_71_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_71_3 as isize);
            tracer.read_register(s_71_3 as isize, value);
            value
        };
        // C s_71_5: const #15752u : u32
        let s_71_5: u32 = 15752;
        // N s_71_6: write-reg s_71_5 <= s_71_4
        let s_71_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_71_5 as isize, s_71_4);
            tracer.write_register(s_71_5 as isize, s_71_4);
        };
        // N s_71_7: jump b72
        return block_72(state, tracer, fn_state);
    }
    fn block_72<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_72_0: read-var cold:u8
        let s_72_0: bool = fn_state.cold;
        // D s_72_1: not s_72_0
        let s_72_1: bool = !s_72_0;
        // N s_72_2: branch s_72_1 b1119 b73
        if s_72_1 {
            return block_1119(state, tracer, fn_state);
        } else {
            return block_73(state, tracer, fn_state);
        };
    }
    fn block_73<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_73_0: const #0u : u8
        let s_73_0: bool = false;
        // D s_73_1: write-var gs#38132 <= s_73_0
        fn_state.gs_38132 = s_73_0;
        // N s_73_2: jump b74
        return block_74(state, tracer, fn_state);
    }
    fn block_74<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_74_0: read-var gs#38132:u8
        let s_74_0: bool = fn_state.gs_38132;
        // N s_74_1: branch s_74_0 b1118 b75
        if s_74_0 {
            return block_1118(state, tracer, fn_state);
        } else {
            return block_75(state, tracer, fn_state);
        };
    }
    fn block_75<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_75_0: const #1s : i64
        let s_75_0: i64 = 1;
        // C s_75_1: cast zx s_75_0 -> i
        let s_75_1: i128 = (i128::try_from(s_75_0).unwrap());
        // S s_75_2: call __UNKNOWN_bits(s_75_1)
        let s_75_2: Bits = u__UNKNOWN_bits(state, tracer, s_75_1);
        // C s_75_3: const #15752u : u32
        let s_75_3: u32 = 15752;
        // D s_75_4: read-reg s_75_3:struct
        let s_75_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_75_3 as isize);
            tracer.read_register(s_75_3 as isize, value);
            value
        };
        // C s_75_5: const #15752u : u32
        let s_75_5: u32 = 15752;
        // N s_75_6: write-reg s_75_5 <= s_75_4
        let s_75_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_75_5 as isize, s_75_4);
            tracer.write_register(s_75_5 as isize, s_75_4);
        };
        // N s_75_7: jump b76
        return block_76(state, tracer, fn_state);
    }
    fn block_76<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_76_0: const #22952u : u32
        let s_76_0: u32 = 22952;
        // D s_76_1: read-reg s_76_0:struct
        let s_76_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_0 as isize);
            tracer.read_register(s_76_0 as isize, value);
            value
        };
        // C s_76_2: const #22952u : u32
        let s_76_2: u32 = 22952;
        // N s_76_3: write-reg s_76_2 <= s_76_1
        let s_76_3: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_76_2 as isize, s_76_1);
            tracer.write_register(s_76_2 as isize, s_76_1);
        };
        // C s_76_4: const #102456u : u32
        let s_76_4: u32 = 102456;
        // D s_76_5: read-reg s_76_4:struct
        let s_76_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_4 as isize);
            tracer.read_register(s_76_4 as isize, value);
            value
        };
        // C s_76_6: const #102456u : u32
        let s_76_6: u32 = 102456;
        // N s_76_7: write-reg s_76_6 <= s_76_5
        let s_76_7: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_76_6 as isize, s_76_5);
            tracer.write_register(s_76_6 as isize, s_76_5);
        };
        // C s_76_8: const #10736u : u32
        let s_76_8: u32 = 10736;
        // D s_76_9: read-reg s_76_8:struct
        let s_76_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_8 as isize);
            tracer.read_register(s_76_8 as isize, value);
            value
        };
        // C s_76_10: const #10736u : u32
        let s_76_10: u32 = 10736;
        // N s_76_11: write-reg s_76_10 <= s_76_9
        let s_76_11: () = {
            state
                .write_register::<ProductType5c790c8ef59cc8b2>(s_76_10 as isize, s_76_9);
            tracer.write_register(s_76_10 as isize, s_76_9);
        };
        // C s_76_12: const #10736u : u32
        let s_76_12: u32 = 10736;
        // D s_76_13: read-reg s_76_12:struct
        let s_76_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_12 as isize);
            tracer.read_register(s_76_12 as isize, value);
            value
        };
        // C s_76_14: const #10736u : u32
        let s_76_14: u32 = 10736;
        // N s_76_15: write-reg s_76_14 <= s_76_13
        let s_76_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_14 as isize, s_76_13);
            tracer.write_register(s_76_14 as isize, s_76_13);
        };
        // C s_76_16: const #1u : u8
        let s_76_16: bool = true;
        // S s_76_17: call Bit(s_76_16)
        let s_76_17: bool = Bit(state, tracer, s_76_16);
        // C s_76_18: const #10736u : u32
        let s_76_18: u32 = 10736;
        // D s_76_19: read-reg s_76_18:struct
        let s_76_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_18 as isize);
            tracer.read_register(s_76_18 as isize, value);
            value
        };
        // C s_76_20: const #10736u : u32
        let s_76_20: u32 = 10736;
        // N s_76_21: write-reg s_76_20 <= s_76_19
        let s_76_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_20 as isize, s_76_19);
            tracer.write_register(s_76_20 as isize, s_76_19);
        };
        // C s_76_22: const #1u : u8
        let s_76_22: bool = true;
        // S s_76_23: call Bit(s_76_22)
        let s_76_23: bool = Bit(state, tracer, s_76_22);
        // C s_76_24: const #10736u : u32
        let s_76_24: u32 = 10736;
        // D s_76_25: read-reg s_76_24:struct
        let s_76_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_24 as isize);
            tracer.read_register(s_76_24 as isize, value);
            value
        };
        // C s_76_26: const #10736u : u32
        let s_76_26: u32 = 10736;
        // N s_76_27: write-reg s_76_26 <= s_76_25
        let s_76_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_26 as isize, s_76_25);
            tracer.write_register(s_76_26 as isize, s_76_25);
        };
        // C s_76_28: const #0u : u8
        let s_76_28: bool = false;
        // S s_76_29: call Bit(s_76_28)
        let s_76_29: bool = Bit(state, tracer, s_76_28);
        // C s_76_30: const #10736u : u32
        let s_76_30: u32 = 10736;
        // D s_76_31: read-reg s_76_30:struct
        let s_76_31: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_30 as isize);
            tracer.read_register(s_76_30 as isize, value);
            value
        };
        // C s_76_32: const #10736u : u32
        let s_76_32: u32 = 10736;
        // N s_76_33: write-reg s_76_32 <= s_76_31
        let s_76_33: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_32 as isize, s_76_31);
            tracer.write_register(s_76_32 as isize, s_76_31);
        };
        // C s_76_34: const #10736u : u32
        let s_76_34: u32 = 10736;
        // D s_76_35: read-reg s_76_34:struct
        let s_76_35: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_34 as isize);
            tracer.read_register(s_76_34 as isize, value);
            value
        };
        // C s_76_36: const #10736u : u32
        let s_76_36: u32 = 10736;
        // N s_76_37: write-reg s_76_36 <= s_76_35
        let s_76_37: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_36 as isize, s_76_35);
            tracer.write_register(s_76_36 as isize, s_76_35);
        };
        // C s_76_38: const #102560u : u32
        let s_76_38: u32 = 102560;
        // D s_76_39: read-reg s_76_38:struct
        let s_76_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_38 as isize);
            tracer.read_register(s_76_38 as isize, value);
            value
        };
        // C s_76_40: const #102560u : u32
        let s_76_40: u32 = 102560;
        // N s_76_41: write-reg s_76_40 <= s_76_39
        let s_76_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_40 as isize, s_76_39);
            tracer.write_register(s_76_40 as isize, s_76_39);
        };
        // C s_76_42: const #102560u : u32
        let s_76_42: u32 = 102560;
        // D s_76_43: read-reg s_76_42:struct
        let s_76_43: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_42 as isize);
            tracer.read_register(s_76_42 as isize, value);
            value
        };
        // C s_76_44: const #102560u : u32
        let s_76_44: u32 = 102560;
        // N s_76_45: write-reg s_76_44 <= s_76_43
        let s_76_45: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_44 as isize, s_76_43);
            tracer.write_register(s_76_44 as isize, s_76_43);
        };
        // C s_76_46: const #13616u : u32
        let s_76_46: u32 = 13616;
        // D s_76_47: read-reg s_76_46:struct
        let s_76_47: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_76_46 as isize);
            tracer.read_register(s_76_46 as isize, value);
            value
        };
        // C s_76_48: const #13616u : u32
        let s_76_48: u32 = 13616;
        // N s_76_49: write-reg s_76_48 <= s_76_47
        let s_76_49: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_76_48 as isize, s_76_47);
            tracer.write_register(s_76_48 as isize, s_76_47);
        };
        // D s_76_50: read-var cold:u8
        let s_76_50: bool = fn_state.cold;
        // N s_76_51: branch s_76_50 b1117 b77
        if s_76_50 {
            return block_1117(state, tracer, fn_state);
        } else {
            return block_77(state, tracer, fn_state);
        };
    }
    fn block_77<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_77_0: const #0u : u8
        let s_77_0: bool = false;
        // D s_77_1: write-var gs#38163 <= s_77_0
        fn_state.gs_38163 = s_77_0;
        // N s_77_2: jump b78
        return block_78(state, tracer, fn_state);
    }
    fn block_78<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_78_0: read-var gs#38163:u8
        let s_78_0: bool = fn_state.gs_38163;
        // N s_78_1: branch s_78_0 b1116 b79
        if s_78_0 {
            return block_1116(state, tracer, fn_state);
        } else {
            return block_79(state, tracer, fn_state);
        };
    }
    fn block_79<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_79_0: read-var cold:u8
        let s_79_0: bool = fn_state.cold;
        // N s_79_1: branch s_79_0 b1115 b80
        if s_79_0 {
            return block_1115(state, tracer, fn_state);
        } else {
            return block_80(state, tracer, fn_state);
        };
    }
    fn block_80<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_80_0: const #0u : u8
        let s_80_0: bool = false;
        // D s_80_1: write-var gs#43402 <= s_80_0
        fn_state.gs_43402 = s_80_0;
        // N s_80_2: jump b81
        return block_81(state, tracer, fn_state);
    }
    fn block_81<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_81_0: read-var gs#43402:u8
        let s_81_0: bool = fn_state.gs_43402;
        // N s_81_1: branch s_81_0 b1114 b82
        if s_81_0 {
            return block_1114(state, tracer, fn_state);
        } else {
            return block_82(state, tracer, fn_state);
        };
    }
    fn block_82<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_82_0: jump b83
        return block_83(state, tracer, fn_state);
    }
    fn block_83<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_83_0: jump b84
        return block_84(state, tracer, fn_state);
    }
    fn block_84<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_84_0: const #12776u : u32
        let s_84_0: u32 = 12776;
        // D s_84_1: read-reg s_84_0:struct
        let s_84_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_0 as isize);
            tracer.read_register(s_84_0 as isize, value);
            value
        };
        // C s_84_2: const #12776u : u32
        let s_84_2: u32 = 12776;
        // N s_84_3: write-reg s_84_2 <= s_84_1
        let s_84_3: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_84_2 as isize, s_84_1);
            tracer.write_register(s_84_2 as isize, s_84_1);
        };
        // C s_84_4: const #12776u : u32
        let s_84_4: u32 = 12776;
        // D s_84_5: read-reg s_84_4:struct
        let s_84_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_4 as isize);
            tracer.read_register(s_84_4 as isize, value);
            value
        };
        // C s_84_6: const #12776u : u32
        let s_84_6: u32 = 12776;
        // N s_84_7: write-reg s_84_6 <= s_84_5
        let s_84_7: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_84_6 as isize, s_84_5);
            tracer.write_register(s_84_6 as isize, s_84_5);
        };
        // C s_84_8: const #89536u : u32
        let s_84_8: u32 = 89536;
        // D s_84_9: read-reg s_84_8:struct
        let s_84_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_8 as isize);
            tracer.read_register(s_84_8 as isize, value);
            value
        };
        // C s_84_10: const #89536u : u32
        let s_84_10: u32 = 89536;
        // N s_84_11: write-reg s_84_10 <= s_84_9
        let s_84_11: () = {
            state
                .write_register::<ProductType5c790c8ef59cc8b2>(s_84_10 as isize, s_84_9);
            tracer.write_register(s_84_10 as isize, s_84_9);
        };
        // C s_84_12: const #89496u : u32
        let s_84_12: u32 = 89496;
        // D s_84_13: read-reg s_84_12:struct
        let s_84_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_12 as isize);
            tracer.read_register(s_84_12 as isize, value);
            value
        };
        // C s_84_14: const #89496u : u32
        let s_84_14: u32 = 89496;
        // N s_84_15: write-reg s_84_14 <= s_84_13
        let s_84_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_14 as isize, s_84_13);
            tracer.write_register(s_84_14 as isize, s_84_13);
        };
        // C s_84_16: const #89496u : u32
        let s_84_16: u32 = 89496;
        // D s_84_17: read-reg s_84_16:struct
        let s_84_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_16 as isize);
            tracer.read_register(s_84_16 as isize, value);
            value
        };
        // C s_84_18: const #89496u : u32
        let s_84_18: u32 = 89496;
        // N s_84_19: write-reg s_84_18 <= s_84_17
        let s_84_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_18 as isize, s_84_17);
            tracer.write_register(s_84_18 as isize, s_84_17);
        };
        // C s_84_20: const #90800u : u32
        let s_84_20: u32 = 90800;
        // D s_84_21: read-reg s_84_20:struct
        let s_84_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_20 as isize);
            tracer.read_register(s_84_20 as isize, value);
            value
        };
        // C s_84_22: const #90800u : u32
        let s_84_22: u32 = 90800;
        // N s_84_23: write-reg s_84_22 <= s_84_21
        let s_84_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_22 as isize, s_84_21);
            tracer.write_register(s_84_22 as isize, s_84_21);
        };
        // C s_84_24: const #104496u : u32
        let s_84_24: u32 = 104496;
        // D s_84_25: read-reg s_84_24:struct
        let s_84_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_24 as isize);
            tracer.read_register(s_84_24 as isize, value);
            value
        };
        // C s_84_26: const #104496u : u32
        let s_84_26: u32 = 104496;
        // N s_84_27: write-reg s_84_26 <= s_84_25
        let s_84_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_26 as isize, s_84_25);
            tracer.write_register(s_84_26 as isize, s_84_25);
        };
        // C s_84_28: const #104496u : u32
        let s_84_28: u32 = 104496;
        // D s_84_29: read-reg s_84_28:struct
        let s_84_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_28 as isize);
            tracer.read_register(s_84_28 as isize, value);
            value
        };
        // C s_84_30: const #104496u : u32
        let s_84_30: u32 = 104496;
        // N s_84_31: write-reg s_84_30 <= s_84_29
        let s_84_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_30 as isize, s_84_29);
            tracer.write_register(s_84_30 as isize, s_84_29);
        };
        // C s_84_32: const #0u : u8
        let s_84_32: bool = false;
        // S s_84_33: call Bit(s_84_32)
        let s_84_33: bool = Bit(state, tracer, s_84_32);
        // C s_84_34: const #104496u : u32
        let s_84_34: u32 = 104496;
        // D s_84_35: read-reg s_84_34:struct
        let s_84_35: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_34 as isize);
            tracer.read_register(s_84_34 as isize, value);
            value
        };
        // C s_84_36: const #104496u : u32
        let s_84_36: u32 = 104496;
        // N s_84_37: write-reg s_84_36 <= s_84_35
        let s_84_37: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_36 as isize, s_84_35);
            tracer.write_register(s_84_36 as isize, s_84_35);
        };
        // C s_84_38: const #104496u : u32
        let s_84_38: u32 = 104496;
        // D s_84_39: read-reg s_84_38:struct
        let s_84_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_38 as isize);
            tracer.read_register(s_84_38 as isize, value);
            value
        };
        // C s_84_40: const #104496u : u32
        let s_84_40: u32 = 104496;
        // N s_84_41: write-reg s_84_40 <= s_84_39
        let s_84_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_40 as isize, s_84_39);
            tracer.write_register(s_84_40 as isize, s_84_39);
        };
        // C s_84_42: const #103136u : u32
        let s_84_42: u32 = 103136;
        // D s_84_43: read-reg s_84_42:struct
        let s_84_43: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_42 as isize);
            tracer.read_register(s_84_42 as isize, value);
            value
        };
        // C s_84_44: const #103136u : u32
        let s_84_44: u32 = 103136;
        // N s_84_45: write-reg s_84_44 <= s_84_43
        let s_84_45: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_44 as isize, s_84_43);
            tracer.write_register(s_84_44 as isize, s_84_43);
        };
        // C s_84_46: const #10504u : u32
        let s_84_46: u32 = 10504;
        // D s_84_47: read-reg s_84_46:struct
        let s_84_47: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_46 as isize);
            tracer.read_register(s_84_46 as isize, value);
            value
        };
        // C s_84_48: const #10504u : u32
        let s_84_48: u32 = 10504;
        // N s_84_49: write-reg s_84_48 <= s_84_47
        let s_84_49: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_48 as isize, s_84_47);
            tracer.write_register(s_84_48 as isize, s_84_47);
        };
        // C s_84_50: const #15720u : u32
        let s_84_50: u32 = 15720;
        // D s_84_51: read-reg s_84_50:struct
        let s_84_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_50 as isize);
            tracer.read_register(s_84_50 as isize, value);
            value
        };
        // C s_84_52: const #15720u : u32
        let s_84_52: u32 = 15720;
        // N s_84_53: write-reg s_84_52 <= s_84_51
        let s_84_53: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_52 as isize, s_84_51);
            tracer.write_register(s_84_52 as isize, s_84_51);
        };
        // C s_84_54: const #102568u : u32
        let s_84_54: u32 = 102568;
        // D s_84_55: read-reg s_84_54:struct
        let s_84_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_54 as isize);
            tracer.read_register(s_84_54 as isize, value);
            value
        };
        // C s_84_56: const #102568u : u32
        let s_84_56: u32 = 102568;
        // N s_84_57: write-reg s_84_56 <= s_84_55
        let s_84_57: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_56 as isize, s_84_55);
            tracer.write_register(s_84_56 as isize, s_84_55);
        };
        // C s_84_58: const #104936u : u32
        let s_84_58: u32 = 104936;
        // D s_84_59: read-reg s_84_58:struct
        let s_84_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_58 as isize);
            tracer.read_register(s_84_58 as isize, value);
            value
        };
        // C s_84_60: const #104936u : u32
        let s_84_60: u32 = 104936;
        // N s_84_61: write-reg s_84_60 <= s_84_59
        let s_84_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_60 as isize, s_84_59);
            tracer.write_register(s_84_60 as isize, s_84_59);
        };
        // C s_84_62: const #104936u : u32
        let s_84_62: u32 = 104936;
        // D s_84_63: read-reg s_84_62:struct
        let s_84_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_62 as isize);
            tracer.read_register(s_84_62 as isize, value);
            value
        };
        // C s_84_64: const #104936u : u32
        let s_84_64: u32 = 104936;
        // N s_84_65: write-reg s_84_64 <= s_84_63
        let s_84_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_64 as isize, s_84_63);
            tracer.write_register(s_84_64 as isize, s_84_63);
        };
        // C s_84_66: const #104936u : u32
        let s_84_66: u32 = 104936;
        // D s_84_67: read-reg s_84_66:struct
        let s_84_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_66 as isize);
            tracer.read_register(s_84_66 as isize, value);
            value
        };
        // C s_84_68: const #104936u : u32
        let s_84_68: u32 = 104936;
        // N s_84_69: write-reg s_84_68 <= s_84_67
        let s_84_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_68 as isize, s_84_67);
            tracer.write_register(s_84_68 as isize, s_84_67);
        };
        // C s_84_70: const #104936u : u32
        let s_84_70: u32 = 104936;
        // D s_84_71: read-reg s_84_70:struct
        let s_84_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_70 as isize);
            tracer.read_register(s_84_70 as isize, value);
            value
        };
        // C s_84_72: const #104936u : u32
        let s_84_72: u32 = 104936;
        // N s_84_73: write-reg s_84_72 <= s_84_71
        let s_84_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_72 as isize, s_84_71);
            tracer.write_register(s_84_72 as isize, s_84_71);
        };
        // C s_84_74: const #104888u : u32
        let s_84_74: u32 = 104888;
        // D s_84_75: read-reg s_84_74:struct
        let s_84_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_74 as isize);
            tracer.read_register(s_84_74 as isize, value);
            value
        };
        // C s_84_76: const #104888u : u32
        let s_84_76: u32 = 104888;
        // N s_84_77: write-reg s_84_76 <= s_84_75
        let s_84_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_76 as isize, s_84_75);
            tracer.write_register(s_84_76 as isize, s_84_75);
        };
        // C s_84_78: const #0u : u8
        let s_84_78: bool = false;
        // S s_84_79: call Bit(s_84_78)
        let s_84_79: bool = Bit(state, tracer, s_84_78);
        // C s_84_80: const #104888u : u32
        let s_84_80: u32 = 104888;
        // D s_84_81: read-reg s_84_80:struct
        let s_84_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_80 as isize);
            tracer.read_register(s_84_80 as isize, value);
            value
        };
        // C s_84_82: const #104888u : u32
        let s_84_82: u32 = 104888;
        // N s_84_83: write-reg s_84_82 <= s_84_81
        let s_84_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_82 as isize, s_84_81);
            tracer.write_register(s_84_82 as isize, s_84_81);
        };
        // C s_84_84: const #21760u : u32
        let s_84_84: u32 = 21760;
        // D s_84_85: read-reg s_84_84:struct
        let s_84_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_84 as isize);
            tracer.read_register(s_84_84 as isize, value);
            value
        };
        // C s_84_86: const #21760u : u32
        let s_84_86: u32 = 21760;
        // N s_84_87: write-reg s_84_86 <= s_84_85
        let s_84_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_86 as isize, s_84_85);
            tracer.write_register(s_84_86 as isize, s_84_85);
        };
        // C s_84_88: const #21760u : u32
        let s_84_88: u32 = 21760;
        // D s_84_89: read-reg s_84_88:struct
        let s_84_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_88 as isize);
            tracer.read_register(s_84_88 as isize, value);
            value
        };
        // C s_84_90: const #21760u : u32
        let s_84_90: u32 = 21760;
        // N s_84_91: write-reg s_84_90 <= s_84_89
        let s_84_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_90 as isize, s_84_89);
            tracer.write_register(s_84_90 as isize, s_84_89);
        };
        // C s_84_92: const #21760u : u32
        let s_84_92: u32 = 21760;
        // D s_84_93: read-reg s_84_92:struct
        let s_84_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_92 as isize);
            tracer.read_register(s_84_92 as isize, value);
            value
        };
        // C s_84_94: const #21760u : u32
        let s_84_94: u32 = 21760;
        // N s_84_95: write-reg s_84_94 <= s_84_93
        let s_84_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_94 as isize, s_84_93);
            tracer.write_register(s_84_94 as isize, s_84_93);
        };
        // C s_84_96: const #21760u : u32
        let s_84_96: u32 = 21760;
        // D s_84_97: read-reg s_84_96:struct
        let s_84_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_96 as isize);
            tracer.read_register(s_84_96 as isize, value);
            value
        };
        // C s_84_98: const #21760u : u32
        let s_84_98: u32 = 21760;
        // N s_84_99: write-reg s_84_98 <= s_84_97
        let s_84_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_98 as isize, s_84_97);
            tracer.write_register(s_84_98 as isize, s_84_97);
        };
        // C s_84_100: const #21760u : u32
        let s_84_100: u32 = 21760;
        // D s_84_101: read-reg s_84_100:struct
        let s_84_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_100 as isize);
            tracer.read_register(s_84_100 as isize, value);
            value
        };
        // C s_84_102: const #21760u : u32
        let s_84_102: u32 = 21760;
        // N s_84_103: write-reg s_84_102 <= s_84_101
        let s_84_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_102 as isize, s_84_101);
            tracer.write_register(s_84_102 as isize, s_84_101);
        };
        // C s_84_104: const #21760u : u32
        let s_84_104: u32 = 21760;
        // D s_84_105: read-reg s_84_104:struct
        let s_84_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_104 as isize);
            tracer.read_register(s_84_104 as isize, value);
            value
        };
        // C s_84_106: const #21760u : u32
        let s_84_106: u32 = 21760;
        // N s_84_107: write-reg s_84_106 <= s_84_105
        let s_84_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_106 as isize, s_84_105);
            tracer.write_register(s_84_106 as isize, s_84_105);
        };
        // C s_84_108: const #21760u : u32
        let s_84_108: u32 = 21760;
        // D s_84_109: read-reg s_84_108:struct
        let s_84_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_108 as isize);
            tracer.read_register(s_84_108 as isize, value);
            value
        };
        // C s_84_110: const #21760u : u32
        let s_84_110: u32 = 21760;
        // N s_84_111: write-reg s_84_110 <= s_84_109
        let s_84_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_110 as isize, s_84_109);
            tracer.write_register(s_84_110 as isize, s_84_109);
        };
        // C s_84_112: const #21760u : u32
        let s_84_112: u32 = 21760;
        // D s_84_113: read-reg s_84_112:struct
        let s_84_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_112 as isize);
            tracer.read_register(s_84_112 as isize, value);
            value
        };
        // C s_84_114: const #21760u : u32
        let s_84_114: u32 = 21760;
        // N s_84_115: write-reg s_84_114 <= s_84_113
        let s_84_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_114 as isize, s_84_113);
            tracer.write_register(s_84_114 as isize, s_84_113);
        };
        // C s_84_116: const #21760u : u32
        let s_84_116: u32 = 21760;
        // D s_84_117: read-reg s_84_116:struct
        let s_84_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_116 as isize);
            tracer.read_register(s_84_116 as isize, value);
            value
        };
        // C s_84_118: const #21760u : u32
        let s_84_118: u32 = 21760;
        // N s_84_119: write-reg s_84_118 <= s_84_117
        let s_84_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_118 as isize, s_84_117);
            tracer.write_register(s_84_118 as isize, s_84_117);
        };
        // C s_84_120: const #21760u : u32
        let s_84_120: u32 = 21760;
        // D s_84_121: read-reg s_84_120:struct
        let s_84_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_120 as isize);
            tracer.read_register(s_84_120 as isize, value);
            value
        };
        // C s_84_122: const #21760u : u32
        let s_84_122: u32 = 21760;
        // N s_84_123: write-reg s_84_122 <= s_84_121
        let s_84_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_122 as isize, s_84_121);
            tracer.write_register(s_84_122 as isize, s_84_121);
        };
        // C s_84_124: const #21760u : u32
        let s_84_124: u32 = 21760;
        // D s_84_125: read-reg s_84_124:struct
        let s_84_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_124 as isize);
            tracer.read_register(s_84_124 as isize, value);
            value
        };
        // C s_84_126: const #21760u : u32
        let s_84_126: u32 = 21760;
        // N s_84_127: write-reg s_84_126 <= s_84_125
        let s_84_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_126 as isize, s_84_125);
            tracer.write_register(s_84_126 as isize, s_84_125);
        };
        // C s_84_128: const #21760u : u32
        let s_84_128: u32 = 21760;
        // D s_84_129: read-reg s_84_128:struct
        let s_84_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_128 as isize);
            tracer.read_register(s_84_128 as isize, value);
            value
        };
        // C s_84_130: const #21760u : u32
        let s_84_130: u32 = 21760;
        // N s_84_131: write-reg s_84_130 <= s_84_129
        let s_84_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_130 as isize, s_84_129);
            tracer.write_register(s_84_130 as isize, s_84_129);
        };
        // C s_84_132: const #21760u : u32
        let s_84_132: u32 = 21760;
        // D s_84_133: read-reg s_84_132:struct
        let s_84_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_132 as isize);
            tracer.read_register(s_84_132 as isize, value);
            value
        };
        // C s_84_134: const #21760u : u32
        let s_84_134: u32 = 21760;
        // N s_84_135: write-reg s_84_134 <= s_84_133
        let s_84_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_134 as isize, s_84_133);
            tracer.write_register(s_84_134 as isize, s_84_133);
        };
        // C s_84_136: const #21760u : u32
        let s_84_136: u32 = 21760;
        // D s_84_137: read-reg s_84_136:struct
        let s_84_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_136 as isize);
            tracer.read_register(s_84_136 as isize, value);
            value
        };
        // C s_84_138: const #21760u : u32
        let s_84_138: u32 = 21760;
        // N s_84_139: write-reg s_84_138 <= s_84_137
        let s_84_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_138 as isize, s_84_137);
            tracer.write_register(s_84_138 as isize, s_84_137);
        };
        // C s_84_140: const #21760u : u32
        let s_84_140: u32 = 21760;
        // D s_84_141: read-reg s_84_140:struct
        let s_84_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_140 as isize);
            tracer.read_register(s_84_140 as isize, value);
            value
        };
        // C s_84_142: const #21760u : u32
        let s_84_142: u32 = 21760;
        // N s_84_143: write-reg s_84_142 <= s_84_141
        let s_84_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_142 as isize, s_84_141);
            tracer.write_register(s_84_142 as isize, s_84_141);
        };
        // C s_84_144: const #21760u : u32
        let s_84_144: u32 = 21760;
        // D s_84_145: read-reg s_84_144:struct
        let s_84_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_144 as isize);
            tracer.read_register(s_84_144 as isize, value);
            value
        };
        // C s_84_146: const #21760u : u32
        let s_84_146: u32 = 21760;
        // N s_84_147: write-reg s_84_146 <= s_84_145
        let s_84_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_146 as isize, s_84_145);
            tracer.write_register(s_84_146 as isize, s_84_145);
        };
        // C s_84_148: const #21760u : u32
        let s_84_148: u32 = 21760;
        // D s_84_149: read-reg s_84_148:struct
        let s_84_149: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_148 as isize);
            tracer.read_register(s_84_148 as isize, value);
            value
        };
        // C s_84_150: const #21760u : u32
        let s_84_150: u32 = 21760;
        // N s_84_151: write-reg s_84_150 <= s_84_149
        let s_84_151: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_150 as isize, s_84_149);
            tracer.write_register(s_84_150 as isize, s_84_149);
        };
        // C s_84_152: const #21760u : u32
        let s_84_152: u32 = 21760;
        // D s_84_153: read-reg s_84_152:struct
        let s_84_153: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_152 as isize);
            tracer.read_register(s_84_152 as isize, value);
            value
        };
        // C s_84_154: const #21760u : u32
        let s_84_154: u32 = 21760;
        // N s_84_155: write-reg s_84_154 <= s_84_153
        let s_84_155: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_154 as isize, s_84_153);
            tracer.write_register(s_84_154 as isize, s_84_153);
        };
        // C s_84_156: const #21760u : u32
        let s_84_156: u32 = 21760;
        // D s_84_157: read-reg s_84_156:struct
        let s_84_157: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_156 as isize);
            tracer.read_register(s_84_156 as isize, value);
            value
        };
        // C s_84_158: const #21760u : u32
        let s_84_158: u32 = 21760;
        // N s_84_159: write-reg s_84_158 <= s_84_157
        let s_84_159: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_158 as isize, s_84_157);
            tracer.write_register(s_84_158 as isize, s_84_157);
        };
        // C s_84_160: const #21760u : u32
        let s_84_160: u32 = 21760;
        // D s_84_161: read-reg s_84_160:struct
        let s_84_161: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_160 as isize);
            tracer.read_register(s_84_160 as isize, value);
            value
        };
        // C s_84_162: const #21760u : u32
        let s_84_162: u32 = 21760;
        // N s_84_163: write-reg s_84_162 <= s_84_161
        let s_84_163: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_162 as isize, s_84_161);
            tracer.write_register(s_84_162 as isize, s_84_161);
        };
        // C s_84_164: const #21760u : u32
        let s_84_164: u32 = 21760;
        // D s_84_165: read-reg s_84_164:struct
        let s_84_165: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_164 as isize);
            tracer.read_register(s_84_164 as isize, value);
            value
        };
        // C s_84_166: const #21760u : u32
        let s_84_166: u32 = 21760;
        // N s_84_167: write-reg s_84_166 <= s_84_165
        let s_84_167: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_166 as isize, s_84_165);
            tracer.write_register(s_84_166 as isize, s_84_165);
        };
        // C s_84_168: const #21760u : u32
        let s_84_168: u32 = 21760;
        // D s_84_169: read-reg s_84_168:struct
        let s_84_169: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_168 as isize);
            tracer.read_register(s_84_168 as isize, value);
            value
        };
        // C s_84_170: const #21760u : u32
        let s_84_170: u32 = 21760;
        // N s_84_171: write-reg s_84_170 <= s_84_169
        let s_84_171: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_170 as isize, s_84_169);
            tracer.write_register(s_84_170 as isize, s_84_169);
        };
        // C s_84_172: const #21760u : u32
        let s_84_172: u32 = 21760;
        // D s_84_173: read-reg s_84_172:struct
        let s_84_173: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_172 as isize);
            tracer.read_register(s_84_172 as isize, value);
            value
        };
        // C s_84_174: const #21760u : u32
        let s_84_174: u32 = 21760;
        // N s_84_175: write-reg s_84_174 <= s_84_173
        let s_84_175: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_174 as isize, s_84_173);
            tracer.write_register(s_84_174 as isize, s_84_173);
        };
        // C s_84_176: const #21760u : u32
        let s_84_176: u32 = 21760;
        // D s_84_177: read-reg s_84_176:struct
        let s_84_177: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_176 as isize);
            tracer.read_register(s_84_176 as isize, value);
            value
        };
        // C s_84_178: const #21760u : u32
        let s_84_178: u32 = 21760;
        // N s_84_179: write-reg s_84_178 <= s_84_177
        let s_84_179: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_178 as isize, s_84_177);
            tracer.write_register(s_84_178 as isize, s_84_177);
        };
        // C s_84_180: const #21760u : u32
        let s_84_180: u32 = 21760;
        // D s_84_181: read-reg s_84_180:struct
        let s_84_181: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_180 as isize);
            tracer.read_register(s_84_180 as isize, value);
            value
        };
        // C s_84_182: const #21760u : u32
        let s_84_182: u32 = 21760;
        // N s_84_183: write-reg s_84_182 <= s_84_181
        let s_84_183: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_182 as isize, s_84_181);
            tracer.write_register(s_84_182 as isize, s_84_181);
        };
        // C s_84_184: const #21760u : u32
        let s_84_184: u32 = 21760;
        // D s_84_185: read-reg s_84_184:struct
        let s_84_185: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_184 as isize);
            tracer.read_register(s_84_184 as isize, value);
            value
        };
        // C s_84_186: const #21760u : u32
        let s_84_186: u32 = 21760;
        // N s_84_187: write-reg s_84_186 <= s_84_185
        let s_84_187: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_186 as isize, s_84_185);
            tracer.write_register(s_84_186 as isize, s_84_185);
        };
        // C s_84_188: const #21760u : u32
        let s_84_188: u32 = 21760;
        // D s_84_189: read-reg s_84_188:struct
        let s_84_189: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_188 as isize);
            tracer.read_register(s_84_188 as isize, value);
            value
        };
        // C s_84_190: const #21760u : u32
        let s_84_190: u32 = 21760;
        // N s_84_191: write-reg s_84_190 <= s_84_189
        let s_84_191: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_190 as isize, s_84_189);
            tracer.write_register(s_84_190 as isize, s_84_189);
        };
        // C s_84_192: const #21760u : u32
        let s_84_192: u32 = 21760;
        // D s_84_193: read-reg s_84_192:struct
        let s_84_193: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_192 as isize);
            tracer.read_register(s_84_192 as isize, value);
            value
        };
        // C s_84_194: const #21760u : u32
        let s_84_194: u32 = 21760;
        // N s_84_195: write-reg s_84_194 <= s_84_193
        let s_84_195: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_194 as isize, s_84_193);
            tracer.write_register(s_84_194 as isize, s_84_193);
        };
        // C s_84_196: const #21760u : u32
        let s_84_196: u32 = 21760;
        // D s_84_197: read-reg s_84_196:struct
        let s_84_197: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_196 as isize);
            tracer.read_register(s_84_196 as isize, value);
            value
        };
        // C s_84_198: const #21760u : u32
        let s_84_198: u32 = 21760;
        // N s_84_199: write-reg s_84_198 <= s_84_197
        let s_84_199: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_198 as isize, s_84_197);
            tracer.write_register(s_84_198 as isize, s_84_197);
        };
        // C s_84_200: const #21760u : u32
        let s_84_200: u32 = 21760;
        // D s_84_201: read-reg s_84_200:struct
        let s_84_201: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_200 as isize);
            tracer.read_register(s_84_200 as isize, value);
            value
        };
        // C s_84_202: const #21760u : u32
        let s_84_202: u32 = 21760;
        // N s_84_203: write-reg s_84_202 <= s_84_201
        let s_84_203: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_202 as isize, s_84_201);
            tracer.write_register(s_84_202 as isize, s_84_201);
        };
        // C s_84_204: const #21760u : u32
        let s_84_204: u32 = 21760;
        // D s_84_205: read-reg s_84_204:struct
        let s_84_205: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_204 as isize);
            tracer.read_register(s_84_204 as isize, value);
            value
        };
        // C s_84_206: const #21760u : u32
        let s_84_206: u32 = 21760;
        // N s_84_207: write-reg s_84_206 <= s_84_205
        let s_84_207: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_206 as isize, s_84_205);
            tracer.write_register(s_84_206 as isize, s_84_205);
        };
        // C s_84_208: const #21760u : u32
        let s_84_208: u32 = 21760;
        // D s_84_209: read-reg s_84_208:struct
        let s_84_209: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_208 as isize);
            tracer.read_register(s_84_208 as isize, value);
            value
        };
        // C s_84_210: const #21760u : u32
        let s_84_210: u32 = 21760;
        // N s_84_211: write-reg s_84_210 <= s_84_209
        let s_84_211: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_210 as isize, s_84_209);
            tracer.write_register(s_84_210 as isize, s_84_209);
        };
        // C s_84_212: const #21760u : u32
        let s_84_212: u32 = 21760;
        // D s_84_213: read-reg s_84_212:struct
        let s_84_213: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_212 as isize);
            tracer.read_register(s_84_212 as isize, value);
            value
        };
        // C s_84_214: const #21760u : u32
        let s_84_214: u32 = 21760;
        // N s_84_215: write-reg s_84_214 <= s_84_213
        let s_84_215: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_214 as isize, s_84_213);
            tracer.write_register(s_84_214 as isize, s_84_213);
        };
        // C s_84_216: const #21760u : u32
        let s_84_216: u32 = 21760;
        // D s_84_217: read-reg s_84_216:struct
        let s_84_217: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_216 as isize);
            tracer.read_register(s_84_216 as isize, value);
            value
        };
        // C s_84_218: const #21760u : u32
        let s_84_218: u32 = 21760;
        // N s_84_219: write-reg s_84_218 <= s_84_217
        let s_84_219: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_218 as isize, s_84_217);
            tracer.write_register(s_84_218 as isize, s_84_217);
        };
        // C s_84_220: const #21760u : u32
        let s_84_220: u32 = 21760;
        // D s_84_221: read-reg s_84_220:struct
        let s_84_221: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_220 as isize);
            tracer.read_register(s_84_220 as isize, value);
            value
        };
        // C s_84_222: const #21760u : u32
        let s_84_222: u32 = 21760;
        // N s_84_223: write-reg s_84_222 <= s_84_221
        let s_84_223: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_222 as isize, s_84_221);
            tracer.write_register(s_84_222 as isize, s_84_221);
        };
        // C s_84_224: const #21760u : u32
        let s_84_224: u32 = 21760;
        // D s_84_225: read-reg s_84_224:struct
        let s_84_225: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_224 as isize);
            tracer.read_register(s_84_224 as isize, value);
            value
        };
        // C s_84_226: const #21760u : u32
        let s_84_226: u32 = 21760;
        // N s_84_227: write-reg s_84_226 <= s_84_225
        let s_84_227: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_226 as isize, s_84_225);
            tracer.write_register(s_84_226 as isize, s_84_225);
        };
        // C s_84_228: const #21760u : u32
        let s_84_228: u32 = 21760;
        // D s_84_229: read-reg s_84_228:struct
        let s_84_229: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_228 as isize);
            tracer.read_register(s_84_228 as isize, value);
            value
        };
        // C s_84_230: const #21760u : u32
        let s_84_230: u32 = 21760;
        // N s_84_231: write-reg s_84_230 <= s_84_229
        let s_84_231: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_230 as isize, s_84_229);
            tracer.write_register(s_84_230 as isize, s_84_229);
        };
        // C s_84_232: const #17328u : u32
        let s_84_232: u32 = 17328;
        // D s_84_233: read-reg s_84_232:struct
        let s_84_233: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_232 as isize);
            tracer.read_register(s_84_232 as isize, value);
            value
        };
        // C s_84_234: const #17328u : u32
        let s_84_234: u32 = 17328;
        // N s_84_235: write-reg s_84_234 <= s_84_233
        let s_84_235: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_234 as isize, s_84_233);
            tracer.write_register(s_84_234 as isize, s_84_233);
        };
        // C s_84_236: const #102464u : u32
        let s_84_236: u32 = 102464;
        // D s_84_237: read-reg s_84_236:struct
        let s_84_237: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_236 as isize);
            tracer.read_register(s_84_236 as isize, value);
            value
        };
        // C s_84_238: const #102464u : u32
        let s_84_238: u32 = 102464;
        // N s_84_239: write-reg s_84_238 <= s_84_237
        let s_84_239: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_238 as isize, s_84_237);
            tracer.write_register(s_84_238 as isize, s_84_237);
        };
        // C s_84_240: const #102856u : u32
        let s_84_240: u32 = 102856;
        // D s_84_241: read-reg s_84_240:struct
        let s_84_241: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_240 as isize);
            tracer.read_register(s_84_240 as isize, value);
            value
        };
        // C s_84_242: const #102856u : u32
        let s_84_242: u32 = 102856;
        // N s_84_243: write-reg s_84_242 <= s_84_241
        let s_84_243: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_242 as isize, s_84_241);
            tracer.write_register(s_84_242 as isize, s_84_241);
        };
        // C s_84_244: const #102856u : u32
        let s_84_244: u32 = 102856;
        // D s_84_245: read-reg s_84_244:struct
        let s_84_245: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_84_244 as isize);
            tracer.read_register(s_84_244 as isize, value);
            value
        };
        // C s_84_246: const #102856u : u32
        let s_84_246: u32 = 102856;
        // N s_84_247: write-reg s_84_246 <= s_84_245
        let s_84_247: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_84_246 as isize, s_84_245);
            tracer.write_register(s_84_246 as isize, s_84_245);
        };
        // D s_84_248: read-var cold:u8
        let s_84_248: bool = fn_state.cold;
        // D s_84_249: not s_84_248
        let s_84_249: bool = !s_84_248;
        // N s_84_250: branch s_84_249 b1113 b85
        if s_84_249 {
            return block_1113(state, tracer, fn_state);
        } else {
            return block_85(state, tracer, fn_state);
        };
    }
    fn block_85<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_85_0: const #0u : u8
        let s_85_0: bool = false;
        // D s_85_1: write-var gs#38447 <= s_85_0
        fn_state.gs_38447 = s_85_0;
        // N s_85_2: jump b86
        return block_86(state, tracer, fn_state);
    }
    fn block_86<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_86_0: read-var gs#38447:u8
        let s_86_0: bool = fn_state.gs_38447;
        // N s_86_1: branch s_86_0 b1112 b87
        if s_86_0 {
            return block_1112(state, tracer, fn_state);
        } else {
            return block_87(state, tracer, fn_state);
        };
    }
    fn block_87<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_87_0: const #0u : u8
        let s_87_0: bool = false;
        // D s_87_1: write-var gs#38448 <= s_87_0
        fn_state.gs_38448 = s_87_0;
        // N s_87_2: jump b88
        return block_88(state, tracer, fn_state);
    }
    fn block_88<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_88_0: read-var gs#38448:u8
        let s_88_0: bool = fn_state.gs_38448;
        // N s_88_1: branch s_88_0 b1111 b89
        if s_88_0 {
            return block_1111(state, tracer, fn_state);
        } else {
            return block_89(state, tracer, fn_state);
        };
    }
    fn block_89<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_89_0: const #1s : i64
        let s_89_0: i64 = 1;
        // C s_89_1: cast zx s_89_0 -> i
        let s_89_1: i128 = (i128::try_from(s_89_0).unwrap());
        // S s_89_2: call __UNKNOWN_bits(s_89_1)
        let s_89_2: Bits = u__UNKNOWN_bits(state, tracer, s_89_1);
        // C s_89_3: const #90272u : u32
        let s_89_3: u32 = 90272;
        // D s_89_4: read-reg s_89_3:struct
        let s_89_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_89_3 as isize);
            tracer.read_register(s_89_3 as isize, value);
            value
        };
        // C s_89_5: const #90272u : u32
        let s_89_5: u32 = 90272;
        // N s_89_6: write-reg s_89_5 <= s_89_4
        let s_89_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_89_5 as isize, s_89_4);
            tracer.write_register(s_89_5 as isize, s_89_4);
        };
        // N s_89_7: jump b90
        return block_90(state, tracer, fn_state);
    }
    fn block_90<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_90_0: const #0u : u8
        let s_90_0: bool = false;
        // S s_90_1: call Bit(s_90_0)
        let s_90_1: bool = Bit(state, tracer, s_90_0);
        // C s_90_2: const #90272u : u32
        let s_90_2: u32 = 90272;
        // D s_90_3: read-reg s_90_2:struct
        let s_90_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_90_2 as isize);
            tracer.read_register(s_90_2 as isize, value);
            value
        };
        // C s_90_4: const #90272u : u32
        let s_90_4: u32 = 90272;
        // N s_90_5: write-reg s_90_4 <= s_90_3
        let s_90_5: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_90_4 as isize, s_90_3);
            tracer.write_register(s_90_4 as isize, s_90_3);
        };
        // C s_90_6: const #0u : u8
        let s_90_6: bool = false;
        // S s_90_7: call Bit(s_90_6)
        let s_90_7: bool = Bit(state, tracer, s_90_6);
        // C s_90_8: const #90272u : u32
        let s_90_8: u32 = 90272;
        // D s_90_9: read-reg s_90_8:struct
        let s_90_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_90_8 as isize);
            tracer.read_register(s_90_8 as isize, value);
            value
        };
        // C s_90_10: const #90272u : u32
        let s_90_10: u32 = 90272;
        // N s_90_11: write-reg s_90_10 <= s_90_9
        let s_90_11: () = {
            state
                .write_register::<ProductType5c790c8ef59cc8b2>(s_90_10 as isize, s_90_9);
            tracer.write_register(s_90_10 as isize, s_90_9);
        };
        // D s_90_12: read-var cold:u8
        let s_90_12: bool = fn_state.cold;
        // D s_90_13: not s_90_12
        let s_90_13: bool = !s_90_12;
        // N s_90_14: branch s_90_13 b1110 b91
        if s_90_13 {
            return block_1110(state, tracer, fn_state);
        } else {
            return block_91(state, tracer, fn_state);
        };
    }
    fn block_91<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_91_0: const #0u : u8
        let s_91_0: bool = false;
        // D s_91_1: write-var gs#38453 <= s_91_0
        fn_state.gs_38453 = s_91_0;
        // N s_91_2: jump b92
        return block_92(state, tracer, fn_state);
    }
    fn block_92<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_92_0: read-var gs#38453:u8
        let s_92_0: bool = fn_state.gs_38453;
        // N s_92_1: branch s_92_0 b1109 b93
        if s_92_0 {
            return block_1109(state, tracer, fn_state);
        } else {
            return block_93(state, tracer, fn_state);
        };
    }
    fn block_93<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_93_0: const #0u : u8
        let s_93_0: bool = false;
        // D s_93_1: write-var gs#38454 <= s_93_0
        fn_state.gs_38454 = s_93_0;
        // N s_93_2: jump b94
        return block_94(state, tracer, fn_state);
    }
    fn block_94<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_94_0: read-var gs#38454:u8
        let s_94_0: bool = fn_state.gs_38454;
        // N s_94_1: branch s_94_0 b1108 b95
        if s_94_0 {
            return block_1108(state, tracer, fn_state);
        } else {
            return block_95(state, tracer, fn_state);
        };
    }
    fn block_95<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_95_0: const #1s : i64
        let s_95_0: i64 = 1;
        // C s_95_1: cast zx s_95_0 -> i
        let s_95_1: i128 = (i128::try_from(s_95_0).unwrap());
        // S s_95_2: call __UNKNOWN_bits(s_95_1)
        let s_95_2: Bits = u__UNKNOWN_bits(state, tracer, s_95_1);
        // C s_95_3: const #90272u : u32
        let s_95_3: u32 = 90272;
        // D s_95_4: read-reg s_95_3:struct
        let s_95_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_95_3 as isize);
            tracer.read_register(s_95_3 as isize, value);
            value
        };
        // C s_95_5: const #90272u : u32
        let s_95_5: u32 = 90272;
        // N s_95_6: write-reg s_95_5 <= s_95_4
        let s_95_6: () = {
            state.write_register::<ProductType5c790c8ef59cc8b2>(s_95_5 as isize, s_95_4);
            tracer.write_register(s_95_5 as isize, s_95_4);
        };
        // N s_95_7: jump b96
        return block_96(state, tracer, fn_state);
    }
    fn block_96<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_96_0: read-var cold:u8
        let s_96_0: bool = fn_state.cold;
        // D s_96_1: not s_96_0
        let s_96_1: bool = !s_96_0;
        // N s_96_2: branch s_96_1 b1107 b97
        if s_96_1 {
            return block_1107(state, tracer, fn_state);
        } else {
            return block_97(state, tracer, fn_state);
        };
    }
    fn block_97<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_97_0: const #0u : u8
        let s_97_0: bool = false;
        // D s_97_1: write-var gs#38455 <= s_97_0
        fn_state.gs_38455 = s_97_0;
        // N s_97_2: jump b98
        return block_98(state, tracer, fn_state);
    }
    fn block_98<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_98_0: read-var gs#38455:u8
        let s_98_0: bool = fn_state.gs_38455;
        // N s_98_1: branch s_98_0 b1106 b99
        if s_98_0 {
            return block_1106(state, tracer, fn_state);
        } else {
            return block_99(state, tracer, fn_state);
        };
    }
    fn block_99<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_99_0: const #0u : u8
        let s_99_0: bool = false;
        // D s_99_1: write-var gs#38456 <= s_99_0
        fn_state.gs_38456 = s_99_0;
        // N s_99_2: jump b100
        return block_100(state, tracer, fn_state);
    }
    fn block_100<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_100_0: read-var gs#38456:u8
        let s_100_0: bool = fn_state.gs_38456;
        // N s_100_1: branch s_100_0 b1105 b101
        if s_100_0 {
            return block_1105(state, tracer, fn_state);
        } else {
            return block_101(state, tracer, fn_state);
        };
    }
    fn block_101<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_101_0: const #1s : i64
        let s_101_0: i64 = 1;
        // C s_101_1: cast zx s_101_0 -> i
        let s_101_1: i128 = (i128::try_from(s_101_0).unwrap());
        // S s_101_2: call __UNKNOWN_bits(s_101_1)
        let s_101_2: Bits = u__UNKNOWN_bits(state, tracer, s_101_1);
        // C s_101_3: const #90272u : u32
        let s_101_3: u32 = 90272;
        // D s_101_4: read-reg s_101_3:struct
        let s_101_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_101_3 as isize);
            tracer.read_register(s_101_3 as isize, value);
            value
        };
        // C s_101_5: const #90272u : u32
        let s_101_5: u32 = 90272;
        // N s_101_6: write-reg s_101_5 <= s_101_4
        let s_101_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_101_5 as isize, s_101_4);
            tracer.write_register(s_101_5 as isize, s_101_4);
        };
        // N s_101_7: jump b102
        return block_102(state, tracer, fn_state);
    }
    fn block_102<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_102_0: read-var cold:u8
        let s_102_0: bool = fn_state.cold;
        // D s_102_1: not s_102_0
        let s_102_1: bool = !s_102_0;
        // N s_102_2: branch s_102_1 b1104 b103
        if s_102_1 {
            return block_1104(state, tracer, fn_state);
        } else {
            return block_103(state, tracer, fn_state);
        };
    }
    fn block_103<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_103_0: const #0u : u8
        let s_103_0: bool = false;
        // D s_103_1: write-var gs#38457 <= s_103_0
        fn_state.gs_38457 = s_103_0;
        // N s_103_2: jump b104
        return block_104(state, tracer, fn_state);
    }
    fn block_104<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_104_0: read-var gs#38457:u8
        let s_104_0: bool = fn_state.gs_38457;
        // N s_104_1: branch s_104_0 b1103 b105
        if s_104_0 {
            return block_1103(state, tracer, fn_state);
        } else {
            return block_105(state, tracer, fn_state);
        };
    }
    fn block_105<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_105_0: const #0u : u8
        let s_105_0: bool = false;
        // D s_105_1: write-var gs#38458 <= s_105_0
        fn_state.gs_38458 = s_105_0;
        // N s_105_2: jump b106
        return block_106(state, tracer, fn_state);
    }
    fn block_106<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_106_0: read-var gs#38458:u8
        let s_106_0: bool = fn_state.gs_38458;
        // N s_106_1: branch s_106_0 b1102 b107
        if s_106_0 {
            return block_1102(state, tracer, fn_state);
        } else {
            return block_107(state, tracer, fn_state);
        };
    }
    fn block_107<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_107_0: const #1s : i64
        let s_107_0: i64 = 1;
        // C s_107_1: cast zx s_107_0 -> i
        let s_107_1: i128 = (i128::try_from(s_107_0).unwrap());
        // S s_107_2: call __UNKNOWN_bits(s_107_1)
        let s_107_2: Bits = u__UNKNOWN_bits(state, tracer, s_107_1);
        // C s_107_3: const #90272u : u32
        let s_107_3: u32 = 90272;
        // D s_107_4: read-reg s_107_3:struct
        let s_107_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_107_3 as isize);
            tracer.read_register(s_107_3 as isize, value);
            value
        };
        // C s_107_5: const #90272u : u32
        let s_107_5: u32 = 90272;
        // N s_107_6: write-reg s_107_5 <= s_107_4
        let s_107_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_107_5 as isize, s_107_4);
            tracer.write_register(s_107_5 as isize, s_107_4);
        };
        // N s_107_7: jump b108
        return block_108(state, tracer, fn_state);
    }
    fn block_108<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_108_0: const #13272u : u32
        let s_108_0: u32 = 13272;
        // D s_108_1: read-reg s_108_0:struct
        let s_108_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_0 as isize);
            tracer.read_register(s_108_0 as isize, value);
            value
        };
        // C s_108_2: const #13272u : u32
        let s_108_2: u32 = 13272;
        // N s_108_3: write-reg s_108_2 <= s_108_1
        let s_108_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_2 as isize, s_108_1);
            tracer.write_register(s_108_2 as isize, s_108_1);
        };
        // C s_108_4: const #13272u : u32
        let s_108_4: u32 = 13272;
        // D s_108_5: read-reg s_108_4:struct
        let s_108_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_4 as isize);
            tracer.read_register(s_108_4 as isize, value);
            value
        };
        // C s_108_6: const #13272u : u32
        let s_108_6: u32 = 13272;
        // N s_108_7: write-reg s_108_6 <= s_108_5
        let s_108_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_6 as isize, s_108_5);
            tracer.write_register(s_108_6 as isize, s_108_5);
        };
        // C s_108_8: const #13272u : u32
        let s_108_8: u32 = 13272;
        // D s_108_9: read-reg s_108_8:struct
        let s_108_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_8 as isize);
            tracer.read_register(s_108_8 as isize, value);
            value
        };
        // C s_108_10: const #13272u : u32
        let s_108_10: u32 = 13272;
        // N s_108_11: write-reg s_108_10 <= s_108_9
        let s_108_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_10 as isize, s_108_9);
            tracer.write_register(s_108_10 as isize, s_108_9);
        };
        // C s_108_12: const #13272u : u32
        let s_108_12: u32 = 13272;
        // D s_108_13: read-reg s_108_12:struct
        let s_108_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_12 as isize);
            tracer.read_register(s_108_12 as isize, value);
            value
        };
        // C s_108_14: const #13272u : u32
        let s_108_14: u32 = 13272;
        // N s_108_15: write-reg s_108_14 <= s_108_13
        let s_108_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_14 as isize, s_108_13);
            tracer.write_register(s_108_14 as isize, s_108_13);
        };
        // C s_108_16: const #22080u : u32
        let s_108_16: u32 = 22080;
        // D s_108_17: read-reg s_108_16:struct
        let s_108_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_16 as isize);
            tracer.read_register(s_108_16 as isize, value);
            value
        };
        // C s_108_18: const #22080u : u32
        let s_108_18: u32 = 22080;
        // N s_108_19: write-reg s_108_18 <= s_108_17
        let s_108_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_18 as isize, s_108_17);
            tracer.write_register(s_108_18 as isize, s_108_17);
        };
        // C s_108_20: const #22080u : u32
        let s_108_20: u32 = 22080;
        // D s_108_21: read-reg s_108_20:struct
        let s_108_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_20 as isize);
            tracer.read_register(s_108_20 as isize, value);
            value
        };
        // C s_108_22: const #22080u : u32
        let s_108_22: u32 = 22080;
        // N s_108_23: write-reg s_108_22 <= s_108_21
        let s_108_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_22 as isize, s_108_21);
            tracer.write_register(s_108_22 as isize, s_108_21);
        };
        // C s_108_24: const #91008u : u32
        let s_108_24: u32 = 91008;
        // D s_108_25: read-reg s_108_24:struct
        let s_108_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_24 as isize);
            tracer.read_register(s_108_24 as isize, value);
            value
        };
        // C s_108_26: const #91008u : u32
        let s_108_26: u32 = 91008;
        // N s_108_27: write-reg s_108_26 <= s_108_25
        let s_108_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_26 as isize, s_108_25);
            tracer.write_register(s_108_26 as isize, s_108_25);
        };
        // C s_108_28: const #20696u : u32
        let s_108_28: u32 = 20696;
        // D s_108_29: read-reg s_108_28:struct
        let s_108_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_28 as isize);
            tracer.read_register(s_108_28 as isize, value);
            value
        };
        // C s_108_30: const #20696u : u32
        let s_108_30: u32 = 20696;
        // N s_108_31: write-reg s_108_30 <= s_108_29
        let s_108_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_30 as isize, s_108_29);
            tracer.write_register(s_108_30 as isize, s_108_29);
        };
        // C s_108_32: const #20696u : u32
        let s_108_32: u32 = 20696;
        // D s_108_33: read-reg s_108_32:struct
        let s_108_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_32 as isize);
            tracer.read_register(s_108_32 as isize, value);
            value
        };
        // C s_108_34: const #20696u : u32
        let s_108_34: u32 = 20696;
        // N s_108_35: write-reg s_108_34 <= s_108_33
        let s_108_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_34 as isize, s_108_33);
            tracer.write_register(s_108_34 as isize, s_108_33);
        };
        // C s_108_36: const #20696u : u32
        let s_108_36: u32 = 20696;
        // D s_108_37: read-reg s_108_36:struct
        let s_108_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_36 as isize);
            tracer.read_register(s_108_36 as isize, value);
            value
        };
        // C s_108_38: const #20696u : u32
        let s_108_38: u32 = 20696;
        // N s_108_39: write-reg s_108_38 <= s_108_37
        let s_108_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_38 as isize, s_108_37);
            tracer.write_register(s_108_38 as isize, s_108_37);
        };
        // C s_108_40: const #100928u : u32
        let s_108_40: u32 = 100928;
        // D s_108_41: read-reg s_108_40:struct
        let s_108_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_40 as isize);
            tracer.read_register(s_108_40 as isize, value);
            value
        };
        // C s_108_42: const #100928u : u32
        let s_108_42: u32 = 100928;
        // N s_108_43: write-reg s_108_42 <= s_108_41
        let s_108_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_42 as isize, s_108_41);
            tracer.write_register(s_108_42 as isize, s_108_41);
        };
        // C s_108_44: const #20944u : u32
        let s_108_44: u32 = 20944;
        // D s_108_45: read-reg s_108_44:struct
        let s_108_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_44 as isize);
            tracer.read_register(s_108_44 as isize, value);
            value
        };
        // C s_108_46: const #20944u : u32
        let s_108_46: u32 = 20944;
        // N s_108_47: write-reg s_108_46 <= s_108_45
        let s_108_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_46 as isize, s_108_45);
            tracer.write_register(s_108_46 as isize, s_108_45);
        };
        // C s_108_48: const #20944u : u32
        let s_108_48: u32 = 20944;
        // D s_108_49: read-reg s_108_48:struct
        let s_108_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_48 as isize);
            tracer.read_register(s_108_48 as isize, value);
            value
        };
        // C s_108_50: const #20944u : u32
        let s_108_50: u32 = 20944;
        // N s_108_51: write-reg s_108_50 <= s_108_49
        let s_108_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_50 as isize, s_108_49);
            tracer.write_register(s_108_50 as isize, s_108_49);
        };
        // C s_108_52: const #22592u : u32
        let s_108_52: u32 = 22592;
        // D s_108_53: read-reg s_108_52:struct
        let s_108_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_52 as isize);
            tracer.read_register(s_108_52 as isize, value);
            value
        };
        // C s_108_54: const #22592u : u32
        let s_108_54: u32 = 22592;
        // N s_108_55: write-reg s_108_54 <= s_108_53
        let s_108_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_54 as isize, s_108_53);
            tracer.write_register(s_108_54 as isize, s_108_53);
        };
        // C s_108_56: const #103416u : u32
        let s_108_56: u32 = 103416;
        // D s_108_57: read-reg s_108_56:struct
        let s_108_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_56 as isize);
            tracer.read_register(s_108_56 as isize, value);
            value
        };
        // C s_108_58: const #103416u : u32
        let s_108_58: u32 = 103416;
        // N s_108_59: write-reg s_108_58 <= s_108_57
        let s_108_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_58 as isize, s_108_57);
            tracer.write_register(s_108_58 as isize, s_108_57);
        };
        // C s_108_60: const #19288u : u32
        let s_108_60: u32 = 19288;
        // D s_108_61: read-reg s_108_60:struct
        let s_108_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_60 as isize);
            tracer.read_register(s_108_60 as isize, value);
            value
        };
        // C s_108_62: const #19288u : u32
        let s_108_62: u32 = 19288;
        // N s_108_63: write-reg s_108_62 <= s_108_61
        let s_108_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_62 as isize, s_108_61);
            tracer.write_register(s_108_62 as isize, s_108_61);
        };
        // C s_108_64: const #17176u : u32
        let s_108_64: u32 = 17176;
        // D s_108_65: read-reg s_108_64:struct
        let s_108_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_64 as isize);
            tracer.read_register(s_108_64 as isize, value);
            value
        };
        // C s_108_66: const #17176u : u32
        let s_108_66: u32 = 17176;
        // N s_108_67: write-reg s_108_66 <= s_108_65
        let s_108_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_66 as isize, s_108_65);
            tracer.write_register(s_108_66 as isize, s_108_65);
        };
        // C s_108_68: const #0s : i
        let s_108_68: i128 = 0;
        // C s_108_69: const #22816u : u32
        let s_108_69: u32 = 22816;
        // D s_108_70: read-reg s_108_69:u64
        let s_108_70: u64 = {
            let value = state.read_register::<u64>(s_108_69 as isize);
            tracer.read_register(s_108_69 as isize, value);
            value
        };
        // D s_108_71: cast zx s_108_70 -> bv
        let s_108_71: Bits = Bits::new(s_108_70 as u128, 64u16);
        // C s_108_72: const #0u : u11
        let s_108_72: u16 = 0;
        // C s_108_73: cast zx s_108_72 -> bv
        let s_108_73: Bits = Bits::new(s_108_72 as u128, 11u16);
        // C s_108_74: const #10s : i
        let s_108_74: i128 = 10;
        // C s_108_75: const #1u : u64
        let s_108_75: u64 = 1;
        // C s_108_76: cast zx s_108_75 -> bv
        let s_108_76: Bits = Bits::new(s_108_75 as u128, 64u16);
        // C s_108_77: lsl s_108_76 s_108_74
        let s_108_77: Bits = s_108_76 << s_108_74;
        // C s_108_78: sub s_108_77 s_108_76
        let s_108_78: Bits = ((s_108_77) - (s_108_76));
        // C s_108_79: and s_108_73 s_108_78
        let s_108_79: Bits = ((s_108_73) & (s_108_78));
        // C s_108_80: lsl s_108_79 s_108_68
        let s_108_80: Bits = s_108_79 << s_108_68;
        // C s_108_81: lsl s_108_78 s_108_68
        let s_108_81: Bits = s_108_78 << s_108_68;
        // C s_108_82: cmpl s_108_81
        let s_108_82: Bits = !s_108_81;
        // D s_108_83: and s_108_71 s_108_82
        let s_108_83: Bits = ((s_108_71) & (s_108_82));
        // D s_108_84: or s_108_83 s_108_80
        let s_108_84: Bits = ((s_108_83) | (s_108_80));
        // D s_108_85: cast reint s_108_84 -> u64
        let s_108_85: u64 = (s_108_84.value() as u64);
        // C s_108_86: const #22816u : u32
        let s_108_86: u32 = 22816;
        // N s_108_87: write-reg s_108_86 <= s_108_85
        let s_108_87: () = {
            state.write_register::<u64>(s_108_86 as isize, s_108_85);
            tracer.write_register(s_108_86 as isize, s_108_85);
        };
        // C s_108_88: const #13608u : u32
        let s_108_88: u32 = 13608;
        // D s_108_89: read-reg s_108_88:struct
        let s_108_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_88 as isize);
            tracer.read_register(s_108_88 as isize, value);
            value
        };
        // C s_108_90: const #13608u : u32
        let s_108_90: u32 = 13608;
        // N s_108_91: write-reg s_108_90 <= s_108_89
        let s_108_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_90 as isize, s_108_89);
            tracer.write_register(s_108_90 as isize, s_108_89);
        };
        // C s_108_92: const #13608u : u32
        let s_108_92: u32 = 13608;
        // D s_108_93: read-reg s_108_92:struct
        let s_108_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_108_92 as isize);
            tracer.read_register(s_108_92 as isize, value);
            value
        };
        // C s_108_94: const #13608u : u32
        let s_108_94: u32 = 13608;
        // N s_108_95: write-reg s_108_94 <= s_108_93
        let s_108_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_108_94 as isize, s_108_93);
            tracer.write_register(s_108_94 as isize, s_108_93);
        };
        // D s_108_96: read-var cold:u8
        let s_108_96: bool = fn_state.cold;
        // D s_108_97: not s_108_96
        let s_108_97: bool = !s_108_96;
        // N s_108_98: branch s_108_97 b1101 b109
        if s_108_97 {
            return block_1101(state, tracer, fn_state);
        } else {
            return block_109(state, tracer, fn_state);
        };
    }
    fn block_109<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_109_0: const #0u : u8
        let s_109_0: bool = false;
        // D s_109_1: write-var gs#38518 <= s_109_0
        fn_state.gs_38518 = s_109_0;
        // N s_109_2: jump b110
        return block_110(state, tracer, fn_state);
    }
    fn block_110<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_110_0: read-var gs#38518:u8
        let s_110_0: bool = fn_state.gs_38518;
        // N s_110_1: branch s_110_0 b1100 b111
        if s_110_0 {
            return block_1100(state, tracer, fn_state);
        } else {
            return block_111(state, tracer, fn_state);
        };
    }
    fn block_111<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_111_0: const #1s : i64
        let s_111_0: i64 = 1;
        // C s_111_1: cast zx s_111_0 -> i
        let s_111_1: i128 = (i128::try_from(s_111_0).unwrap());
        // S s_111_2: call __UNKNOWN_bits(s_111_1)
        let s_111_2: Bits = u__UNKNOWN_bits(state, tracer, s_111_1);
        // C s_111_3: const #13608u : u32
        let s_111_3: u32 = 13608;
        // D s_111_4: read-reg s_111_3:struct
        let s_111_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_111_3 as isize);
            tracer.read_register(s_111_3 as isize, value);
            value
        };
        // C s_111_5: const #13608u : u32
        let s_111_5: u32 = 13608;
        // N s_111_6: write-reg s_111_5 <= s_111_4
        let s_111_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_111_5 as isize, s_111_4);
            tracer.write_register(s_111_5 as isize, s_111_4);
        };
        // N s_111_7: jump b112
        return block_112(state, tracer, fn_state);
    }
    fn block_112<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_112_0: read-var cold:u8
        let s_112_0: bool = fn_state.cold;
        // D s_112_1: not s_112_0
        let s_112_1: bool = !s_112_0;
        // N s_112_2: branch s_112_1 b1099 b113
        if s_112_1 {
            return block_1099(state, tracer, fn_state);
        } else {
            return block_113(state, tracer, fn_state);
        };
    }
    fn block_113<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_113_0: const #0u : u8
        let s_113_0: bool = false;
        // D s_113_1: write-var gs#38519 <= s_113_0
        fn_state.gs_38519 = s_113_0;
        // N s_113_2: jump b114
        return block_114(state, tracer, fn_state);
    }
    fn block_114<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_114_0: read-var gs#38519:u8
        let s_114_0: bool = fn_state.gs_38519;
        // N s_114_1: branch s_114_0 b1098 b115
        if s_114_0 {
            return block_1098(state, tracer, fn_state);
        } else {
            return block_115(state, tracer, fn_state);
        };
    }
    fn block_115<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_115_0: const #1s : i64
        let s_115_0: i64 = 1;
        // C s_115_1: cast zx s_115_0 -> i
        let s_115_1: i128 = (i128::try_from(s_115_0).unwrap());
        // S s_115_2: call __UNKNOWN_bits(s_115_1)
        let s_115_2: Bits = u__UNKNOWN_bits(state, tracer, s_115_1);
        // C s_115_3: const #13608u : u32
        let s_115_3: u32 = 13608;
        // D s_115_4: read-reg s_115_3:struct
        let s_115_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_115_3 as isize);
            tracer.read_register(s_115_3 as isize, value);
            value
        };
        // C s_115_5: const #13608u : u32
        let s_115_5: u32 = 13608;
        // N s_115_6: write-reg s_115_5 <= s_115_4
        let s_115_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_115_5 as isize, s_115_4);
            tracer.write_register(s_115_5 as isize, s_115_4);
        };
        // N s_115_7: jump b116
        return block_116(state, tracer, fn_state);
    }
    fn block_116<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_116_0: read-var cold:u8
        let s_116_0: bool = fn_state.cold;
        // D s_116_1: not s_116_0
        let s_116_1: bool = !s_116_0;
        // N s_116_2: branch s_116_1 b1097 b117
        if s_116_1 {
            return block_1097(state, tracer, fn_state);
        } else {
            return block_117(state, tracer, fn_state);
        };
    }
    fn block_117<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_117_0: const #0u : u8
        let s_117_0: bool = false;
        // D s_117_1: write-var gs#38520 <= s_117_0
        fn_state.gs_38520 = s_117_0;
        // N s_117_2: jump b118
        return block_118(state, tracer, fn_state);
    }
    fn block_118<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_118_0: read-var gs#38520:u8
        let s_118_0: bool = fn_state.gs_38520;
        // N s_118_1: branch s_118_0 b1096 b119
        if s_118_0 {
            return block_1096(state, tracer, fn_state);
        } else {
            return block_119(state, tracer, fn_state);
        };
    }
    fn block_119<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_119_0: const #1s : i64
        let s_119_0: i64 = 1;
        // C s_119_1: cast zx s_119_0 -> i
        let s_119_1: i128 = (i128::try_from(s_119_0).unwrap());
        // S s_119_2: call __UNKNOWN_bits(s_119_1)
        let s_119_2: Bits = u__UNKNOWN_bits(state, tracer, s_119_1);
        // C s_119_3: const #13608u : u32
        let s_119_3: u32 = 13608;
        // D s_119_4: read-reg s_119_3:struct
        let s_119_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_119_3 as isize);
            tracer.read_register(s_119_3 as isize, value);
            value
        };
        // C s_119_5: const #13608u : u32
        let s_119_5: u32 = 13608;
        // N s_119_6: write-reg s_119_5 <= s_119_4
        let s_119_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_119_5 as isize, s_119_4);
            tracer.write_register(s_119_5 as isize, s_119_4);
        };
        // N s_119_7: jump b120
        return block_120(state, tracer, fn_state);
    }
    fn block_120<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_120_0: const #13608u : u32
        let s_120_0: u32 = 13608;
        // D s_120_1: read-reg s_120_0:struct
        let s_120_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_0 as isize);
            tracer.read_register(s_120_0 as isize, value);
            value
        };
        // C s_120_2: const #13608u : u32
        let s_120_2: u32 = 13608;
        // N s_120_3: write-reg s_120_2 <= s_120_1
        let s_120_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_2 as isize, s_120_1);
            tracer.write_register(s_120_2 as isize, s_120_1);
        };
        // C s_120_4: const #13608u : u32
        let s_120_4: u32 = 13608;
        // D s_120_5: read-reg s_120_4:struct
        let s_120_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_4 as isize);
            tracer.read_register(s_120_4 as isize, value);
            value
        };
        // C s_120_6: const #13608u : u32
        let s_120_6: u32 = 13608;
        // N s_120_7: write-reg s_120_6 <= s_120_5
        let s_120_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_6 as isize, s_120_5);
            tracer.write_register(s_120_6 as isize, s_120_5);
        };
        // C s_120_8: const #13608u : u32
        let s_120_8: u32 = 13608;
        // D s_120_9: read-reg s_120_8:struct
        let s_120_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_8 as isize);
            tracer.read_register(s_120_8 as isize, value);
            value
        };
        // C s_120_10: const #13608u : u32
        let s_120_10: u32 = 13608;
        // N s_120_11: write-reg s_120_10 <= s_120_9
        let s_120_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_10 as isize, s_120_9);
            tracer.write_register(s_120_10 as isize, s_120_9);
        };
        // C s_120_12: const #13608u : u32
        let s_120_12: u32 = 13608;
        // D s_120_13: read-reg s_120_12:struct
        let s_120_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_12 as isize);
            tracer.read_register(s_120_12 as isize, value);
            value
        };
        // C s_120_14: const #13608u : u32
        let s_120_14: u32 = 13608;
        // N s_120_15: write-reg s_120_14 <= s_120_13
        let s_120_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_14 as isize, s_120_13);
            tracer.write_register(s_120_14 as isize, s_120_13);
        };
        // C s_120_16: const #13608u : u32
        let s_120_16: u32 = 13608;
        // D s_120_17: read-reg s_120_16:struct
        let s_120_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_16 as isize);
            tracer.read_register(s_120_16 as isize, value);
            value
        };
        // C s_120_18: const #13608u : u32
        let s_120_18: u32 = 13608;
        // N s_120_19: write-reg s_120_18 <= s_120_17
        let s_120_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_18 as isize, s_120_17);
            tracer.write_register(s_120_18 as isize, s_120_17);
        };
        // C s_120_20: const #13608u : u32
        let s_120_20: u32 = 13608;
        // D s_120_21: read-reg s_120_20:struct
        let s_120_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_20 as isize);
            tracer.read_register(s_120_20 as isize, value);
            value
        };
        // C s_120_22: const #13608u : u32
        let s_120_22: u32 = 13608;
        // N s_120_23: write-reg s_120_22 <= s_120_21
        let s_120_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_22 as isize, s_120_21);
            tracer.write_register(s_120_22 as isize, s_120_21);
        };
        // C s_120_24: const #13608u : u32
        let s_120_24: u32 = 13608;
        // D s_120_25: read-reg s_120_24:struct
        let s_120_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_24 as isize);
            tracer.read_register(s_120_24 as isize, value);
            value
        };
        // C s_120_26: const #13608u : u32
        let s_120_26: u32 = 13608;
        // N s_120_27: write-reg s_120_26 <= s_120_25
        let s_120_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_26 as isize, s_120_25);
            tracer.write_register(s_120_26 as isize, s_120_25);
        };
        // C s_120_28: const #13608u : u32
        let s_120_28: u32 = 13608;
        // D s_120_29: read-reg s_120_28:struct
        let s_120_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_28 as isize);
            tracer.read_register(s_120_28 as isize, value);
            value
        };
        // C s_120_30: const #13608u : u32
        let s_120_30: u32 = 13608;
        // N s_120_31: write-reg s_120_30 <= s_120_29
        let s_120_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_30 as isize, s_120_29);
            tracer.write_register(s_120_30 as isize, s_120_29);
        };
        // C s_120_32: const #13608u : u32
        let s_120_32: u32 = 13608;
        // D s_120_33: read-reg s_120_32:struct
        let s_120_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_32 as isize);
            tracer.read_register(s_120_32 as isize, value);
            value
        };
        // C s_120_34: const #13608u : u32
        let s_120_34: u32 = 13608;
        // N s_120_35: write-reg s_120_34 <= s_120_33
        let s_120_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_34 as isize, s_120_33);
            tracer.write_register(s_120_34 as isize, s_120_33);
        };
        // C s_120_36: const #13608u : u32
        let s_120_36: u32 = 13608;
        // D s_120_37: read-reg s_120_36:struct
        let s_120_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_36 as isize);
            tracer.read_register(s_120_36 as isize, value);
            value
        };
        // C s_120_38: const #13608u : u32
        let s_120_38: u32 = 13608;
        // N s_120_39: write-reg s_120_38 <= s_120_37
        let s_120_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_38 as isize, s_120_37);
            tracer.write_register(s_120_38 as isize, s_120_37);
        };
        // C s_120_40: const #13608u : u32
        let s_120_40: u32 = 13608;
        // D s_120_41: read-reg s_120_40:struct
        let s_120_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_40 as isize);
            tracer.read_register(s_120_40 as isize, value);
            value
        };
        // C s_120_42: const #13608u : u32
        let s_120_42: u32 = 13608;
        // N s_120_43: write-reg s_120_42 <= s_120_41
        let s_120_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_42 as isize, s_120_41);
            tracer.write_register(s_120_42 as isize, s_120_41);
        };
        // C s_120_44: const #13608u : u32
        let s_120_44: u32 = 13608;
        // D s_120_45: read-reg s_120_44:struct
        let s_120_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_44 as isize);
            tracer.read_register(s_120_44 as isize, value);
            value
        };
        // C s_120_46: const #13608u : u32
        let s_120_46: u32 = 13608;
        // N s_120_47: write-reg s_120_46 <= s_120_45
        let s_120_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_46 as isize, s_120_45);
            tracer.write_register(s_120_46 as isize, s_120_45);
        };
        // C s_120_48: const #13608u : u32
        let s_120_48: u32 = 13608;
        // D s_120_49: read-reg s_120_48:struct
        let s_120_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_48 as isize);
            tracer.read_register(s_120_48 as isize, value);
            value
        };
        // C s_120_50: const #13608u : u32
        let s_120_50: u32 = 13608;
        // N s_120_51: write-reg s_120_50 <= s_120_49
        let s_120_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_50 as isize, s_120_49);
            tracer.write_register(s_120_50 as isize, s_120_49);
        };
        // C s_120_52: const #13608u : u32
        let s_120_52: u32 = 13608;
        // D s_120_53: read-reg s_120_52:struct
        let s_120_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_52 as isize);
            tracer.read_register(s_120_52 as isize, value);
            value
        };
        // C s_120_54: const #13608u : u32
        let s_120_54: u32 = 13608;
        // N s_120_55: write-reg s_120_54 <= s_120_53
        let s_120_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_54 as isize, s_120_53);
            tracer.write_register(s_120_54 as isize, s_120_53);
        };
        // C s_120_56: const #13608u : u32
        let s_120_56: u32 = 13608;
        // D s_120_57: read-reg s_120_56:struct
        let s_120_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_56 as isize);
            tracer.read_register(s_120_56 as isize, value);
            value
        };
        // C s_120_58: const #13608u : u32
        let s_120_58: u32 = 13608;
        // N s_120_59: write-reg s_120_58 <= s_120_57
        let s_120_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_58 as isize, s_120_57);
            tracer.write_register(s_120_58 as isize, s_120_57);
        };
        // C s_120_60: const #13608u : u32
        let s_120_60: u32 = 13608;
        // D s_120_61: read-reg s_120_60:struct
        let s_120_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_60 as isize);
            tracer.read_register(s_120_60 as isize, value);
            value
        };
        // C s_120_62: const #13608u : u32
        let s_120_62: u32 = 13608;
        // N s_120_63: write-reg s_120_62 <= s_120_61
        let s_120_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_62 as isize, s_120_61);
            tracer.write_register(s_120_62 as isize, s_120_61);
        };
        // C s_120_64: const #13608u : u32
        let s_120_64: u32 = 13608;
        // D s_120_65: read-reg s_120_64:struct
        let s_120_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_64 as isize);
            tracer.read_register(s_120_64 as isize, value);
            value
        };
        // C s_120_66: const #13608u : u32
        let s_120_66: u32 = 13608;
        // N s_120_67: write-reg s_120_66 <= s_120_65
        let s_120_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_66 as isize, s_120_65);
            tracer.write_register(s_120_66 as isize, s_120_65);
        };
        // C s_120_68: const #13608u : u32
        let s_120_68: u32 = 13608;
        // D s_120_69: read-reg s_120_68:struct
        let s_120_69: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_68 as isize);
            tracer.read_register(s_120_68 as isize, value);
            value
        };
        // C s_120_70: const #13608u : u32
        let s_120_70: u32 = 13608;
        // N s_120_71: write-reg s_120_70 <= s_120_69
        let s_120_71: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_70 as isize, s_120_69);
            tracer.write_register(s_120_70 as isize, s_120_69);
        };
        // C s_120_72: const #13608u : u32
        let s_120_72: u32 = 13608;
        // D s_120_73: read-reg s_120_72:struct
        let s_120_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_72 as isize);
            tracer.read_register(s_120_72 as isize, value);
            value
        };
        // C s_120_74: const #13608u : u32
        let s_120_74: u32 = 13608;
        // N s_120_75: write-reg s_120_74 <= s_120_73
        let s_120_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_74 as isize, s_120_73);
            tracer.write_register(s_120_74 as isize, s_120_73);
        };
        // C s_120_76: const #13608u : u32
        let s_120_76: u32 = 13608;
        // D s_120_77: read-reg s_120_76:struct
        let s_120_77: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_76 as isize);
            tracer.read_register(s_120_76 as isize, value);
            value
        };
        // C s_120_78: const #13608u : u32
        let s_120_78: u32 = 13608;
        // N s_120_79: write-reg s_120_78 <= s_120_77
        let s_120_79: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_78 as isize, s_120_77);
            tracer.write_register(s_120_78 as isize, s_120_77);
        };
        // C s_120_80: const #13608u : u32
        let s_120_80: u32 = 13608;
        // D s_120_81: read-reg s_120_80:struct
        let s_120_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_80 as isize);
            tracer.read_register(s_120_80 as isize, value);
            value
        };
        // C s_120_82: const #13608u : u32
        let s_120_82: u32 = 13608;
        // N s_120_83: write-reg s_120_82 <= s_120_81
        let s_120_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_82 as isize, s_120_81);
            tracer.write_register(s_120_82 as isize, s_120_81);
        };
        // C s_120_84: const #13608u : u32
        let s_120_84: u32 = 13608;
        // D s_120_85: read-reg s_120_84:struct
        let s_120_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_84 as isize);
            tracer.read_register(s_120_84 as isize, value);
            value
        };
        // C s_120_86: const #13608u : u32
        let s_120_86: u32 = 13608;
        // N s_120_87: write-reg s_120_86 <= s_120_85
        let s_120_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_86 as isize, s_120_85);
            tracer.write_register(s_120_86 as isize, s_120_85);
        };
        // C s_120_88: const #13608u : u32
        let s_120_88: u32 = 13608;
        // D s_120_89: read-reg s_120_88:struct
        let s_120_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_88 as isize);
            tracer.read_register(s_120_88 as isize, value);
            value
        };
        // C s_120_90: const #13608u : u32
        let s_120_90: u32 = 13608;
        // N s_120_91: write-reg s_120_90 <= s_120_89
        let s_120_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_90 as isize, s_120_89);
            tracer.write_register(s_120_90 as isize, s_120_89);
        };
        // C s_120_92: const #13608u : u32
        let s_120_92: u32 = 13608;
        // D s_120_93: read-reg s_120_92:struct
        let s_120_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_92 as isize);
            tracer.read_register(s_120_92 as isize, value);
            value
        };
        // C s_120_94: const #13608u : u32
        let s_120_94: u32 = 13608;
        // N s_120_95: write-reg s_120_94 <= s_120_93
        let s_120_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_94 as isize, s_120_93);
            tracer.write_register(s_120_94 as isize, s_120_93);
        };
        // C s_120_96: const #13608u : u32
        let s_120_96: u32 = 13608;
        // D s_120_97: read-reg s_120_96:struct
        let s_120_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_96 as isize);
            tracer.read_register(s_120_96 as isize, value);
            value
        };
        // C s_120_98: const #13608u : u32
        let s_120_98: u32 = 13608;
        // N s_120_99: write-reg s_120_98 <= s_120_97
        let s_120_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_98 as isize, s_120_97);
            tracer.write_register(s_120_98 as isize, s_120_97);
        };
        // C s_120_100: const #13608u : u32
        let s_120_100: u32 = 13608;
        // D s_120_101: read-reg s_120_100:struct
        let s_120_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_100 as isize);
            tracer.read_register(s_120_100 as isize, value);
            value
        };
        // C s_120_102: const #13608u : u32
        let s_120_102: u32 = 13608;
        // N s_120_103: write-reg s_120_102 <= s_120_101
        let s_120_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_102 as isize, s_120_101);
            tracer.write_register(s_120_102 as isize, s_120_101);
        };
        // C s_120_104: const #13608u : u32
        let s_120_104: u32 = 13608;
        // D s_120_105: read-reg s_120_104:struct
        let s_120_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_104 as isize);
            tracer.read_register(s_120_104 as isize, value);
            value
        };
        // C s_120_106: const #13608u : u32
        let s_120_106: u32 = 13608;
        // N s_120_107: write-reg s_120_106 <= s_120_105
        let s_120_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_106 as isize, s_120_105);
            tracer.write_register(s_120_106 as isize, s_120_105);
        };
        // C s_120_108: const #13608u : u32
        let s_120_108: u32 = 13608;
        // D s_120_109: read-reg s_120_108:struct
        let s_120_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_108 as isize);
            tracer.read_register(s_120_108 as isize, value);
            value
        };
        // C s_120_110: const #13608u : u32
        let s_120_110: u32 = 13608;
        // N s_120_111: write-reg s_120_110 <= s_120_109
        let s_120_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_110 as isize, s_120_109);
            tracer.write_register(s_120_110 as isize, s_120_109);
        };
        // C s_120_112: const #13608u : u32
        let s_120_112: u32 = 13608;
        // D s_120_113: read-reg s_120_112:struct
        let s_120_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_112 as isize);
            tracer.read_register(s_120_112 as isize, value);
            value
        };
        // C s_120_114: const #13608u : u32
        let s_120_114: u32 = 13608;
        // N s_120_115: write-reg s_120_114 <= s_120_113
        let s_120_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_114 as isize, s_120_113);
            tracer.write_register(s_120_114 as isize, s_120_113);
        };
        // C s_120_116: const #13608u : u32
        let s_120_116: u32 = 13608;
        // D s_120_117: read-reg s_120_116:struct
        let s_120_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_116 as isize);
            tracer.read_register(s_120_116 as isize, value);
            value
        };
        // C s_120_118: const #13608u : u32
        let s_120_118: u32 = 13608;
        // N s_120_119: write-reg s_120_118 <= s_120_117
        let s_120_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_118 as isize, s_120_117);
            tracer.write_register(s_120_118 as isize, s_120_117);
        };
        // C s_120_120: const #13608u : u32
        let s_120_120: u32 = 13608;
        // D s_120_121: read-reg s_120_120:struct
        let s_120_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_120 as isize);
            tracer.read_register(s_120_120 as isize, value);
            value
        };
        // C s_120_122: const #13608u : u32
        let s_120_122: u32 = 13608;
        // N s_120_123: write-reg s_120_122 <= s_120_121
        let s_120_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_122 as isize, s_120_121);
            tracer.write_register(s_120_122 as isize, s_120_121);
        };
        // C s_120_124: const #13608u : u32
        let s_120_124: u32 = 13608;
        // D s_120_125: read-reg s_120_124:struct
        let s_120_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_124 as isize);
            tracer.read_register(s_120_124 as isize, value);
            value
        };
        // C s_120_126: const #13608u : u32
        let s_120_126: u32 = 13608;
        // N s_120_127: write-reg s_120_126 <= s_120_125
        let s_120_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_126 as isize, s_120_125);
            tracer.write_register(s_120_126 as isize, s_120_125);
        };
        // C s_120_128: const #13608u : u32
        let s_120_128: u32 = 13608;
        // D s_120_129: read-reg s_120_128:struct
        let s_120_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_128 as isize);
            tracer.read_register(s_120_128 as isize, value);
            value
        };
        // C s_120_130: const #13608u : u32
        let s_120_130: u32 = 13608;
        // N s_120_131: write-reg s_120_130 <= s_120_129
        let s_120_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_130 as isize, s_120_129);
            tracer.write_register(s_120_130 as isize, s_120_129);
        };
        // C s_120_132: const #13608u : u32
        let s_120_132: u32 = 13608;
        // D s_120_133: read-reg s_120_132:struct
        let s_120_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_132 as isize);
            tracer.read_register(s_120_132 as isize, value);
            value
        };
        // C s_120_134: const #13608u : u32
        let s_120_134: u32 = 13608;
        // N s_120_135: write-reg s_120_134 <= s_120_133
        let s_120_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_134 as isize, s_120_133);
            tracer.write_register(s_120_134 as isize, s_120_133);
        };
        // C s_120_136: const #13608u : u32
        let s_120_136: u32 = 13608;
        // D s_120_137: read-reg s_120_136:struct
        let s_120_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_136 as isize);
            tracer.read_register(s_120_136 as isize, value);
            value
        };
        // C s_120_138: const #13608u : u32
        let s_120_138: u32 = 13608;
        // N s_120_139: write-reg s_120_138 <= s_120_137
        let s_120_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_138 as isize, s_120_137);
            tracer.write_register(s_120_138 as isize, s_120_137);
        };
        // C s_120_140: const #13608u : u32
        let s_120_140: u32 = 13608;
        // D s_120_141: read-reg s_120_140:struct
        let s_120_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_140 as isize);
            tracer.read_register(s_120_140 as isize, value);
            value
        };
        // C s_120_142: const #13608u : u32
        let s_120_142: u32 = 13608;
        // N s_120_143: write-reg s_120_142 <= s_120_141
        let s_120_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_142 as isize, s_120_141);
            tracer.write_register(s_120_142 as isize, s_120_141);
        };
        // C s_120_144: const #13608u : u32
        let s_120_144: u32 = 13608;
        // D s_120_145: read-reg s_120_144:struct
        let s_120_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_144 as isize);
            tracer.read_register(s_120_144 as isize, value);
            value
        };
        // C s_120_146: const #13608u : u32
        let s_120_146: u32 = 13608;
        // N s_120_147: write-reg s_120_146 <= s_120_145
        let s_120_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_146 as isize, s_120_145);
            tracer.write_register(s_120_146 as isize, s_120_145);
        };
        // C s_120_148: const #13608u : u32
        let s_120_148: u32 = 13608;
        // D s_120_149: read-reg s_120_148:struct
        let s_120_149: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_148 as isize);
            tracer.read_register(s_120_148 as isize, value);
            value
        };
        // C s_120_150: const #13608u : u32
        let s_120_150: u32 = 13608;
        // N s_120_151: write-reg s_120_150 <= s_120_149
        let s_120_151: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_150 as isize, s_120_149);
            tracer.write_register(s_120_150 as isize, s_120_149);
        };
        // C s_120_152: const #13608u : u32
        let s_120_152: u32 = 13608;
        // D s_120_153: read-reg s_120_152:struct
        let s_120_153: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_152 as isize);
            tracer.read_register(s_120_152 as isize, value);
            value
        };
        // C s_120_154: const #13608u : u32
        let s_120_154: u32 = 13608;
        // N s_120_155: write-reg s_120_154 <= s_120_153
        let s_120_155: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_154 as isize, s_120_153);
            tracer.write_register(s_120_154 as isize, s_120_153);
        };
        // C s_120_156: const #13608u : u32
        let s_120_156: u32 = 13608;
        // D s_120_157: read-reg s_120_156:struct
        let s_120_157: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_156 as isize);
            tracer.read_register(s_120_156 as isize, value);
            value
        };
        // C s_120_158: const #13608u : u32
        let s_120_158: u32 = 13608;
        // N s_120_159: write-reg s_120_158 <= s_120_157
        let s_120_159: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_158 as isize, s_120_157);
            tracer.write_register(s_120_158 as isize, s_120_157);
        };
        // C s_120_160: const #13608u : u32
        let s_120_160: u32 = 13608;
        // D s_120_161: read-reg s_120_160:struct
        let s_120_161: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_160 as isize);
            tracer.read_register(s_120_160 as isize, value);
            value
        };
        // C s_120_162: const #13608u : u32
        let s_120_162: u32 = 13608;
        // N s_120_163: write-reg s_120_162 <= s_120_161
        let s_120_163: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_162 as isize, s_120_161);
            tracer.write_register(s_120_162 as isize, s_120_161);
        };
        // C s_120_164: const #13608u : u32
        let s_120_164: u32 = 13608;
        // D s_120_165: read-reg s_120_164:struct
        let s_120_165: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_164 as isize);
            tracer.read_register(s_120_164 as isize, value);
            value
        };
        // C s_120_166: const #13608u : u32
        let s_120_166: u32 = 13608;
        // N s_120_167: write-reg s_120_166 <= s_120_165
        let s_120_167: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_166 as isize, s_120_165);
            tracer.write_register(s_120_166 as isize, s_120_165);
        };
        // C s_120_168: const #13608u : u32
        let s_120_168: u32 = 13608;
        // D s_120_169: read-reg s_120_168:struct
        let s_120_169: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_168 as isize);
            tracer.read_register(s_120_168 as isize, value);
            value
        };
        // C s_120_170: const #13608u : u32
        let s_120_170: u32 = 13608;
        // N s_120_171: write-reg s_120_170 <= s_120_169
        let s_120_171: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_170 as isize, s_120_169);
            tracer.write_register(s_120_170 as isize, s_120_169);
        };
        // C s_120_172: const #13608u : u32
        let s_120_172: u32 = 13608;
        // D s_120_173: read-reg s_120_172:struct
        let s_120_173: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_172 as isize);
            tracer.read_register(s_120_172 as isize, value);
            value
        };
        // C s_120_174: const #13608u : u32
        let s_120_174: u32 = 13608;
        // N s_120_175: write-reg s_120_174 <= s_120_173
        let s_120_175: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_174 as isize, s_120_173);
            tracer.write_register(s_120_174 as isize, s_120_173);
        };
        // C s_120_176: const #13608u : u32
        let s_120_176: u32 = 13608;
        // D s_120_177: read-reg s_120_176:struct
        let s_120_177: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_176 as isize);
            tracer.read_register(s_120_176 as isize, value);
            value
        };
        // C s_120_178: const #13608u : u32
        let s_120_178: u32 = 13608;
        // N s_120_179: write-reg s_120_178 <= s_120_177
        let s_120_179: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_178 as isize, s_120_177);
            tracer.write_register(s_120_178 as isize, s_120_177);
        };
        // C s_120_180: const #13608u : u32
        let s_120_180: u32 = 13608;
        // D s_120_181: read-reg s_120_180:struct
        let s_120_181: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_180 as isize);
            tracer.read_register(s_120_180 as isize, value);
            value
        };
        // C s_120_182: const #13608u : u32
        let s_120_182: u32 = 13608;
        // N s_120_183: write-reg s_120_182 <= s_120_181
        let s_120_183: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_182 as isize, s_120_181);
            tracer.write_register(s_120_182 as isize, s_120_181);
        };
        // C s_120_184: const #13608u : u32
        let s_120_184: u32 = 13608;
        // D s_120_185: read-reg s_120_184:struct
        let s_120_185: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_184 as isize);
            tracer.read_register(s_120_184 as isize, value);
            value
        };
        // C s_120_186: const #13608u : u32
        let s_120_186: u32 = 13608;
        // N s_120_187: write-reg s_120_186 <= s_120_185
        let s_120_187: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_186 as isize, s_120_185);
            tracer.write_register(s_120_186 as isize, s_120_185);
        };
        // C s_120_188: const #13608u : u32
        let s_120_188: u32 = 13608;
        // D s_120_189: read-reg s_120_188:struct
        let s_120_189: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_188 as isize);
            tracer.read_register(s_120_188 as isize, value);
            value
        };
        // C s_120_190: const #13608u : u32
        let s_120_190: u32 = 13608;
        // N s_120_191: write-reg s_120_190 <= s_120_189
        let s_120_191: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_190 as isize, s_120_189);
            tracer.write_register(s_120_190 as isize, s_120_189);
        };
        // C s_120_192: const #13608u : u32
        let s_120_192: u32 = 13608;
        // D s_120_193: read-reg s_120_192:struct
        let s_120_193: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_192 as isize);
            tracer.read_register(s_120_192 as isize, value);
            value
        };
        // C s_120_194: const #13608u : u32
        let s_120_194: u32 = 13608;
        // N s_120_195: write-reg s_120_194 <= s_120_193
        let s_120_195: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_194 as isize, s_120_193);
            tracer.write_register(s_120_194 as isize, s_120_193);
        };
        // C s_120_196: const #13608u : u32
        let s_120_196: u32 = 13608;
        // D s_120_197: read-reg s_120_196:struct
        let s_120_197: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_196 as isize);
            tracer.read_register(s_120_196 as isize, value);
            value
        };
        // C s_120_198: const #13608u : u32
        let s_120_198: u32 = 13608;
        // N s_120_199: write-reg s_120_198 <= s_120_197
        let s_120_199: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_198 as isize, s_120_197);
            tracer.write_register(s_120_198 as isize, s_120_197);
        };
        // C s_120_200: const #13608u : u32
        let s_120_200: u32 = 13608;
        // D s_120_201: read-reg s_120_200:struct
        let s_120_201: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_200 as isize);
            tracer.read_register(s_120_200 as isize, value);
            value
        };
        // C s_120_202: const #13608u : u32
        let s_120_202: u32 = 13608;
        // N s_120_203: write-reg s_120_202 <= s_120_201
        let s_120_203: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_202 as isize, s_120_201);
            tracer.write_register(s_120_202 as isize, s_120_201);
        };
        // C s_120_204: const #13608u : u32
        let s_120_204: u32 = 13608;
        // D s_120_205: read-reg s_120_204:struct
        let s_120_205: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_204 as isize);
            tracer.read_register(s_120_204 as isize, value);
            value
        };
        // C s_120_206: const #13608u : u32
        let s_120_206: u32 = 13608;
        // N s_120_207: write-reg s_120_206 <= s_120_205
        let s_120_207: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_206 as isize, s_120_205);
            tracer.write_register(s_120_206 as isize, s_120_205);
        };
        // C s_120_208: const #13608u : u32
        let s_120_208: u32 = 13608;
        // D s_120_209: read-reg s_120_208:struct
        let s_120_209: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_208 as isize);
            tracer.read_register(s_120_208 as isize, value);
            value
        };
        // C s_120_210: const #13608u : u32
        let s_120_210: u32 = 13608;
        // N s_120_211: write-reg s_120_210 <= s_120_209
        let s_120_211: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_210 as isize, s_120_209);
            tracer.write_register(s_120_210 as isize, s_120_209);
        };
        // C s_120_212: const #13608u : u32
        let s_120_212: u32 = 13608;
        // D s_120_213: read-reg s_120_212:struct
        let s_120_213: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_212 as isize);
            tracer.read_register(s_120_212 as isize, value);
            value
        };
        // C s_120_214: const #13608u : u32
        let s_120_214: u32 = 13608;
        // N s_120_215: write-reg s_120_214 <= s_120_213
        let s_120_215: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_214 as isize, s_120_213);
            tracer.write_register(s_120_214 as isize, s_120_213);
        };
        // C s_120_216: const #13608u : u32
        let s_120_216: u32 = 13608;
        // D s_120_217: read-reg s_120_216:struct
        let s_120_217: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_216 as isize);
            tracer.read_register(s_120_216 as isize, value);
            value
        };
        // C s_120_218: const #13608u : u32
        let s_120_218: u32 = 13608;
        // N s_120_219: write-reg s_120_218 <= s_120_217
        let s_120_219: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_218 as isize, s_120_217);
            tracer.write_register(s_120_218 as isize, s_120_217);
        };
        // C s_120_220: const #13608u : u32
        let s_120_220: u32 = 13608;
        // D s_120_221: read-reg s_120_220:struct
        let s_120_221: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_220 as isize);
            tracer.read_register(s_120_220 as isize, value);
            value
        };
        // C s_120_222: const #13608u : u32
        let s_120_222: u32 = 13608;
        // N s_120_223: write-reg s_120_222 <= s_120_221
        let s_120_223: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_222 as isize, s_120_221);
            tracer.write_register(s_120_222 as isize, s_120_221);
        };
        // C s_120_224: const #13608u : u32
        let s_120_224: u32 = 13608;
        // D s_120_225: read-reg s_120_224:struct
        let s_120_225: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_224 as isize);
            tracer.read_register(s_120_224 as isize, value);
            value
        };
        // C s_120_226: const #13608u : u32
        let s_120_226: u32 = 13608;
        // N s_120_227: write-reg s_120_226 <= s_120_225
        let s_120_227: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_226 as isize, s_120_225);
            tracer.write_register(s_120_226 as isize, s_120_225);
        };
        // C s_120_228: const #90632u : u32
        let s_120_228: u32 = 90632;
        // D s_120_229: read-reg s_120_228:struct
        let s_120_229: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_228 as isize);
            tracer.read_register(s_120_228 as isize, value);
            value
        };
        // C s_120_230: const #90632u : u32
        let s_120_230: u32 = 90632;
        // N s_120_231: write-reg s_120_230 <= s_120_229
        let s_120_231: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_230 as isize, s_120_229);
            tracer.write_register(s_120_230 as isize, s_120_229);
        };
        // C s_120_232: const #90632u : u32
        let s_120_232: u32 = 90632;
        // D s_120_233: read-reg s_120_232:struct
        let s_120_233: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_232 as isize);
            tracer.read_register(s_120_232 as isize, value);
            value
        };
        // C s_120_234: const #90632u : u32
        let s_120_234: u32 = 90632;
        // N s_120_235: write-reg s_120_234 <= s_120_233
        let s_120_235: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_234 as isize, s_120_233);
            tracer.write_register(s_120_234 as isize, s_120_233);
        };
        // C s_120_236: const #90632u : u32
        let s_120_236: u32 = 90632;
        // D s_120_237: read-reg s_120_236:struct
        let s_120_237: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_236 as isize);
            tracer.read_register(s_120_236 as isize, value);
            value
        };
        // C s_120_238: const #90632u : u32
        let s_120_238: u32 = 90632;
        // N s_120_239: write-reg s_120_238 <= s_120_237
        let s_120_239: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_238 as isize, s_120_237);
            tracer.write_register(s_120_238 as isize, s_120_237);
        };
        // C s_120_240: const #12920u : u32
        let s_120_240: u32 = 12920;
        // D s_120_241: read-reg s_120_240:struct
        let s_120_241: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_240 as isize);
            tracer.read_register(s_120_240 as isize, value);
            value
        };
        // C s_120_242: const #12920u : u32
        let s_120_242: u32 = 12920;
        // N s_120_243: write-reg s_120_242 <= s_120_241
        let s_120_243: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_242 as isize, s_120_241);
            tracer.write_register(s_120_242 as isize, s_120_241);
        };
        // C s_120_244: const #0u : u8
        let s_120_244: bool = false;
        // S s_120_245: call Bit(s_120_244)
        let s_120_245: bool = Bit(state, tracer, s_120_244);
        // C s_120_246: const #12920u : u32
        let s_120_246: u32 = 12920;
        // D s_120_247: read-reg s_120_246:struct
        let s_120_247: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_246 as isize);
            tracer.read_register(s_120_246 as isize, value);
            value
        };
        // C s_120_248: const #12920u : u32
        let s_120_248: u32 = 12920;
        // N s_120_249: write-reg s_120_248 <= s_120_247
        let s_120_249: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_248 as isize, s_120_247);
            tracer.write_register(s_120_248 as isize, s_120_247);
        };
        // C s_120_250: const #12920u : u32
        let s_120_250: u32 = 12920;
        // D s_120_251: read-reg s_120_250:struct
        let s_120_251: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_250 as isize);
            tracer.read_register(s_120_250 as isize, value);
            value
        };
        // C s_120_252: const #12920u : u32
        let s_120_252: u32 = 12920;
        // N s_120_253: write-reg s_120_252 <= s_120_251
        let s_120_253: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_252 as isize, s_120_251);
            tracer.write_register(s_120_252 as isize, s_120_251);
        };
        // C s_120_254: const #14872u : u32
        let s_120_254: u32 = 14872;
        // D s_120_255: read-reg s_120_254:struct
        let s_120_255: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_254 as isize);
            tracer.read_register(s_120_254 as isize, value);
            value
        };
        // C s_120_256: const #14872u : u32
        let s_120_256: u32 = 14872;
        // N s_120_257: write-reg s_120_256 <= s_120_255
        let s_120_257: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_256 as isize, s_120_255);
            tracer.write_register(s_120_256 as isize, s_120_255);
        };
        // C s_120_258: const #22552u : u32
        let s_120_258: u32 = 22552;
        // D s_120_259: read-reg s_120_258:struct
        let s_120_259: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_258 as isize);
            tracer.read_register(s_120_258 as isize, value);
            value
        };
        // C s_120_260: const #22552u : u32
        let s_120_260: u32 = 22552;
        // N s_120_261: write-reg s_120_260 <= s_120_259
        let s_120_261: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_260 as isize, s_120_259);
            tracer.write_register(s_120_260 as isize, s_120_259);
        };
        // C s_120_262: const #20616u : u32
        let s_120_262: u32 = 20616;
        // D s_120_263: read-reg s_120_262:struct
        let s_120_263: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_262 as isize);
            tracer.read_register(s_120_262 as isize, value);
            value
        };
        // C s_120_264: const #20616u : u32
        let s_120_264: u32 = 20616;
        // N s_120_265: write-reg s_120_264 <= s_120_263
        let s_120_265: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_264 as isize, s_120_263);
            tracer.write_register(s_120_264 as isize, s_120_263);
        };
        // C s_120_266: const #21112u : u32
        let s_120_266: u32 = 21112;
        // D s_120_267: read-reg s_120_266:struct
        let s_120_267: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_266 as isize);
            tracer.read_register(s_120_266 as isize, value);
            value
        };
        // C s_120_268: const #21112u : u32
        let s_120_268: u32 = 21112;
        // N s_120_269: write-reg s_120_268 <= s_120_267
        let s_120_269: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_268 as isize, s_120_267);
            tracer.write_register(s_120_268 as isize, s_120_267);
        };
        // C s_120_270: const #11168u : u32
        let s_120_270: u32 = 11168;
        // D s_120_271: read-reg s_120_270:struct
        let s_120_271: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_270 as isize);
            tracer.read_register(s_120_270 as isize, value);
            value
        };
        // C s_120_272: const #11168u : u32
        let s_120_272: u32 = 11168;
        // N s_120_273: write-reg s_120_272 <= s_120_271
        let s_120_273: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_272 as isize, s_120_271);
            tracer.write_register(s_120_272 as isize, s_120_271);
        };
        // C s_120_274: const #0u : u8
        let s_120_274: bool = false;
        // S s_120_275: call Bit(s_120_274)
        let s_120_275: bool = Bit(state, tracer, s_120_274);
        // C s_120_276: const #11168u : u32
        let s_120_276: u32 = 11168;
        // D s_120_277: read-reg s_120_276:struct
        let s_120_277: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_276 as isize);
            tracer.read_register(s_120_276 as isize, value);
            value
        };
        // C s_120_278: const #11168u : u32
        let s_120_278: u32 = 11168;
        // N s_120_279: write-reg s_120_278 <= s_120_277
        let s_120_279: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_278 as isize, s_120_277);
            tracer.write_register(s_120_278 as isize, s_120_277);
        };
        // C s_120_280: const #1u : u8
        let s_120_280: bool = true;
        // S s_120_281: call Bit(s_120_280)
        let s_120_281: bool = Bit(state, tracer, s_120_280);
        // C s_120_282: const #11168u : u32
        let s_120_282: u32 = 11168;
        // D s_120_283: read-reg s_120_282:struct
        let s_120_283: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_282 as isize);
            tracer.read_register(s_120_282 as isize, value);
            value
        };
        // C s_120_284: const #11168u : u32
        let s_120_284: u32 = 11168;
        // N s_120_285: write-reg s_120_284 <= s_120_283
        let s_120_285: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_284 as isize, s_120_283);
            tracer.write_register(s_120_284 as isize, s_120_283);
        };
        // C s_120_286: const #11168u : u32
        let s_120_286: u32 = 11168;
        // D s_120_287: read-reg s_120_286:struct
        let s_120_287: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_286 as isize);
            tracer.read_register(s_120_286 as isize, value);
            value
        };
        // C s_120_288: const #11168u : u32
        let s_120_288: u32 = 11168;
        // N s_120_289: write-reg s_120_288 <= s_120_287
        let s_120_289: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_288 as isize, s_120_287);
            tracer.write_register(s_120_288 as isize, s_120_287);
        };
        // C s_120_290: const #11168u : u32
        let s_120_290: u32 = 11168;
        // D s_120_291: read-reg s_120_290:struct
        let s_120_291: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_290 as isize);
            tracer.read_register(s_120_290 as isize, value);
            value
        };
        // C s_120_292: const #11168u : u32
        let s_120_292: u32 = 11168;
        // N s_120_293: write-reg s_120_292 <= s_120_291
        let s_120_293: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_292 as isize, s_120_291);
            tracer.write_register(s_120_292 as isize, s_120_291);
        };
        // C s_120_294: const #90608u : u32
        let s_120_294: u32 = 90608;
        // D s_120_295: read-reg s_120_294:struct
        let s_120_295: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_294 as isize);
            tracer.read_register(s_120_294 as isize, value);
            value
        };
        // C s_120_296: const #90608u : u32
        let s_120_296: u32 = 90608;
        // N s_120_297: write-reg s_120_296 <= s_120_295
        let s_120_297: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_296 as isize, s_120_295);
            tracer.write_register(s_120_296 as isize, s_120_295);
        };
        // C s_120_298: const #20432u : u32
        let s_120_298: u32 = 20432;
        // D s_120_299: read-reg s_120_298:struct
        let s_120_299: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_298 as isize);
            tracer.read_register(s_120_298 as isize, value);
            value
        };
        // C s_120_300: const #20432u : u32
        let s_120_300: u32 = 20432;
        // N s_120_301: write-reg s_120_300 <= s_120_299
        let s_120_301: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_300 as isize, s_120_299);
            tracer.write_register(s_120_300 as isize, s_120_299);
        };
        // C s_120_302: const #12120u : u32
        let s_120_302: u32 = 12120;
        // D s_120_303: read-reg s_120_302:struct
        let s_120_303: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_302 as isize);
            tracer.read_register(s_120_302 as isize, value);
            value
        };
        // C s_120_304: const #12120u : u32
        let s_120_304: u32 = 12120;
        // N s_120_305: write-reg s_120_304 <= s_120_303
        let s_120_305: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_304 as isize, s_120_303);
            tracer.write_register(s_120_304 as isize, s_120_303);
        };
        // C s_120_306: const #() : ()
        let s_120_306: () = ();
        // S s_120_307: call ICC_IGRPEN1_EL1_read(s_120_306)
        let s_120_307: ProductType5c790c8ef59cc8b2 = ICC_IGRPEN1_EL1_read(
            state,
            tracer,
            s_120_306,
        );
        // D s_120_308: write-var ga#31443 <= s_120_307
        fn_state.ga_31443 = s_120_307;
        // D s_120_309: read-var ga#31443.0:struct
        let s_120_309: u64 = fn_state.ga_31443._0;
        // C s_120_310: const #63s : i
        let s_120_310: i128 = 63;
        // C s_120_311: const #1s : i
        let s_120_311: i128 = 1;
        // D s_120_312: cast zx s_120_309 -> bv
        let s_120_312: Bits = Bits::new(s_120_309 as u128, 64u16);
        // C s_120_313: const #0u : u63
        let s_120_313: u64 = 0;
        // C s_120_314: cast zx s_120_313 -> bv
        let s_120_314: Bits = Bits::new(s_120_313 as u128, 63u16);
        // C s_120_315: const #1u : u64
        let s_120_315: u64 = 1;
        // C s_120_316: cast zx s_120_315 -> bv
        let s_120_316: Bits = Bits::new(s_120_315 as u128, 64u16);
        // C s_120_317: lsl s_120_316 s_120_310
        let s_120_317: Bits = s_120_316 << s_120_310;
        // C s_120_318: sub s_120_317 s_120_316
        let s_120_318: Bits = ((s_120_317) - (s_120_316));
        // C s_120_319: and s_120_314 s_120_318
        let s_120_319: Bits = ((s_120_314) & (s_120_318));
        // C s_120_320: lsl s_120_319 s_120_311
        let s_120_320: Bits = s_120_319 << s_120_311;
        // C s_120_321: lsl s_120_318 s_120_311
        let s_120_321: Bits = s_120_318 << s_120_311;
        // C s_120_322: cmpl s_120_321
        let s_120_322: Bits = !s_120_321;
        // D s_120_323: and s_120_312 s_120_322
        let s_120_323: Bits = ((s_120_312) & (s_120_322));
        // D s_120_324: or s_120_323 s_120_320
        let s_120_324: Bits = ((s_120_323) | (s_120_320));
        // D s_120_325: cast reint s_120_324 -> u64
        let s_120_325: u64 = (s_120_324.value() as u64);
        // D s_120_326: call Mk_ICC_IGRPEN1_EL1_Type(s_120_325)
        let s_120_326: ProductType5c790c8ef59cc8b2 = Mk_ICC_IGRPEN1_EL1_Type(
            state,
            tracer,
            s_120_325,
        );
        // D s_120_327: call ICC_IGRPEN1_EL1_write(s_120_326)
        let s_120_327: () = ICC_IGRPEN1_EL1_write(state, tracer, s_120_326);
        // C s_120_328: const #() : ()
        let s_120_328: () = ();
        // S s_120_329: call ICC_IGRPEN1_EL1_read(s_120_328)
        let s_120_329: ProductType5c790c8ef59cc8b2 = ICC_IGRPEN1_EL1_read(
            state,
            tracer,
            s_120_328,
        );
        // C s_120_330: const #0u : u8
        let s_120_330: bool = false;
        // S s_120_331: call _update_ICC_IGRPEN1_EL1_Type_Enable(s_120_329, s_120_330)
        let s_120_331: ProductType5c790c8ef59cc8b2 = u_update_ICC_IGRPEN1_EL1_Type_Enable(
            state,
            tracer,
            s_120_329,
            s_120_330,
        );
        // S s_120_332: call ICC_IGRPEN1_EL1_write(s_120_331)
        let s_120_332: () = ICC_IGRPEN1_EL1_write(state, tracer, s_120_331);
        // C s_120_333: const #20624u : u32
        let s_120_333: u32 = 20624;
        // D s_120_334: read-reg s_120_333:struct
        let s_120_334: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_333 as isize);
            tracer.read_register(s_120_333 as isize, value);
            value
        };
        // C s_120_335: const #20624u : u32
        let s_120_335: u32 = 20624;
        // N s_120_336: write-reg s_120_335 <= s_120_334
        let s_120_336: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_335 as isize, s_120_334);
            tracer.write_register(s_120_335 as isize, s_120_334);
        };
        // C s_120_337: const #16832u : u32
        let s_120_337: u32 = 16832;
        // D s_120_338: read-reg s_120_337:struct
        let s_120_338: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_337 as isize);
            tracer.read_register(s_120_337 as isize, value);
            value
        };
        // C s_120_339: const #16832u : u32
        let s_120_339: u32 = 16832;
        // N s_120_340: write-reg s_120_339 <= s_120_338
        let s_120_340: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_339 as isize, s_120_338);
            tracer.write_register(s_120_339 as isize, s_120_338);
        };
        // C s_120_341: const #16832u : u32
        let s_120_341: u32 = 16832;
        // D s_120_342: read-reg s_120_341:struct
        let s_120_342: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_341 as isize);
            tracer.read_register(s_120_341 as isize, value);
            value
        };
        // C s_120_343: const #16832u : u32
        let s_120_343: u32 = 16832;
        // N s_120_344: write-reg s_120_343 <= s_120_342
        let s_120_344: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_343 as isize, s_120_342);
            tracer.write_register(s_120_343 as isize, s_120_342);
        };
        // C s_120_345: const #16832u : u32
        let s_120_345: u32 = 16832;
        // D s_120_346: read-reg s_120_345:struct
        let s_120_346: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_345 as isize);
            tracer.read_register(s_120_345 as isize, value);
            value
        };
        // C s_120_347: const #16832u : u32
        let s_120_347: u32 = 16832;
        // N s_120_348: write-reg s_120_347 <= s_120_346
        let s_120_348: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_347 as isize, s_120_346);
            tracer.write_register(s_120_347 as isize, s_120_346);
        };
        // C s_120_349: const #16832u : u32
        let s_120_349: u32 = 16832;
        // D s_120_350: read-reg s_120_349:struct
        let s_120_350: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_349 as isize);
            tracer.read_register(s_120_349 as isize, value);
            value
        };
        // C s_120_351: const #16832u : u32
        let s_120_351: u32 = 16832;
        // N s_120_352: write-reg s_120_351 <= s_120_350
        let s_120_352: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_351 as isize, s_120_350);
            tracer.write_register(s_120_351 as isize, s_120_350);
        };
        // C s_120_353: const #0u : u8
        let s_120_353: bool = false;
        // S s_120_354: call Bit(s_120_353)
        let s_120_354: bool = Bit(state, tracer, s_120_353);
        // C s_120_355: const #16832u : u32
        let s_120_355: u32 = 16832;
        // D s_120_356: read-reg s_120_355:struct
        let s_120_356: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_355 as isize);
            tracer.read_register(s_120_355 as isize, value);
            value
        };
        // C s_120_357: const #16832u : u32
        let s_120_357: u32 = 16832;
        // N s_120_358: write-reg s_120_357 <= s_120_356
        let s_120_358: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_357 as isize, s_120_356);
            tracer.write_register(s_120_357 as isize, s_120_356);
        };
        // C s_120_359: const #16832u : u32
        let s_120_359: u32 = 16832;
        // D s_120_360: read-reg s_120_359:struct
        let s_120_360: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_359 as isize);
            tracer.read_register(s_120_359 as isize, value);
            value
        };
        // C s_120_361: const #16832u : u32
        let s_120_361: u32 = 16832;
        // N s_120_362: write-reg s_120_361 <= s_120_360
        let s_120_362: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_361 as isize, s_120_360);
            tracer.write_register(s_120_361 as isize, s_120_360);
        };
        // C s_120_363: const #16832u : u32
        let s_120_363: u32 = 16832;
        // D s_120_364: read-reg s_120_363:struct
        let s_120_364: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_363 as isize);
            tracer.read_register(s_120_363 as isize, value);
            value
        };
        // C s_120_365: const #16832u : u32
        let s_120_365: u32 = 16832;
        // N s_120_366: write-reg s_120_365 <= s_120_364
        let s_120_366: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_365 as isize, s_120_364);
            tracer.write_register(s_120_365 as isize, s_120_364);
        };
        // C s_120_367: const #16832u : u32
        let s_120_367: u32 = 16832;
        // D s_120_368: read-reg s_120_367:struct
        let s_120_368: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_367 as isize);
            tracer.read_register(s_120_367 as isize, value);
            value
        };
        // C s_120_369: const #16832u : u32
        let s_120_369: u32 = 16832;
        // N s_120_370: write-reg s_120_369 <= s_120_368
        let s_120_370: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_369 as isize, s_120_368);
            tracer.write_register(s_120_369 as isize, s_120_368);
        };
        // C s_120_371: const #20216u : u32
        let s_120_371: u32 = 20216;
        // D s_120_372: read-reg s_120_371:struct
        let s_120_372: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_371 as isize);
            tracer.read_register(s_120_371 as isize, value);
            value
        };
        // C s_120_373: const #20216u : u32
        let s_120_373: u32 = 20216;
        // N s_120_374: write-reg s_120_373 <= s_120_372
        let s_120_374: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_373 as isize, s_120_372);
            tracer.write_register(s_120_373 as isize, s_120_372);
        };
        // C s_120_375: const #20216u : u32
        let s_120_375: u32 = 20216;
        // D s_120_376: read-reg s_120_375:struct
        let s_120_376: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_375 as isize);
            tracer.read_register(s_120_375 as isize, value);
            value
        };
        // C s_120_377: const #20216u : u32
        let s_120_377: u32 = 20216;
        // N s_120_378: write-reg s_120_377 <= s_120_376
        let s_120_378: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_377 as isize, s_120_376);
            tracer.write_register(s_120_377 as isize, s_120_376);
        };
        // C s_120_379: const #23176u : u32
        let s_120_379: u32 = 23176;
        // D s_120_380: read-reg s_120_379:struct
        let s_120_380: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_379 as isize);
            tracer.read_register(s_120_379 as isize, value);
            value
        };
        // C s_120_381: const #23176u : u32
        let s_120_381: u32 = 23176;
        // N s_120_382: write-reg s_120_381 <= s_120_380
        let s_120_382: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_381 as isize, s_120_380);
            tracer.write_register(s_120_381 as isize, s_120_380);
        };
        // C s_120_383: const #23176u : u32
        let s_120_383: u32 = 23176;
        // D s_120_384: read-reg s_120_383:struct
        let s_120_384: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_383 as isize);
            tracer.read_register(s_120_383 as isize, value);
            value
        };
        // C s_120_385: const #23176u : u32
        let s_120_385: u32 = 23176;
        // N s_120_386: write-reg s_120_385 <= s_120_384
        let s_120_386: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_385 as isize, s_120_384);
            tracer.write_register(s_120_385 as isize, s_120_384);
        };
        // C s_120_387: const #23176u : u32
        let s_120_387: u32 = 23176;
        // D s_120_388: read-reg s_120_387:struct
        let s_120_388: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_387 as isize);
            tracer.read_register(s_120_387 as isize, value);
            value
        };
        // C s_120_389: const #23176u : u32
        let s_120_389: u32 = 23176;
        // N s_120_390: write-reg s_120_389 <= s_120_388
        let s_120_390: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_389 as isize, s_120_388);
            tracer.write_register(s_120_389 as isize, s_120_388);
        };
        // C s_120_391: const #15864u : u32
        let s_120_391: u32 = 15864;
        // D s_120_392: read-reg s_120_391:struct
        let s_120_392: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_391 as isize);
            tracer.read_register(s_120_391 as isize, value);
            value
        };
        // C s_120_393: const #15864u : u32
        let s_120_393: u32 = 15864;
        // N s_120_394: write-reg s_120_393 <= s_120_392
        let s_120_394: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_393 as isize, s_120_392);
            tracer.write_register(s_120_393 as isize, s_120_392);
        };
        // C s_120_395: const #0u : u8
        let s_120_395: bool = false;
        // S s_120_396: call Bit(s_120_395)
        let s_120_396: bool = Bit(state, tracer, s_120_395);
        // C s_120_397: const #15864u : u32
        let s_120_397: u32 = 15864;
        // D s_120_398: read-reg s_120_397:struct
        let s_120_398: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_397 as isize);
            tracer.read_register(s_120_397 as isize, value);
            value
        };
        // C s_120_399: const #15864u : u32
        let s_120_399: u32 = 15864;
        // N s_120_400: write-reg s_120_399 <= s_120_398
        let s_120_400: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_399 as isize, s_120_398);
            tracer.write_register(s_120_399 as isize, s_120_398);
        };
        // C s_120_401: const #15864u : u32
        let s_120_401: u32 = 15864;
        // D s_120_402: read-reg s_120_401:struct
        let s_120_402: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_401 as isize);
            tracer.read_register(s_120_401 as isize, value);
            value
        };
        // C s_120_403: const #15864u : u32
        let s_120_403: u32 = 15864;
        // N s_120_404: write-reg s_120_403 <= s_120_402
        let s_120_404: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_403 as isize, s_120_402);
            tracer.write_register(s_120_403 as isize, s_120_402);
        };
        // C s_120_405: const #11728u : u32
        let s_120_405: u32 = 11728;
        // D s_120_406: read-reg s_120_405:struct
        let s_120_406: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_405 as isize);
            tracer.read_register(s_120_405 as isize, value);
            value
        };
        // C s_120_407: const #11728u : u32
        let s_120_407: u32 = 11728;
        // N s_120_408: write-reg s_120_407 <= s_120_406
        let s_120_408: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_407 as isize, s_120_406);
            tracer.write_register(s_120_407 as isize, s_120_406);
        };
        // C s_120_409: const #12072u : u32
        let s_120_409: u32 = 12072;
        // D s_120_410: read-reg s_120_409:struct
        let s_120_410: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_409 as isize);
            tracer.read_register(s_120_409 as isize, value);
            value
        };
        // C s_120_411: const #12072u : u32
        let s_120_411: u32 = 12072;
        // N s_120_412: write-reg s_120_411 <= s_120_410
        let s_120_412: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_411 as isize, s_120_410);
            tracer.write_register(s_120_411 as isize, s_120_410);
        };
        // C s_120_413: const #12072u : u32
        let s_120_413: u32 = 12072;
        // D s_120_414: read-reg s_120_413:struct
        let s_120_414: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_413 as isize);
            tracer.read_register(s_120_413 as isize, value);
            value
        };
        // C s_120_415: const #12072u : u32
        let s_120_415: u32 = 12072;
        // N s_120_416: write-reg s_120_415 <= s_120_414
        let s_120_416: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_415 as isize, s_120_414);
            tracer.write_register(s_120_415 as isize, s_120_414);
        };
        // C s_120_417: const #() : ()
        let s_120_417: () = ();
        // S s_120_418: call ICC_SRE_EL1_read(s_120_417)
        let s_120_418: ProductType5c790c8ef59cc8b2 = ICC_SRE_EL1_read(
            state,
            tracer,
            s_120_417,
        );
        // D s_120_419: write-var ga#31491 <= s_120_418
        fn_state.ga_31491 = s_120_418;
        // D s_120_420: read-var ga#31491.0:struct
        let s_120_420: u64 = fn_state.ga_31491._0;
        // C s_120_421: const #61s : i
        let s_120_421: i128 = 61;
        // C s_120_422: const #3s : i
        let s_120_422: i128 = 3;
        // D s_120_423: cast zx s_120_420 -> bv
        let s_120_423: Bits = Bits::new(s_120_420 as u128, 64u16);
        // C s_120_424: const #0u : u61
        let s_120_424: u64 = 0;
        // C s_120_425: cast zx s_120_424 -> bv
        let s_120_425: Bits = Bits::new(s_120_424 as u128, 61u16);
        // C s_120_426: const #1u : u64
        let s_120_426: u64 = 1;
        // C s_120_427: cast zx s_120_426 -> bv
        let s_120_427: Bits = Bits::new(s_120_426 as u128, 64u16);
        // C s_120_428: lsl s_120_427 s_120_421
        let s_120_428: Bits = s_120_427 << s_120_421;
        // C s_120_429: sub s_120_428 s_120_427
        let s_120_429: Bits = ((s_120_428) - (s_120_427));
        // C s_120_430: and s_120_425 s_120_429
        let s_120_430: Bits = ((s_120_425) & (s_120_429));
        // C s_120_431: lsl s_120_430 s_120_422
        let s_120_431: Bits = s_120_430 << s_120_422;
        // C s_120_432: lsl s_120_429 s_120_422
        let s_120_432: Bits = s_120_429 << s_120_422;
        // C s_120_433: cmpl s_120_432
        let s_120_433: Bits = !s_120_432;
        // D s_120_434: and s_120_423 s_120_433
        let s_120_434: Bits = ((s_120_423) & (s_120_433));
        // D s_120_435: or s_120_434 s_120_431
        let s_120_435: Bits = ((s_120_434) | (s_120_431));
        // D s_120_436: cast reint s_120_435 -> u64
        let s_120_436: u64 = (s_120_435.value() as u64);
        // D s_120_437: call Mk_ICC_SRE_EL1_Type(s_120_436)
        let s_120_437: ProductType5c790c8ef59cc8b2 = Mk_ICC_SRE_EL1_Type(
            state,
            tracer,
            s_120_436,
        );
        // D s_120_438: call ICC_SRE_EL1_write(s_120_437)
        let s_120_438: () = ICC_SRE_EL1_write(state, tracer, s_120_437);
        // C s_120_439: const #() : ()
        let s_120_439: () = ();
        // S s_120_440: call ICC_SRE_EL1_read(s_120_439)
        let s_120_440: ProductType5c790c8ef59cc8b2 = ICC_SRE_EL1_read(
            state,
            tracer,
            s_120_439,
        );
        // C s_120_441: const #0u : u8
        let s_120_441: bool = false;
        // S s_120_442: call _update_ICC_SRE_EL1_Type_DIB(s_120_440, s_120_441)
        let s_120_442: ProductType5c790c8ef59cc8b2 = u_update_ICC_SRE_EL1_Type_DIB(
            state,
            tracer,
            s_120_440,
            s_120_441,
        );
        // S s_120_443: call ICC_SRE_EL1_write(s_120_442)
        let s_120_443: () = ICC_SRE_EL1_write(state, tracer, s_120_442);
        // C s_120_444: const #() : ()
        let s_120_444: () = ();
        // S s_120_445: call ICC_SRE_EL1_read(s_120_444)
        let s_120_445: ProductType5c790c8ef59cc8b2 = ICC_SRE_EL1_read(
            state,
            tracer,
            s_120_444,
        );
        // C s_120_446: const #0u : u8
        let s_120_446: bool = false;
        // S s_120_447: call _update_ICC_SRE_EL1_Type_DFB(s_120_445, s_120_446)
        let s_120_447: ProductType5c790c8ef59cc8b2 = u_update_ICC_SRE_EL1_Type_DFB(
            state,
            tracer,
            s_120_445,
            s_120_446,
        );
        // S s_120_448: call ICC_SRE_EL1_write(s_120_447)
        let s_120_448: () = ICC_SRE_EL1_write(state, tracer, s_120_447);
        // C s_120_449: const #() : ()
        let s_120_449: () = ();
        // S s_120_450: call ICC_SRE_EL1_read(s_120_449)
        let s_120_450: ProductType5c790c8ef59cc8b2 = ICC_SRE_EL1_read(
            state,
            tracer,
            s_120_449,
        );
        // C s_120_451: const #0u : u8
        let s_120_451: bool = false;
        // S s_120_452: call _update_ICC_SRE_EL1_Type_SRE(s_120_450, s_120_451)
        let s_120_452: ProductType5c790c8ef59cc8b2 = u_update_ICC_SRE_EL1_Type_SRE(
            state,
            tracer,
            s_120_450,
            s_120_451,
        );
        // S s_120_453: call ICC_SRE_EL1_write(s_120_452)
        let s_120_453: () = ICC_SRE_EL1_write(state, tracer, s_120_452);
        // C s_120_454: const #15568u : u32
        let s_120_454: u32 = 15568;
        // D s_120_455: read-reg s_120_454:struct
        let s_120_455: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_454 as isize);
            tracer.read_register(s_120_454 as isize, value);
            value
        };
        // C s_120_456: const #15568u : u32
        let s_120_456: u32 = 15568;
        // N s_120_457: write-reg s_120_456 <= s_120_455
        let s_120_457: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_456 as isize, s_120_455);
            tracer.write_register(s_120_456 as isize, s_120_455);
        };
        // C s_120_458: const #90688u : u32
        let s_120_458: u32 = 90688;
        // D s_120_459: read-reg s_120_458:struct
        let s_120_459: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_458 as isize);
            tracer.read_register(s_120_458 as isize, value);
            value
        };
        // C s_120_460: const #90688u : u32
        let s_120_460: u32 = 90688;
        // N s_120_461: write-reg s_120_460 <= s_120_459
        let s_120_461: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_460 as isize, s_120_459);
            tracer.write_register(s_120_460 as isize, s_120_459);
        };
        // C s_120_462: const #10048u : u32
        let s_120_462: u32 = 10048;
        // D s_120_463: read-reg s_120_462:struct
        let s_120_463: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_462 as isize);
            tracer.read_register(s_120_462 as isize, value);
            value
        };
        // C s_120_464: const #10048u : u32
        let s_120_464: u32 = 10048;
        // N s_120_465: write-reg s_120_464 <= s_120_463
        let s_120_465: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_464 as isize, s_120_463);
            tracer.write_register(s_120_464 as isize, s_120_463);
        };
        // C s_120_466: const #19008u : u32
        let s_120_466: u32 = 19008;
        // D s_120_467: read-reg s_120_466:struct
        let s_120_467: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_466 as isize);
            tracer.read_register(s_120_466 as isize, value);
            value
        };
        // C s_120_468: const #19008u : u32
        let s_120_468: u32 = 19008;
        // N s_120_469: write-reg s_120_468 <= s_120_467
        let s_120_469: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_468 as isize, s_120_467);
            tracer.write_register(s_120_468 as isize, s_120_467);
        };
        // C s_120_470: const #19008u : u32
        let s_120_470: u32 = 19008;
        // D s_120_471: read-reg s_120_470:struct
        let s_120_471: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_470 as isize);
            tracer.read_register(s_120_470 as isize, value);
            value
        };
        // C s_120_472: const #19008u : u32
        let s_120_472: u32 = 19008;
        // N s_120_473: write-reg s_120_472 <= s_120_471
        let s_120_473: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_472 as isize, s_120_471);
            tracer.write_register(s_120_472 as isize, s_120_471);
        };
        // C s_120_474: const #14384u : u32
        let s_120_474: u32 = 14384;
        // D s_120_475: read-reg s_120_474:struct
        let s_120_475: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_474 as isize);
            tracer.read_register(s_120_474 as isize, value);
            value
        };
        // C s_120_476: const #14384u : u32
        let s_120_476: u32 = 14384;
        // N s_120_477: write-reg s_120_476 <= s_120_475
        let s_120_477: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_476 as isize, s_120_475);
            tracer.write_register(s_120_476 as isize, s_120_475);
        };
        // C s_120_478: const #14384u : u32
        let s_120_478: u32 = 14384;
        // D s_120_479: read-reg s_120_478:struct
        let s_120_479: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_478 as isize);
            tracer.read_register(s_120_478 as isize, value);
            value
        };
        // C s_120_480: const #14384u : u32
        let s_120_480: u32 = 14384;
        // N s_120_481: write-reg s_120_480 <= s_120_479
        let s_120_481: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_480 as isize, s_120_479);
            tracer.write_register(s_120_480 as isize, s_120_479);
        };
        // C s_120_482: const #10440u : u32
        let s_120_482: u32 = 10440;
        // D s_120_483: read-reg s_120_482:struct
        let s_120_483: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_482 as isize);
            tracer.read_register(s_120_482 as isize, value);
            value
        };
        // C s_120_484: const #10440u : u32
        let s_120_484: u32 = 10440;
        // N s_120_485: write-reg s_120_484 <= s_120_483
        let s_120_485: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_484 as isize, s_120_483);
            tracer.write_register(s_120_484 as isize, s_120_483);
        };
        // C s_120_486: const #102584u : u32
        let s_120_486: u32 = 102584;
        // D s_120_487: read-reg s_120_486:struct
        let s_120_487: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_486 as isize);
            tracer.read_register(s_120_486 as isize, value);
            value
        };
        // C s_120_488: const #102584u : u32
        let s_120_488: u32 = 102584;
        // N s_120_489: write-reg s_120_488 <= s_120_487
        let s_120_489: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_488 as isize, s_120_487);
            tracer.write_register(s_120_488 as isize, s_120_487);
        };
        // C s_120_490: const #0u : u8
        let s_120_490: bool = false;
        // S s_120_491: call Bit(s_120_490)
        let s_120_491: bool = Bit(state, tracer, s_120_490);
        // C s_120_492: const #102584u : u32
        let s_120_492: u32 = 102584;
        // D s_120_493: read-reg s_120_492:struct
        let s_120_493: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_492 as isize);
            tracer.read_register(s_120_492 as isize, value);
            value
        };
        // C s_120_494: const #102584u : u32
        let s_120_494: u32 = 102584;
        // N s_120_495: write-reg s_120_494 <= s_120_493
        let s_120_495: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_494 as isize, s_120_493);
            tracer.write_register(s_120_494 as isize, s_120_493);
        };
        // C s_120_496: const #102584u : u32
        let s_120_496: u32 = 102584;
        // D s_120_497: read-reg s_120_496:struct
        let s_120_497: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_496 as isize);
            tracer.read_register(s_120_496 as isize, value);
            value
        };
        // C s_120_498: const #102584u : u32
        let s_120_498: u32 = 102584;
        // N s_120_499: write-reg s_120_498 <= s_120_497
        let s_120_499: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_498 as isize, s_120_497);
            tracer.write_register(s_120_498 as isize, s_120_497);
        };
        // C s_120_500: const #102584u : u32
        let s_120_500: u32 = 102584;
        // D s_120_501: read-reg s_120_500:struct
        let s_120_501: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_500 as isize);
            tracer.read_register(s_120_500 as isize, value);
            value
        };
        // C s_120_502: const #102584u : u32
        let s_120_502: u32 = 102584;
        // N s_120_503: write-reg s_120_502 <= s_120_501
        let s_120_503: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_502 as isize, s_120_501);
            tracer.write_register(s_120_502 as isize, s_120_501);
        };
        // C s_120_504: const #102584u : u32
        let s_120_504: u32 = 102584;
        // D s_120_505: read-reg s_120_504:struct
        let s_120_505: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_504 as isize);
            tracer.read_register(s_120_504 as isize, value);
            value
        };
        // C s_120_506: const #102584u : u32
        let s_120_506: u32 = 102584;
        // N s_120_507: write-reg s_120_506 <= s_120_505
        let s_120_507: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_506 as isize, s_120_505);
            tracer.write_register(s_120_506 as isize, s_120_505);
        };
        // C s_120_508: const #0u : u8
        let s_120_508: bool = false;
        // S s_120_509: call Bit(s_120_508)
        let s_120_509: bool = Bit(state, tracer, s_120_508);
        // C s_120_510: const #102584u : u32
        let s_120_510: u32 = 102584;
        // D s_120_511: read-reg s_120_510:struct
        let s_120_511: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_510 as isize);
            tracer.read_register(s_120_510 as isize, value);
            value
        };
        // C s_120_512: const #102584u : u32
        let s_120_512: u32 = 102584;
        // N s_120_513: write-reg s_120_512 <= s_120_511
        let s_120_513: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_512 as isize, s_120_511);
            tracer.write_register(s_120_512 as isize, s_120_511);
        };
        // C s_120_514: const #23120u : u32
        let s_120_514: u32 = 23120;
        // D s_120_515: read-reg s_120_514:struct
        let s_120_515: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_514 as isize);
            tracer.read_register(s_120_514 as isize, value);
            value
        };
        // C s_120_516: const #23120u : u32
        let s_120_516: u32 = 23120;
        // N s_120_517: write-reg s_120_516 <= s_120_515
        let s_120_517: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_516 as isize, s_120_515);
            tracer.write_register(s_120_516 as isize, s_120_515);
        };
        // C s_120_518: const #23120u : u32
        let s_120_518: u32 = 23120;
        // D s_120_519: read-reg s_120_518:struct
        let s_120_519: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_518 as isize);
            tracer.read_register(s_120_518 as isize, value);
            value
        };
        // C s_120_520: const #23120u : u32
        let s_120_520: u32 = 23120;
        // N s_120_521: write-reg s_120_520 <= s_120_519
        let s_120_521: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_520 as isize, s_120_519);
            tracer.write_register(s_120_520 as isize, s_120_519);
        };
        // C s_120_522: const #13648u : u32
        let s_120_522: u32 = 13648;
        // D s_120_523: read-reg s_120_522:struct
        let s_120_523: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_522 as isize);
            tracer.read_register(s_120_522 as isize, value);
            value
        };
        // C s_120_524: const #13648u : u32
        let s_120_524: u32 = 13648;
        // N s_120_525: write-reg s_120_524 <= s_120_523
        let s_120_525: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_524 as isize, s_120_523);
            tracer.write_register(s_120_524 as isize, s_120_523);
        };
        // C s_120_526: const #15448u : u32
        let s_120_526: u32 = 15448;
        // D s_120_527: read-reg s_120_526:struct
        let s_120_527: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_526 as isize);
            tracer.read_register(s_120_526 as isize, value);
            value
        };
        // C s_120_528: const #15448u : u32
        let s_120_528: u32 = 15448;
        // N s_120_529: write-reg s_120_528 <= s_120_527
        let s_120_529: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_528 as isize, s_120_527);
            tracer.write_register(s_120_528 as isize, s_120_527);
        };
        // C s_120_530: const #0u : u8
        let s_120_530: bool = false;
        // S s_120_531: call Bit(s_120_530)
        let s_120_531: bool = Bit(state, tracer, s_120_530);
        // C s_120_532: const #15448u : u32
        let s_120_532: u32 = 15448;
        // D s_120_533: read-reg s_120_532:struct
        let s_120_533: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_532 as isize);
            tracer.read_register(s_120_532 as isize, value);
            value
        };
        // C s_120_534: const #15448u : u32
        let s_120_534: u32 = 15448;
        // N s_120_535: write-reg s_120_534 <= s_120_533
        let s_120_535: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_534 as isize, s_120_533);
            tracer.write_register(s_120_534 as isize, s_120_533);
        };
        // C s_120_536: const #19136u : u32
        let s_120_536: u32 = 19136;
        // D s_120_537: read-reg s_120_536:struct
        let s_120_537: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_536 as isize);
            tracer.read_register(s_120_536 as isize, value);
            value
        };
        // C s_120_538: const #19136u : u32
        let s_120_538: u32 = 19136;
        // N s_120_539: write-reg s_120_538 <= s_120_537
        let s_120_539: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_538 as isize, s_120_537);
            tracer.write_register(s_120_538 as isize, s_120_537);
        };
        // C s_120_540: const #() : ()
        let s_120_540: () = ();
        // S s_120_541: call ICC_CTLR_EL1_read(s_120_540)
        let s_120_541: ProductType5c790c8ef59cc8b2 = ICC_CTLR_EL1_read(
            state,
            tracer,
            s_120_540,
        );
        // D s_120_542: write-var ga#31544 <= s_120_541
        fn_state.ga_31544 = s_120_541;
        // D s_120_543: read-var ga#31544.0:struct
        let s_120_543: u64 = fn_state.ga_31544._0;
        // C s_120_544: const #44s : i
        let s_120_544: i128 = 44;
        // C s_120_545: const #20s : i
        let s_120_545: i128 = 20;
        // D s_120_546: cast zx s_120_543 -> bv
        let s_120_546: Bits = Bits::new(s_120_543 as u128, 64u16);
        // C s_120_547: const #0u : u44
        let s_120_547: u64 = 0;
        // C s_120_548: cast zx s_120_547 -> bv
        let s_120_548: Bits = Bits::new(s_120_547 as u128, 44u16);
        // C s_120_549: const #1u : u64
        let s_120_549: u64 = 1;
        // C s_120_550: cast zx s_120_549 -> bv
        let s_120_550: Bits = Bits::new(s_120_549 as u128, 64u16);
        // C s_120_551: lsl s_120_550 s_120_544
        let s_120_551: Bits = s_120_550 << s_120_544;
        // C s_120_552: sub s_120_551 s_120_550
        let s_120_552: Bits = ((s_120_551) - (s_120_550));
        // C s_120_553: and s_120_548 s_120_552
        let s_120_553: Bits = ((s_120_548) & (s_120_552));
        // C s_120_554: lsl s_120_553 s_120_545
        let s_120_554: Bits = s_120_553 << s_120_545;
        // C s_120_555: lsl s_120_552 s_120_545
        let s_120_555: Bits = s_120_552 << s_120_545;
        // C s_120_556: cmpl s_120_555
        let s_120_556: Bits = !s_120_555;
        // D s_120_557: and s_120_546 s_120_556
        let s_120_557: Bits = ((s_120_546) & (s_120_556));
        // D s_120_558: or s_120_557 s_120_554
        let s_120_558: Bits = ((s_120_557) | (s_120_554));
        // D s_120_559: cast reint s_120_558 -> u64
        let s_120_559: u64 = (s_120_558.value() as u64);
        // D s_120_560: call Mk_ICC_CTLR_EL1_Type(s_120_559)
        let s_120_560: ProductType5c790c8ef59cc8b2 = Mk_ICC_CTLR_EL1_Type(
            state,
            tracer,
            s_120_559,
        );
        // D s_120_561: call ICC_CTLR_EL1_write(s_120_560)
        let s_120_561: () = ICC_CTLR_EL1_write(state, tracer, s_120_560);
        // C s_120_562: const #() : ()
        let s_120_562: () = ();
        // S s_120_563: call ICC_CTLR_EL1_read(s_120_562)
        let s_120_563: ProductType5c790c8ef59cc8b2 = ICC_CTLR_EL1_read(
            state,
            tracer,
            s_120_562,
        );
        // D s_120_564: write-var ga#31548 <= s_120_563
        fn_state.ga_31548 = s_120_563;
        // D s_120_565: read-var ga#31548.0:struct
        let s_120_565: u64 = fn_state.ga_31548._0;
        // C s_120_566: const #2s : i
        let s_120_566: i128 = 2;
        // C s_120_567: const #16s : i
        let s_120_567: i128 = 16;
        // D s_120_568: cast zx s_120_565 -> bv
        let s_120_568: Bits = Bits::new(s_120_565 as u128, 64u16);
        // C s_120_569: const #0u : u8
        let s_120_569: u8 = 0;
        // C s_120_570: cast zx s_120_569 -> bv
        let s_120_570: Bits = Bits::new(s_120_569 as u128, 2u16);
        // C s_120_571: const #1u : u64
        let s_120_571: u64 = 1;
        // C s_120_572: cast zx s_120_571 -> bv
        let s_120_572: Bits = Bits::new(s_120_571 as u128, 64u16);
        // C s_120_573: lsl s_120_572 s_120_566
        let s_120_573: Bits = s_120_572 << s_120_566;
        // C s_120_574: sub s_120_573 s_120_572
        let s_120_574: Bits = ((s_120_573) - (s_120_572));
        // C s_120_575: and s_120_570 s_120_574
        let s_120_575: Bits = ((s_120_570) & (s_120_574));
        // C s_120_576: lsl s_120_575 s_120_567
        let s_120_576: Bits = s_120_575 << s_120_567;
        // C s_120_577: lsl s_120_574 s_120_567
        let s_120_577: Bits = s_120_574 << s_120_567;
        // C s_120_578: cmpl s_120_577
        let s_120_578: Bits = !s_120_577;
        // D s_120_579: and s_120_568 s_120_578
        let s_120_579: Bits = ((s_120_568) & (s_120_578));
        // D s_120_580: or s_120_579 s_120_576
        let s_120_580: Bits = ((s_120_579) | (s_120_576));
        // D s_120_581: cast reint s_120_580 -> u64
        let s_120_581: u64 = (s_120_580.value() as u64);
        // D s_120_582: call Mk_ICC_CTLR_EL1_Type(s_120_581)
        let s_120_582: ProductType5c790c8ef59cc8b2 = Mk_ICC_CTLR_EL1_Type(
            state,
            tracer,
            s_120_581,
        );
        // D s_120_583: call ICC_CTLR_EL1_write(s_120_582)
        let s_120_583: () = ICC_CTLR_EL1_write(state, tracer, s_120_582);
        // C s_120_584: const #() : ()
        let s_120_584: () = ();
        // S s_120_585: call ICC_CTLR_EL1_read(s_120_584)
        let s_120_585: ProductType5c790c8ef59cc8b2 = ICC_CTLR_EL1_read(
            state,
            tracer,
            s_120_584,
        );
        // D s_120_586: write-var ga#31552 <= s_120_585
        fn_state.ga_31552 = s_120_585;
        // D s_120_587: read-var ga#31552.0:struct
        let s_120_587: u64 = fn_state.ga_31552._0;
        // C s_120_588: const #1s : i
        let s_120_588: i128 = 1;
        // C s_120_589: const #7s : i
        let s_120_589: i128 = 7;
        // D s_120_590: cast zx s_120_587 -> bv
        let s_120_590: Bits = Bits::new(s_120_587 as u128, 64u16);
        // C s_120_591: const #0u : u8
        let s_120_591: bool = false;
        // C s_120_592: cast zx s_120_591 -> bv
        let s_120_592: Bits = Bits::new(s_120_591 as u128, 1u16);
        // C s_120_593: const #1u : u64
        let s_120_593: u64 = 1;
        // C s_120_594: cast zx s_120_593 -> bv
        let s_120_594: Bits = Bits::new(s_120_593 as u128, 64u16);
        // C s_120_595: lsl s_120_594 s_120_588
        let s_120_595: Bits = s_120_594 << s_120_588;
        // C s_120_596: sub s_120_595 s_120_594
        let s_120_596: Bits = ((s_120_595) - (s_120_594));
        // C s_120_597: and s_120_592 s_120_596
        let s_120_597: Bits = ((s_120_592) & (s_120_596));
        // C s_120_598: lsl s_120_597 s_120_589
        let s_120_598: Bits = s_120_597 << s_120_589;
        // C s_120_599: lsl s_120_596 s_120_589
        let s_120_599: Bits = s_120_596 << s_120_589;
        // C s_120_600: cmpl s_120_599
        let s_120_600: Bits = !s_120_599;
        // D s_120_601: and s_120_590 s_120_600
        let s_120_601: Bits = ((s_120_590) & (s_120_600));
        // D s_120_602: or s_120_601 s_120_598
        let s_120_602: Bits = ((s_120_601) | (s_120_598));
        // D s_120_603: cast reint s_120_602 -> u64
        let s_120_603: u64 = (s_120_602.value() as u64);
        // D s_120_604: call Mk_ICC_CTLR_EL1_Type(s_120_603)
        let s_120_604: ProductType5c790c8ef59cc8b2 = Mk_ICC_CTLR_EL1_Type(
            state,
            tracer,
            s_120_603,
        );
        // D s_120_605: call ICC_CTLR_EL1_write(s_120_604)
        let s_120_605: () = ICC_CTLR_EL1_write(state, tracer, s_120_604);
        // C s_120_606: const #() : ()
        let s_120_606: () = ();
        // S s_120_607: call ICC_CTLR_EL1_read(s_120_606)
        let s_120_607: ProductType5c790c8ef59cc8b2 = ICC_CTLR_EL1_read(
            state,
            tracer,
            s_120_606,
        );
        // D s_120_608: write-var ga#31556 <= s_120_607
        fn_state.ga_31556 = s_120_607;
        // D s_120_609: read-var ga#31556.0:struct
        let s_120_609: u64 = fn_state.ga_31556._0;
        // C s_120_610: const #4s : i
        let s_120_610: i128 = 4;
        // C s_120_611: const #2s : i
        let s_120_611: i128 = 2;
        // D s_120_612: cast zx s_120_609 -> bv
        let s_120_612: Bits = Bits::new(s_120_609 as u128, 64u16);
        // C s_120_613: const #0u : u8
        let s_120_613: u8 = 0;
        // C s_120_614: cast zx s_120_613 -> bv
        let s_120_614: Bits = Bits::new(s_120_613 as u128, 4u16);
        // C s_120_615: const #1u : u64
        let s_120_615: u64 = 1;
        // C s_120_616: cast zx s_120_615 -> bv
        let s_120_616: Bits = Bits::new(s_120_615 as u128, 64u16);
        // C s_120_617: lsl s_120_616 s_120_610
        let s_120_617: Bits = s_120_616 << s_120_610;
        // C s_120_618: sub s_120_617 s_120_616
        let s_120_618: Bits = ((s_120_617) - (s_120_616));
        // C s_120_619: and s_120_614 s_120_618
        let s_120_619: Bits = ((s_120_614) & (s_120_618));
        // C s_120_620: lsl s_120_619 s_120_611
        let s_120_620: Bits = s_120_619 << s_120_611;
        // C s_120_621: lsl s_120_618 s_120_611
        let s_120_621: Bits = s_120_618 << s_120_611;
        // C s_120_622: cmpl s_120_621
        let s_120_622: Bits = !s_120_621;
        // D s_120_623: and s_120_612 s_120_622
        let s_120_623: Bits = ((s_120_612) & (s_120_622));
        // D s_120_624: or s_120_623 s_120_620
        let s_120_624: Bits = ((s_120_623) | (s_120_620));
        // D s_120_625: cast reint s_120_624 -> u64
        let s_120_625: u64 = (s_120_624.value() as u64);
        // D s_120_626: call Mk_ICC_CTLR_EL1_Type(s_120_625)
        let s_120_626: ProductType5c790c8ef59cc8b2 = Mk_ICC_CTLR_EL1_Type(
            state,
            tracer,
            s_120_625,
        );
        // D s_120_627: call ICC_CTLR_EL1_write(s_120_626)
        let s_120_627: () = ICC_CTLR_EL1_write(state, tracer, s_120_626);
        // C s_120_628: const #90408u : u32
        let s_120_628: u32 = 90408;
        // D s_120_629: read-reg s_120_628:struct
        let s_120_629: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_628 as isize);
            tracer.read_register(s_120_628 as isize, value);
            value
        };
        // C s_120_630: const #90408u : u32
        let s_120_630: u32 = 90408;
        // N s_120_631: write-reg s_120_630 <= s_120_629
        let s_120_631: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_630 as isize, s_120_629);
            tracer.write_register(s_120_630 as isize, s_120_629);
        };
        // C s_120_632: const #90408u : u32
        let s_120_632: u32 = 90408;
        // D s_120_633: read-reg s_120_632:struct
        let s_120_633: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_632 as isize);
            tracer.read_register(s_120_632 as isize, value);
            value
        };
        // C s_120_634: const #90408u : u32
        let s_120_634: u32 = 90408;
        // N s_120_635: write-reg s_120_634 <= s_120_633
        let s_120_635: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_634 as isize, s_120_633);
            tracer.write_register(s_120_634 as isize, s_120_633);
        };
        // C s_120_636: const #90832u : u32
        let s_120_636: u32 = 90832;
        // D s_120_637: read-reg s_120_636:struct
        let s_120_637: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_636 as isize);
            tracer.read_register(s_120_636 as isize, value);
            value
        };
        // C s_120_638: const #90832u : u32
        let s_120_638: u32 = 90832;
        // N s_120_639: write-reg s_120_638 <= s_120_637
        let s_120_639: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_638 as isize, s_120_637);
            tracer.write_register(s_120_638 as isize, s_120_637);
        };
        // C s_120_640: const #0s : i
        let s_120_640: i128 = 0;
        // C s_120_641: const #104840u : u32
        let s_120_641: u32 = 104840;
        // D s_120_642: read-reg s_120_641:u64
        let s_120_642: u64 = {
            let value = state.read_register::<u64>(s_120_641 as isize);
            tracer.read_register(s_120_641 as isize, value);
            value
        };
        // D s_120_643: cast zx s_120_642 -> bv
        let s_120_643: Bits = Bits::new(s_120_642 as u128, 64u16);
        // C s_120_644: const #0u : u64
        let s_120_644: u64 = 0;
        // C s_120_645: cast zx s_120_644 -> bv
        let s_120_645: Bits = Bits::new(s_120_644 as u128, 64u16);
        // C s_120_646: const #63s : i
        let s_120_646: i128 = 63;
        // C s_120_647: const #1u : u64
        let s_120_647: u64 = 1;
        // C s_120_648: cast zx s_120_647 -> bv
        let s_120_648: Bits = Bits::new(s_120_647 as u128, 64u16);
        // C s_120_649: lsl s_120_648 s_120_646
        let s_120_649: Bits = s_120_648 << s_120_646;
        // C s_120_650: sub s_120_649 s_120_648
        let s_120_650: Bits = ((s_120_649) - (s_120_648));
        // C s_120_651: and s_120_645 s_120_650
        let s_120_651: Bits = ((s_120_645) & (s_120_650));
        // C s_120_652: lsl s_120_651 s_120_640
        let s_120_652: Bits = s_120_651 << s_120_640;
        // C s_120_653: lsl s_120_650 s_120_640
        let s_120_653: Bits = s_120_650 << s_120_640;
        // C s_120_654: cmpl s_120_653
        let s_120_654: Bits = !s_120_653;
        // D s_120_655: and s_120_643 s_120_654
        let s_120_655: Bits = ((s_120_643) & (s_120_654));
        // D s_120_656: or s_120_655 s_120_652
        let s_120_656: Bits = ((s_120_655) | (s_120_652));
        // D s_120_657: cast reint s_120_656 -> u64
        let s_120_657: u64 = (s_120_656.value() as u64);
        // C s_120_658: const #104840u : u32
        let s_120_658: u32 = 104840;
        // N s_120_659: write-reg s_120_658 <= s_120_657
        let s_120_659: () = {
            state.write_register::<u64>(s_120_658 as isize, s_120_657);
            tracer.write_register(s_120_658 as isize, s_120_657);
        };
        // C s_120_660: const #21064u : u32
        let s_120_660: u32 = 21064;
        // D s_120_661: read-reg s_120_660:struct
        let s_120_661: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_660 as isize);
            tracer.read_register(s_120_660 as isize, value);
            value
        };
        // C s_120_662: const #21064u : u32
        let s_120_662: u32 = 21064;
        // N s_120_663: write-reg s_120_662 <= s_120_661
        let s_120_663: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_662 as isize, s_120_661);
            tracer.write_register(s_120_662 as isize, s_120_661);
        };
        // C s_120_664: const #91016u : u32
        let s_120_664: u32 = 91016;
        // D s_120_665: read-reg s_120_664:struct
        let s_120_665: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_664 as isize);
            tracer.read_register(s_120_664 as isize, value);
            value
        };
        // C s_120_666: const #91016u : u32
        let s_120_666: u32 = 91016;
        // N s_120_667: write-reg s_120_666 <= s_120_665
        let s_120_667: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_666 as isize, s_120_665);
            tracer.write_register(s_120_666 as isize, s_120_665);
        };
        // C s_120_668: const #91016u : u32
        let s_120_668: u32 = 91016;
        // D s_120_669: read-reg s_120_668:struct
        let s_120_669: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_668 as isize);
            tracer.read_register(s_120_668 as isize, value);
            value
        };
        // C s_120_670: const #91016u : u32
        let s_120_670: u32 = 91016;
        // N s_120_671: write-reg s_120_670 <= s_120_669
        let s_120_671: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_670 as isize, s_120_669);
            tracer.write_register(s_120_670 as isize, s_120_669);
        };
        // C s_120_672: const #11040u : u32
        let s_120_672: u32 = 11040;
        // D s_120_673: read-reg s_120_672:struct
        let s_120_673: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_672 as isize);
            tracer.read_register(s_120_672 as isize, value);
            value
        };
        // C s_120_674: const #11040u : u32
        let s_120_674: u32 = 11040;
        // N s_120_675: write-reg s_120_674 <= s_120_673
        let s_120_675: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_674 as isize, s_120_673);
            tracer.write_register(s_120_674 as isize, s_120_673);
        };
        // C s_120_676: const #11040u : u32
        let s_120_676: u32 = 11040;
        // D s_120_677: read-reg s_120_676:struct
        let s_120_677: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_676 as isize);
            tracer.read_register(s_120_676 as isize, value);
            value
        };
        // C s_120_678: const #11040u : u32
        let s_120_678: u32 = 11040;
        // N s_120_679: write-reg s_120_678 <= s_120_677
        let s_120_679: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_678 as isize, s_120_677);
            tracer.write_register(s_120_678 as isize, s_120_677);
        };
        // C s_120_680: const #11040u : u32
        let s_120_680: u32 = 11040;
        // D s_120_681: read-reg s_120_680:struct
        let s_120_681: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_680 as isize);
            tracer.read_register(s_120_680 as isize, value);
            value
        };
        // C s_120_682: const #11040u : u32
        let s_120_682: u32 = 11040;
        // N s_120_683: write-reg s_120_682 <= s_120_681
        let s_120_683: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_682 as isize, s_120_681);
            tracer.write_register(s_120_682 as isize, s_120_681);
        };
        // C s_120_684: const #11040u : u32
        let s_120_684: u32 = 11040;
        // D s_120_685: read-reg s_120_684:struct
        let s_120_685: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_684 as isize);
            tracer.read_register(s_120_684 as isize, value);
            value
        };
        // C s_120_686: const #11040u : u32
        let s_120_686: u32 = 11040;
        // N s_120_687: write-reg s_120_686 <= s_120_685
        let s_120_687: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_686 as isize, s_120_685);
            tracer.write_register(s_120_686 as isize, s_120_685);
        };
        // C s_120_688: const #11040u : u32
        let s_120_688: u32 = 11040;
        // D s_120_689: read-reg s_120_688:struct
        let s_120_689: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_688 as isize);
            tracer.read_register(s_120_688 as isize, value);
            value
        };
        // C s_120_690: const #11040u : u32
        let s_120_690: u32 = 11040;
        // N s_120_691: write-reg s_120_690 <= s_120_689
        let s_120_691: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_690 as isize, s_120_689);
            tracer.write_register(s_120_690 as isize, s_120_689);
        };
        // C s_120_692: const #11040u : u32
        let s_120_692: u32 = 11040;
        // D s_120_693: read-reg s_120_692:struct
        let s_120_693: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_692 as isize);
            tracer.read_register(s_120_692 as isize, value);
            value
        };
        // C s_120_694: const #11040u : u32
        let s_120_694: u32 = 11040;
        // N s_120_695: write-reg s_120_694 <= s_120_693
        let s_120_695: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_694 as isize, s_120_693);
            tracer.write_register(s_120_694 as isize, s_120_693);
        };
        // C s_120_696: const #11040u : u32
        let s_120_696: u32 = 11040;
        // D s_120_697: read-reg s_120_696:struct
        let s_120_697: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_696 as isize);
            tracer.read_register(s_120_696 as isize, value);
            value
        };
        // C s_120_698: const #11040u : u32
        let s_120_698: u32 = 11040;
        // N s_120_699: write-reg s_120_698 <= s_120_697
        let s_120_699: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_698 as isize, s_120_697);
            tracer.write_register(s_120_698 as isize, s_120_697);
        };
        // C s_120_700: const #11040u : u32
        let s_120_700: u32 = 11040;
        // D s_120_701: read-reg s_120_700:struct
        let s_120_701: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_700 as isize);
            tracer.read_register(s_120_700 as isize, value);
            value
        };
        // C s_120_702: const #11040u : u32
        let s_120_702: u32 = 11040;
        // N s_120_703: write-reg s_120_702 <= s_120_701
        let s_120_703: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_702 as isize, s_120_701);
            tracer.write_register(s_120_702 as isize, s_120_701);
        };
        // C s_120_704: const #11040u : u32
        let s_120_704: u32 = 11040;
        // D s_120_705: read-reg s_120_704:struct
        let s_120_705: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_704 as isize);
            tracer.read_register(s_120_704 as isize, value);
            value
        };
        // C s_120_706: const #11040u : u32
        let s_120_706: u32 = 11040;
        // N s_120_707: write-reg s_120_706 <= s_120_705
        let s_120_707: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_706 as isize, s_120_705);
            tracer.write_register(s_120_706 as isize, s_120_705);
        };
        // C s_120_708: const #22896u : u32
        let s_120_708: u32 = 22896;
        // D s_120_709: read-reg s_120_708:struct
        let s_120_709: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_708 as isize);
            tracer.read_register(s_120_708 as isize, value);
            value
        };
        // C s_120_710: const #22896u : u32
        let s_120_710: u32 = 22896;
        // N s_120_711: write-reg s_120_710 <= s_120_709
        let s_120_711: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_710 as isize, s_120_709);
            tracer.write_register(s_120_710 as isize, s_120_709);
        };
        // C s_120_712: const #15392u : u32
        let s_120_712: u32 = 15392;
        // D s_120_713: read-reg s_120_712:struct
        let s_120_713: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_712 as isize);
            tracer.read_register(s_120_712 as isize, value);
            value
        };
        // C s_120_714: const #15392u : u32
        let s_120_714: u32 = 15392;
        // N s_120_715: write-reg s_120_714 <= s_120_713
        let s_120_715: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_714 as isize, s_120_713);
            tracer.write_register(s_120_714 as isize, s_120_713);
        };
        // C s_120_716: const #20008u : u32
        let s_120_716: u32 = 20008;
        // D s_120_717: read-reg s_120_716:struct
        let s_120_717: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_716 as isize);
            tracer.read_register(s_120_716 as isize, value);
            value
        };
        // C s_120_718: const #20008u : u32
        let s_120_718: u32 = 20008;
        // N s_120_719: write-reg s_120_718 <= s_120_717
        let s_120_719: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_718 as isize, s_120_717);
            tracer.write_register(s_120_718 as isize, s_120_717);
        };
        // C s_120_720: const #15064u : u32
        let s_120_720: u32 = 15064;
        // D s_120_721: read-reg s_120_720:struct
        let s_120_721: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_720 as isize);
            tracer.read_register(s_120_720 as isize, value);
            value
        };
        // C s_120_722: const #15064u : u32
        let s_120_722: u32 = 15064;
        // N s_120_723: write-reg s_120_722 <= s_120_721
        let s_120_723: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_722 as isize, s_120_721);
            tracer.write_register(s_120_722 as isize, s_120_721);
        };
        // C s_120_724: const #100280u : u32
        let s_120_724: u32 = 100280;
        // D s_120_725: read-reg s_120_724:struct
        let s_120_725: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_724 as isize);
            tracer.read_register(s_120_724 as isize, value);
            value
        };
        // C s_120_726: const #100280u : u32
        let s_120_726: u32 = 100280;
        // N s_120_727: write-reg s_120_726 <= s_120_725
        let s_120_727: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_726 as isize, s_120_725);
            tracer.write_register(s_120_726 as isize, s_120_725);
        };
        // C s_120_728: const #100280u : u32
        let s_120_728: u32 = 100280;
        // D s_120_729: read-reg s_120_728:struct
        let s_120_729: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_728 as isize);
            tracer.read_register(s_120_728 as isize, value);
            value
        };
        // C s_120_730: const #100280u : u32
        let s_120_730: u32 = 100280;
        // N s_120_731: write-reg s_120_730 <= s_120_729
        let s_120_731: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_730 as isize, s_120_729);
            tracer.write_register(s_120_730 as isize, s_120_729);
        };
        // C s_120_732: const #100280u : u32
        let s_120_732: u32 = 100280;
        // D s_120_733: read-reg s_120_732:struct
        let s_120_733: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_732 as isize);
            tracer.read_register(s_120_732 as isize, value);
            value
        };
        // C s_120_734: const #100280u : u32
        let s_120_734: u32 = 100280;
        // N s_120_735: write-reg s_120_734 <= s_120_733
        let s_120_735: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_734 as isize, s_120_733);
            tracer.write_register(s_120_734 as isize, s_120_733);
        };
        // C s_120_736: const #15736u : u32
        let s_120_736: u32 = 15736;
        // D s_120_737: read-reg s_120_736:struct
        let s_120_737: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_736 as isize);
            tracer.read_register(s_120_736 as isize, value);
            value
        };
        // C s_120_738: const #15736u : u32
        let s_120_738: u32 = 15736;
        // N s_120_739: write-reg s_120_738 <= s_120_737
        let s_120_739: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_738 as isize, s_120_737);
            tracer.write_register(s_120_738 as isize, s_120_737);
        };
        // C s_120_740: const #0u : u8
        let s_120_740: bool = false;
        // S s_120_741: call Bit(s_120_740)
        let s_120_741: bool = Bit(state, tracer, s_120_740);
        // C s_120_742: const #15736u : u32
        let s_120_742: u32 = 15736;
        // D s_120_743: read-reg s_120_742:struct
        let s_120_743: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_742 as isize);
            tracer.read_register(s_120_742 as isize, value);
            value
        };
        // C s_120_744: const #15736u : u32
        let s_120_744: u32 = 15736;
        // N s_120_745: write-reg s_120_744 <= s_120_743
        let s_120_745: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_744 as isize, s_120_743);
            tracer.write_register(s_120_744 as isize, s_120_743);
        };
        // C s_120_746: const #15736u : u32
        let s_120_746: u32 = 15736;
        // D s_120_747: read-reg s_120_746:struct
        let s_120_747: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_746 as isize);
            tracer.read_register(s_120_746 as isize, value);
            value
        };
        // C s_120_748: const #15736u : u32
        let s_120_748: u32 = 15736;
        // N s_120_749: write-reg s_120_748 <= s_120_747
        let s_120_749: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_748 as isize, s_120_747);
            tracer.write_register(s_120_748 as isize, s_120_747);
        };
        // C s_120_750: const #15736u : u32
        let s_120_750: u32 = 15736;
        // D s_120_751: read-reg s_120_750:struct
        let s_120_751: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_750 as isize);
            tracer.read_register(s_120_750 as isize, value);
            value
        };
        // C s_120_752: const #15736u : u32
        let s_120_752: u32 = 15736;
        // N s_120_753: write-reg s_120_752 <= s_120_751
        let s_120_753: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_752 as isize, s_120_751);
            tracer.write_register(s_120_752 as isize, s_120_751);
        };
        // C s_120_754: const #15736u : u32
        let s_120_754: u32 = 15736;
        // D s_120_755: read-reg s_120_754:struct
        let s_120_755: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_754 as isize);
            tracer.read_register(s_120_754 as isize, value);
            value
        };
        // C s_120_756: const #15736u : u32
        let s_120_756: u32 = 15736;
        // N s_120_757: write-reg s_120_756 <= s_120_755
        let s_120_757: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_756 as isize, s_120_755);
            tracer.write_register(s_120_756 as isize, s_120_755);
        };
        // C s_120_758: const #0u : u8
        let s_120_758: bool = false;
        // S s_120_759: call Bit(s_120_758)
        let s_120_759: bool = Bit(state, tracer, s_120_758);
        // C s_120_760: const #15736u : u32
        let s_120_760: u32 = 15736;
        // D s_120_761: read-reg s_120_760:struct
        let s_120_761: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_760 as isize);
            tracer.read_register(s_120_760 as isize, value);
            value
        };
        // C s_120_762: const #15736u : u32
        let s_120_762: u32 = 15736;
        // N s_120_763: write-reg s_120_762 <= s_120_761
        let s_120_763: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_762 as isize, s_120_761);
            tracer.write_register(s_120_762 as isize, s_120_761);
        };
        // C s_120_764: const #22392u : u32
        let s_120_764: u32 = 22392;
        // D s_120_765: read-reg s_120_764:struct
        let s_120_765: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_764 as isize);
            tracer.read_register(s_120_764 as isize, value);
            value
        };
        // C s_120_766: const #22392u : u32
        let s_120_766: u32 = 22392;
        // N s_120_767: write-reg s_120_766 <= s_120_765
        let s_120_767: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_766 as isize, s_120_765);
            tracer.write_register(s_120_766 as isize, s_120_765);
        };
        // C s_120_768: const #0u : u8
        let s_120_768: bool = false;
        // S s_120_769: call Bit(s_120_768)
        let s_120_769: bool = Bit(state, tracer, s_120_768);
        // C s_120_770: const #22392u : u32
        let s_120_770: u32 = 22392;
        // D s_120_771: read-reg s_120_770:struct
        let s_120_771: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_770 as isize);
            tracer.read_register(s_120_770 as isize, value);
            value
        };
        // C s_120_772: const #22392u : u32
        let s_120_772: u32 = 22392;
        // N s_120_773: write-reg s_120_772 <= s_120_771
        let s_120_773: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_772 as isize, s_120_771);
            tracer.write_register(s_120_772 as isize, s_120_771);
        };
        // C s_120_774: const #0u : u8
        let s_120_774: bool = false;
        // S s_120_775: call Bit(s_120_774)
        let s_120_775: bool = Bit(state, tracer, s_120_774);
        // C s_120_776: const #22392u : u32
        let s_120_776: u32 = 22392;
        // D s_120_777: read-reg s_120_776:struct
        let s_120_777: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_776 as isize);
            tracer.read_register(s_120_776 as isize, value);
            value
        };
        // C s_120_778: const #22392u : u32
        let s_120_778: u32 = 22392;
        // N s_120_779: write-reg s_120_778 <= s_120_777
        let s_120_779: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_778 as isize, s_120_777);
            tracer.write_register(s_120_778 as isize, s_120_777);
        };
        // C s_120_780: const #13568u : u32
        let s_120_780: u32 = 13568;
        // D s_120_781: read-reg s_120_780:struct
        let s_120_781: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_780 as isize);
            tracer.read_register(s_120_780 as isize, value);
            value
        };
        // C s_120_782: const #13568u : u32
        let s_120_782: u32 = 13568;
        // N s_120_783: write-reg s_120_782 <= s_120_781
        let s_120_783: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_782 as isize, s_120_781);
            tracer.write_register(s_120_782 as isize, s_120_781);
        };
        // C s_120_784: const #11720u : u32
        let s_120_784: u32 = 11720;
        // D s_120_785: read-reg s_120_784:struct
        let s_120_785: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_120_784 as isize);
            tracer.read_register(s_120_784 as isize, value);
            value
        };
        // C s_120_786: const #11720u : u32
        let s_120_786: u32 = 11720;
        // N s_120_787: write-reg s_120_786 <= s_120_785
        let s_120_787: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_120_786 as isize, s_120_785);
            tracer.write_register(s_120_786 as isize, s_120_785);
        };
        // D s_120_788: read-var cold:u8
        let s_120_788: bool = fn_state.cold;
        // D s_120_789: not s_120_788
        let s_120_789: bool = !s_120_788;
        // N s_120_790: branch s_120_789 b1095 b121
        if s_120_789 {
            return block_1095(state, tracer, fn_state);
        } else {
            return block_121(state, tracer, fn_state);
        };
    }
    fn block_121<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_121_0: const #0u : u8
        let s_121_0: bool = false;
        // D s_121_1: write-var gs#38973 <= s_121_0
        fn_state.gs_38973 = s_121_0;
        // N s_121_2: jump b122
        return block_122(state, tracer, fn_state);
    }
    fn block_122<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_122_0: read-var gs#38973:u8
        let s_122_0: bool = fn_state.gs_38973;
        // N s_122_1: branch s_122_0 b1094 b123
        if s_122_0 {
            return block_1094(state, tracer, fn_state);
        } else {
            return block_123(state, tracer, fn_state);
        };
    }
    fn block_123<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_123_0: const #0u : u8
        let s_123_0: bool = false;
        // D s_123_1: write-var gs#38974 <= s_123_0
        fn_state.gs_38974 = s_123_0;
        // N s_123_2: jump b124
        return block_124(state, tracer, fn_state);
    }
    fn block_124<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_124_0: read-var gs#38974:u8
        let s_124_0: bool = fn_state.gs_38974;
        // N s_124_1: branch s_124_0 b1093 b125
        if s_124_0 {
            return block_1093(state, tracer, fn_state);
        } else {
            return block_125(state, tracer, fn_state);
        };
    }
    fn block_125<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_125_0: const #1s : i64
        let s_125_0: i64 = 1;
        // C s_125_1: cast zx s_125_0 -> i
        let s_125_1: i128 = (i128::try_from(s_125_0).unwrap());
        // S s_125_2: call __UNKNOWN_bits(s_125_1)
        let s_125_2: Bits = u__UNKNOWN_bits(state, tracer, s_125_1);
        // C s_125_3: const #11720u : u32
        let s_125_3: u32 = 11720;
        // D s_125_4: read-reg s_125_3:struct
        let s_125_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_125_3 as isize);
            tracer.read_register(s_125_3 as isize, value);
            value
        };
        // C s_125_5: const #11720u : u32
        let s_125_5: u32 = 11720;
        // N s_125_6: write-reg s_125_5 <= s_125_4
        let s_125_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_125_5 as isize, s_125_4);
            tracer.write_register(s_125_5 as isize, s_125_4);
        };
        // N s_125_7: jump b126
        return block_126(state, tracer, fn_state);
    }
    fn block_126<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_126_0: read-var cold:u8
        let s_126_0: bool = fn_state.cold;
        // D s_126_1: not s_126_0
        let s_126_1: bool = !s_126_0;
        // N s_126_2: branch s_126_1 b1092 b127
        if s_126_1 {
            return block_1092(state, tracer, fn_state);
        } else {
            return block_127(state, tracer, fn_state);
        };
    }
    fn block_127<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_127_0: const #0u : u8
        let s_127_0: bool = false;
        // D s_127_1: write-var gs#38975 <= s_127_0
        fn_state.gs_38975 = s_127_0;
        // N s_127_2: jump b128
        return block_128(state, tracer, fn_state);
    }
    fn block_128<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_128_0: read-var gs#38975:u8
        let s_128_0: bool = fn_state.gs_38975;
        // N s_128_1: branch s_128_0 b1091 b129
        if s_128_0 {
            return block_1091(state, tracer, fn_state);
        } else {
            return block_129(state, tracer, fn_state);
        };
    }
    fn block_129<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_129_0: const #0u : u8
        let s_129_0: bool = false;
        // D s_129_1: write-var gs#38976 <= s_129_0
        fn_state.gs_38976 = s_129_0;
        // N s_129_2: jump b130
        return block_130(state, tracer, fn_state);
    }
    fn block_130<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_130_0: read-var gs#38976:u8
        let s_130_0: bool = fn_state.gs_38976;
        // N s_130_1: branch s_130_0 b1090 b131
        if s_130_0 {
            return block_1090(state, tracer, fn_state);
        } else {
            return block_131(state, tracer, fn_state);
        };
    }
    fn block_131<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_131_0: const #1s : i64
        let s_131_0: i64 = 1;
        // C s_131_1: cast zx s_131_0 -> i
        let s_131_1: i128 = (i128::try_from(s_131_0).unwrap());
        // S s_131_2: call __UNKNOWN_bits(s_131_1)
        let s_131_2: Bits = u__UNKNOWN_bits(state, tracer, s_131_1);
        // C s_131_3: const #11720u : u32
        let s_131_3: u32 = 11720;
        // D s_131_4: read-reg s_131_3:struct
        let s_131_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_131_3 as isize);
            tracer.read_register(s_131_3 as isize, value);
            value
        };
        // C s_131_5: const #11720u : u32
        let s_131_5: u32 = 11720;
        // N s_131_6: write-reg s_131_5 <= s_131_4
        let s_131_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_131_5 as isize, s_131_4);
            tracer.write_register(s_131_5 as isize, s_131_4);
        };
        // N s_131_7: jump b132
        return block_132(state, tracer, fn_state);
    }
    fn block_132<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_132_0: read-var cold:u8
        let s_132_0: bool = fn_state.cold;
        // D s_132_1: not s_132_0
        let s_132_1: bool = !s_132_0;
        // N s_132_2: branch s_132_1 b1089 b133
        if s_132_1 {
            return block_1089(state, tracer, fn_state);
        } else {
            return block_133(state, tracer, fn_state);
        };
    }
    fn block_133<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_133_0: const #0u : u8
        let s_133_0: bool = false;
        // D s_133_1: write-var gs#38977 <= s_133_0
        fn_state.gs_38977 = s_133_0;
        // N s_133_2: jump b134
        return block_134(state, tracer, fn_state);
    }
    fn block_134<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_134_0: read-var gs#38977:u8
        let s_134_0: bool = fn_state.gs_38977;
        // N s_134_1: branch s_134_0 b1088 b135
        if s_134_0 {
            return block_1088(state, tracer, fn_state);
        } else {
            return block_135(state, tracer, fn_state);
        };
    }
    fn block_135<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_135_0: const #0u : u8
        let s_135_0: bool = false;
        // D s_135_1: write-var gs#38978 <= s_135_0
        fn_state.gs_38978 = s_135_0;
        // N s_135_2: jump b136
        return block_136(state, tracer, fn_state);
    }
    fn block_136<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_136_0: read-var gs#38978:u8
        let s_136_0: bool = fn_state.gs_38978;
        // N s_136_1: branch s_136_0 b1087 b137
        if s_136_0 {
            return block_1087(state, tracer, fn_state);
        } else {
            return block_137(state, tracer, fn_state);
        };
    }
    fn block_137<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_137_0: const #1s : i64
        let s_137_0: i64 = 1;
        // C s_137_1: cast zx s_137_0 -> i
        let s_137_1: i128 = (i128::try_from(s_137_0).unwrap());
        // S s_137_2: call __UNKNOWN_bits(s_137_1)
        let s_137_2: Bits = u__UNKNOWN_bits(state, tracer, s_137_1);
        // C s_137_3: const #11720u : u32
        let s_137_3: u32 = 11720;
        // D s_137_4: read-reg s_137_3:struct
        let s_137_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_137_3 as isize);
            tracer.read_register(s_137_3 as isize, value);
            value
        };
        // C s_137_5: const #11720u : u32
        let s_137_5: u32 = 11720;
        // N s_137_6: write-reg s_137_5 <= s_137_4
        let s_137_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_137_5 as isize, s_137_4);
            tracer.write_register(s_137_5 as isize, s_137_4);
        };
        // N s_137_7: jump b138
        return block_138(state, tracer, fn_state);
    }
    fn block_138<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_138_0: read-var cold:u8
        let s_138_0: bool = fn_state.cold;
        // D s_138_1: not s_138_0
        let s_138_1: bool = !s_138_0;
        // N s_138_2: branch s_138_1 b1086 b139
        if s_138_1 {
            return block_1086(state, tracer, fn_state);
        } else {
            return block_139(state, tracer, fn_state);
        };
    }
    fn block_139<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_139_0: const #0u : u8
        let s_139_0: bool = false;
        // D s_139_1: write-var gs#38979 <= s_139_0
        fn_state.gs_38979 = s_139_0;
        // N s_139_2: jump b140
        return block_140(state, tracer, fn_state);
    }
    fn block_140<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_140_0: read-var gs#38979:u8
        let s_140_0: bool = fn_state.gs_38979;
        // N s_140_1: branch s_140_0 b1085 b141
        if s_140_0 {
            return block_1085(state, tracer, fn_state);
        } else {
            return block_141(state, tracer, fn_state);
        };
    }
    fn block_141<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_141_0: const #0u : u8
        let s_141_0: bool = false;
        // D s_141_1: write-var gs#38980 <= s_141_0
        fn_state.gs_38980 = s_141_0;
        // N s_141_2: jump b142
        return block_142(state, tracer, fn_state);
    }
    fn block_142<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_142_0: read-var gs#38980:u8
        let s_142_0: bool = fn_state.gs_38980;
        // N s_142_1: branch s_142_0 b1084 b143
        if s_142_0 {
            return block_1084(state, tracer, fn_state);
        } else {
            return block_143(state, tracer, fn_state);
        };
    }
    fn block_143<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_143_0: const #1s : i64
        let s_143_0: i64 = 1;
        // C s_143_1: cast zx s_143_0 -> i
        let s_143_1: i128 = (i128::try_from(s_143_0).unwrap());
        // S s_143_2: call __UNKNOWN_bits(s_143_1)
        let s_143_2: Bits = u__UNKNOWN_bits(state, tracer, s_143_1);
        // C s_143_3: const #11720u : u32
        let s_143_3: u32 = 11720;
        // D s_143_4: read-reg s_143_3:struct
        let s_143_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_143_3 as isize);
            tracer.read_register(s_143_3 as isize, value);
            value
        };
        // C s_143_5: const #11720u : u32
        let s_143_5: u32 = 11720;
        // N s_143_6: write-reg s_143_5 <= s_143_4
        let s_143_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_143_5 as isize, s_143_4);
            tracer.write_register(s_143_5 as isize, s_143_4);
        };
        // N s_143_7: jump b144
        return block_144(state, tracer, fn_state);
    }
    fn block_144<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_144_0: read-var cold:u8
        let s_144_0: bool = fn_state.cold;
        // D s_144_1: not s_144_0
        let s_144_1: bool = !s_144_0;
        // N s_144_2: branch s_144_1 b1083 b145
        if s_144_1 {
            return block_1083(state, tracer, fn_state);
        } else {
            return block_145(state, tracer, fn_state);
        };
    }
    fn block_145<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_145_0: const #0u : u8
        let s_145_0: bool = false;
        // D s_145_1: write-var gs#38981 <= s_145_0
        fn_state.gs_38981 = s_145_0;
        // N s_145_2: jump b146
        return block_146(state, tracer, fn_state);
    }
    fn block_146<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_146_0: read-var gs#38981:u8
        let s_146_0: bool = fn_state.gs_38981;
        // N s_146_1: branch s_146_0 b1082 b147
        if s_146_0 {
            return block_1082(state, tracer, fn_state);
        } else {
            return block_147(state, tracer, fn_state);
        };
    }
    fn block_147<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_147_0: const #0u : u8
        let s_147_0: bool = false;
        // D s_147_1: write-var gs#38982 <= s_147_0
        fn_state.gs_38982 = s_147_0;
        // N s_147_2: jump b148
        return block_148(state, tracer, fn_state);
    }
    fn block_148<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_148_0: read-var gs#38982:u8
        let s_148_0: bool = fn_state.gs_38982;
        // N s_148_1: branch s_148_0 b1081 b149
        if s_148_0 {
            return block_1081(state, tracer, fn_state);
        } else {
            return block_149(state, tracer, fn_state);
        };
    }
    fn block_149<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_149_0: const #1s : i64
        let s_149_0: i64 = 1;
        // C s_149_1: cast zx s_149_0 -> i
        let s_149_1: i128 = (i128::try_from(s_149_0).unwrap());
        // S s_149_2: call __UNKNOWN_bits(s_149_1)
        let s_149_2: Bits = u__UNKNOWN_bits(state, tracer, s_149_1);
        // C s_149_3: const #11720u : u32
        let s_149_3: u32 = 11720;
        // D s_149_4: read-reg s_149_3:struct
        let s_149_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_149_3 as isize);
            tracer.read_register(s_149_3 as isize, value);
            value
        };
        // C s_149_5: const #11720u : u32
        let s_149_5: u32 = 11720;
        // N s_149_6: write-reg s_149_5 <= s_149_4
        let s_149_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_149_5 as isize, s_149_4);
            tracer.write_register(s_149_5 as isize, s_149_4);
        };
        // N s_149_7: jump b150
        return block_150(state, tracer, fn_state);
    }
    fn block_150<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_150_0: const #11720u : u32
        let s_150_0: u32 = 11720;
        // D s_150_1: read-reg s_150_0:struct
        let s_150_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_0 as isize);
            tracer.read_register(s_150_0 as isize, value);
            value
        };
        // C s_150_2: const #11720u : u32
        let s_150_2: u32 = 11720;
        // N s_150_3: write-reg s_150_2 <= s_150_1
        let s_150_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_2 as isize, s_150_1);
            tracer.write_register(s_150_2 as isize, s_150_1);
        };
        // C s_150_4: const #90344u : u32
        let s_150_4: u32 = 90344;
        // D s_150_5: read-reg s_150_4:struct
        let s_150_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_4 as isize);
            tracer.read_register(s_150_4 as isize, value);
            value
        };
        // C s_150_6: const #90344u : u32
        let s_150_6: u32 = 90344;
        // N s_150_7: write-reg s_150_6 <= s_150_5
        let s_150_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_6 as isize, s_150_5);
            tracer.write_register(s_150_6 as isize, s_150_5);
        };
        // C s_150_8: const #16240u : u32
        let s_150_8: u32 = 16240;
        // D s_150_9: read-reg s_150_8:struct
        let s_150_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_8 as isize);
            tracer.read_register(s_150_8 as isize, value);
            value
        };
        // C s_150_10: const #16240u : u32
        let s_150_10: u32 = 16240;
        // N s_150_11: write-reg s_150_10 <= s_150_9
        let s_150_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_10 as isize, s_150_9);
            tracer.write_register(s_150_10 as isize, s_150_9);
        };
        // C s_150_12: const #16240u : u32
        let s_150_12: u32 = 16240;
        // D s_150_13: read-reg s_150_12:struct
        let s_150_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_12 as isize);
            tracer.read_register(s_150_12 as isize, value);
            value
        };
        // C s_150_14: const #16240u : u32
        let s_150_14: u32 = 16240;
        // N s_150_15: write-reg s_150_14 <= s_150_13
        let s_150_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_14 as isize, s_150_13);
            tracer.write_register(s_150_14 as isize, s_150_13);
        };
        // C s_150_16: const #23368u : u32
        let s_150_16: u32 = 23368;
        // D s_150_17: read-reg s_150_16:struct
        let s_150_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_16 as isize);
            tracer.read_register(s_150_16 as isize, value);
            value
        };
        // C s_150_18: const #23368u : u32
        let s_150_18: u32 = 23368;
        // N s_150_19: write-reg s_150_18 <= s_150_17
        let s_150_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_18 as isize, s_150_17);
            tracer.write_register(s_150_18 as isize, s_150_17);
        };
        // C s_150_20: const #23368u : u32
        let s_150_20: u32 = 23368;
        // D s_150_21: read-reg s_150_20:struct
        let s_150_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_20 as isize);
            tracer.read_register(s_150_20 as isize, value);
            value
        };
        // C s_150_22: const #23368u : u32
        let s_150_22: u32 = 23368;
        // N s_150_23: write-reg s_150_22 <= s_150_21
        let s_150_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_22 as isize, s_150_21);
            tracer.write_register(s_150_22 as isize, s_150_21);
        };
        // C s_150_24: const #90808u : u32
        let s_150_24: u32 = 90808;
        // D s_150_25: read-reg s_150_24:struct
        let s_150_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_24 as isize);
            tracer.read_register(s_150_24 as isize, value);
            value
        };
        // C s_150_26: const #90808u : u32
        let s_150_26: u32 = 90808;
        // N s_150_27: write-reg s_150_26 <= s_150_25
        let s_150_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_26 as isize, s_150_25);
            tracer.write_register(s_150_26 as isize, s_150_25);
        };
        // C s_150_28: const #90320u : u32
        let s_150_28: u32 = 90320;
        // D s_150_29: read-reg s_150_28:struct
        let s_150_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_28 as isize);
            tracer.read_register(s_150_28 as isize, value);
            value
        };
        // C s_150_30: const #90320u : u32
        let s_150_30: u32 = 90320;
        // N s_150_31: write-reg s_150_30 <= s_150_29
        let s_150_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_30 as isize, s_150_29);
            tracer.write_register(s_150_30 as isize, s_150_29);
        };
        // C s_150_32: const #0u : u8
        let s_150_32: bool = false;
        // S s_150_33: call Bit(s_150_32)
        let s_150_33: bool = Bit(state, tracer, s_150_32);
        // C s_150_34: const #90320u : u32
        let s_150_34: u32 = 90320;
        // D s_150_35: read-reg s_150_34:struct
        let s_150_35: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_34 as isize);
            tracer.read_register(s_150_34 as isize, value);
            value
        };
        // C s_150_36: const #90320u : u32
        let s_150_36: u32 = 90320;
        // N s_150_37: write-reg s_150_36 <= s_150_35
        let s_150_37: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_36 as isize, s_150_35);
            tracer.write_register(s_150_36 as isize, s_150_35);
        };
        // C s_150_38: const #101000u : u32
        let s_150_38: u32 = 101000;
        // D s_150_39: read-reg s_150_38:struct
        let s_150_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_38 as isize);
            tracer.read_register(s_150_38 as isize, value);
            value
        };
        // C s_150_40: const #101000u : u32
        let s_150_40: u32 = 101000;
        // N s_150_41: write-reg s_150_40 <= s_150_39
        let s_150_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_40 as isize, s_150_39);
            tracer.write_register(s_150_40 as isize, s_150_39);
        };
        // C s_150_42: const #101000u : u32
        let s_150_42: u32 = 101000;
        // D s_150_43: read-reg s_150_42:struct
        let s_150_43: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_42 as isize);
            tracer.read_register(s_150_42 as isize, value);
            value
        };
        // C s_150_44: const #101000u : u32
        let s_150_44: u32 = 101000;
        // N s_150_45: write-reg s_150_44 <= s_150_43
        let s_150_45: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_44 as isize, s_150_43);
            tracer.write_register(s_150_44 as isize, s_150_43);
        };
        // C s_150_46: const #100992u : u32
        let s_150_46: u32 = 100992;
        // D s_150_47: read-reg s_150_46:struct
        let s_150_47: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_46 as isize);
            tracer.read_register(s_150_46 as isize, value);
            value
        };
        // C s_150_48: const #100992u : u32
        let s_150_48: u32 = 100992;
        // N s_150_49: write-reg s_150_48 <= s_150_47
        let s_150_49: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_48 as isize, s_150_47);
            tracer.write_register(s_150_48 as isize, s_150_47);
        };
        // C s_150_50: const #100992u : u32
        let s_150_50: u32 = 100992;
        // D s_150_51: read-reg s_150_50:struct
        let s_150_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_50 as isize);
            tracer.read_register(s_150_50 as isize, value);
            value
        };
        // C s_150_52: const #100992u : u32
        let s_150_52: u32 = 100992;
        // N s_150_53: write-reg s_150_52 <= s_150_51
        let s_150_53: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_52 as isize, s_150_51);
            tracer.write_register(s_150_52 as isize, s_150_51);
        };
        // C s_150_54: const #100992u : u32
        let s_150_54: u32 = 100992;
        // D s_150_55: read-reg s_150_54:struct
        let s_150_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_54 as isize);
            tracer.read_register(s_150_54 as isize, value);
            value
        };
        // C s_150_56: const #100992u : u32
        let s_150_56: u32 = 100992;
        // N s_150_57: write-reg s_150_56 <= s_150_55
        let s_150_57: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_56 as isize, s_150_55);
            tracer.write_register(s_150_56 as isize, s_150_55);
        };
        // C s_150_58: const #100992u : u32
        let s_150_58: u32 = 100992;
        // D s_150_59: read-reg s_150_58:struct
        let s_150_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_58 as isize);
            tracer.read_register(s_150_58 as isize, value);
            value
        };
        // C s_150_60: const #100992u : u32
        let s_150_60: u32 = 100992;
        // N s_150_61: write-reg s_150_60 <= s_150_59
        let s_150_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_60 as isize, s_150_59);
            tracer.write_register(s_150_60 as isize, s_150_59);
        };
        // C s_150_62: const #100992u : u32
        let s_150_62: u32 = 100992;
        // D s_150_63: read-reg s_150_62:struct
        let s_150_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_62 as isize);
            tracer.read_register(s_150_62 as isize, value);
            value
        };
        // C s_150_64: const #100992u : u32
        let s_150_64: u32 = 100992;
        // N s_150_65: write-reg s_150_64 <= s_150_63
        let s_150_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_64 as isize, s_150_63);
            tracer.write_register(s_150_64 as isize, s_150_63);
        };
        // C s_150_66: const #100992u : u32
        let s_150_66: u32 = 100992;
        // D s_150_67: read-reg s_150_66:struct
        let s_150_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_66 as isize);
            tracer.read_register(s_150_66 as isize, value);
            value
        };
        // C s_150_68: const #100992u : u32
        let s_150_68: u32 = 100992;
        // N s_150_69: write-reg s_150_68 <= s_150_67
        let s_150_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_68 as isize, s_150_67);
            tracer.write_register(s_150_68 as isize, s_150_67);
        };
        // C s_150_70: const #100992u : u32
        let s_150_70: u32 = 100992;
        // D s_150_71: read-reg s_150_70:struct
        let s_150_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_70 as isize);
            tracer.read_register(s_150_70 as isize, value);
            value
        };
        // C s_150_72: const #100992u : u32
        let s_150_72: u32 = 100992;
        // N s_150_73: write-reg s_150_72 <= s_150_71
        let s_150_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_72 as isize, s_150_71);
            tracer.write_register(s_150_72 as isize, s_150_71);
        };
        // C s_150_74: const #100992u : u32
        let s_150_74: u32 = 100992;
        // D s_150_75: read-reg s_150_74:struct
        let s_150_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_74 as isize);
            tracer.read_register(s_150_74 as isize, value);
            value
        };
        // C s_150_76: const #100992u : u32
        let s_150_76: u32 = 100992;
        // N s_150_77: write-reg s_150_76 <= s_150_75
        let s_150_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_76 as isize, s_150_75);
            tracer.write_register(s_150_76 as isize, s_150_75);
        };
        // C s_150_78: const #100992u : u32
        let s_150_78: u32 = 100992;
        // D s_150_79: read-reg s_150_78:struct
        let s_150_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_78 as isize);
            tracer.read_register(s_150_78 as isize, value);
            value
        };
        // C s_150_80: const #100992u : u32
        let s_150_80: u32 = 100992;
        // N s_150_81: write-reg s_150_80 <= s_150_79
        let s_150_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_80 as isize, s_150_79);
            tracer.write_register(s_150_80 as isize, s_150_79);
        };
        // C s_150_82: const #100992u : u32
        let s_150_82: u32 = 100992;
        // D s_150_83: read-reg s_150_82:struct
        let s_150_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_82 as isize);
            tracer.read_register(s_150_82 as isize, value);
            value
        };
        // C s_150_84: const #100992u : u32
        let s_150_84: u32 = 100992;
        // N s_150_85: write-reg s_150_84 <= s_150_83
        let s_150_85: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_84 as isize, s_150_83);
            tracer.write_register(s_150_84 as isize, s_150_83);
        };
        // C s_150_86: const #100992u : u32
        let s_150_86: u32 = 100992;
        // D s_150_87: read-reg s_150_86:struct
        let s_150_87: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_86 as isize);
            tracer.read_register(s_150_86 as isize, value);
            value
        };
        // C s_150_88: const #100992u : u32
        let s_150_88: u32 = 100992;
        // N s_150_89: write-reg s_150_88 <= s_150_87
        let s_150_89: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_88 as isize, s_150_87);
            tracer.write_register(s_150_88 as isize, s_150_87);
        };
        // C s_150_90: const #100992u : u32
        let s_150_90: u32 = 100992;
        // D s_150_91: read-reg s_150_90:struct
        let s_150_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_90 as isize);
            tracer.read_register(s_150_90 as isize, value);
            value
        };
        // C s_150_92: const #100992u : u32
        let s_150_92: u32 = 100992;
        // N s_150_93: write-reg s_150_92 <= s_150_91
        let s_150_93: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_92 as isize, s_150_91);
            tracer.write_register(s_150_92 as isize, s_150_91);
        };
        // C s_150_94: const #0u : u8
        let s_150_94: bool = false;
        // S s_150_95: call Bit(s_150_94)
        let s_150_95: bool = Bit(state, tracer, s_150_94);
        // C s_150_96: const #100992u : u32
        let s_150_96: u32 = 100992;
        // D s_150_97: read-reg s_150_96:struct
        let s_150_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_96 as isize);
            tracer.read_register(s_150_96 as isize, value);
            value
        };
        // C s_150_98: const #100992u : u32
        let s_150_98: u32 = 100992;
        // N s_150_99: write-reg s_150_98 <= s_150_97
        let s_150_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_98 as isize, s_150_97);
            tracer.write_register(s_150_98 as isize, s_150_97);
        };
        // C s_150_100: const #100992u : u32
        let s_150_100: u32 = 100992;
        // D s_150_101: read-reg s_150_100:struct
        let s_150_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_150_100 as isize);
            tracer.read_register(s_150_100 as isize, value);
            value
        };
        // C s_150_102: const #100992u : u32
        let s_150_102: u32 = 100992;
        // N s_150_103: write-reg s_150_102 <= s_150_101
        let s_150_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_150_102 as isize, s_150_101);
            tracer.write_register(s_150_102 as isize, s_150_101);
        };
        // D s_150_104: read-var cold:u8
        let s_150_104: bool = fn_state.cold;
        // D s_150_105: not s_150_104
        let s_150_105: bool = !s_150_104;
        // N s_150_106: branch s_150_105 b1080 b151
        if s_150_105 {
            return block_1080(state, tracer, fn_state);
        } else {
            return block_151(state, tracer, fn_state);
        };
    }
    fn block_151<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_151_0: const #0u : u8
        let s_151_0: bool = false;
        // D s_151_1: write-var gs#39056 <= s_151_0
        fn_state.gs_39056 = s_151_0;
        // N s_151_2: jump b152
        return block_152(state, tracer, fn_state);
    }
    fn block_152<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_152_0: read-var gs#39056:u8
        let s_152_0: bool = fn_state.gs_39056;
        // N s_152_1: branch s_152_0 b1079 b153
        if s_152_0 {
            return block_1079(state, tracer, fn_state);
        } else {
            return block_153(state, tracer, fn_state);
        };
    }
    fn block_153<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_153_0: const #1s : i64
        let s_153_0: i64 = 1;
        // C s_153_1: cast zx s_153_0 -> i
        let s_153_1: i128 = (i128::try_from(s_153_0).unwrap());
        // S s_153_2: call __UNKNOWN_bits(s_153_1)
        let s_153_2: Bits = u__UNKNOWN_bits(state, tracer, s_153_1);
        // C s_153_3: const #100992u : u32
        let s_153_3: u32 = 100992;
        // D s_153_4: read-reg s_153_3:struct
        let s_153_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_153_3 as isize);
            tracer.read_register(s_153_3 as isize, value);
            value
        };
        // C s_153_5: const #100992u : u32
        let s_153_5: u32 = 100992;
        // N s_153_6: write-reg s_153_5 <= s_153_4
        let s_153_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_153_5 as isize, s_153_4);
            tracer.write_register(s_153_5 as isize, s_153_4);
        };
        // N s_153_7: jump b154
        return block_154(state, tracer, fn_state);
    }
    fn block_154<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_154_0: read-var cold:u8
        let s_154_0: bool = fn_state.cold;
        // D s_154_1: not s_154_0
        let s_154_1: bool = !s_154_0;
        // N s_154_2: branch s_154_1 b1078 b155
        if s_154_1 {
            return block_1078(state, tracer, fn_state);
        } else {
            return block_155(state, tracer, fn_state);
        };
    }
    fn block_155<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_155_0: const #0u : u8
        let s_155_0: bool = false;
        // D s_155_1: write-var gs#39057 <= s_155_0
        fn_state.gs_39057 = s_155_0;
        // N s_155_2: jump b156
        return block_156(state, tracer, fn_state);
    }
    fn block_156<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_156_0: read-var gs#39057:u8
        let s_156_0: bool = fn_state.gs_39057;
        // N s_156_1: branch s_156_0 b1077 b157
        if s_156_0 {
            return block_1077(state, tracer, fn_state);
        } else {
            return block_157(state, tracer, fn_state);
        };
    }
    fn block_157<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_157_0: const #1s : i64
        let s_157_0: i64 = 1;
        // C s_157_1: cast zx s_157_0 -> i
        let s_157_1: i128 = (i128::try_from(s_157_0).unwrap());
        // S s_157_2: call __UNKNOWN_bits(s_157_1)
        let s_157_2: Bits = u__UNKNOWN_bits(state, tracer, s_157_1);
        // C s_157_3: const #100992u : u32
        let s_157_3: u32 = 100992;
        // D s_157_4: read-reg s_157_3:struct
        let s_157_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_157_3 as isize);
            tracer.read_register(s_157_3 as isize, value);
            value
        };
        // C s_157_5: const #100992u : u32
        let s_157_5: u32 = 100992;
        // N s_157_6: write-reg s_157_5 <= s_157_4
        let s_157_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_157_5 as isize, s_157_4);
            tracer.write_register(s_157_5 as isize, s_157_4);
        };
        // N s_157_7: jump b158
        return block_158(state, tracer, fn_state);
    }
    fn block_158<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_158_0: read-var cold:u8
        let s_158_0: bool = fn_state.cold;
        // D s_158_1: not s_158_0
        let s_158_1: bool = !s_158_0;
        // N s_158_2: branch s_158_1 b1076 b159
        if s_158_1 {
            return block_1076(state, tracer, fn_state);
        } else {
            return block_159(state, tracer, fn_state);
        };
    }
    fn block_159<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_159_0: const #0u : u8
        let s_159_0: bool = false;
        // D s_159_1: write-var gs#39058 <= s_159_0
        fn_state.gs_39058 = s_159_0;
        // N s_159_2: jump b160
        return block_160(state, tracer, fn_state);
    }
    fn block_160<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_160_0: read-var gs#39058:u8
        let s_160_0: bool = fn_state.gs_39058;
        // N s_160_1: branch s_160_0 b1075 b161
        if s_160_0 {
            return block_1075(state, tracer, fn_state);
        } else {
            return block_161(state, tracer, fn_state);
        };
    }
    fn block_161<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_161_0: const #1s : i64
        let s_161_0: i64 = 1;
        // C s_161_1: cast zx s_161_0 -> i
        let s_161_1: i128 = (i128::try_from(s_161_0).unwrap());
        // S s_161_2: call __UNKNOWN_bits(s_161_1)
        let s_161_2: Bits = u__UNKNOWN_bits(state, tracer, s_161_1);
        // C s_161_3: const #100992u : u32
        let s_161_3: u32 = 100992;
        // D s_161_4: read-reg s_161_3:struct
        let s_161_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_161_3 as isize);
            tracer.read_register(s_161_3 as isize, value);
            value
        };
        // C s_161_5: const #100992u : u32
        let s_161_5: u32 = 100992;
        // N s_161_6: write-reg s_161_5 <= s_161_4
        let s_161_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_161_5 as isize, s_161_4);
            tracer.write_register(s_161_5 as isize, s_161_4);
        };
        // N s_161_7: jump b162
        return block_162(state, tracer, fn_state);
    }
    fn block_162<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_162_0: const #0u : u8
        let s_162_0: bool = false;
        // S s_162_1: call Bit(s_162_0)
        let s_162_1: bool = Bit(state, tracer, s_162_0);
        // C s_162_2: const #100992u : u32
        let s_162_2: u32 = 100992;
        // D s_162_3: read-reg s_162_2:struct
        let s_162_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_162_2 as isize);
            tracer.read_register(s_162_2 as isize, value);
            value
        };
        // C s_162_4: const #100992u : u32
        let s_162_4: u32 = 100992;
        // N s_162_5: write-reg s_162_4 <= s_162_3
        let s_162_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_162_4 as isize, s_162_3);
            tracer.write_register(s_162_4 as isize, s_162_3);
        };
        // D s_162_6: read-var cold:u8
        let s_162_6: bool = fn_state.cold;
        // D s_162_7: not s_162_6
        let s_162_7: bool = !s_162_6;
        // N s_162_8: branch s_162_7 b1074 b163
        if s_162_7 {
            return block_1074(state, tracer, fn_state);
        } else {
            return block_163(state, tracer, fn_state);
        };
    }
    fn block_163<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_163_0: const #0u : u8
        let s_163_0: bool = false;
        // D s_163_1: write-var gs#39061 <= s_163_0
        fn_state.gs_39061 = s_163_0;
        // N s_163_2: jump b164
        return block_164(state, tracer, fn_state);
    }
    fn block_164<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_164_0: read-var gs#39061:u8
        let s_164_0: bool = fn_state.gs_39061;
        // N s_164_1: branch s_164_0 b1073 b165
        if s_164_0 {
            return block_1073(state, tracer, fn_state);
        } else {
            return block_165(state, tracer, fn_state);
        };
    }
    fn block_165<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_165_0: const #1s : i64
        let s_165_0: i64 = 1;
        // C s_165_1: cast zx s_165_0 -> i
        let s_165_1: i128 = (i128::try_from(s_165_0).unwrap());
        // S s_165_2: call __UNKNOWN_bits(s_165_1)
        let s_165_2: Bits = u__UNKNOWN_bits(state, tracer, s_165_1);
        // C s_165_3: const #100992u : u32
        let s_165_3: u32 = 100992;
        // D s_165_4: read-reg s_165_3:struct
        let s_165_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_165_3 as isize);
            tracer.read_register(s_165_3 as isize, value);
            value
        };
        // C s_165_5: const #100992u : u32
        let s_165_5: u32 = 100992;
        // N s_165_6: write-reg s_165_5 <= s_165_4
        let s_165_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_165_5 as isize, s_165_4);
            tracer.write_register(s_165_5 as isize, s_165_4);
        };
        // N s_165_7: jump b166
        return block_166(state, tracer, fn_state);
    }
    fn block_166<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_166_0: read-var cold:u8
        let s_166_0: bool = fn_state.cold;
        // D s_166_1: not s_166_0
        let s_166_1: bool = !s_166_0;
        // N s_166_2: branch s_166_1 b1072 b167
        if s_166_1 {
            return block_1072(state, tracer, fn_state);
        } else {
            return block_167(state, tracer, fn_state);
        };
    }
    fn block_167<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_167_0: const #0u : u8
        let s_167_0: bool = false;
        // D s_167_1: write-var gs#39062 <= s_167_0
        fn_state.gs_39062 = s_167_0;
        // N s_167_2: jump b168
        return block_168(state, tracer, fn_state);
    }
    fn block_168<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_168_0: read-var gs#39062:u8
        let s_168_0: bool = fn_state.gs_39062;
        // N s_168_1: branch s_168_0 b1071 b169
        if s_168_0 {
            return block_1071(state, tracer, fn_state);
        } else {
            return block_169(state, tracer, fn_state);
        };
    }
    fn block_169<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_169_0: const #1s : i64
        let s_169_0: i64 = 1;
        // C s_169_1: cast zx s_169_0 -> i
        let s_169_1: i128 = (i128::try_from(s_169_0).unwrap());
        // S s_169_2: call __UNKNOWN_bits(s_169_1)
        let s_169_2: Bits = u__UNKNOWN_bits(state, tracer, s_169_1);
        // C s_169_3: const #100992u : u32
        let s_169_3: u32 = 100992;
        // D s_169_4: read-reg s_169_3:struct
        let s_169_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_169_3 as isize);
            tracer.read_register(s_169_3 as isize, value);
            value
        };
        // C s_169_5: const #100992u : u32
        let s_169_5: u32 = 100992;
        // N s_169_6: write-reg s_169_5 <= s_169_4
        let s_169_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_169_5 as isize, s_169_4);
            tracer.write_register(s_169_5 as isize, s_169_4);
        };
        // N s_169_7: jump b170
        return block_170(state, tracer, fn_state);
    }
    fn block_170<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_170_0: read-var cold:u8
        let s_170_0: bool = fn_state.cold;
        // D s_170_1: not s_170_0
        let s_170_1: bool = !s_170_0;
        // N s_170_2: branch s_170_1 b1070 b171
        if s_170_1 {
            return block_1070(state, tracer, fn_state);
        } else {
            return block_171(state, tracer, fn_state);
        };
    }
    fn block_171<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_171_0: const #0u : u8
        let s_171_0: bool = false;
        // D s_171_1: write-var gs#39063 <= s_171_0
        fn_state.gs_39063 = s_171_0;
        // N s_171_2: jump b172
        return block_172(state, tracer, fn_state);
    }
    fn block_172<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_172_0: read-var gs#39063:u8
        let s_172_0: bool = fn_state.gs_39063;
        // N s_172_1: branch s_172_0 b1069 b173
        if s_172_0 {
            return block_1069(state, tracer, fn_state);
        } else {
            return block_173(state, tracer, fn_state);
        };
    }
    fn block_173<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_173_0: const #1s : i64
        let s_173_0: i64 = 1;
        // C s_173_1: cast zx s_173_0 -> i
        let s_173_1: i128 = (i128::try_from(s_173_0).unwrap());
        // S s_173_2: call __UNKNOWN_bits(s_173_1)
        let s_173_2: Bits = u__UNKNOWN_bits(state, tracer, s_173_1);
        // C s_173_3: const #100992u : u32
        let s_173_3: u32 = 100992;
        // D s_173_4: read-reg s_173_3:struct
        let s_173_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_173_3 as isize);
            tracer.read_register(s_173_3 as isize, value);
            value
        };
        // C s_173_5: const #100992u : u32
        let s_173_5: u32 = 100992;
        // N s_173_6: write-reg s_173_5 <= s_173_4
        let s_173_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_173_5 as isize, s_173_4);
            tracer.write_register(s_173_5 as isize, s_173_4);
        };
        // N s_173_7: jump b174
        return block_174(state, tracer, fn_state);
    }
    fn block_174<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_174_0: const #0u : u8
        let s_174_0: bool = false;
        // S s_174_1: call Bit(s_174_0)
        let s_174_1: bool = Bit(state, tracer, s_174_0);
        // C s_174_2: const #100992u : u32
        let s_174_2: u32 = 100992;
        // D s_174_3: read-reg s_174_2:struct
        let s_174_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_174_2 as isize);
            tracer.read_register(s_174_2 as isize, value);
            value
        };
        // C s_174_4: const #100992u : u32
        let s_174_4: u32 = 100992;
        // N s_174_5: write-reg s_174_4 <= s_174_3
        let s_174_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_174_4 as isize, s_174_3);
            tracer.write_register(s_174_4 as isize, s_174_3);
        };
        // D s_174_6: read-var cold:u8
        let s_174_6: bool = fn_state.cold;
        // D s_174_7: not s_174_6
        let s_174_7: bool = !s_174_6;
        // N s_174_8: branch s_174_7 b1068 b175
        if s_174_7 {
            return block_1068(state, tracer, fn_state);
        } else {
            return block_175(state, tracer, fn_state);
        };
    }
    fn block_175<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_175_0: const #0u : u8
        let s_175_0: bool = false;
        // D s_175_1: write-var gs#39066 <= s_175_0
        fn_state.gs_39066 = s_175_0;
        // N s_175_2: jump b176
        return block_176(state, tracer, fn_state);
    }
    fn block_176<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_176_0: read-var gs#39066:u8
        let s_176_0: bool = fn_state.gs_39066;
        // N s_176_1: branch s_176_0 b1067 b177
        if s_176_0 {
            return block_1067(state, tracer, fn_state);
        } else {
            return block_177(state, tracer, fn_state);
        };
    }
    fn block_177<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_177_0: const #1s : i64
        let s_177_0: i64 = 1;
        // C s_177_1: cast zx s_177_0 -> i
        let s_177_1: i128 = (i128::try_from(s_177_0).unwrap());
        // S s_177_2: call __UNKNOWN_bits(s_177_1)
        let s_177_2: Bits = u__UNKNOWN_bits(state, tracer, s_177_1);
        // C s_177_3: const #100992u : u32
        let s_177_3: u32 = 100992;
        // D s_177_4: read-reg s_177_3:struct
        let s_177_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_177_3 as isize);
            tracer.read_register(s_177_3 as isize, value);
            value
        };
        // C s_177_5: const #100992u : u32
        let s_177_5: u32 = 100992;
        // N s_177_6: write-reg s_177_5 <= s_177_4
        let s_177_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_177_5 as isize, s_177_4);
            tracer.write_register(s_177_5 as isize, s_177_4);
        };
        // N s_177_7: jump b178
        return block_178(state, tracer, fn_state);
    }
    fn block_178<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_178_0: const #0u : u8
        let s_178_0: bool = false;
        // S s_178_1: call Bit(s_178_0)
        let s_178_1: bool = Bit(state, tracer, s_178_0);
        // C s_178_2: const #100992u : u32
        let s_178_2: u32 = 100992;
        // D s_178_3: read-reg s_178_2:struct
        let s_178_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_2 as isize);
            tracer.read_register(s_178_2 as isize, value);
            value
        };
        // C s_178_4: const #100992u : u32
        let s_178_4: u32 = 100992;
        // N s_178_5: write-reg s_178_4 <= s_178_3
        let s_178_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_4 as isize, s_178_3);
            tracer.write_register(s_178_4 as isize, s_178_3);
        };
        // C s_178_6: const #100992u : u32
        let s_178_6: u32 = 100992;
        // D s_178_7: read-reg s_178_6:struct
        let s_178_7: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_6 as isize);
            tracer.read_register(s_178_6 as isize, value);
            value
        };
        // C s_178_8: const #100992u : u32
        let s_178_8: u32 = 100992;
        // N s_178_9: write-reg s_178_8 <= s_178_7
        let s_178_9: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_8 as isize, s_178_7);
            tracer.write_register(s_178_8 as isize, s_178_7);
        };
        // C s_178_10: const #100992u : u32
        let s_178_10: u32 = 100992;
        // D s_178_11: read-reg s_178_10:struct
        let s_178_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_10 as isize);
            tracer.read_register(s_178_10 as isize, value);
            value
        };
        // C s_178_12: const #100992u : u32
        let s_178_12: u32 = 100992;
        // N s_178_13: write-reg s_178_12 <= s_178_11
        let s_178_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_12 as isize, s_178_11);
            tracer.write_register(s_178_12 as isize, s_178_11);
        };
        // C s_178_14: const #100992u : u32
        let s_178_14: u32 = 100992;
        // D s_178_15: read-reg s_178_14:struct
        let s_178_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_14 as isize);
            tracer.read_register(s_178_14 as isize, value);
            value
        };
        // C s_178_16: const #100992u : u32
        let s_178_16: u32 = 100992;
        // N s_178_17: write-reg s_178_16 <= s_178_15
        let s_178_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_16 as isize, s_178_15);
            tracer.write_register(s_178_16 as isize, s_178_15);
        };
        // C s_178_18: const #100992u : u32
        let s_178_18: u32 = 100992;
        // D s_178_19: read-reg s_178_18:struct
        let s_178_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_18 as isize);
            tracer.read_register(s_178_18 as isize, value);
            value
        };
        // C s_178_20: const #100992u : u32
        let s_178_20: u32 = 100992;
        // N s_178_21: write-reg s_178_20 <= s_178_19
        let s_178_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_20 as isize, s_178_19);
            tracer.write_register(s_178_20 as isize, s_178_19);
        };
        // C s_178_22: const #100992u : u32
        let s_178_22: u32 = 100992;
        // D s_178_23: read-reg s_178_22:struct
        let s_178_23: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_22 as isize);
            tracer.read_register(s_178_22 as isize, value);
            value
        };
        // C s_178_24: const #100992u : u32
        let s_178_24: u32 = 100992;
        // N s_178_25: write-reg s_178_24 <= s_178_23
        let s_178_25: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_24 as isize, s_178_23);
            tracer.write_register(s_178_24 as isize, s_178_23);
        };
        // C s_178_26: const #100992u : u32
        let s_178_26: u32 = 100992;
        // D s_178_27: read-reg s_178_26:struct
        let s_178_27: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_26 as isize);
            tracer.read_register(s_178_26 as isize, value);
            value
        };
        // C s_178_28: const #100992u : u32
        let s_178_28: u32 = 100992;
        // N s_178_29: write-reg s_178_28 <= s_178_27
        let s_178_29: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_28 as isize, s_178_27);
            tracer.write_register(s_178_28 as isize, s_178_27);
        };
        // C s_178_30: const #100992u : u32
        let s_178_30: u32 = 100992;
        // D s_178_31: read-reg s_178_30:struct
        let s_178_31: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_30 as isize);
            tracer.read_register(s_178_30 as isize, value);
            value
        };
        // C s_178_32: const #100992u : u32
        let s_178_32: u32 = 100992;
        // N s_178_33: write-reg s_178_32 <= s_178_31
        let s_178_33: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_32 as isize, s_178_31);
            tracer.write_register(s_178_32 as isize, s_178_31);
        };
        // C s_178_34: const #100992u : u32
        let s_178_34: u32 = 100992;
        // D s_178_35: read-reg s_178_34:struct
        let s_178_35: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_34 as isize);
            tracer.read_register(s_178_34 as isize, value);
            value
        };
        // C s_178_36: const #100992u : u32
        let s_178_36: u32 = 100992;
        // N s_178_37: write-reg s_178_36 <= s_178_35
        let s_178_37: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_36 as isize, s_178_35);
            tracer.write_register(s_178_36 as isize, s_178_35);
        };
        // C s_178_38: const #100992u : u32
        let s_178_38: u32 = 100992;
        // D s_178_39: read-reg s_178_38:struct
        let s_178_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_38 as isize);
            tracer.read_register(s_178_38 as isize, value);
            value
        };
        // C s_178_40: const #100992u : u32
        let s_178_40: u32 = 100992;
        // N s_178_41: write-reg s_178_40 <= s_178_39
        let s_178_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_40 as isize, s_178_39);
            tracer.write_register(s_178_40 as isize, s_178_39);
        };
        // C s_178_42: const #100992u : u32
        let s_178_42: u32 = 100992;
        // D s_178_43: read-reg s_178_42:struct
        let s_178_43: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_42 as isize);
            tracer.read_register(s_178_42 as isize, value);
            value
        };
        // C s_178_44: const #100992u : u32
        let s_178_44: u32 = 100992;
        // N s_178_45: write-reg s_178_44 <= s_178_43
        let s_178_45: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_44 as isize, s_178_43);
            tracer.write_register(s_178_44 as isize, s_178_43);
        };
        // C s_178_46: const #100992u : u32
        let s_178_46: u32 = 100992;
        // D s_178_47: read-reg s_178_46:struct
        let s_178_47: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_46 as isize);
            tracer.read_register(s_178_46 as isize, value);
            value
        };
        // C s_178_48: const #100992u : u32
        let s_178_48: u32 = 100992;
        // N s_178_49: write-reg s_178_48 <= s_178_47
        let s_178_49: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_48 as isize, s_178_47);
            tracer.write_register(s_178_48 as isize, s_178_47);
        };
        // C s_178_50: const #0u : u8
        let s_178_50: bool = false;
        // S s_178_51: call Bit(s_178_50)
        let s_178_51: bool = Bit(state, tracer, s_178_50);
        // C s_178_52: const #100992u : u32
        let s_178_52: u32 = 100992;
        // D s_178_53: read-reg s_178_52:struct
        let s_178_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_52 as isize);
            tracer.read_register(s_178_52 as isize, value);
            value
        };
        // C s_178_54: const #100992u : u32
        let s_178_54: u32 = 100992;
        // N s_178_55: write-reg s_178_54 <= s_178_53
        let s_178_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_54 as isize, s_178_53);
            tracer.write_register(s_178_54 as isize, s_178_53);
        };
        // C s_178_56: const #100992u : u32
        let s_178_56: u32 = 100992;
        // D s_178_57: read-reg s_178_56:struct
        let s_178_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_56 as isize);
            tracer.read_register(s_178_56 as isize, value);
            value
        };
        // C s_178_58: const #100992u : u32
        let s_178_58: u32 = 100992;
        // N s_178_59: write-reg s_178_58 <= s_178_57
        let s_178_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_58 as isize, s_178_57);
            tracer.write_register(s_178_58 as isize, s_178_57);
        };
        // C s_178_60: const #100992u : u32
        let s_178_60: u32 = 100992;
        // D s_178_61: read-reg s_178_60:struct
        let s_178_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_60 as isize);
            tracer.read_register(s_178_60 as isize, value);
            value
        };
        // C s_178_62: const #100992u : u32
        let s_178_62: u32 = 100992;
        // N s_178_63: write-reg s_178_62 <= s_178_61
        let s_178_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_62 as isize, s_178_61);
            tracer.write_register(s_178_62 as isize, s_178_61);
        };
        // C s_178_64: const #100992u : u32
        let s_178_64: u32 = 100992;
        // D s_178_65: read-reg s_178_64:struct
        let s_178_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_64 as isize);
            tracer.read_register(s_178_64 as isize, value);
            value
        };
        // C s_178_66: const #100992u : u32
        let s_178_66: u32 = 100992;
        // N s_178_67: write-reg s_178_66 <= s_178_65
        let s_178_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_66 as isize, s_178_65);
            tracer.write_register(s_178_66 as isize, s_178_65);
        };
        // C s_178_68: const #100992u : u32
        let s_178_68: u32 = 100992;
        // D s_178_69: read-reg s_178_68:struct
        let s_178_69: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_68 as isize);
            tracer.read_register(s_178_68 as isize, value);
            value
        };
        // C s_178_70: const #100992u : u32
        let s_178_70: u32 = 100992;
        // N s_178_71: write-reg s_178_70 <= s_178_69
        let s_178_71: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_70 as isize, s_178_69);
            tracer.write_register(s_178_70 as isize, s_178_69);
        };
        // C s_178_72: const #100992u : u32
        let s_178_72: u32 = 100992;
        // D s_178_73: read-reg s_178_72:struct
        let s_178_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_72 as isize);
            tracer.read_register(s_178_72 as isize, value);
            value
        };
        // C s_178_74: const #100992u : u32
        let s_178_74: u32 = 100992;
        // N s_178_75: write-reg s_178_74 <= s_178_73
        let s_178_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_74 as isize, s_178_73);
            tracer.write_register(s_178_74 as isize, s_178_73);
        };
        // C s_178_76: const #0u : u8
        let s_178_76: bool = false;
        // S s_178_77: call Bit(s_178_76)
        let s_178_77: bool = Bit(state, tracer, s_178_76);
        // C s_178_78: const #100992u : u32
        let s_178_78: u32 = 100992;
        // D s_178_79: read-reg s_178_78:struct
        let s_178_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_78 as isize);
            tracer.read_register(s_178_78 as isize, value);
            value
        };
        // C s_178_80: const #100992u : u32
        let s_178_80: u32 = 100992;
        // N s_178_81: write-reg s_178_80 <= s_178_79
        let s_178_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_80 as isize, s_178_79);
            tracer.write_register(s_178_80 as isize, s_178_79);
        };
        // C s_178_82: const #100992u : u32
        let s_178_82: u32 = 100992;
        // D s_178_83: read-reg s_178_82:struct
        let s_178_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_82 as isize);
            tracer.read_register(s_178_82 as isize, value);
            value
        };
        // C s_178_84: const #100992u : u32
        let s_178_84: u32 = 100992;
        // N s_178_85: write-reg s_178_84 <= s_178_83
        let s_178_85: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_84 as isize, s_178_83);
            tracer.write_register(s_178_84 as isize, s_178_83);
        };
        // C s_178_86: const #100992u : u32
        let s_178_86: u32 = 100992;
        // D s_178_87: read-reg s_178_86:struct
        let s_178_87: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_86 as isize);
            tracer.read_register(s_178_86 as isize, value);
            value
        };
        // C s_178_88: const #100992u : u32
        let s_178_88: u32 = 100992;
        // N s_178_89: write-reg s_178_88 <= s_178_87
        let s_178_89: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_88 as isize, s_178_87);
            tracer.write_register(s_178_88 as isize, s_178_87);
        };
        // C s_178_90: const #0u : u8
        let s_178_90: bool = false;
        // S s_178_91: call Bit(s_178_90)
        let s_178_91: bool = Bit(state, tracer, s_178_90);
        // C s_178_92: const #100992u : u32
        let s_178_92: u32 = 100992;
        // D s_178_93: read-reg s_178_92:struct
        let s_178_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_92 as isize);
            tracer.read_register(s_178_92 as isize, value);
            value
        };
        // C s_178_94: const #100992u : u32
        let s_178_94: u32 = 100992;
        // N s_178_95: write-reg s_178_94 <= s_178_93
        let s_178_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_94 as isize, s_178_93);
            tracer.write_register(s_178_94 as isize, s_178_93);
        };
        // C s_178_96: const #100992u : u32
        let s_178_96: u32 = 100992;
        // D s_178_97: read-reg s_178_96:struct
        let s_178_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_96 as isize);
            tracer.read_register(s_178_96 as isize, value);
            value
        };
        // C s_178_98: const #100992u : u32
        let s_178_98: u32 = 100992;
        // N s_178_99: write-reg s_178_98 <= s_178_97
        let s_178_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_98 as isize, s_178_97);
            tracer.write_register(s_178_98 as isize, s_178_97);
        };
        // C s_178_100: const #100992u : u32
        let s_178_100: u32 = 100992;
        // D s_178_101: read-reg s_178_100:struct
        let s_178_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_100 as isize);
            tracer.read_register(s_178_100 as isize, value);
            value
        };
        // C s_178_102: const #100992u : u32
        let s_178_102: u32 = 100992;
        // N s_178_103: write-reg s_178_102 <= s_178_101
        let s_178_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_102 as isize, s_178_101);
            tracer.write_register(s_178_102 as isize, s_178_101);
        };
        // C s_178_104: const #100992u : u32
        let s_178_104: u32 = 100992;
        // D s_178_105: read-reg s_178_104:struct
        let s_178_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_104 as isize);
            tracer.read_register(s_178_104 as isize, value);
            value
        };
        // C s_178_106: const #100992u : u32
        let s_178_106: u32 = 100992;
        // N s_178_107: write-reg s_178_106 <= s_178_105
        let s_178_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_106 as isize, s_178_105);
            tracer.write_register(s_178_106 as isize, s_178_105);
        };
        // C s_178_108: const #100992u : u32
        let s_178_108: u32 = 100992;
        // D s_178_109: read-reg s_178_108:struct
        let s_178_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_108 as isize);
            tracer.read_register(s_178_108 as isize, value);
            value
        };
        // C s_178_110: const #100992u : u32
        let s_178_110: u32 = 100992;
        // N s_178_111: write-reg s_178_110 <= s_178_109
        let s_178_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_110 as isize, s_178_109);
            tracer.write_register(s_178_110 as isize, s_178_109);
        };
        // C s_178_112: const #100992u : u32
        let s_178_112: u32 = 100992;
        // D s_178_113: read-reg s_178_112:struct
        let s_178_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_112 as isize);
            tracer.read_register(s_178_112 as isize, value);
            value
        };
        // C s_178_114: const #100992u : u32
        let s_178_114: u32 = 100992;
        // N s_178_115: write-reg s_178_114 <= s_178_113
        let s_178_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_114 as isize, s_178_113);
            tracer.write_register(s_178_114 as isize, s_178_113);
        };
        // C s_178_116: const #100992u : u32
        let s_178_116: u32 = 100992;
        // D s_178_117: read-reg s_178_116:struct
        let s_178_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_116 as isize);
            tracer.read_register(s_178_116 as isize, value);
            value
        };
        // C s_178_118: const #100992u : u32
        let s_178_118: u32 = 100992;
        // N s_178_119: write-reg s_178_118 <= s_178_117
        let s_178_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_118 as isize, s_178_117);
            tracer.write_register(s_178_118 as isize, s_178_117);
        };
        // C s_178_120: const #100992u : u32
        let s_178_120: u32 = 100992;
        // D s_178_121: read-reg s_178_120:struct
        let s_178_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_120 as isize);
            tracer.read_register(s_178_120 as isize, value);
            value
        };
        // C s_178_122: const #100992u : u32
        let s_178_122: u32 = 100992;
        // N s_178_123: write-reg s_178_122 <= s_178_121
        let s_178_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_122 as isize, s_178_121);
            tracer.write_register(s_178_122 as isize, s_178_121);
        };
        // C s_178_124: const #100992u : u32
        let s_178_124: u32 = 100992;
        // D s_178_125: read-reg s_178_124:struct
        let s_178_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_124 as isize);
            tracer.read_register(s_178_124 as isize, value);
            value
        };
        // C s_178_126: const #100992u : u32
        let s_178_126: u32 = 100992;
        // N s_178_127: write-reg s_178_126 <= s_178_125
        let s_178_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_126 as isize, s_178_125);
            tracer.write_register(s_178_126 as isize, s_178_125);
        };
        // C s_178_128: const #100992u : u32
        let s_178_128: u32 = 100992;
        // D s_178_129: read-reg s_178_128:struct
        let s_178_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_128 as isize);
            tracer.read_register(s_178_128 as isize, value);
            value
        };
        // C s_178_130: const #100992u : u32
        let s_178_130: u32 = 100992;
        // N s_178_131: write-reg s_178_130 <= s_178_129
        let s_178_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_130 as isize, s_178_129);
            tracer.write_register(s_178_130 as isize, s_178_129);
        };
        // C s_178_132: const #100992u : u32
        let s_178_132: u32 = 100992;
        // D s_178_133: read-reg s_178_132:struct
        let s_178_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_132 as isize);
            tracer.read_register(s_178_132 as isize, value);
            value
        };
        // C s_178_134: const #100992u : u32
        let s_178_134: u32 = 100992;
        // N s_178_135: write-reg s_178_134 <= s_178_133
        let s_178_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_134 as isize, s_178_133);
            tracer.write_register(s_178_134 as isize, s_178_133);
        };
        // C s_178_136: const #100992u : u32
        let s_178_136: u32 = 100992;
        // D s_178_137: read-reg s_178_136:struct
        let s_178_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_136 as isize);
            tracer.read_register(s_178_136 as isize, value);
            value
        };
        // C s_178_138: const #100992u : u32
        let s_178_138: u32 = 100992;
        // N s_178_139: write-reg s_178_138 <= s_178_137
        let s_178_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_138 as isize, s_178_137);
            tracer.write_register(s_178_138 as isize, s_178_137);
        };
        // C s_178_140: const #100992u : u32
        let s_178_140: u32 = 100992;
        // D s_178_141: read-reg s_178_140:struct
        let s_178_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_140 as isize);
            tracer.read_register(s_178_140 as isize, value);
            value
        };
        // C s_178_142: const #100992u : u32
        let s_178_142: u32 = 100992;
        // N s_178_143: write-reg s_178_142 <= s_178_141
        let s_178_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_142 as isize, s_178_141);
            tracer.write_register(s_178_142 as isize, s_178_141);
        };
        // C s_178_144: const #100992u : u32
        let s_178_144: u32 = 100992;
        // D s_178_145: read-reg s_178_144:struct
        let s_178_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_144 as isize);
            tracer.read_register(s_178_144 as isize, value);
            value
        };
        // C s_178_146: const #100992u : u32
        let s_178_146: u32 = 100992;
        // N s_178_147: write-reg s_178_146 <= s_178_145
        let s_178_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_146 as isize, s_178_145);
            tracer.write_register(s_178_146 as isize, s_178_145);
        };
        // C s_178_148: const #0u : u8
        let s_178_148: bool = false;
        // S s_178_149: call Bit(s_178_148)
        let s_178_149: bool = Bit(state, tracer, s_178_148);
        // C s_178_150: const #100992u : u32
        let s_178_150: u32 = 100992;
        // D s_178_151: read-reg s_178_150:struct
        let s_178_151: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_150 as isize);
            tracer.read_register(s_178_150 as isize, value);
            value
        };
        // C s_178_152: const #100992u : u32
        let s_178_152: u32 = 100992;
        // N s_178_153: write-reg s_178_152 <= s_178_151
        let s_178_153: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_152 as isize, s_178_151);
            tracer.write_register(s_178_152 as isize, s_178_151);
        };
        // C s_178_154: const #100992u : u32
        let s_178_154: u32 = 100992;
        // D s_178_155: read-reg s_178_154:struct
        let s_178_155: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_154 as isize);
            tracer.read_register(s_178_154 as isize, value);
            value
        };
        // C s_178_156: const #100992u : u32
        let s_178_156: u32 = 100992;
        // N s_178_157: write-reg s_178_156 <= s_178_155
        let s_178_157: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_156 as isize, s_178_155);
            tracer.write_register(s_178_156 as isize, s_178_155);
        };
        // C s_178_158: const #100992u : u32
        let s_178_158: u32 = 100992;
        // D s_178_159: read-reg s_178_158:struct
        let s_178_159: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_158 as isize);
            tracer.read_register(s_178_158 as isize, value);
            value
        };
        // C s_178_160: const #100992u : u32
        let s_178_160: u32 = 100992;
        // N s_178_161: write-reg s_178_160 <= s_178_159
        let s_178_161: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_160 as isize, s_178_159);
            tracer.write_register(s_178_160 as isize, s_178_159);
        };
        // C s_178_162: const #91128u : u32
        let s_178_162: u32 = 91128;
        // D s_178_163: read-reg s_178_162:struct
        let s_178_163: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_162 as isize);
            tracer.read_register(s_178_162 as isize, value);
            value
        };
        // C s_178_164: const #91128u : u32
        let s_178_164: u32 = 91128;
        // N s_178_165: write-reg s_178_164 <= s_178_163
        let s_178_165: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_164 as isize, s_178_163);
            tracer.write_register(s_178_164 as isize, s_178_163);
        };
        // C s_178_166: const #102624u : u32
        let s_178_166: u32 = 102624;
        // D s_178_167: read-reg s_178_166:struct
        let s_178_167: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_166 as isize);
            tracer.read_register(s_178_166 as isize, value);
            value
        };
        // C s_178_168: const #102624u : u32
        let s_178_168: u32 = 102624;
        // N s_178_169: write-reg s_178_168 <= s_178_167
        let s_178_169: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_168 as isize, s_178_167);
            tracer.write_register(s_178_168 as isize, s_178_167);
        };
        // C s_178_170: const #102680u : u32
        let s_178_170: u32 = 102680;
        // D s_178_171: read-reg s_178_170:struct
        let s_178_171: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_178_170 as isize);
            tracer.read_register(s_178_170 as isize, value);
            value
        };
        // C s_178_172: const #102680u : u32
        let s_178_172: u32 = 102680;
        // N s_178_173: write-reg s_178_172 <= s_178_171
        let s_178_173: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_178_172 as isize, s_178_171);
            tracer.write_register(s_178_172 as isize, s_178_171);
        };
        // D s_178_174: read-var cold:u8
        let s_178_174: bool = fn_state.cold;
        // D s_178_175: not s_178_174
        let s_178_175: bool = !s_178_174;
        // N s_178_176: branch s_178_175 b1066 b179
        if s_178_175 {
            return block_1066(state, tracer, fn_state);
        } else {
            return block_179(state, tracer, fn_state);
        };
    }
    fn block_179<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_179_0: const #0u : u8
        let s_179_0: bool = false;
        // D s_179_1: write-var gs#39185 <= s_179_0
        fn_state.gs_39185 = s_179_0;
        // N s_179_2: jump b180
        return block_180(state, tracer, fn_state);
    }
    fn block_180<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_180_0: read-var gs#39185:u8
        let s_180_0: bool = fn_state.gs_39185;
        // N s_180_1: branch s_180_0 b1065 b181
        if s_180_0 {
            return block_1065(state, tracer, fn_state);
        } else {
            return block_181(state, tracer, fn_state);
        };
    }
    fn block_181<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_181_0: const #1s : i64
        let s_181_0: i64 = 1;
        // C s_181_1: cast zx s_181_0 -> i
        let s_181_1: i128 = (i128::try_from(s_181_0).unwrap());
        // S s_181_2: call __UNKNOWN_bits(s_181_1)
        let s_181_2: Bits = u__UNKNOWN_bits(state, tracer, s_181_1);
        // C s_181_3: const #102680u : u32
        let s_181_3: u32 = 102680;
        // D s_181_4: read-reg s_181_3:struct
        let s_181_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_181_3 as isize);
            tracer.read_register(s_181_3 as isize, value);
            value
        };
        // C s_181_5: const #102680u : u32
        let s_181_5: u32 = 102680;
        // N s_181_6: write-reg s_181_5 <= s_181_4
        let s_181_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_181_5 as isize, s_181_4);
            tracer.write_register(s_181_5 as isize, s_181_4);
        };
        // N s_181_7: jump b182
        return block_182(state, tracer, fn_state);
    }
    fn block_182<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_182_0: read-var cold:u8
        let s_182_0: bool = fn_state.cold;
        // D s_182_1: not s_182_0
        let s_182_1: bool = !s_182_0;
        // N s_182_2: branch s_182_1 b1064 b183
        if s_182_1 {
            return block_1064(state, tracer, fn_state);
        } else {
            return block_183(state, tracer, fn_state);
        };
    }
    fn block_183<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_183_0: const #0u : u8
        let s_183_0: bool = false;
        // D s_183_1: write-var gs#39186 <= s_183_0
        fn_state.gs_39186 = s_183_0;
        // N s_183_2: jump b184
        return block_184(state, tracer, fn_state);
    }
    fn block_184<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_184_0: read-var gs#39186:u8
        let s_184_0: bool = fn_state.gs_39186;
        // N s_184_1: branch s_184_0 b1063 b185
        if s_184_0 {
            return block_1063(state, tracer, fn_state);
        } else {
            return block_185(state, tracer, fn_state);
        };
    }
    fn block_185<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_185_0: const #1s : i64
        let s_185_0: i64 = 1;
        // C s_185_1: cast zx s_185_0 -> i
        let s_185_1: i128 = (i128::try_from(s_185_0).unwrap());
        // S s_185_2: call __UNKNOWN_bits(s_185_1)
        let s_185_2: Bits = u__UNKNOWN_bits(state, tracer, s_185_1);
        // C s_185_3: const #102680u : u32
        let s_185_3: u32 = 102680;
        // D s_185_4: read-reg s_185_3:struct
        let s_185_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_185_3 as isize);
            tracer.read_register(s_185_3 as isize, value);
            value
        };
        // C s_185_5: const #102680u : u32
        let s_185_5: u32 = 102680;
        // N s_185_6: write-reg s_185_5 <= s_185_4
        let s_185_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_185_5 as isize, s_185_4);
            tracer.write_register(s_185_5 as isize, s_185_4);
        };
        // N s_185_7: jump b186
        return block_186(state, tracer, fn_state);
    }
    fn block_186<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_186_0: read-var cold:u8
        let s_186_0: bool = fn_state.cold;
        // D s_186_1: not s_186_0
        let s_186_1: bool = !s_186_0;
        // N s_186_2: branch s_186_1 b1062 b187
        if s_186_1 {
            return block_1062(state, tracer, fn_state);
        } else {
            return block_187(state, tracer, fn_state);
        };
    }
    fn block_187<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_187_0: const #0u : u8
        let s_187_0: bool = false;
        // D s_187_1: write-var gs#39187 <= s_187_0
        fn_state.gs_39187 = s_187_0;
        // N s_187_2: jump b188
        return block_188(state, tracer, fn_state);
    }
    fn block_188<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_188_0: read-var gs#39187:u8
        let s_188_0: bool = fn_state.gs_39187;
        // N s_188_1: branch s_188_0 b1061 b189
        if s_188_0 {
            return block_1061(state, tracer, fn_state);
        } else {
            return block_189(state, tracer, fn_state);
        };
    }
    fn block_189<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_189_0: const #1s : i64
        let s_189_0: i64 = 1;
        // C s_189_1: cast zx s_189_0 -> i
        let s_189_1: i128 = (i128::try_from(s_189_0).unwrap());
        // S s_189_2: call __UNKNOWN_bits(s_189_1)
        let s_189_2: Bits = u__UNKNOWN_bits(state, tracer, s_189_1);
        // C s_189_3: const #102680u : u32
        let s_189_3: u32 = 102680;
        // D s_189_4: read-reg s_189_3:struct
        let s_189_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_189_3 as isize);
            tracer.read_register(s_189_3 as isize, value);
            value
        };
        // C s_189_5: const #102680u : u32
        let s_189_5: u32 = 102680;
        // N s_189_6: write-reg s_189_5 <= s_189_4
        let s_189_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_189_5 as isize, s_189_4);
            tracer.write_register(s_189_5 as isize, s_189_4);
        };
        // N s_189_7: jump b190
        return block_190(state, tracer, fn_state);
    }
    fn block_190<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_190_0: read-var cold:u8
        let s_190_0: bool = fn_state.cold;
        // D s_190_1: not s_190_0
        let s_190_1: bool = !s_190_0;
        // N s_190_2: branch s_190_1 b1060 b191
        if s_190_1 {
            return block_1060(state, tracer, fn_state);
        } else {
            return block_191(state, tracer, fn_state);
        };
    }
    fn block_191<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_191_0: const #0u : u8
        let s_191_0: bool = false;
        // D s_191_1: write-var gs#39188 <= s_191_0
        fn_state.gs_39188 = s_191_0;
        // N s_191_2: jump b192
        return block_192(state, tracer, fn_state);
    }
    fn block_192<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_192_0: read-var gs#39188:u8
        let s_192_0: bool = fn_state.gs_39188;
        // N s_192_1: branch s_192_0 b1059 b193
        if s_192_0 {
            return block_1059(state, tracer, fn_state);
        } else {
            return block_193(state, tracer, fn_state);
        };
    }
    fn block_193<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_193_0: const #1s : i64
        let s_193_0: i64 = 1;
        // C s_193_1: cast zx s_193_0 -> i
        let s_193_1: i128 = (i128::try_from(s_193_0).unwrap());
        // S s_193_2: call __UNKNOWN_bits(s_193_1)
        let s_193_2: Bits = u__UNKNOWN_bits(state, tracer, s_193_1);
        // C s_193_3: const #102680u : u32
        let s_193_3: u32 = 102680;
        // D s_193_4: read-reg s_193_3:struct
        let s_193_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_193_3 as isize);
            tracer.read_register(s_193_3 as isize, value);
            value
        };
        // C s_193_5: const #102680u : u32
        let s_193_5: u32 = 102680;
        // N s_193_6: write-reg s_193_5 <= s_193_4
        let s_193_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_193_5 as isize, s_193_4);
            tracer.write_register(s_193_5 as isize, s_193_4);
        };
        // N s_193_7: jump b194
        return block_194(state, tracer, fn_state);
    }
    fn block_194<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_194_0: read-var cold:u8
        let s_194_0: bool = fn_state.cold;
        // D s_194_1: not s_194_0
        let s_194_1: bool = !s_194_0;
        // N s_194_2: branch s_194_1 b1058 b195
        if s_194_1 {
            return block_1058(state, tracer, fn_state);
        } else {
            return block_195(state, tracer, fn_state);
        };
    }
    fn block_195<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_195_0: const #0u : u8
        let s_195_0: bool = false;
        // D s_195_1: write-var gs#39189 <= s_195_0
        fn_state.gs_39189 = s_195_0;
        // N s_195_2: jump b196
        return block_196(state, tracer, fn_state);
    }
    fn block_196<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_196_0: read-var gs#39189:u8
        let s_196_0: bool = fn_state.gs_39189;
        // N s_196_1: branch s_196_0 b1057 b197
        if s_196_0 {
            return block_1057(state, tracer, fn_state);
        } else {
            return block_197(state, tracer, fn_state);
        };
    }
    fn block_197<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_197_0: const #1s : i64
        let s_197_0: i64 = 1;
        // C s_197_1: cast zx s_197_0 -> i
        let s_197_1: i128 = (i128::try_from(s_197_0).unwrap());
        // S s_197_2: call __UNKNOWN_bits(s_197_1)
        let s_197_2: Bits = u__UNKNOWN_bits(state, tracer, s_197_1);
        // C s_197_3: const #102680u : u32
        let s_197_3: u32 = 102680;
        // D s_197_4: read-reg s_197_3:struct
        let s_197_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_197_3 as isize);
            tracer.read_register(s_197_3 as isize, value);
            value
        };
        // C s_197_5: const #102680u : u32
        let s_197_5: u32 = 102680;
        // N s_197_6: write-reg s_197_5 <= s_197_4
        let s_197_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_197_5 as isize, s_197_4);
            tracer.write_register(s_197_5 as isize, s_197_4);
        };
        // N s_197_7: jump b198
        return block_198(state, tracer, fn_state);
    }
    fn block_198<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_198_0: read-var cold:u8
        let s_198_0: bool = fn_state.cold;
        // D s_198_1: not s_198_0
        let s_198_1: bool = !s_198_0;
        // N s_198_2: branch s_198_1 b1056 b199
        if s_198_1 {
            return block_1056(state, tracer, fn_state);
        } else {
            return block_199(state, tracer, fn_state);
        };
    }
    fn block_199<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_199_0: const #0u : u8
        let s_199_0: bool = false;
        // D s_199_1: write-var gs#39190 <= s_199_0
        fn_state.gs_39190 = s_199_0;
        // N s_199_2: jump b200
        return block_200(state, tracer, fn_state);
    }
    fn block_200<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_200_0: read-var gs#39190:u8
        let s_200_0: bool = fn_state.gs_39190;
        // N s_200_1: branch s_200_0 b1055 b201
        if s_200_0 {
            return block_1055(state, tracer, fn_state);
        } else {
            return block_201(state, tracer, fn_state);
        };
    }
    fn block_201<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_201_0: const #1s : i64
        let s_201_0: i64 = 1;
        // C s_201_1: cast zx s_201_0 -> i
        let s_201_1: i128 = (i128::try_from(s_201_0).unwrap());
        // S s_201_2: call __UNKNOWN_bits(s_201_1)
        let s_201_2: Bits = u__UNKNOWN_bits(state, tracer, s_201_1);
        // C s_201_3: const #102680u : u32
        let s_201_3: u32 = 102680;
        // D s_201_4: read-reg s_201_3:struct
        let s_201_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_201_3 as isize);
            tracer.read_register(s_201_3 as isize, value);
            value
        };
        // C s_201_5: const #102680u : u32
        let s_201_5: u32 = 102680;
        // N s_201_6: write-reg s_201_5 <= s_201_4
        let s_201_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_201_5 as isize, s_201_4);
            tracer.write_register(s_201_5 as isize, s_201_4);
        };
        // N s_201_7: jump b202
        return block_202(state, tracer, fn_state);
    }
    fn block_202<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_202_0: const #0u : u8
        let s_202_0: bool = false;
        // S s_202_1: call Bit(s_202_0)
        let s_202_1: bool = Bit(state, tracer, s_202_0);
        // C s_202_2: const #102680u : u32
        let s_202_2: u32 = 102680;
        // D s_202_3: read-reg s_202_2:struct
        let s_202_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_2 as isize);
            tracer.read_register(s_202_2 as isize, value);
            value
        };
        // C s_202_4: const #102680u : u32
        let s_202_4: u32 = 102680;
        // N s_202_5: write-reg s_202_4 <= s_202_3
        let s_202_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_4 as isize, s_202_3);
            tracer.write_register(s_202_4 as isize, s_202_3);
        };
        // C s_202_6: const #104640u : u32
        let s_202_6: u32 = 104640;
        // D s_202_7: read-reg s_202_6:struct
        let s_202_7: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_6 as isize);
            tracer.read_register(s_202_6 as isize, value);
            value
        };
        // C s_202_8: const #104640u : u32
        let s_202_8: u32 = 104640;
        // N s_202_9: write-reg s_202_8 <= s_202_7
        let s_202_9: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_8 as isize, s_202_7);
            tracer.write_register(s_202_8 as isize, s_202_7);
        };
        // C s_202_10: const #0u : u8
        let s_202_10: bool = false;
        // S s_202_11: call Bit(s_202_10)
        let s_202_11: bool = Bit(state, tracer, s_202_10);
        // C s_202_12: const #104640u : u32
        let s_202_12: u32 = 104640;
        // D s_202_13: read-reg s_202_12:struct
        let s_202_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_12 as isize);
            tracer.read_register(s_202_12 as isize, value);
            value
        };
        // C s_202_14: const #104640u : u32
        let s_202_14: u32 = 104640;
        // N s_202_15: write-reg s_202_14 <= s_202_13
        let s_202_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_14 as isize, s_202_13);
            tracer.write_register(s_202_14 as isize, s_202_13);
        };
        // C s_202_16: const #0u : u8
        let s_202_16: bool = false;
        // S s_202_17: call Bit(s_202_16)
        let s_202_17: bool = Bit(state, tracer, s_202_16);
        // C s_202_18: const #17072u : u32
        let s_202_18: u32 = 17072;
        // D s_202_19: read-reg s_202_18:struct
        let s_202_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_18 as isize);
            tracer.read_register(s_202_18 as isize, value);
            value
        };
        // C s_202_20: const #17072u : u32
        let s_202_20: u32 = 17072;
        // N s_202_21: write-reg s_202_20 <= s_202_19
        let s_202_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_20 as isize, s_202_19);
            tracer.write_register(s_202_20 as isize, s_202_19);
        };
        // C s_202_22: const #17072u : u32
        let s_202_22: u32 = 17072;
        // D s_202_23: read-reg s_202_22:struct
        let s_202_23: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_22 as isize);
            tracer.read_register(s_202_22 as isize, value);
            value
        };
        // C s_202_24: const #17072u : u32
        let s_202_24: u32 = 17072;
        // N s_202_25: write-reg s_202_24 <= s_202_23
        let s_202_25: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_24 as isize, s_202_23);
            tracer.write_register(s_202_24 as isize, s_202_23);
        };
        // C s_202_26: const #0u : u8
        let s_202_26: bool = false;
        // S s_202_27: call Bit(s_202_26)
        let s_202_27: bool = Bit(state, tracer, s_202_26);
        // C s_202_28: const #17072u : u32
        let s_202_28: u32 = 17072;
        // D s_202_29: read-reg s_202_28:struct
        let s_202_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_28 as isize);
            tracer.read_register(s_202_28 as isize, value);
            value
        };
        // C s_202_30: const #17072u : u32
        let s_202_30: u32 = 17072;
        // N s_202_31: write-reg s_202_30 <= s_202_29
        let s_202_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_30 as isize, s_202_29);
            tracer.write_register(s_202_30 as isize, s_202_29);
        };
        // C s_202_32: const #17072u : u32
        let s_202_32: u32 = 17072;
        // D s_202_33: read-reg s_202_32:struct
        let s_202_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_32 as isize);
            tracer.read_register(s_202_32 as isize, value);
            value
        };
        // C s_202_34: const #17072u : u32
        let s_202_34: u32 = 17072;
        // N s_202_35: write-reg s_202_34 <= s_202_33
        let s_202_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_34 as isize, s_202_33);
            tracer.write_register(s_202_34 as isize, s_202_33);
        };
        // C s_202_36: const #0u : u8
        let s_202_36: bool = false;
        // S s_202_37: call Bit(s_202_36)
        let s_202_37: bool = Bit(state, tracer, s_202_36);
        // C s_202_38: const #17072u : u32
        let s_202_38: u32 = 17072;
        // D s_202_39: read-reg s_202_38:struct
        let s_202_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_38 as isize);
            tracer.read_register(s_202_38 as isize, value);
            value
        };
        // C s_202_40: const #17072u : u32
        let s_202_40: u32 = 17072;
        // N s_202_41: write-reg s_202_40 <= s_202_39
        let s_202_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_40 as isize, s_202_39);
            tracer.write_register(s_202_40 as isize, s_202_39);
        };
        // C s_202_42: const #17072u : u32
        let s_202_42: u32 = 17072;
        // D s_202_43: read-reg s_202_42:struct
        let s_202_43: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_42 as isize);
            tracer.read_register(s_202_42 as isize, value);
            value
        };
        // C s_202_44: const #17072u : u32
        let s_202_44: u32 = 17072;
        // N s_202_45: write-reg s_202_44 <= s_202_43
        let s_202_45: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_44 as isize, s_202_43);
            tracer.write_register(s_202_44 as isize, s_202_43);
        };
        // C s_202_46: const #0u : u8
        let s_202_46: bool = false;
        // S s_202_47: call Bit(s_202_46)
        let s_202_47: bool = Bit(state, tracer, s_202_46);
        // C s_202_48: const #17072u : u32
        let s_202_48: u32 = 17072;
        // D s_202_49: read-reg s_202_48:struct
        let s_202_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_48 as isize);
            tracer.read_register(s_202_48 as isize, value);
            value
        };
        // C s_202_50: const #17072u : u32
        let s_202_50: u32 = 17072;
        // N s_202_51: write-reg s_202_50 <= s_202_49
        let s_202_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_50 as isize, s_202_49);
            tracer.write_register(s_202_50 as isize, s_202_49);
        };
        // C s_202_52: const #17072u : u32
        let s_202_52: u32 = 17072;
        // D s_202_53: read-reg s_202_52:struct
        let s_202_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_52 as isize);
            tracer.read_register(s_202_52 as isize, value);
            value
        };
        // C s_202_54: const #17072u : u32
        let s_202_54: u32 = 17072;
        // N s_202_55: write-reg s_202_54 <= s_202_53
        let s_202_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_54 as isize, s_202_53);
            tracer.write_register(s_202_54 as isize, s_202_53);
        };
        // C s_202_56: const #17072u : u32
        let s_202_56: u32 = 17072;
        // D s_202_57: read-reg s_202_56:struct
        let s_202_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_56 as isize);
            tracer.read_register(s_202_56 as isize, value);
            value
        };
        // C s_202_58: const #17072u : u32
        let s_202_58: u32 = 17072;
        // N s_202_59: write-reg s_202_58 <= s_202_57
        let s_202_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_58 as isize, s_202_57);
            tracer.write_register(s_202_58 as isize, s_202_57);
        };
        // C s_202_60: const #17072u : u32
        let s_202_60: u32 = 17072;
        // D s_202_61: read-reg s_202_60:struct
        let s_202_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_60 as isize);
            tracer.read_register(s_202_60 as isize, value);
            value
        };
        // C s_202_62: const #17072u : u32
        let s_202_62: u32 = 17072;
        // N s_202_63: write-reg s_202_62 <= s_202_61
        let s_202_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_62 as isize, s_202_61);
            tracer.write_register(s_202_62 as isize, s_202_61);
        };
        // C s_202_64: const #0u : u8
        let s_202_64: bool = false;
        // S s_202_65: call Bit(s_202_64)
        let s_202_65: bool = Bit(state, tracer, s_202_64);
        // C s_202_66: const #17072u : u32
        let s_202_66: u32 = 17072;
        // D s_202_67: read-reg s_202_66:struct
        let s_202_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_66 as isize);
            tracer.read_register(s_202_66 as isize, value);
            value
        };
        // C s_202_68: const #17072u : u32
        let s_202_68: u32 = 17072;
        // N s_202_69: write-reg s_202_68 <= s_202_67
        let s_202_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_68 as isize, s_202_67);
            tracer.write_register(s_202_68 as isize, s_202_67);
        };
        // C s_202_70: const #0u : u8
        let s_202_70: bool = false;
        // S s_202_71: call Bit(s_202_70)
        let s_202_71: bool = Bit(state, tracer, s_202_70);
        // C s_202_72: const #17072u : u32
        let s_202_72: u32 = 17072;
        // D s_202_73: read-reg s_202_72:struct
        let s_202_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_72 as isize);
            tracer.read_register(s_202_72 as isize, value);
            value
        };
        // C s_202_74: const #17072u : u32
        let s_202_74: u32 = 17072;
        // N s_202_75: write-reg s_202_74 <= s_202_73
        let s_202_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_74 as isize, s_202_73);
            tracer.write_register(s_202_74 as isize, s_202_73);
        };
        // C s_202_76: const #1u : u8
        let s_202_76: bool = true;
        // S s_202_77: call Bit(s_202_76)
        let s_202_77: bool = Bit(state, tracer, s_202_76);
        // C s_202_78: const #17072u : u32
        let s_202_78: u32 = 17072;
        // D s_202_79: read-reg s_202_78:struct
        let s_202_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_78 as isize);
            tracer.read_register(s_202_78 as isize, value);
            value
        };
        // C s_202_80: const #17072u : u32
        let s_202_80: u32 = 17072;
        // N s_202_81: write-reg s_202_80 <= s_202_79
        let s_202_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_80 as isize, s_202_79);
            tracer.write_register(s_202_80 as isize, s_202_79);
        };
        // C s_202_82: const #0u : u8
        let s_202_82: bool = false;
        // S s_202_83: call Bit(s_202_82)
        let s_202_83: bool = Bit(state, tracer, s_202_82);
        // C s_202_84: const #17072u : u32
        let s_202_84: u32 = 17072;
        // D s_202_85: read-reg s_202_84:struct
        let s_202_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_84 as isize);
            tracer.read_register(s_202_84 as isize, value);
            value
        };
        // C s_202_86: const #17072u : u32
        let s_202_86: u32 = 17072;
        // N s_202_87: write-reg s_202_86 <= s_202_85
        let s_202_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_86 as isize, s_202_85);
            tracer.write_register(s_202_86 as isize, s_202_85);
        };
        // C s_202_88: const #1u : u8
        let s_202_88: bool = true;
        // S s_202_89: call Bit(s_202_88)
        let s_202_89: bool = Bit(state, tracer, s_202_88);
        // C s_202_90: const #17072u : u32
        let s_202_90: u32 = 17072;
        // D s_202_91: read-reg s_202_90:struct
        let s_202_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_90 as isize);
            tracer.read_register(s_202_90 as isize, value);
            value
        };
        // C s_202_92: const #17072u : u32
        let s_202_92: u32 = 17072;
        // N s_202_93: write-reg s_202_92 <= s_202_91
        let s_202_93: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_92 as isize, s_202_91);
            tracer.write_register(s_202_92 as isize, s_202_91);
        };
        // C s_202_94: const #0u : u8
        let s_202_94: bool = false;
        // S s_202_95: call Bit(s_202_94)
        let s_202_95: bool = Bit(state, tracer, s_202_94);
        // C s_202_96: const #17072u : u32
        let s_202_96: u32 = 17072;
        // D s_202_97: read-reg s_202_96:struct
        let s_202_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_96 as isize);
            tracer.read_register(s_202_96 as isize, value);
            value
        };
        // C s_202_98: const #17072u : u32
        let s_202_98: u32 = 17072;
        // N s_202_99: write-reg s_202_98 <= s_202_97
        let s_202_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_98 as isize, s_202_97);
            tracer.write_register(s_202_98 as isize, s_202_97);
        };
        // C s_202_100: const #1u : u8
        let s_202_100: bool = true;
        // S s_202_101: call Bit(s_202_100)
        let s_202_101: bool = Bit(state, tracer, s_202_100);
        // C s_202_102: const #17072u : u32
        let s_202_102: u32 = 17072;
        // D s_202_103: read-reg s_202_102:struct
        let s_202_103: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_102 as isize);
            tracer.read_register(s_202_102 as isize, value);
            value
        };
        // C s_202_104: const #17072u : u32
        let s_202_104: u32 = 17072;
        // N s_202_105: write-reg s_202_104 <= s_202_103
        let s_202_105: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_104 as isize, s_202_103);
            tracer.write_register(s_202_104 as isize, s_202_103);
        };
        // C s_202_106: const #17072u : u32
        let s_202_106: u32 = 17072;
        // D s_202_107: read-reg s_202_106:struct
        let s_202_107: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_106 as isize);
            tracer.read_register(s_202_106 as isize, value);
            value
        };
        // C s_202_108: const #17072u : u32
        let s_202_108: u32 = 17072;
        // N s_202_109: write-reg s_202_108 <= s_202_107
        let s_202_109: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_108 as isize, s_202_107);
            tracer.write_register(s_202_108 as isize, s_202_107);
        };
        // C s_202_110: const #17072u : u32
        let s_202_110: u32 = 17072;
        // D s_202_111: read-reg s_202_110:struct
        let s_202_111: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_110 as isize);
            tracer.read_register(s_202_110 as isize, value);
            value
        };
        // C s_202_112: const #17072u : u32
        let s_202_112: u32 = 17072;
        // N s_202_113: write-reg s_202_112 <= s_202_111
        let s_202_113: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_112 as isize, s_202_111);
            tracer.write_register(s_202_112 as isize, s_202_111);
        };
        // C s_202_114: const #17072u : u32
        let s_202_114: u32 = 17072;
        // D s_202_115: read-reg s_202_114:struct
        let s_202_115: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_114 as isize);
            tracer.read_register(s_202_114 as isize, value);
            value
        };
        // C s_202_116: const #17072u : u32
        let s_202_116: u32 = 17072;
        // N s_202_117: write-reg s_202_116 <= s_202_115
        let s_202_117: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_116 as isize, s_202_115);
            tracer.write_register(s_202_116 as isize, s_202_115);
        };
        // C s_202_118: const #17072u : u32
        let s_202_118: u32 = 17072;
        // D s_202_119: read-reg s_202_118:struct
        let s_202_119: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_118 as isize);
            tracer.read_register(s_202_118 as isize, value);
            value
        };
        // C s_202_120: const #17072u : u32
        let s_202_120: u32 = 17072;
        // N s_202_121: write-reg s_202_120 <= s_202_119
        let s_202_121: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_120 as isize, s_202_119);
            tracer.write_register(s_202_120 as isize, s_202_119);
        };
        // C s_202_122: const #17072u : u32
        let s_202_122: u32 = 17072;
        // D s_202_123: read-reg s_202_122:struct
        let s_202_123: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_122 as isize);
            tracer.read_register(s_202_122 as isize, value);
            value
        };
        // C s_202_124: const #17072u : u32
        let s_202_124: u32 = 17072;
        // N s_202_125: write-reg s_202_124 <= s_202_123
        let s_202_125: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_124 as isize, s_202_123);
            tracer.write_register(s_202_124 as isize, s_202_123);
        };
        // C s_202_126: const #17072u : u32
        let s_202_126: u32 = 17072;
        // D s_202_127: read-reg s_202_126:struct
        let s_202_127: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_126 as isize);
            tracer.read_register(s_202_126 as isize, value);
            value
        };
        // C s_202_128: const #17072u : u32
        let s_202_128: u32 = 17072;
        // N s_202_129: write-reg s_202_128 <= s_202_127
        let s_202_129: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_128 as isize, s_202_127);
            tracer.write_register(s_202_128 as isize, s_202_127);
        };
        // C s_202_130: const #0s : i
        let s_202_130: i128 = 0;
        // C s_202_131: const #17152u : u32
        let s_202_131: u32 = 17152;
        // D s_202_132: read-reg s_202_131:u64
        let s_202_132: u64 = {
            let value = state.read_register::<u64>(s_202_131 as isize);
            tracer.read_register(s_202_131 as isize, value);
            value
        };
        // D s_202_133: cast zx s_202_132 -> bv
        let s_202_133: Bits = Bits::new(s_202_132 as u128, 64u16);
        // C s_202_134: const #0u : u11
        let s_202_134: u16 = 0;
        // C s_202_135: cast zx s_202_134 -> bv
        let s_202_135: Bits = Bits::new(s_202_134 as u128, 11u16);
        // C s_202_136: const #10s : i
        let s_202_136: i128 = 10;
        // C s_202_137: const #1u : u64
        let s_202_137: u64 = 1;
        // C s_202_138: cast zx s_202_137 -> bv
        let s_202_138: Bits = Bits::new(s_202_137 as u128, 64u16);
        // C s_202_139: lsl s_202_138 s_202_136
        let s_202_139: Bits = s_202_138 << s_202_136;
        // C s_202_140: sub s_202_139 s_202_138
        let s_202_140: Bits = ((s_202_139) - (s_202_138));
        // C s_202_141: and s_202_135 s_202_140
        let s_202_141: Bits = ((s_202_135) & (s_202_140));
        // C s_202_142: lsl s_202_141 s_202_130
        let s_202_142: Bits = s_202_141 << s_202_130;
        // C s_202_143: lsl s_202_140 s_202_130
        let s_202_143: Bits = s_202_140 << s_202_130;
        // C s_202_144: cmpl s_202_143
        let s_202_144: Bits = !s_202_143;
        // D s_202_145: and s_202_133 s_202_144
        let s_202_145: Bits = ((s_202_133) & (s_202_144));
        // D s_202_146: or s_202_145 s_202_142
        let s_202_146: Bits = ((s_202_145) | (s_202_142));
        // D s_202_147: cast reint s_202_146 -> u64
        let s_202_147: u64 = (s_202_146.value() as u64);
        // C s_202_148: const #17152u : u32
        let s_202_148: u32 = 17152;
        // N s_202_149: write-reg s_202_148 <= s_202_147
        let s_202_149: () = {
            state.write_register::<u64>(s_202_148 as isize, s_202_147);
            tracer.write_register(s_202_148 as isize, s_202_147);
        };
        // C s_202_150: const #32s : i
        let s_202_150: i128 = 32;
        // C s_202_151: const #22912u : u32
        let s_202_151: u32 = 22912;
        // D s_202_152: read-reg s_202_151:u64
        let s_202_152: u64 = {
            let value = state.read_register::<u64>(s_202_151 as isize);
            tracer.read_register(s_202_151 as isize, value);
            value
        };
        // D s_202_153: cast zx s_202_152 -> bv
        let s_202_153: Bits = Bits::new(s_202_152 as u128, 64u16);
        // C s_202_154: const #0u : u32
        let s_202_154: u32 = 0;
        // C s_202_155: cast zx s_202_154 -> bv
        let s_202_155: Bits = Bits::new(s_202_154 as u128, 32u16);
        // C s_202_156: const #31s : i
        let s_202_156: i128 = 31;
        // C s_202_157: const #1u : u64
        let s_202_157: u64 = 1;
        // C s_202_158: cast zx s_202_157 -> bv
        let s_202_158: Bits = Bits::new(s_202_157 as u128, 64u16);
        // C s_202_159: lsl s_202_158 s_202_156
        let s_202_159: Bits = s_202_158 << s_202_156;
        // C s_202_160: sub s_202_159 s_202_158
        let s_202_160: Bits = ((s_202_159) - (s_202_158));
        // C s_202_161: and s_202_155 s_202_160
        let s_202_161: Bits = ((s_202_155) & (s_202_160));
        // C s_202_162: lsl s_202_161 s_202_150
        let s_202_162: Bits = s_202_161 << s_202_150;
        // C s_202_163: lsl s_202_160 s_202_150
        let s_202_163: Bits = s_202_160 << s_202_150;
        // C s_202_164: cmpl s_202_163
        let s_202_164: Bits = !s_202_163;
        // D s_202_165: and s_202_153 s_202_164
        let s_202_165: Bits = ((s_202_153) & (s_202_164));
        // D s_202_166: or s_202_165 s_202_162
        let s_202_166: Bits = ((s_202_165) | (s_202_162));
        // D s_202_167: cast reint s_202_166 -> u64
        let s_202_167: u64 = (s_202_166.value() as u64);
        // C s_202_168: const #22912u : u32
        let s_202_168: u32 = 22912;
        // N s_202_169: write-reg s_202_168 <= s_202_167
        let s_202_169: () = {
            state.write_register::<u64>(s_202_168 as isize, s_202_167);
            tracer.write_register(s_202_168 as isize, s_202_167);
        };
        // C s_202_170: const #12824u : u32
        let s_202_170: u32 = 12824;
        // D s_202_171: read-reg s_202_170:struct
        let s_202_171: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_170 as isize);
            tracer.read_register(s_202_170 as isize, value);
            value
        };
        // C s_202_172: const #12824u : u32
        let s_202_172: u32 = 12824;
        // N s_202_173: write-reg s_202_172 <= s_202_171
        let s_202_173: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_172 as isize, s_202_171);
            tracer.write_register(s_202_172 as isize, s_202_171);
        };
        // C s_202_174: const #12824u : u32
        let s_202_174: u32 = 12824;
        // D s_202_175: read-reg s_202_174:struct
        let s_202_175: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_174 as isize);
            tracer.read_register(s_202_174 as isize, value);
            value
        };
        // C s_202_176: const #12824u : u32
        let s_202_176: u32 = 12824;
        // N s_202_177: write-reg s_202_176 <= s_202_175
        let s_202_177: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_176 as isize, s_202_175);
            tracer.write_register(s_202_176 as isize, s_202_175);
        };
        // C s_202_178: const #12824u : u32
        let s_202_178: u32 = 12824;
        // D s_202_179: read-reg s_202_178:struct
        let s_202_179: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_178 as isize);
            tracer.read_register(s_202_178 as isize, value);
            value
        };
        // C s_202_180: const #12824u : u32
        let s_202_180: u32 = 12824;
        // N s_202_181: write-reg s_202_180 <= s_202_179
        let s_202_181: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_180 as isize, s_202_179);
            tracer.write_register(s_202_180 as isize, s_202_179);
        };
        // C s_202_182: const #1592u : u32
        let s_202_182: u32 = 1592;
        // D s_202_183: read-reg s_202_182:struct
        let s_202_183: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_182 as isize);
            tracer.read_register(s_202_182 as isize, value);
            value
        };
        // C s_202_184: const #1592u : u32
        let s_202_184: u32 = 1592;
        // N s_202_185: write-reg s_202_184 <= s_202_183
        let s_202_185: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_184 as isize, s_202_183);
            tracer.write_register(s_202_184 as isize, s_202_183);
        };
        // C s_202_186: const #91048u : u32
        let s_202_186: u32 = 91048;
        // D s_202_187: read-reg s_202_186:struct
        let s_202_187: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_186 as isize);
            tracer.read_register(s_202_186 as isize, value);
            value
        };
        // C s_202_188: const #91048u : u32
        let s_202_188: u32 = 91048;
        // N s_202_189: write-reg s_202_188 <= s_202_187
        let s_202_189: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_188 as isize, s_202_187);
            tracer.write_register(s_202_188 as isize, s_202_187);
        };
        // C s_202_190: const #12088u : u32
        let s_202_190: u32 = 12088;
        // D s_202_191: read-reg s_202_190:struct
        let s_202_191: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_190 as isize);
            tracer.read_register(s_202_190 as isize, value);
            value
        };
        // C s_202_192: const #12088u : u32
        let s_202_192: u32 = 12088;
        // N s_202_193: write-reg s_202_192 <= s_202_191
        let s_202_193: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_192 as isize, s_202_191);
            tracer.write_register(s_202_192 as isize, s_202_191);
        };
        // C s_202_194: const #12088u : u32
        let s_202_194: u32 = 12088;
        // D s_202_195: read-reg s_202_194:struct
        let s_202_195: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_194 as isize);
            tracer.read_register(s_202_194 as isize, value);
            value
        };
        // C s_202_196: const #12088u : u32
        let s_202_196: u32 = 12088;
        // N s_202_197: write-reg s_202_196 <= s_202_195
        let s_202_197: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_196 as isize, s_202_195);
            tracer.write_register(s_202_196 as isize, s_202_195);
        };
        // C s_202_198: const #12088u : u32
        let s_202_198: u32 = 12088;
        // D s_202_199: read-reg s_202_198:struct
        let s_202_199: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_198 as isize);
            tracer.read_register(s_202_198 as isize, value);
            value
        };
        // C s_202_200: const #12088u : u32
        let s_202_200: u32 = 12088;
        // N s_202_201: write-reg s_202_200 <= s_202_199
        let s_202_201: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_200 as isize, s_202_199);
            tracer.write_register(s_202_200 as isize, s_202_199);
        };
        // C s_202_202: const #12088u : u32
        let s_202_202: u32 = 12088;
        // D s_202_203: read-reg s_202_202:struct
        let s_202_203: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_202 as isize);
            tracer.read_register(s_202_202 as isize, value);
            value
        };
        // C s_202_204: const #12088u : u32
        let s_202_204: u32 = 12088;
        // N s_202_205: write-reg s_202_204 <= s_202_203
        let s_202_205: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_204 as isize, s_202_203);
            tracer.write_register(s_202_204 as isize, s_202_203);
        };
        // C s_202_206: const #12088u : u32
        let s_202_206: u32 = 12088;
        // D s_202_207: read-reg s_202_206:struct
        let s_202_207: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_206 as isize);
            tracer.read_register(s_202_206 as isize, value);
            value
        };
        // C s_202_208: const #12088u : u32
        let s_202_208: u32 = 12088;
        // N s_202_209: write-reg s_202_208 <= s_202_207
        let s_202_209: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_208 as isize, s_202_207);
            tracer.write_register(s_202_208 as isize, s_202_207);
        };
        // C s_202_210: const #32s : i
        let s_202_210: i128 = 32;
        // C s_202_211: const #103184u : u32
        let s_202_211: u32 = 103184;
        // D s_202_212: read-reg s_202_211:u64
        let s_202_212: u64 = {
            let value = state.read_register::<u64>(s_202_211 as isize);
            tracer.read_register(s_202_211 as isize, value);
            value
        };
        // D s_202_213: cast zx s_202_212 -> bv
        let s_202_213: Bits = Bits::new(s_202_212 as u128, 64u16);
        // C s_202_214: const #0u : u32
        let s_202_214: u32 = 0;
        // C s_202_215: cast zx s_202_214 -> bv
        let s_202_215: Bits = Bits::new(s_202_214 as u128, 32u16);
        // C s_202_216: const #31s : i
        let s_202_216: i128 = 31;
        // C s_202_217: const #1u : u64
        let s_202_217: u64 = 1;
        // C s_202_218: cast zx s_202_217 -> bv
        let s_202_218: Bits = Bits::new(s_202_217 as u128, 64u16);
        // C s_202_219: lsl s_202_218 s_202_216
        let s_202_219: Bits = s_202_218 << s_202_216;
        // C s_202_220: sub s_202_219 s_202_218
        let s_202_220: Bits = ((s_202_219) - (s_202_218));
        // C s_202_221: and s_202_215 s_202_220
        let s_202_221: Bits = ((s_202_215) & (s_202_220));
        // C s_202_222: lsl s_202_221 s_202_210
        let s_202_222: Bits = s_202_221 << s_202_210;
        // C s_202_223: lsl s_202_220 s_202_210
        let s_202_223: Bits = s_202_220 << s_202_210;
        // C s_202_224: cmpl s_202_223
        let s_202_224: Bits = !s_202_223;
        // D s_202_225: and s_202_213 s_202_224
        let s_202_225: Bits = ((s_202_213) & (s_202_224));
        // D s_202_226: or s_202_225 s_202_222
        let s_202_226: Bits = ((s_202_225) | (s_202_222));
        // D s_202_227: cast reint s_202_226 -> u64
        let s_202_227: u64 = (s_202_226.value() as u64);
        // C s_202_228: const #103184u : u32
        let s_202_228: u32 = 103184;
        // N s_202_229: write-reg s_202_228 <= s_202_227
        let s_202_229: () = {
            state.write_register::<u64>(s_202_228 as isize, s_202_227);
            tracer.write_register(s_202_228 as isize, s_202_227);
        };
        // C s_202_230: const #90648u : u32
        let s_202_230: u32 = 90648;
        // D s_202_231: read-reg s_202_230:struct
        let s_202_231: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_230 as isize);
            tracer.read_register(s_202_230 as isize, value);
            value
        };
        // C s_202_232: const #90648u : u32
        let s_202_232: u32 = 90648;
        // N s_202_233: write-reg s_202_232 <= s_202_231
        let s_202_233: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_232 as isize, s_202_231);
            tracer.write_register(s_202_232 as isize, s_202_231);
        };
        // C s_202_234: const #0u : u8
        let s_202_234: bool = false;
        // S s_202_235: call Bit(s_202_234)
        let s_202_235: bool = Bit(state, tracer, s_202_234);
        // C s_202_236: const #90648u : u32
        let s_202_236: u32 = 90648;
        // D s_202_237: read-reg s_202_236:struct
        let s_202_237: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_236 as isize);
            tracer.read_register(s_202_236 as isize, value);
            value
        };
        // C s_202_238: const #90648u : u32
        let s_202_238: u32 = 90648;
        // N s_202_239: write-reg s_202_238 <= s_202_237
        let s_202_239: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_238 as isize, s_202_237);
            tracer.write_register(s_202_238 as isize, s_202_237);
        };
        // C s_202_240: const #90648u : u32
        let s_202_240: u32 = 90648;
        // D s_202_241: read-reg s_202_240:struct
        let s_202_241: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_240 as isize);
            tracer.read_register(s_202_240 as isize, value);
            value
        };
        // C s_202_242: const #90648u : u32
        let s_202_242: u32 = 90648;
        // N s_202_243: write-reg s_202_242 <= s_202_241
        let s_202_243: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_242 as isize, s_202_241);
            tracer.write_register(s_202_242 as isize, s_202_241);
        };
        // C s_202_244: const #90648u : u32
        let s_202_244: u32 = 90648;
        // D s_202_245: read-reg s_202_244:struct
        let s_202_245: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_244 as isize);
            tracer.read_register(s_202_244 as isize, value);
            value
        };
        // C s_202_246: const #90648u : u32
        let s_202_246: u32 = 90648;
        // N s_202_247: write-reg s_202_246 <= s_202_245
        let s_202_247: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_246 as isize, s_202_245);
            tracer.write_register(s_202_246 as isize, s_202_245);
        };
        // C s_202_248: const #90648u : u32
        let s_202_248: u32 = 90648;
        // D s_202_249: read-reg s_202_248:struct
        let s_202_249: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_248 as isize);
            tracer.read_register(s_202_248 as isize, value);
            value
        };
        // C s_202_250: const #90648u : u32
        let s_202_250: u32 = 90648;
        // N s_202_251: write-reg s_202_250 <= s_202_249
        let s_202_251: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_250 as isize, s_202_249);
            tracer.write_register(s_202_250 as isize, s_202_249);
        };
        // C s_202_252: const #0u : u8
        let s_202_252: bool = false;
        // S s_202_253: call Bit(s_202_252)
        let s_202_253: bool = Bit(state, tracer, s_202_252);
        // C s_202_254: const #90648u : u32
        let s_202_254: u32 = 90648;
        // D s_202_255: read-reg s_202_254:struct
        let s_202_255: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_254 as isize);
            tracer.read_register(s_202_254 as isize, value);
            value
        };
        // C s_202_256: const #90648u : u32
        let s_202_256: u32 = 90648;
        // N s_202_257: write-reg s_202_256 <= s_202_255
        let s_202_257: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_256 as isize, s_202_255);
            tracer.write_register(s_202_256 as isize, s_202_255);
        };
        // C s_202_258: const #21024u : u32
        let s_202_258: u32 = 21024;
        // D s_202_259: read-reg s_202_258:struct
        let s_202_259: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_258 as isize);
            tracer.read_register(s_202_258 as isize, value);
            value
        };
        // C s_202_260: const #21024u : u32
        let s_202_260: u32 = 21024;
        // N s_202_261: write-reg s_202_260 <= s_202_259
        let s_202_261: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_260 as isize, s_202_259);
            tracer.write_register(s_202_260 as isize, s_202_259);
        };
        // C s_202_262: const #21024u : u32
        let s_202_262: u32 = 21024;
        // D s_202_263: read-reg s_202_262:struct
        let s_202_263: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_262 as isize);
            tracer.read_register(s_202_262 as isize, value);
            value
        };
        // C s_202_264: const #21024u : u32
        let s_202_264: u32 = 21024;
        // N s_202_265: write-reg s_202_264 <= s_202_263
        let s_202_265: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_264 as isize, s_202_263);
            tracer.write_register(s_202_264 as isize, s_202_263);
        };
        // C s_202_266: const #21024u : u32
        let s_202_266: u32 = 21024;
        // D s_202_267: read-reg s_202_266:struct
        let s_202_267: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_266 as isize);
            tracer.read_register(s_202_266 as isize, value);
            value
        };
        // C s_202_268: const #21024u : u32
        let s_202_268: u32 = 21024;
        // N s_202_269: write-reg s_202_268 <= s_202_267
        let s_202_269: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_268 as isize, s_202_267);
            tracer.write_register(s_202_268 as isize, s_202_267);
        };
        // C s_202_270: const #104648u : u32
        let s_202_270: u32 = 104648;
        // D s_202_271: read-reg s_202_270:struct
        let s_202_271: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_202_270 as isize);
            tracer.read_register(s_202_270 as isize, value);
            value
        };
        // C s_202_272: const #104648u : u32
        let s_202_272: u32 = 104648;
        // N s_202_273: write-reg s_202_272 <= s_202_271
        let s_202_273: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_202_272 as isize, s_202_271);
            tracer.write_register(s_202_272 as isize, s_202_271);
        };
        // D s_202_274: read-var cold:u8
        let s_202_274: bool = fn_state.cold;
        // N s_202_275: branch s_202_274 b1054 b203
        if s_202_274 {
            return block_1054(state, tracer, fn_state);
        } else {
            return block_203(state, tracer, fn_state);
        };
    }
    fn block_203<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_203_0: jump b204
        return block_204(state, tracer, fn_state);
    }
    fn block_204<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_204_0: const #0u : u8
        let s_204_0: bool = false;
        // S s_204_1: call Bit(s_204_0)
        let s_204_1: bool = Bit(state, tracer, s_204_0);
        // C s_204_2: const #104648u : u32
        let s_204_2: u32 = 104648;
        // D s_204_3: read-reg s_204_2:struct
        let s_204_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_204_2 as isize);
            tracer.read_register(s_204_2 as isize, value);
            value
        };
        // C s_204_4: const #104648u : u32
        let s_204_4: u32 = 104648;
        // N s_204_5: write-reg s_204_4 <= s_204_3
        let s_204_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_204_4 as isize, s_204_3);
            tracer.write_register(s_204_4 as isize, s_204_3);
        };
        // D s_204_6: read-var cold:u8
        let s_204_6: bool = fn_state.cold;
        // D s_204_7: not s_204_6
        let s_204_7: bool = !s_204_6;
        // N s_204_8: branch s_204_7 b1053 b205
        if s_204_7 {
            return block_1053(state, tracer, fn_state);
        } else {
            return block_205(state, tracer, fn_state);
        };
    }
    fn block_205<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_205_0: const #0u : u8
        let s_205_0: bool = false;
        // D s_205_1: write-var gs#39322 <= s_205_0
        fn_state.gs_39322 = s_205_0;
        // N s_205_2: jump b206
        return block_206(state, tracer, fn_state);
    }
    fn block_206<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_206_0: read-var gs#39322:u8
        let s_206_0: bool = fn_state.gs_39322;
        // N s_206_1: branch s_206_0 b1052 b207
        if s_206_0 {
            return block_1052(state, tracer, fn_state);
        } else {
            return block_207(state, tracer, fn_state);
        };
    }
    fn block_207<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_207_0: const #0u : u8
        let s_207_0: bool = false;
        // D s_207_1: write-var gs#39323 <= s_207_0
        fn_state.gs_39323 = s_207_0;
        // N s_207_2: jump b208
        return block_208(state, tracer, fn_state);
    }
    fn block_208<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_208_0: read-var gs#39323:u8
        let s_208_0: bool = fn_state.gs_39323;
        // N s_208_1: branch s_208_0 b1051 b209
        if s_208_0 {
            return block_1051(state, tracer, fn_state);
        } else {
            return block_209(state, tracer, fn_state);
        };
    }
    fn block_209<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_209_0: const #1s : i64
        let s_209_0: i64 = 1;
        // C s_209_1: cast zx s_209_0 -> i
        let s_209_1: i128 = (i128::try_from(s_209_0).unwrap());
        // S s_209_2: call __UNKNOWN_bits(s_209_1)
        let s_209_2: Bits = u__UNKNOWN_bits(state, tracer, s_209_1);
        // C s_209_3: const #104648u : u32
        let s_209_3: u32 = 104648;
        // D s_209_4: read-reg s_209_3:struct
        let s_209_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_209_3 as isize);
            tracer.read_register(s_209_3 as isize, value);
            value
        };
        // C s_209_5: const #104648u : u32
        let s_209_5: u32 = 104648;
        // N s_209_6: write-reg s_209_5 <= s_209_4
        let s_209_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_209_5 as isize, s_209_4);
            tracer.write_register(s_209_5 as isize, s_209_4);
        };
        // N s_209_7: jump b210
        return block_210(state, tracer, fn_state);
    }
    fn block_210<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_210_0: const #0u : u8
        let s_210_0: bool = false;
        // S s_210_1: call Bit(s_210_0)
        let s_210_1: bool = Bit(state, tracer, s_210_0);
        // C s_210_2: const #104648u : u32
        let s_210_2: u32 = 104648;
        // D s_210_3: read-reg s_210_2:struct
        let s_210_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_2 as isize);
            tracer.read_register(s_210_2 as isize, value);
            value
        };
        // C s_210_4: const #104648u : u32
        let s_210_4: u32 = 104648;
        // N s_210_5: write-reg s_210_4 <= s_210_3
        let s_210_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_4 as isize, s_210_3);
            tracer.write_register(s_210_4 as isize, s_210_3);
        };
        // C s_210_6: const #104648u : u32
        let s_210_6: u32 = 104648;
        // D s_210_7: read-reg s_210_6:struct
        let s_210_7: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_6 as isize);
            tracer.read_register(s_210_6 as isize, value);
            value
        };
        // C s_210_8: const #104648u : u32
        let s_210_8: u32 = 104648;
        // N s_210_9: write-reg s_210_8 <= s_210_7
        let s_210_9: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_8 as isize, s_210_7);
            tracer.write_register(s_210_8 as isize, s_210_7);
        };
        // C s_210_10: const #0u : u8
        let s_210_10: bool = false;
        // S s_210_11: call Bit(s_210_10)
        let s_210_11: bool = Bit(state, tracer, s_210_10);
        // C s_210_12: const #104648u : u32
        let s_210_12: u32 = 104648;
        // D s_210_13: read-reg s_210_12:struct
        let s_210_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_12 as isize);
            tracer.read_register(s_210_12 as isize, value);
            value
        };
        // C s_210_14: const #104648u : u32
        let s_210_14: u32 = 104648;
        // N s_210_15: write-reg s_210_14 <= s_210_13
        let s_210_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_14 as isize, s_210_13);
            tracer.write_register(s_210_14 as isize, s_210_13);
        };
        // C s_210_16: const #104648u : u32
        let s_210_16: u32 = 104648;
        // D s_210_17: read-reg s_210_16:struct
        let s_210_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_16 as isize);
            tracer.read_register(s_210_16 as isize, value);
            value
        };
        // C s_210_18: const #104648u : u32
        let s_210_18: u32 = 104648;
        // N s_210_19: write-reg s_210_18 <= s_210_17
        let s_210_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_18 as isize, s_210_17);
            tracer.write_register(s_210_18 as isize, s_210_17);
        };
        // C s_210_20: const #104648u : u32
        let s_210_20: u32 = 104648;
        // D s_210_21: read-reg s_210_20:struct
        let s_210_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_20 as isize);
            tracer.read_register(s_210_20 as isize, value);
            value
        };
        // C s_210_22: const #104648u : u32
        let s_210_22: u32 = 104648;
        // N s_210_23: write-reg s_210_22 <= s_210_21
        let s_210_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_22 as isize, s_210_21);
            tracer.write_register(s_210_22 as isize, s_210_21);
        };
        // C s_210_24: const #104648u : u32
        let s_210_24: u32 = 104648;
        // D s_210_25: read-reg s_210_24:struct
        let s_210_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_24 as isize);
            tracer.read_register(s_210_24 as isize, value);
            value
        };
        // C s_210_26: const #104648u : u32
        let s_210_26: u32 = 104648;
        // N s_210_27: write-reg s_210_26 <= s_210_25
        let s_210_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_26 as isize, s_210_25);
            tracer.write_register(s_210_26 as isize, s_210_25);
        };
        // C s_210_28: const #15536u : u32
        let s_210_28: u32 = 15536;
        // D s_210_29: read-reg s_210_28:struct
        let s_210_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_28 as isize);
            tracer.read_register(s_210_28 as isize, value);
            value
        };
        // C s_210_30: const #15536u : u32
        let s_210_30: u32 = 15536;
        // N s_210_31: write-reg s_210_30 <= s_210_29
        let s_210_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_30 as isize, s_210_29);
            tracer.write_register(s_210_30 as isize, s_210_29);
        };
        // C s_210_32: const #15536u : u32
        let s_210_32: u32 = 15536;
        // D s_210_33: read-reg s_210_32:struct
        let s_210_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_32 as isize);
            tracer.read_register(s_210_32 as isize, value);
            value
        };
        // C s_210_34: const #15536u : u32
        let s_210_34: u32 = 15536;
        // N s_210_35: write-reg s_210_34 <= s_210_33
        let s_210_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_34 as isize, s_210_33);
            tracer.write_register(s_210_34 as isize, s_210_33);
        };
        // C s_210_36: const #22904u : u32
        let s_210_36: u32 = 22904;
        // D s_210_37: read-reg s_210_36:struct
        let s_210_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_36 as isize);
            tracer.read_register(s_210_36 as isize, value);
            value
        };
        // C s_210_38: const #22904u : u32
        let s_210_38: u32 = 22904;
        // N s_210_39: write-reg s_210_38 <= s_210_37
        let s_210_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_38 as isize, s_210_37);
            tracer.write_register(s_210_38 as isize, s_210_37);
        };
        // C s_210_40: const #16648u : u32
        let s_210_40: u32 = 16648;
        // D s_210_41: read-reg s_210_40:struct
        let s_210_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_40 as isize);
            tracer.read_register(s_210_40 as isize, value);
            value
        };
        // C s_210_42: const #16648u : u32
        let s_210_42: u32 = 16648;
        // N s_210_43: write-reg s_210_42 <= s_210_41
        let s_210_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_42 as isize, s_210_41);
            tracer.write_register(s_210_42 as isize, s_210_41);
        };
        // C s_210_44: const #16648u : u32
        let s_210_44: u32 = 16648;
        // D s_210_45: read-reg s_210_44:struct
        let s_210_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_44 as isize);
            tracer.read_register(s_210_44 as isize, value);
            value
        };
        // C s_210_46: const #16648u : u32
        let s_210_46: u32 = 16648;
        // N s_210_47: write-reg s_210_46 <= s_210_45
        let s_210_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_46 as isize, s_210_45);
            tracer.write_register(s_210_46 as isize, s_210_45);
        };
        // C s_210_48: const #16648u : u32
        let s_210_48: u32 = 16648;
        // D s_210_49: read-reg s_210_48:struct
        let s_210_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_48 as isize);
            tracer.read_register(s_210_48 as isize, value);
            value
        };
        // C s_210_50: const #16648u : u32
        let s_210_50: u32 = 16648;
        // N s_210_51: write-reg s_210_50 <= s_210_49
        let s_210_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_50 as isize, s_210_49);
            tracer.write_register(s_210_50 as isize, s_210_49);
        };
        // C s_210_52: const #16648u : u32
        let s_210_52: u32 = 16648;
        // D s_210_53: read-reg s_210_52:struct
        let s_210_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_52 as isize);
            tracer.read_register(s_210_52 as isize, value);
            value
        };
        // C s_210_54: const #16648u : u32
        let s_210_54: u32 = 16648;
        // N s_210_55: write-reg s_210_54 <= s_210_53
        let s_210_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_54 as isize, s_210_53);
            tracer.write_register(s_210_54 as isize, s_210_53);
        };
        // C s_210_56: const #16288u : u32
        let s_210_56: u32 = 16288;
        // D s_210_57: read-reg s_210_56:struct
        let s_210_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_56 as isize);
            tracer.read_register(s_210_56 as isize, value);
            value
        };
        // C s_210_58: const #16288u : u32
        let s_210_58: u32 = 16288;
        // N s_210_59: write-reg s_210_58 <= s_210_57
        let s_210_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_58 as isize, s_210_57);
            tracer.write_register(s_210_58 as isize, s_210_57);
        };
        // C s_210_60: const #16288u : u32
        let s_210_60: u32 = 16288;
        // D s_210_61: read-reg s_210_60:struct
        let s_210_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_60 as isize);
            tracer.read_register(s_210_60 as isize, value);
            value
        };
        // C s_210_62: const #16288u : u32
        let s_210_62: u32 = 16288;
        // N s_210_63: write-reg s_210_62 <= s_210_61
        let s_210_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_62 as isize, s_210_61);
            tracer.write_register(s_210_62 as isize, s_210_61);
        };
        // C s_210_64: const #104904u : u32
        let s_210_64: u32 = 104904;
        // D s_210_65: read-reg s_210_64:struct
        let s_210_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_64 as isize);
            tracer.read_register(s_210_64 as isize, value);
            value
        };
        // C s_210_66: const #104904u : u32
        let s_210_66: u32 = 104904;
        // N s_210_67: write-reg s_210_66 <= s_210_65
        let s_210_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_66 as isize, s_210_65);
            tracer.write_register(s_210_66 as isize, s_210_65);
        };
        // C s_210_68: const #104904u : u32
        let s_210_68: u32 = 104904;
        // D s_210_69: read-reg s_210_68:struct
        let s_210_69: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_68 as isize);
            tracer.read_register(s_210_68 as isize, value);
            value
        };
        // C s_210_70: const #104904u : u32
        let s_210_70: u32 = 104904;
        // N s_210_71: write-reg s_210_70 <= s_210_69
        let s_210_71: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_70 as isize, s_210_69);
            tracer.write_register(s_210_70 as isize, s_210_69);
        };
        // C s_210_72: const #17664u : u32
        let s_210_72: u32 = 17664;
        // D s_210_73: read-reg s_210_72:struct
        let s_210_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_210_72 as isize);
            tracer.read_register(s_210_72 as isize, value);
            value
        };
        // C s_210_74: const #17664u : u32
        let s_210_74: u32 = 17664;
        // N s_210_75: write-reg s_210_74 <= s_210_73
        let s_210_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_210_74 as isize, s_210_73);
            tracer.write_register(s_210_74 as isize, s_210_73);
        };
        // D s_210_76: read-var cold:u8
        let s_210_76: bool = fn_state.cold;
        // D s_210_77: not s_210_76
        let s_210_77: bool = !s_210_76;
        // N s_210_78: branch s_210_77 b1050 b211
        if s_210_77 {
            return block_1050(state, tracer, fn_state);
        } else {
            return block_211(state, tracer, fn_state);
        };
    }
    fn block_211<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_211_0: const #0u : u8
        let s_211_0: bool = false;
        // D s_211_1: write-var gs#39376 <= s_211_0
        fn_state.gs_39376 = s_211_0;
        // N s_211_2: jump b212
        return block_212(state, tracer, fn_state);
    }
    fn block_212<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_212_0: read-var gs#39376:u8
        let s_212_0: bool = fn_state.gs_39376;
        // N s_212_1: branch s_212_0 b1049 b213
        if s_212_0 {
            return block_1049(state, tracer, fn_state);
        } else {
            return block_213(state, tracer, fn_state);
        };
    }
    fn block_213<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_213_0: const #1s : i64
        let s_213_0: i64 = 1;
        // C s_213_1: cast zx s_213_0 -> i
        let s_213_1: i128 = (i128::try_from(s_213_0).unwrap());
        // S s_213_2: call __UNKNOWN_bits(s_213_1)
        let s_213_2: Bits = u__UNKNOWN_bits(state, tracer, s_213_1);
        // C s_213_3: const #17664u : u32
        let s_213_3: u32 = 17664;
        // D s_213_4: read-reg s_213_3:struct
        let s_213_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_213_3 as isize);
            tracer.read_register(s_213_3 as isize, value);
            value
        };
        // C s_213_5: const #17664u : u32
        let s_213_5: u32 = 17664;
        // N s_213_6: write-reg s_213_5 <= s_213_4
        let s_213_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_213_5 as isize, s_213_4);
            tracer.write_register(s_213_5 as isize, s_213_4);
        };
        // N s_213_7: jump b214
        return block_214(state, tracer, fn_state);
    }
    fn block_214<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_214_0: const #0u : u8
        let s_214_0: bool = false;
        // S s_214_1: call Bit(s_214_0)
        let s_214_1: bool = Bit(state, tracer, s_214_0);
        // C s_214_2: const #17664u : u32
        let s_214_2: u32 = 17664;
        // D s_214_3: read-reg s_214_2:struct
        let s_214_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_214_2 as isize);
            tracer.read_register(s_214_2 as isize, value);
            value
        };
        // C s_214_4: const #17664u : u32
        let s_214_4: u32 = 17664;
        // N s_214_5: write-reg s_214_4 <= s_214_3
        let s_214_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_214_4 as isize, s_214_3);
            tracer.write_register(s_214_4 as isize, s_214_3);
        };
        // D s_214_6: read-var cold:u8
        let s_214_6: bool = fn_state.cold;
        // D s_214_7: not s_214_6
        let s_214_7: bool = !s_214_6;
        // N s_214_8: branch s_214_7 b1048 b215
        if s_214_7 {
            return block_1048(state, tracer, fn_state);
        } else {
            return block_215(state, tracer, fn_state);
        };
    }
    fn block_215<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_215_0: const #0u : u8
        let s_215_0: bool = false;
        // D s_215_1: write-var gs#39379 <= s_215_0
        fn_state.gs_39379 = s_215_0;
        // N s_215_2: jump b216
        return block_216(state, tracer, fn_state);
    }
    fn block_216<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_216_0: read-var gs#39379:u8
        let s_216_0: bool = fn_state.gs_39379;
        // N s_216_1: branch s_216_0 b1047 b217
        if s_216_0 {
            return block_1047(state, tracer, fn_state);
        } else {
            return block_217(state, tracer, fn_state);
        };
    }
    fn block_217<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_217_0: const #1s : i64
        let s_217_0: i64 = 1;
        // C s_217_1: cast zx s_217_0 -> i
        let s_217_1: i128 = (i128::try_from(s_217_0).unwrap());
        // S s_217_2: call __UNKNOWN_bits(s_217_1)
        let s_217_2: Bits = u__UNKNOWN_bits(state, tracer, s_217_1);
        // C s_217_3: const #17664u : u32
        let s_217_3: u32 = 17664;
        // D s_217_4: read-reg s_217_3:struct
        let s_217_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_217_3 as isize);
            tracer.read_register(s_217_3 as isize, value);
            value
        };
        // C s_217_5: const #17664u : u32
        let s_217_5: u32 = 17664;
        // N s_217_6: write-reg s_217_5 <= s_217_4
        let s_217_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_217_5 as isize, s_217_4);
            tracer.write_register(s_217_5 as isize, s_217_4);
        };
        // N s_217_7: jump b218
        return block_218(state, tracer, fn_state);
    }
    fn block_218<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_218_0: const #17664u : u32
        let s_218_0: u32 = 17664;
        // D s_218_1: read-reg s_218_0:struct
        let s_218_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_218_0 as isize);
            tracer.read_register(s_218_0 as isize, value);
            value
        };
        // C s_218_2: const #17664u : u32
        let s_218_2: u32 = 17664;
        // N s_218_3: write-reg s_218_2 <= s_218_1
        let s_218_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_218_2 as isize, s_218_1);
            tracer.write_register(s_218_2 as isize, s_218_1);
        };
        // D s_218_4: read-var cold:u8
        let s_218_4: bool = fn_state.cold;
        // D s_218_5: not s_218_4
        let s_218_5: bool = !s_218_4;
        // N s_218_6: branch s_218_5 b1046 b219
        if s_218_5 {
            return block_1046(state, tracer, fn_state);
        } else {
            return block_219(state, tracer, fn_state);
        };
    }
    fn block_219<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_219_0: const #0u : u8
        let s_219_0: bool = false;
        // D s_219_1: write-var gs#39383 <= s_219_0
        fn_state.gs_39383 = s_219_0;
        // N s_219_2: jump b220
        return block_220(state, tracer, fn_state);
    }
    fn block_220<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_220_0: read-var gs#39383:u8
        let s_220_0: bool = fn_state.gs_39383;
        // N s_220_1: branch s_220_0 b1045 b221
        if s_220_0 {
            return block_1045(state, tracer, fn_state);
        } else {
            return block_221(state, tracer, fn_state);
        };
    }
    fn block_221<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_221_0: const #1s : i64
        let s_221_0: i64 = 1;
        // C s_221_1: cast zx s_221_0 -> i
        let s_221_1: i128 = (i128::try_from(s_221_0).unwrap());
        // S s_221_2: call __UNKNOWN_bits(s_221_1)
        let s_221_2: Bits = u__UNKNOWN_bits(state, tracer, s_221_1);
        // C s_221_3: const #17664u : u32
        let s_221_3: u32 = 17664;
        // D s_221_4: read-reg s_221_3:struct
        let s_221_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_221_3 as isize);
            tracer.read_register(s_221_3 as isize, value);
            value
        };
        // C s_221_5: const #17664u : u32
        let s_221_5: u32 = 17664;
        // N s_221_6: write-reg s_221_5 <= s_221_4
        let s_221_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_221_5 as isize, s_221_4);
            tracer.write_register(s_221_5 as isize, s_221_4);
        };
        // N s_221_7: jump b222
        return block_222(state, tracer, fn_state);
    }
    fn block_222<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_222_0: read-var cold:u8
        let s_222_0: bool = fn_state.cold;
        // D s_222_1: not s_222_0
        let s_222_1: bool = !s_222_0;
        // N s_222_2: branch s_222_1 b1044 b223
        if s_222_1 {
            return block_1044(state, tracer, fn_state);
        } else {
            return block_223(state, tracer, fn_state);
        };
    }
    fn block_223<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_223_0: const #0u : u8
        let s_223_0: bool = false;
        // D s_223_1: write-var gs#39384 <= s_223_0
        fn_state.gs_39384 = s_223_0;
        // N s_223_2: jump b224
        return block_224(state, tracer, fn_state);
    }
    fn block_224<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_224_0: read-var gs#39384:u8
        let s_224_0: bool = fn_state.gs_39384;
        // N s_224_1: branch s_224_0 b1043 b225
        if s_224_0 {
            return block_1043(state, tracer, fn_state);
        } else {
            return block_225(state, tracer, fn_state);
        };
    }
    fn block_225<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_225_0: const #1s : i64
        let s_225_0: i64 = 1;
        // C s_225_1: cast zx s_225_0 -> i
        let s_225_1: i128 = (i128::try_from(s_225_0).unwrap());
        // S s_225_2: call __UNKNOWN_bits(s_225_1)
        let s_225_2: Bits = u__UNKNOWN_bits(state, tracer, s_225_1);
        // C s_225_3: const #17664u : u32
        let s_225_3: u32 = 17664;
        // D s_225_4: read-reg s_225_3:struct
        let s_225_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_225_3 as isize);
            tracer.read_register(s_225_3 as isize, value);
            value
        };
        // C s_225_5: const #17664u : u32
        let s_225_5: u32 = 17664;
        // N s_225_6: write-reg s_225_5 <= s_225_4
        let s_225_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_225_5 as isize, s_225_4);
            tracer.write_register(s_225_5 as isize, s_225_4);
        };
        // N s_225_7: jump b226
        return block_226(state, tracer, fn_state);
    }
    fn block_226<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_226_0: read-var cold:u8
        let s_226_0: bool = fn_state.cold;
        // D s_226_1: not s_226_0
        let s_226_1: bool = !s_226_0;
        // N s_226_2: branch s_226_1 b1042 b227
        if s_226_1 {
            return block_1042(state, tracer, fn_state);
        } else {
            return block_227(state, tracer, fn_state);
        };
    }
    fn block_227<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_227_0: const #0u : u8
        let s_227_0: bool = false;
        // D s_227_1: write-var gs#39385 <= s_227_0
        fn_state.gs_39385 = s_227_0;
        // N s_227_2: jump b228
        return block_228(state, tracer, fn_state);
    }
    fn block_228<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_228_0: read-var gs#39385:u8
        let s_228_0: bool = fn_state.gs_39385;
        // N s_228_1: branch s_228_0 b1041 b229
        if s_228_0 {
            return block_1041(state, tracer, fn_state);
        } else {
            return block_229(state, tracer, fn_state);
        };
    }
    fn block_229<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_229_0: const #1s : i64
        let s_229_0: i64 = 1;
        // C s_229_1: cast zx s_229_0 -> i
        let s_229_1: i128 = (i128::try_from(s_229_0).unwrap());
        // S s_229_2: call __UNKNOWN_bits(s_229_1)
        let s_229_2: Bits = u__UNKNOWN_bits(state, tracer, s_229_1);
        // C s_229_3: const #17664u : u32
        let s_229_3: u32 = 17664;
        // D s_229_4: read-reg s_229_3:struct
        let s_229_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_229_3 as isize);
            tracer.read_register(s_229_3 as isize, value);
            value
        };
        // C s_229_5: const #17664u : u32
        let s_229_5: u32 = 17664;
        // N s_229_6: write-reg s_229_5 <= s_229_4
        let s_229_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_229_5 as isize, s_229_4);
            tracer.write_register(s_229_5 as isize, s_229_4);
        };
        // N s_229_7: jump b230
        return block_230(state, tracer, fn_state);
    }
    fn block_230<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_230_0: read-var cold:u8
        let s_230_0: bool = fn_state.cold;
        // D s_230_1: not s_230_0
        let s_230_1: bool = !s_230_0;
        // N s_230_2: branch s_230_1 b1040 b231
        if s_230_1 {
            return block_1040(state, tracer, fn_state);
        } else {
            return block_231(state, tracer, fn_state);
        };
    }
    fn block_231<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_231_0: const #0u : u8
        let s_231_0: bool = false;
        // D s_231_1: write-var gs#39386 <= s_231_0
        fn_state.gs_39386 = s_231_0;
        // N s_231_2: jump b232
        return block_232(state, tracer, fn_state);
    }
    fn block_232<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_232_0: read-var gs#39386:u8
        let s_232_0: bool = fn_state.gs_39386;
        // N s_232_1: branch s_232_0 b1039 b233
        if s_232_0 {
            return block_1039(state, tracer, fn_state);
        } else {
            return block_233(state, tracer, fn_state);
        };
    }
    fn block_233<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_233_0: const #1s : i64
        let s_233_0: i64 = 1;
        // C s_233_1: cast zx s_233_0 -> i
        let s_233_1: i128 = (i128::try_from(s_233_0).unwrap());
        // S s_233_2: call __UNKNOWN_bits(s_233_1)
        let s_233_2: Bits = u__UNKNOWN_bits(state, tracer, s_233_1);
        // C s_233_3: const #17664u : u32
        let s_233_3: u32 = 17664;
        // D s_233_4: read-reg s_233_3:struct
        let s_233_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_233_3 as isize);
            tracer.read_register(s_233_3 as isize, value);
            value
        };
        // C s_233_5: const #17664u : u32
        let s_233_5: u32 = 17664;
        // N s_233_6: write-reg s_233_5 <= s_233_4
        let s_233_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_233_5 as isize, s_233_4);
            tracer.write_register(s_233_5 as isize, s_233_4);
        };
        // N s_233_7: jump b234
        return block_234(state, tracer, fn_state);
    }
    fn block_234<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_234_0: read-var cold:u8
        let s_234_0: bool = fn_state.cold;
        // D s_234_1: not s_234_0
        let s_234_1: bool = !s_234_0;
        // N s_234_2: branch s_234_1 b1038 b235
        if s_234_1 {
            return block_1038(state, tracer, fn_state);
        } else {
            return block_235(state, tracer, fn_state);
        };
    }
    fn block_235<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_235_0: const #0u : u8
        let s_235_0: bool = false;
        // D s_235_1: write-var gs#39387 <= s_235_0
        fn_state.gs_39387 = s_235_0;
        // N s_235_2: jump b236
        return block_236(state, tracer, fn_state);
    }
    fn block_236<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_236_0: read-var gs#39387:u8
        let s_236_0: bool = fn_state.gs_39387;
        // N s_236_1: branch s_236_0 b1037 b237
        if s_236_0 {
            return block_1037(state, tracer, fn_state);
        } else {
            return block_237(state, tracer, fn_state);
        };
    }
    fn block_237<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_237_0: const #1s : i64
        let s_237_0: i64 = 1;
        // C s_237_1: cast zx s_237_0 -> i
        let s_237_1: i128 = (i128::try_from(s_237_0).unwrap());
        // S s_237_2: call __UNKNOWN_bits(s_237_1)
        let s_237_2: Bits = u__UNKNOWN_bits(state, tracer, s_237_1);
        // C s_237_3: const #17664u : u32
        let s_237_3: u32 = 17664;
        // D s_237_4: read-reg s_237_3:struct
        let s_237_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_237_3 as isize);
            tracer.read_register(s_237_3 as isize, value);
            value
        };
        // C s_237_5: const #17664u : u32
        let s_237_5: u32 = 17664;
        // N s_237_6: write-reg s_237_5 <= s_237_4
        let s_237_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_237_5 as isize, s_237_4);
            tracer.write_register(s_237_5 as isize, s_237_4);
        };
        // N s_237_7: jump b238
        return block_238(state, tracer, fn_state);
    }
    fn block_238<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_238_0: read-var cold:u8
        let s_238_0: bool = fn_state.cold;
        // D s_238_1: not s_238_0
        let s_238_1: bool = !s_238_0;
        // N s_238_2: branch s_238_1 b1036 b239
        if s_238_1 {
            return block_1036(state, tracer, fn_state);
        } else {
            return block_239(state, tracer, fn_state);
        };
    }
    fn block_239<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_239_0: const #0u : u8
        let s_239_0: bool = false;
        // D s_239_1: write-var gs#39388 <= s_239_0
        fn_state.gs_39388 = s_239_0;
        // N s_239_2: jump b240
        return block_240(state, tracer, fn_state);
    }
    fn block_240<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_240_0: read-var gs#39388:u8
        let s_240_0: bool = fn_state.gs_39388;
        // N s_240_1: branch s_240_0 b1035 b241
        if s_240_0 {
            return block_1035(state, tracer, fn_state);
        } else {
            return block_241(state, tracer, fn_state);
        };
    }
    fn block_241<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_241_0: const #1s : i64
        let s_241_0: i64 = 1;
        // C s_241_1: cast zx s_241_0 -> i
        let s_241_1: i128 = (i128::try_from(s_241_0).unwrap());
        // S s_241_2: call __UNKNOWN_bits(s_241_1)
        let s_241_2: Bits = u__UNKNOWN_bits(state, tracer, s_241_1);
        // C s_241_3: const #17664u : u32
        let s_241_3: u32 = 17664;
        // D s_241_4: read-reg s_241_3:struct
        let s_241_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_241_3 as isize);
            tracer.read_register(s_241_3 as isize, value);
            value
        };
        // C s_241_5: const #17664u : u32
        let s_241_5: u32 = 17664;
        // N s_241_6: write-reg s_241_5 <= s_241_4
        let s_241_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_241_5 as isize, s_241_4);
            tracer.write_register(s_241_5 as isize, s_241_4);
        };
        // N s_241_7: jump b242
        return block_242(state, tracer, fn_state);
    }
    fn block_242<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_242_0: read-var cold:u8
        let s_242_0: bool = fn_state.cold;
        // D s_242_1: not s_242_0
        let s_242_1: bool = !s_242_0;
        // N s_242_2: branch s_242_1 b1034 b243
        if s_242_1 {
            return block_1034(state, tracer, fn_state);
        } else {
            return block_243(state, tracer, fn_state);
        };
    }
    fn block_243<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_243_0: const #0u : u8
        let s_243_0: bool = false;
        // D s_243_1: write-var gs#39389 <= s_243_0
        fn_state.gs_39389 = s_243_0;
        // N s_243_2: jump b244
        return block_244(state, tracer, fn_state);
    }
    fn block_244<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_244_0: read-var gs#39389:u8
        let s_244_0: bool = fn_state.gs_39389;
        // N s_244_1: branch s_244_0 b1033 b245
        if s_244_0 {
            return block_1033(state, tracer, fn_state);
        } else {
            return block_245(state, tracer, fn_state);
        };
    }
    fn block_245<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_245_0: const #1s : i64
        let s_245_0: i64 = 1;
        // C s_245_1: cast zx s_245_0 -> i
        let s_245_1: i128 = (i128::try_from(s_245_0).unwrap());
        // S s_245_2: call __UNKNOWN_bits(s_245_1)
        let s_245_2: Bits = u__UNKNOWN_bits(state, tracer, s_245_1);
        // C s_245_3: const #17664u : u32
        let s_245_3: u32 = 17664;
        // D s_245_4: read-reg s_245_3:struct
        let s_245_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_245_3 as isize);
            tracer.read_register(s_245_3 as isize, value);
            value
        };
        // C s_245_5: const #17664u : u32
        let s_245_5: u32 = 17664;
        // N s_245_6: write-reg s_245_5 <= s_245_4
        let s_245_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_245_5 as isize, s_245_4);
            tracer.write_register(s_245_5 as isize, s_245_4);
        };
        // N s_245_7: jump b246
        return block_246(state, tracer, fn_state);
    }
    fn block_246<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_246_0: read-var cold:u8
        let s_246_0: bool = fn_state.cold;
        // D s_246_1: not s_246_0
        let s_246_1: bool = !s_246_0;
        // N s_246_2: branch s_246_1 b1032 b247
        if s_246_1 {
            return block_1032(state, tracer, fn_state);
        } else {
            return block_247(state, tracer, fn_state);
        };
    }
    fn block_247<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_247_0: const #0u : u8
        let s_247_0: bool = false;
        // D s_247_1: write-var gs#39390 <= s_247_0
        fn_state.gs_39390 = s_247_0;
        // N s_247_2: jump b248
        return block_248(state, tracer, fn_state);
    }
    fn block_248<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_248_0: read-var gs#39390:u8
        let s_248_0: bool = fn_state.gs_39390;
        // N s_248_1: branch s_248_0 b1031 b249
        if s_248_0 {
            return block_1031(state, tracer, fn_state);
        } else {
            return block_249(state, tracer, fn_state);
        };
    }
    fn block_249<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_249_0: const #1s : i64
        let s_249_0: i64 = 1;
        // C s_249_1: cast zx s_249_0 -> i
        let s_249_1: i128 = (i128::try_from(s_249_0).unwrap());
        // S s_249_2: call __UNKNOWN_bits(s_249_1)
        let s_249_2: Bits = u__UNKNOWN_bits(state, tracer, s_249_1);
        // C s_249_3: const #17664u : u32
        let s_249_3: u32 = 17664;
        // D s_249_4: read-reg s_249_3:struct
        let s_249_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_249_3 as isize);
            tracer.read_register(s_249_3 as isize, value);
            value
        };
        // C s_249_5: const #17664u : u32
        let s_249_5: u32 = 17664;
        // N s_249_6: write-reg s_249_5 <= s_249_4
        let s_249_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_249_5 as isize, s_249_4);
            tracer.write_register(s_249_5 as isize, s_249_4);
        };
        // N s_249_7: jump b250
        return block_250(state, tracer, fn_state);
    }
    fn block_250<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_250_0: read-var cold:u8
        let s_250_0: bool = fn_state.cold;
        // D s_250_1: not s_250_0
        let s_250_1: bool = !s_250_0;
        // N s_250_2: branch s_250_1 b1030 b251
        if s_250_1 {
            return block_1030(state, tracer, fn_state);
        } else {
            return block_251(state, tracer, fn_state);
        };
    }
    fn block_251<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_251_0: const #0u : u8
        let s_251_0: bool = false;
        // D s_251_1: write-var gs#39391 <= s_251_0
        fn_state.gs_39391 = s_251_0;
        // N s_251_2: jump b252
        return block_252(state, tracer, fn_state);
    }
    fn block_252<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_252_0: read-var gs#39391:u8
        let s_252_0: bool = fn_state.gs_39391;
        // N s_252_1: branch s_252_0 b1029 b253
        if s_252_0 {
            return block_1029(state, tracer, fn_state);
        } else {
            return block_253(state, tracer, fn_state);
        };
    }
    fn block_253<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_253_0: const #1s : i64
        let s_253_0: i64 = 1;
        // C s_253_1: cast zx s_253_0 -> i
        let s_253_1: i128 = (i128::try_from(s_253_0).unwrap());
        // S s_253_2: call __UNKNOWN_bits(s_253_1)
        let s_253_2: Bits = u__UNKNOWN_bits(state, tracer, s_253_1);
        // C s_253_3: const #17664u : u32
        let s_253_3: u32 = 17664;
        // D s_253_4: read-reg s_253_3:struct
        let s_253_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_253_3 as isize);
            tracer.read_register(s_253_3 as isize, value);
            value
        };
        // C s_253_5: const #17664u : u32
        let s_253_5: u32 = 17664;
        // N s_253_6: write-reg s_253_5 <= s_253_4
        let s_253_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_253_5 as isize, s_253_4);
            tracer.write_register(s_253_5 as isize, s_253_4);
        };
        // N s_253_7: jump b254
        return block_254(state, tracer, fn_state);
    }
    fn block_254<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_254_0: read-var cold:u8
        let s_254_0: bool = fn_state.cold;
        // D s_254_1: not s_254_0
        let s_254_1: bool = !s_254_0;
        // N s_254_2: branch s_254_1 b1028 b255
        if s_254_1 {
            return block_1028(state, tracer, fn_state);
        } else {
            return block_255(state, tracer, fn_state);
        };
    }
    fn block_255<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_255_0: const #0u : u8
        let s_255_0: bool = false;
        // D s_255_1: write-var gs#39392 <= s_255_0
        fn_state.gs_39392 = s_255_0;
        // N s_255_2: jump b256
        return block_256(state, tracer, fn_state);
    }
    fn block_256<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_256_0: read-var gs#39392:u8
        let s_256_0: bool = fn_state.gs_39392;
        // N s_256_1: branch s_256_0 b1027 b257
        if s_256_0 {
            return block_1027(state, tracer, fn_state);
        } else {
            return block_257(state, tracer, fn_state);
        };
    }
    fn block_257<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_257_0: const #1s : i64
        let s_257_0: i64 = 1;
        // C s_257_1: cast zx s_257_0 -> i
        let s_257_1: i128 = (i128::try_from(s_257_0).unwrap());
        // S s_257_2: call __UNKNOWN_bits(s_257_1)
        let s_257_2: Bits = u__UNKNOWN_bits(state, tracer, s_257_1);
        // C s_257_3: const #17664u : u32
        let s_257_3: u32 = 17664;
        // D s_257_4: read-reg s_257_3:struct
        let s_257_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_257_3 as isize);
            tracer.read_register(s_257_3 as isize, value);
            value
        };
        // C s_257_5: const #17664u : u32
        let s_257_5: u32 = 17664;
        // N s_257_6: write-reg s_257_5 <= s_257_4
        let s_257_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_257_5 as isize, s_257_4);
            tracer.write_register(s_257_5 as isize, s_257_4);
        };
        // N s_257_7: jump b258
        return block_258(state, tracer, fn_state);
    }
    fn block_258<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_258_0: const #0u : u8
        let s_258_0: bool = false;
        // S s_258_1: call Bit(s_258_0)
        let s_258_1: bool = Bit(state, tracer, s_258_0);
        // C s_258_2: const #17664u : u32
        let s_258_2: u32 = 17664;
        // D s_258_3: read-reg s_258_2:struct
        let s_258_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_258_2 as isize);
            tracer.read_register(s_258_2 as isize, value);
            value
        };
        // C s_258_4: const #17664u : u32
        let s_258_4: u32 = 17664;
        // N s_258_5: write-reg s_258_4 <= s_258_3
        let s_258_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_258_4 as isize, s_258_3);
            tracer.write_register(s_258_4 as isize, s_258_3);
        };
        // D s_258_6: read-var cold:u8
        let s_258_6: bool = fn_state.cold;
        // D s_258_7: not s_258_6
        let s_258_7: bool = !s_258_6;
        // N s_258_8: branch s_258_7 b1026 b259
        if s_258_7 {
            return block_1026(state, tracer, fn_state);
        } else {
            return block_259(state, tracer, fn_state);
        };
    }
    fn block_259<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_259_0: const #0u : u8
        let s_259_0: bool = false;
        // D s_259_1: write-var gs#39395 <= s_259_0
        fn_state.gs_39395 = s_259_0;
        // N s_259_2: jump b260
        return block_260(state, tracer, fn_state);
    }
    fn block_260<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_260_0: read-var gs#39395:u8
        let s_260_0: bool = fn_state.gs_39395;
        // N s_260_1: branch s_260_0 b1025 b261
        if s_260_0 {
            return block_1025(state, tracer, fn_state);
        } else {
            return block_261(state, tracer, fn_state);
        };
    }
    fn block_261<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_261_0: const #1s : i64
        let s_261_0: i64 = 1;
        // C s_261_1: cast zx s_261_0 -> i
        let s_261_1: i128 = (i128::try_from(s_261_0).unwrap());
        // S s_261_2: call __UNKNOWN_bits(s_261_1)
        let s_261_2: Bits = u__UNKNOWN_bits(state, tracer, s_261_1);
        // C s_261_3: const #17664u : u32
        let s_261_3: u32 = 17664;
        // D s_261_4: read-reg s_261_3:struct
        let s_261_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_261_3 as isize);
            tracer.read_register(s_261_3 as isize, value);
            value
        };
        // C s_261_5: const #17664u : u32
        let s_261_5: u32 = 17664;
        // N s_261_6: write-reg s_261_5 <= s_261_4
        let s_261_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_261_5 as isize, s_261_4);
            tracer.write_register(s_261_5 as isize, s_261_4);
        };
        // N s_261_7: jump b262
        return block_262(state, tracer, fn_state);
    }
    fn block_262<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_262_0: read-var cold:u8
        let s_262_0: bool = fn_state.cold;
        // D s_262_1: not s_262_0
        let s_262_1: bool = !s_262_0;
        // N s_262_2: branch s_262_1 b1024 b263
        if s_262_1 {
            return block_1024(state, tracer, fn_state);
        } else {
            return block_263(state, tracer, fn_state);
        };
    }
    fn block_263<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_263_0: const #0u : u8
        let s_263_0: bool = false;
        // D s_263_1: write-var gs#39396 <= s_263_0
        fn_state.gs_39396 = s_263_0;
        // N s_263_2: jump b264
        return block_264(state, tracer, fn_state);
    }
    fn block_264<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_264_0: read-var gs#39396:u8
        let s_264_0: bool = fn_state.gs_39396;
        // N s_264_1: branch s_264_0 b1023 b265
        if s_264_0 {
            return block_1023(state, tracer, fn_state);
        } else {
            return block_265(state, tracer, fn_state);
        };
    }
    fn block_265<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_265_0: const #1s : i64
        let s_265_0: i64 = 1;
        // C s_265_1: cast zx s_265_0 -> i
        let s_265_1: i128 = (i128::try_from(s_265_0).unwrap());
        // S s_265_2: call __UNKNOWN_bits(s_265_1)
        let s_265_2: Bits = u__UNKNOWN_bits(state, tracer, s_265_1);
        // C s_265_3: const #17664u : u32
        let s_265_3: u32 = 17664;
        // D s_265_4: read-reg s_265_3:struct
        let s_265_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_265_3 as isize);
            tracer.read_register(s_265_3 as isize, value);
            value
        };
        // C s_265_5: const #17664u : u32
        let s_265_5: u32 = 17664;
        // N s_265_6: write-reg s_265_5 <= s_265_4
        let s_265_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_265_5 as isize, s_265_4);
            tracer.write_register(s_265_5 as isize, s_265_4);
        };
        // N s_265_7: jump b266
        return block_266(state, tracer, fn_state);
    }
    fn block_266<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_266_0: read-var cold:u8
        let s_266_0: bool = fn_state.cold;
        // D s_266_1: not s_266_0
        let s_266_1: bool = !s_266_0;
        // N s_266_2: branch s_266_1 b1022 b267
        if s_266_1 {
            return block_1022(state, tracer, fn_state);
        } else {
            return block_267(state, tracer, fn_state);
        };
    }
    fn block_267<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_267_0: const #0u : u8
        let s_267_0: bool = false;
        // D s_267_1: write-var gs#39397 <= s_267_0
        fn_state.gs_39397 = s_267_0;
        // N s_267_2: jump b268
        return block_268(state, tracer, fn_state);
    }
    fn block_268<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_268_0: read-var gs#39397:u8
        let s_268_0: bool = fn_state.gs_39397;
        // N s_268_1: branch s_268_0 b1021 b269
        if s_268_0 {
            return block_1021(state, tracer, fn_state);
        } else {
            return block_269(state, tracer, fn_state);
        };
    }
    fn block_269<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_269_0: const #1s : i64
        let s_269_0: i64 = 1;
        // C s_269_1: cast zx s_269_0 -> i
        let s_269_1: i128 = (i128::try_from(s_269_0).unwrap());
        // S s_269_2: call __UNKNOWN_bits(s_269_1)
        let s_269_2: Bits = u__UNKNOWN_bits(state, tracer, s_269_1);
        // C s_269_3: const #17664u : u32
        let s_269_3: u32 = 17664;
        // D s_269_4: read-reg s_269_3:struct
        let s_269_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_269_3 as isize);
            tracer.read_register(s_269_3 as isize, value);
            value
        };
        // C s_269_5: const #17664u : u32
        let s_269_5: u32 = 17664;
        // N s_269_6: write-reg s_269_5 <= s_269_4
        let s_269_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_269_5 as isize, s_269_4);
            tracer.write_register(s_269_5 as isize, s_269_4);
        };
        // N s_269_7: jump b270
        return block_270(state, tracer, fn_state);
    }
    fn block_270<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_270_0: read-var cold:u8
        let s_270_0: bool = fn_state.cold;
        // D s_270_1: not s_270_0
        let s_270_1: bool = !s_270_0;
        // N s_270_2: branch s_270_1 b1020 b271
        if s_270_1 {
            return block_1020(state, tracer, fn_state);
        } else {
            return block_271(state, tracer, fn_state);
        };
    }
    fn block_271<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_271_0: const #0u : u8
        let s_271_0: bool = false;
        // D s_271_1: write-var gs#39398 <= s_271_0
        fn_state.gs_39398 = s_271_0;
        // N s_271_2: jump b272
        return block_272(state, tracer, fn_state);
    }
    fn block_272<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_272_0: read-var gs#39398:u8
        let s_272_0: bool = fn_state.gs_39398;
        // N s_272_1: branch s_272_0 b1019 b273
        if s_272_0 {
            return block_1019(state, tracer, fn_state);
        } else {
            return block_273(state, tracer, fn_state);
        };
    }
    fn block_273<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_273_0: const #1s : i64
        let s_273_0: i64 = 1;
        // C s_273_1: cast zx s_273_0 -> i
        let s_273_1: i128 = (i128::try_from(s_273_0).unwrap());
        // S s_273_2: call __UNKNOWN_bits(s_273_1)
        let s_273_2: Bits = u__UNKNOWN_bits(state, tracer, s_273_1);
        // C s_273_3: const #17664u : u32
        let s_273_3: u32 = 17664;
        // D s_273_4: read-reg s_273_3:struct
        let s_273_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_273_3 as isize);
            tracer.read_register(s_273_3 as isize, value);
            value
        };
        // C s_273_5: const #17664u : u32
        let s_273_5: u32 = 17664;
        // N s_273_6: write-reg s_273_5 <= s_273_4
        let s_273_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_273_5 as isize, s_273_4);
            tracer.write_register(s_273_5 as isize, s_273_4);
        };
        // N s_273_7: jump b274
        return block_274(state, tracer, fn_state);
    }
    fn block_274<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_274_0: read-var cold:u8
        let s_274_0: bool = fn_state.cold;
        // D s_274_1: not s_274_0
        let s_274_1: bool = !s_274_0;
        // N s_274_2: branch s_274_1 b1018 b275
        if s_274_1 {
            return block_1018(state, tracer, fn_state);
        } else {
            return block_275(state, tracer, fn_state);
        };
    }
    fn block_275<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_275_0: const #0u : u8
        let s_275_0: bool = false;
        // D s_275_1: write-var gs#39399 <= s_275_0
        fn_state.gs_39399 = s_275_0;
        // N s_275_2: jump b276
        return block_276(state, tracer, fn_state);
    }
    fn block_276<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_276_0: read-var gs#39399:u8
        let s_276_0: bool = fn_state.gs_39399;
        // N s_276_1: branch s_276_0 b1017 b277
        if s_276_0 {
            return block_1017(state, tracer, fn_state);
        } else {
            return block_277(state, tracer, fn_state);
        };
    }
    fn block_277<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_277_0: const #1s : i64
        let s_277_0: i64 = 1;
        // C s_277_1: cast zx s_277_0 -> i
        let s_277_1: i128 = (i128::try_from(s_277_0).unwrap());
        // S s_277_2: call __UNKNOWN_bits(s_277_1)
        let s_277_2: Bits = u__UNKNOWN_bits(state, tracer, s_277_1);
        // C s_277_3: const #17664u : u32
        let s_277_3: u32 = 17664;
        // D s_277_4: read-reg s_277_3:struct
        let s_277_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_277_3 as isize);
            tracer.read_register(s_277_3 as isize, value);
            value
        };
        // C s_277_5: const #17664u : u32
        let s_277_5: u32 = 17664;
        // N s_277_6: write-reg s_277_5 <= s_277_4
        let s_277_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_277_5 as isize, s_277_4);
            tracer.write_register(s_277_5 as isize, s_277_4);
        };
        // N s_277_7: jump b278
        return block_278(state, tracer, fn_state);
    }
    fn block_278<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_278_0: read-var cold:u8
        let s_278_0: bool = fn_state.cold;
        // D s_278_1: not s_278_0
        let s_278_1: bool = !s_278_0;
        // N s_278_2: branch s_278_1 b1016 b279
        if s_278_1 {
            return block_1016(state, tracer, fn_state);
        } else {
            return block_279(state, tracer, fn_state);
        };
    }
    fn block_279<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_279_0: const #0u : u8
        let s_279_0: bool = false;
        // D s_279_1: write-var gs#39400 <= s_279_0
        fn_state.gs_39400 = s_279_0;
        // N s_279_2: jump b280
        return block_280(state, tracer, fn_state);
    }
    fn block_280<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_280_0: read-var gs#39400:u8
        let s_280_0: bool = fn_state.gs_39400;
        // N s_280_1: branch s_280_0 b1015 b281
        if s_280_0 {
            return block_1015(state, tracer, fn_state);
        } else {
            return block_281(state, tracer, fn_state);
        };
    }
    fn block_281<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_281_0: const #1s : i64
        let s_281_0: i64 = 1;
        // C s_281_1: cast zx s_281_0 -> i
        let s_281_1: i128 = (i128::try_from(s_281_0).unwrap());
        // S s_281_2: call __UNKNOWN_bits(s_281_1)
        let s_281_2: Bits = u__UNKNOWN_bits(state, tracer, s_281_1);
        // C s_281_3: const #17664u : u32
        let s_281_3: u32 = 17664;
        // D s_281_4: read-reg s_281_3:struct
        let s_281_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_281_3 as isize);
            tracer.read_register(s_281_3 as isize, value);
            value
        };
        // C s_281_5: const #17664u : u32
        let s_281_5: u32 = 17664;
        // N s_281_6: write-reg s_281_5 <= s_281_4
        let s_281_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_281_5 as isize, s_281_4);
            tracer.write_register(s_281_5 as isize, s_281_4);
        };
        // N s_281_7: jump b282
        return block_282(state, tracer, fn_state);
    }
    fn block_282<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_282_0: const #14776u : u32
        let s_282_0: u32 = 14776;
        // D s_282_1: read-reg s_282_0:struct
        let s_282_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_282_0 as isize);
            tracer.read_register(s_282_0 as isize, value);
            value
        };
        // C s_282_2: const #14776u : u32
        let s_282_2: u32 = 14776;
        // N s_282_3: write-reg s_282_2 <= s_282_1
        let s_282_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_282_2 as isize, s_282_1);
            tracer.write_register(s_282_2 as isize, s_282_1);
        };
        // C s_282_4: const #14776u : u32
        let s_282_4: u32 = 14776;
        // D s_282_5: read-reg s_282_4:struct
        let s_282_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_282_4 as isize);
            tracer.read_register(s_282_4 as isize, value);
            value
        };
        // C s_282_6: const #14776u : u32
        let s_282_6: u32 = 14776;
        // N s_282_7: write-reg s_282_6 <= s_282_5
        let s_282_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_282_6 as isize, s_282_5);
            tracer.write_register(s_282_6 as isize, s_282_5);
        };
        // D s_282_8: read-var cold:u8
        let s_282_8: bool = fn_state.cold;
        // D s_282_9: not s_282_8
        let s_282_9: bool = !s_282_8;
        // N s_282_10: branch s_282_9 b1014 b283
        if s_282_9 {
            return block_1014(state, tracer, fn_state);
        } else {
            return block_283(state, tracer, fn_state);
        };
    }
    fn block_283<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_283_0: const #0u : u8
        let s_283_0: bool = false;
        // D s_283_1: write-var gs#39407 <= s_283_0
        fn_state.gs_39407 = s_283_0;
        // N s_283_2: jump b284
        return block_284(state, tracer, fn_state);
    }
    fn block_284<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_284_0: read-var gs#39407:u8
        let s_284_0: bool = fn_state.gs_39407;
        // N s_284_1: branch s_284_0 b1013 b285
        if s_284_0 {
            return block_1013(state, tracer, fn_state);
        } else {
            return block_285(state, tracer, fn_state);
        };
    }
    fn block_285<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_285_0: const #0u : u8
        let s_285_0: bool = false;
        // D s_285_1: write-var gs#39408 <= s_285_0
        fn_state.gs_39408 = s_285_0;
        // N s_285_2: jump b286
        return block_286(state, tracer, fn_state);
    }
    fn block_286<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_286_0: read-var gs#39408:u8
        let s_286_0: bool = fn_state.gs_39408;
        // N s_286_1: branch s_286_0 b1012 b287
        if s_286_0 {
            return block_1012(state, tracer, fn_state);
        } else {
            return block_287(state, tracer, fn_state);
        };
    }
    fn block_287<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_287_0: const #1s : i64
        let s_287_0: i64 = 1;
        // C s_287_1: cast zx s_287_0 -> i
        let s_287_1: i128 = (i128::try_from(s_287_0).unwrap());
        // S s_287_2: call __UNKNOWN_bits(s_287_1)
        let s_287_2: Bits = u__UNKNOWN_bits(state, tracer, s_287_1);
        // C s_287_3: const #14776u : u32
        let s_287_3: u32 = 14776;
        // D s_287_4: read-reg s_287_3:struct
        let s_287_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_287_3 as isize);
            tracer.read_register(s_287_3 as isize, value);
            value
        };
        // C s_287_5: const #14776u : u32
        let s_287_5: u32 = 14776;
        // N s_287_6: write-reg s_287_5 <= s_287_4
        let s_287_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_287_5 as isize, s_287_4);
            tracer.write_register(s_287_5 as isize, s_287_4);
        };
        // N s_287_7: jump b288
        return block_288(state, tracer, fn_state);
    }
    fn block_288<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_288_0: read-var cold:u8
        let s_288_0: bool = fn_state.cold;
        // D s_288_1: not s_288_0
        let s_288_1: bool = !s_288_0;
        // N s_288_2: branch s_288_1 b1011 b289
        if s_288_1 {
            return block_1011(state, tracer, fn_state);
        } else {
            return block_289(state, tracer, fn_state);
        };
    }
    fn block_289<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_289_0: const #0u : u8
        let s_289_0: bool = false;
        // D s_289_1: write-var gs#39409 <= s_289_0
        fn_state.gs_39409 = s_289_0;
        // N s_289_2: jump b290
        return block_290(state, tracer, fn_state);
    }
    fn block_290<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_290_0: read-var gs#39409:u8
        let s_290_0: bool = fn_state.gs_39409;
        // N s_290_1: branch s_290_0 b1010 b291
        if s_290_0 {
            return block_1010(state, tracer, fn_state);
        } else {
            return block_291(state, tracer, fn_state);
        };
    }
    fn block_291<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_291_0: const #0u : u8
        let s_291_0: bool = false;
        // D s_291_1: write-var gs#39410 <= s_291_0
        fn_state.gs_39410 = s_291_0;
        // N s_291_2: jump b292
        return block_292(state, tracer, fn_state);
    }
    fn block_292<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_292_0: read-var gs#39410:u8
        let s_292_0: bool = fn_state.gs_39410;
        // N s_292_1: branch s_292_0 b1009 b293
        if s_292_0 {
            return block_1009(state, tracer, fn_state);
        } else {
            return block_293(state, tracer, fn_state);
        };
    }
    fn block_293<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_293_0: const #1s : i64
        let s_293_0: i64 = 1;
        // C s_293_1: cast zx s_293_0 -> i
        let s_293_1: i128 = (i128::try_from(s_293_0).unwrap());
        // S s_293_2: call __UNKNOWN_bits(s_293_1)
        let s_293_2: Bits = u__UNKNOWN_bits(state, tracer, s_293_1);
        // C s_293_3: const #14776u : u32
        let s_293_3: u32 = 14776;
        // D s_293_4: read-reg s_293_3:struct
        let s_293_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_293_3 as isize);
            tracer.read_register(s_293_3 as isize, value);
            value
        };
        // C s_293_5: const #14776u : u32
        let s_293_5: u32 = 14776;
        // N s_293_6: write-reg s_293_5 <= s_293_4
        let s_293_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_293_5 as isize, s_293_4);
            tracer.write_register(s_293_5 as isize, s_293_4);
        };
        // N s_293_7: jump b294
        return block_294(state, tracer, fn_state);
    }
    fn block_294<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_294_0: const #14776u : u32
        let s_294_0: u32 = 14776;
        // D s_294_1: read-reg s_294_0:struct
        let s_294_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_294_0 as isize);
            tracer.read_register(s_294_0 as isize, value);
            value
        };
        // C s_294_2: const #14776u : u32
        let s_294_2: u32 = 14776;
        // N s_294_3: write-reg s_294_2 <= s_294_1
        let s_294_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_294_2 as isize, s_294_1);
            tracer.write_register(s_294_2 as isize, s_294_1);
        };
        // D s_294_4: read-var cold:u8
        let s_294_4: bool = fn_state.cold;
        // D s_294_5: not s_294_4
        let s_294_5: bool = !s_294_4;
        // N s_294_6: branch s_294_5 b1008 b295
        if s_294_5 {
            return block_1008(state, tracer, fn_state);
        } else {
            return block_295(state, tracer, fn_state);
        };
    }
    fn block_295<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_295_0: const #0u : u8
        let s_295_0: bool = false;
        // D s_295_1: write-var gs#39414 <= s_295_0
        fn_state.gs_39414 = s_295_0;
        // N s_295_2: jump b296
        return block_296(state, tracer, fn_state);
    }
    fn block_296<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_296_0: read-var gs#39414:u8
        let s_296_0: bool = fn_state.gs_39414;
        // N s_296_1: branch s_296_0 b1007 b297
        if s_296_0 {
            return block_1007(state, tracer, fn_state);
        } else {
            return block_297(state, tracer, fn_state);
        };
    }
    fn block_297<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_297_0: const #0u : u8
        let s_297_0: bool = false;
        // D s_297_1: write-var gs#39415 <= s_297_0
        fn_state.gs_39415 = s_297_0;
        // N s_297_2: jump b298
        return block_298(state, tracer, fn_state);
    }
    fn block_298<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_298_0: read-var gs#39415:u8
        let s_298_0: bool = fn_state.gs_39415;
        // N s_298_1: branch s_298_0 b1006 b299
        if s_298_0 {
            return block_1006(state, tracer, fn_state);
        } else {
            return block_299(state, tracer, fn_state);
        };
    }
    fn block_299<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_299_0: const #1s : i64
        let s_299_0: i64 = 1;
        // C s_299_1: cast zx s_299_0 -> i
        let s_299_1: i128 = (i128::try_from(s_299_0).unwrap());
        // S s_299_2: call __UNKNOWN_bits(s_299_1)
        let s_299_2: Bits = u__UNKNOWN_bits(state, tracer, s_299_1);
        // C s_299_3: const #14776u : u32
        let s_299_3: u32 = 14776;
        // D s_299_4: read-reg s_299_3:struct
        let s_299_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_299_3 as isize);
            tracer.read_register(s_299_3 as isize, value);
            value
        };
        // C s_299_5: const #14776u : u32
        let s_299_5: u32 = 14776;
        // N s_299_6: write-reg s_299_5 <= s_299_4
        let s_299_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_299_5 as isize, s_299_4);
            tracer.write_register(s_299_5 as isize, s_299_4);
        };
        // N s_299_7: jump b300
        return block_300(state, tracer, fn_state);
    }
    fn block_300<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_300_0: read-var cold:u8
        let s_300_0: bool = fn_state.cold;
        // D s_300_1: not s_300_0
        let s_300_1: bool = !s_300_0;
        // N s_300_2: branch s_300_1 b1005 b301
        if s_300_1 {
            return block_1005(state, tracer, fn_state);
        } else {
            return block_301(state, tracer, fn_state);
        };
    }
    fn block_301<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_301_0: const #0u : u8
        let s_301_0: bool = false;
        // D s_301_1: write-var gs#39416 <= s_301_0
        fn_state.gs_39416 = s_301_0;
        // N s_301_2: jump b302
        return block_302(state, tracer, fn_state);
    }
    fn block_302<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_302_0: read-var gs#39416:u8
        let s_302_0: bool = fn_state.gs_39416;
        // N s_302_1: branch s_302_0 b1004 b303
        if s_302_0 {
            return block_1004(state, tracer, fn_state);
        } else {
            return block_303(state, tracer, fn_state);
        };
    }
    fn block_303<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_303_0: const #0u : u8
        let s_303_0: bool = false;
        // D s_303_1: write-var gs#39417 <= s_303_0
        fn_state.gs_39417 = s_303_0;
        // N s_303_2: jump b304
        return block_304(state, tracer, fn_state);
    }
    fn block_304<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_304_0: read-var gs#39417:u8
        let s_304_0: bool = fn_state.gs_39417;
        // N s_304_1: branch s_304_0 b1003 b305
        if s_304_0 {
            return block_1003(state, tracer, fn_state);
        } else {
            return block_305(state, tracer, fn_state);
        };
    }
    fn block_305<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_305_0: const #1s : i64
        let s_305_0: i64 = 1;
        // C s_305_1: cast zx s_305_0 -> i
        let s_305_1: i128 = (i128::try_from(s_305_0).unwrap());
        // S s_305_2: call __UNKNOWN_bits(s_305_1)
        let s_305_2: Bits = u__UNKNOWN_bits(state, tracer, s_305_1);
        // C s_305_3: const #14776u : u32
        let s_305_3: u32 = 14776;
        // D s_305_4: read-reg s_305_3:struct
        let s_305_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_305_3 as isize);
            tracer.read_register(s_305_3 as isize, value);
            value
        };
        // C s_305_5: const #14776u : u32
        let s_305_5: u32 = 14776;
        // N s_305_6: write-reg s_305_5 <= s_305_4
        let s_305_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_305_5 as isize, s_305_4);
            tracer.write_register(s_305_5 as isize, s_305_4);
        };
        // N s_305_7: jump b306
        return block_306(state, tracer, fn_state);
    }
    fn block_306<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_306_0: read-var cold:u8
        let s_306_0: bool = fn_state.cold;
        // D s_306_1: not s_306_0
        let s_306_1: bool = !s_306_0;
        // N s_306_2: branch s_306_1 b1002 b307
        if s_306_1 {
            return block_1002(state, tracer, fn_state);
        } else {
            return block_307(state, tracer, fn_state);
        };
    }
    fn block_307<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_307_0: const #0u : u8
        let s_307_0: bool = false;
        // D s_307_1: write-var gs#39418 <= s_307_0
        fn_state.gs_39418 = s_307_0;
        // N s_307_2: jump b308
        return block_308(state, tracer, fn_state);
    }
    fn block_308<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_308_0: read-var gs#39418:u8
        let s_308_0: bool = fn_state.gs_39418;
        // N s_308_1: branch s_308_0 b1001 b309
        if s_308_0 {
            return block_1001(state, tracer, fn_state);
        } else {
            return block_309(state, tracer, fn_state);
        };
    }
    fn block_309<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_309_0: const #0u : u8
        let s_309_0: bool = false;
        // D s_309_1: write-var gs#39419 <= s_309_0
        fn_state.gs_39419 = s_309_0;
        // N s_309_2: jump b310
        return block_310(state, tracer, fn_state);
    }
    fn block_310<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_310_0: read-var gs#39419:u8
        let s_310_0: bool = fn_state.gs_39419;
        // N s_310_1: branch s_310_0 b1000 b311
        if s_310_0 {
            return block_1000(state, tracer, fn_state);
        } else {
            return block_311(state, tracer, fn_state);
        };
    }
    fn block_311<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_311_0: const #1s : i64
        let s_311_0: i64 = 1;
        // C s_311_1: cast zx s_311_0 -> i
        let s_311_1: i128 = (i128::try_from(s_311_0).unwrap());
        // S s_311_2: call __UNKNOWN_bits(s_311_1)
        let s_311_2: Bits = u__UNKNOWN_bits(state, tracer, s_311_1);
        // C s_311_3: const #14776u : u32
        let s_311_3: u32 = 14776;
        // D s_311_4: read-reg s_311_3:struct
        let s_311_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_311_3 as isize);
            tracer.read_register(s_311_3 as isize, value);
            value
        };
        // C s_311_5: const #14776u : u32
        let s_311_5: u32 = 14776;
        // N s_311_6: write-reg s_311_5 <= s_311_4
        let s_311_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_311_5 as isize, s_311_4);
            tracer.write_register(s_311_5 as isize, s_311_4);
        };
        // N s_311_7: jump b312
        return block_312(state, tracer, fn_state);
    }
    fn block_312<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_312_0: read-var cold:u8
        let s_312_0: bool = fn_state.cold;
        // D s_312_1: not s_312_0
        let s_312_1: bool = !s_312_0;
        // N s_312_2: branch s_312_1 b999 b313
        if s_312_1 {
            return block_999(state, tracer, fn_state);
        } else {
            return block_313(state, tracer, fn_state);
        };
    }
    fn block_313<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_313_0: const #0u : u8
        let s_313_0: bool = false;
        // D s_313_1: write-var gs#39420 <= s_313_0
        fn_state.gs_39420 = s_313_0;
        // N s_313_2: jump b314
        return block_314(state, tracer, fn_state);
    }
    fn block_314<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_314_0: read-var gs#39420:u8
        let s_314_0: bool = fn_state.gs_39420;
        // N s_314_1: branch s_314_0 b998 b315
        if s_314_0 {
            return block_998(state, tracer, fn_state);
        } else {
            return block_315(state, tracer, fn_state);
        };
    }
    fn block_315<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_315_0: const #0u : u8
        let s_315_0: bool = false;
        // D s_315_1: write-var gs#39421 <= s_315_0
        fn_state.gs_39421 = s_315_0;
        // N s_315_2: jump b316
        return block_316(state, tracer, fn_state);
    }
    fn block_316<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_316_0: read-var gs#39421:u8
        let s_316_0: bool = fn_state.gs_39421;
        // N s_316_1: branch s_316_0 b997 b317
        if s_316_0 {
            return block_997(state, tracer, fn_state);
        } else {
            return block_317(state, tracer, fn_state);
        };
    }
    fn block_317<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_317_0: const #1s : i64
        let s_317_0: i64 = 1;
        // C s_317_1: cast zx s_317_0 -> i
        let s_317_1: i128 = (i128::try_from(s_317_0).unwrap());
        // S s_317_2: call __UNKNOWN_bits(s_317_1)
        let s_317_2: Bits = u__UNKNOWN_bits(state, tracer, s_317_1);
        // C s_317_3: const #14776u : u32
        let s_317_3: u32 = 14776;
        // D s_317_4: read-reg s_317_3:struct
        let s_317_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_317_3 as isize);
            tracer.read_register(s_317_3 as isize, value);
            value
        };
        // C s_317_5: const #14776u : u32
        let s_317_5: u32 = 14776;
        // N s_317_6: write-reg s_317_5 <= s_317_4
        let s_317_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_317_5 as isize, s_317_4);
            tracer.write_register(s_317_5 as isize, s_317_4);
        };
        // N s_317_7: jump b318
        return block_318(state, tracer, fn_state);
    }
    fn block_318<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_318_0: read-var cold:u8
        let s_318_0: bool = fn_state.cold;
        // D s_318_1: not s_318_0
        let s_318_1: bool = !s_318_0;
        // N s_318_2: branch s_318_1 b996 b319
        if s_318_1 {
            return block_996(state, tracer, fn_state);
        } else {
            return block_319(state, tracer, fn_state);
        };
    }
    fn block_319<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_319_0: const #0u : u8
        let s_319_0: bool = false;
        // D s_319_1: write-var gs#39422 <= s_319_0
        fn_state.gs_39422 = s_319_0;
        // N s_319_2: jump b320
        return block_320(state, tracer, fn_state);
    }
    fn block_320<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_320_0: read-var gs#39422:u8
        let s_320_0: bool = fn_state.gs_39422;
        // N s_320_1: branch s_320_0 b995 b321
        if s_320_0 {
            return block_995(state, tracer, fn_state);
        } else {
            return block_321(state, tracer, fn_state);
        };
    }
    fn block_321<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_321_0: const #0u : u8
        let s_321_0: bool = false;
        // D s_321_1: write-var gs#39423 <= s_321_0
        fn_state.gs_39423 = s_321_0;
        // N s_321_2: jump b322
        return block_322(state, tracer, fn_state);
    }
    fn block_322<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_322_0: read-var gs#39423:u8
        let s_322_0: bool = fn_state.gs_39423;
        // N s_322_1: branch s_322_0 b994 b323
        if s_322_0 {
            return block_994(state, tracer, fn_state);
        } else {
            return block_323(state, tracer, fn_state);
        };
    }
    fn block_323<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_323_0: const #1s : i64
        let s_323_0: i64 = 1;
        // C s_323_1: cast zx s_323_0 -> i
        let s_323_1: i128 = (i128::try_from(s_323_0).unwrap());
        // S s_323_2: call __UNKNOWN_bits(s_323_1)
        let s_323_2: Bits = u__UNKNOWN_bits(state, tracer, s_323_1);
        // C s_323_3: const #14776u : u32
        let s_323_3: u32 = 14776;
        // D s_323_4: read-reg s_323_3:struct
        let s_323_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_323_3 as isize);
            tracer.read_register(s_323_3 as isize, value);
            value
        };
        // C s_323_5: const #14776u : u32
        let s_323_5: u32 = 14776;
        // N s_323_6: write-reg s_323_5 <= s_323_4
        let s_323_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_323_5 as isize, s_323_4);
            tracer.write_register(s_323_5 as isize, s_323_4);
        };
        // N s_323_7: jump b324
        return block_324(state, tracer, fn_state);
    }
    fn block_324<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_324_0: read-var cold:u8
        let s_324_0: bool = fn_state.cold;
        // D s_324_1: not s_324_0
        let s_324_1: bool = !s_324_0;
        // N s_324_2: branch s_324_1 b993 b325
        if s_324_1 {
            return block_993(state, tracer, fn_state);
        } else {
            return block_325(state, tracer, fn_state);
        };
    }
    fn block_325<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_325_0: const #0u : u8
        let s_325_0: bool = false;
        // D s_325_1: write-var gs#39424 <= s_325_0
        fn_state.gs_39424 = s_325_0;
        // N s_325_2: jump b326
        return block_326(state, tracer, fn_state);
    }
    fn block_326<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_326_0: read-var gs#39424:u8
        let s_326_0: bool = fn_state.gs_39424;
        // N s_326_1: branch s_326_0 b992 b327
        if s_326_0 {
            return block_992(state, tracer, fn_state);
        } else {
            return block_327(state, tracer, fn_state);
        };
    }
    fn block_327<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_327_0: const #0u : u8
        let s_327_0: bool = false;
        // D s_327_1: write-var gs#39425 <= s_327_0
        fn_state.gs_39425 = s_327_0;
        // N s_327_2: jump b328
        return block_328(state, tracer, fn_state);
    }
    fn block_328<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_328_0: read-var gs#39425:u8
        let s_328_0: bool = fn_state.gs_39425;
        // N s_328_1: branch s_328_0 b991 b329
        if s_328_0 {
            return block_991(state, tracer, fn_state);
        } else {
            return block_329(state, tracer, fn_state);
        };
    }
    fn block_329<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_329_0: const #1s : i64
        let s_329_0: i64 = 1;
        // C s_329_1: cast zx s_329_0 -> i
        let s_329_1: i128 = (i128::try_from(s_329_0).unwrap());
        // S s_329_2: call __UNKNOWN_bits(s_329_1)
        let s_329_2: Bits = u__UNKNOWN_bits(state, tracer, s_329_1);
        // C s_329_3: const #14776u : u32
        let s_329_3: u32 = 14776;
        // D s_329_4: read-reg s_329_3:struct
        let s_329_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_329_3 as isize);
            tracer.read_register(s_329_3 as isize, value);
            value
        };
        // C s_329_5: const #14776u : u32
        let s_329_5: u32 = 14776;
        // N s_329_6: write-reg s_329_5 <= s_329_4
        let s_329_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_329_5 as isize, s_329_4);
            tracer.write_register(s_329_5 as isize, s_329_4);
        };
        // N s_329_7: jump b330
        return block_330(state, tracer, fn_state);
    }
    fn block_330<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_330_0: const #17336u : u32
        let s_330_0: u32 = 17336;
        // D s_330_1: read-reg s_330_0:struct
        let s_330_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_0 as isize);
            tracer.read_register(s_330_0 as isize, value);
            value
        };
        // C s_330_2: const #17336u : u32
        let s_330_2: u32 = 17336;
        // N s_330_3: write-reg s_330_2 <= s_330_1
        let s_330_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_2 as isize, s_330_1);
            tracer.write_register(s_330_2 as isize, s_330_1);
        };
        // C s_330_4: const #17336u : u32
        let s_330_4: u32 = 17336;
        // D s_330_5: read-reg s_330_4:struct
        let s_330_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_4 as isize);
            tracer.read_register(s_330_4 as isize, value);
            value
        };
        // C s_330_6: const #17336u : u32
        let s_330_6: u32 = 17336;
        // N s_330_7: write-reg s_330_6 <= s_330_5
        let s_330_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_6 as isize, s_330_5);
            tracer.write_register(s_330_6 as isize, s_330_5);
        };
        // C s_330_8: const #102208u : u32
        let s_330_8: u32 = 102208;
        // D s_330_9: read-reg s_330_8:struct
        let s_330_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_8 as isize);
            tracer.read_register(s_330_8 as isize, value);
            value
        };
        // C s_330_10: const #102208u : u32
        let s_330_10: u32 = 102208;
        // N s_330_11: write-reg s_330_10 <= s_330_9
        let s_330_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_10 as isize, s_330_9);
            tracer.write_register(s_330_10 as isize, s_330_9);
        };
        // C s_330_12: const #22824u : u32
        let s_330_12: u32 = 22824;
        // D s_330_13: read-reg s_330_12:struct
        let s_330_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_12 as isize);
            tracer.read_register(s_330_12 as isize, value);
            value
        };
        // C s_330_14: const #22824u : u32
        let s_330_14: u32 = 22824;
        // N s_330_15: write-reg s_330_14 <= s_330_13
        let s_330_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_14 as isize, s_330_13);
            tracer.write_register(s_330_14 as isize, s_330_13);
        };
        // C s_330_16: const #22824u : u32
        let s_330_16: u32 = 22824;
        // D s_330_17: read-reg s_330_16:struct
        let s_330_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_16 as isize);
            tracer.read_register(s_330_16 as isize, value);
            value
        };
        // C s_330_18: const #22824u : u32
        let s_330_18: u32 = 22824;
        // N s_330_19: write-reg s_330_18 <= s_330_17
        let s_330_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_18 as isize, s_330_17);
            tracer.write_register(s_330_18 as isize, s_330_17);
        };
        // C s_330_20: const #22824u : u32
        let s_330_20: u32 = 22824;
        // D s_330_21: read-reg s_330_20:struct
        let s_330_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_20 as isize);
            tracer.read_register(s_330_20 as isize, value);
            value
        };
        // C s_330_22: const #22824u : u32
        let s_330_22: u32 = 22824;
        // N s_330_23: write-reg s_330_22 <= s_330_21
        let s_330_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_22 as isize, s_330_21);
            tracer.write_register(s_330_22 as isize, s_330_21);
        };
        // C s_330_24: const #11648u : u32
        let s_330_24: u32 = 11648;
        // D s_330_25: read-reg s_330_24:struct
        let s_330_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_24 as isize);
            tracer.read_register(s_330_24 as isize, value);
            value
        };
        // C s_330_26: const #11648u : u32
        let s_330_26: u32 = 11648;
        // N s_330_27: write-reg s_330_26 <= s_330_25
        let s_330_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_26 as isize, s_330_25);
            tracer.write_register(s_330_26 as isize, s_330_25);
        };
        // C s_330_28: const #11648u : u32
        let s_330_28: u32 = 11648;
        // D s_330_29: read-reg s_330_28:struct
        let s_330_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_28 as isize);
            tracer.read_register(s_330_28 as isize, value);
            value
        };
        // C s_330_30: const #11648u : u32
        let s_330_30: u32 = 11648;
        // N s_330_31: write-reg s_330_30 <= s_330_29
        let s_330_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_30 as isize, s_330_29);
            tracer.write_register(s_330_30 as isize, s_330_29);
        };
        // C s_330_32: const #0u : u8
        let s_330_32: bool = false;
        // S s_330_33: call Bit(s_330_32)
        let s_330_33: bool = Bit(state, tracer, s_330_32);
        // C s_330_34: const #11648u : u32
        let s_330_34: u32 = 11648;
        // D s_330_35: read-reg s_330_34:struct
        let s_330_35: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_34 as isize);
            tracer.read_register(s_330_34 as isize, value);
            value
        };
        // C s_330_36: const #11648u : u32
        let s_330_36: u32 = 11648;
        // N s_330_37: write-reg s_330_36 <= s_330_35
        let s_330_37: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_36 as isize, s_330_35);
            tracer.write_register(s_330_36 as isize, s_330_35);
        };
        // C s_330_38: const #11648u : u32
        let s_330_38: u32 = 11648;
        // D s_330_39: read-reg s_330_38:struct
        let s_330_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_38 as isize);
            tracer.read_register(s_330_38 as isize, value);
            value
        };
        // C s_330_40: const #11648u : u32
        let s_330_40: u32 = 11648;
        // N s_330_41: write-reg s_330_40 <= s_330_39
        let s_330_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_40 as isize, s_330_39);
            tracer.write_register(s_330_40 as isize, s_330_39);
        };
        // C s_330_42: const #0u : u8
        let s_330_42: bool = false;
        // S s_330_43: call Bit(s_330_42)
        let s_330_43: bool = Bit(state, tracer, s_330_42);
        // C s_330_44: const #11648u : u32
        let s_330_44: u32 = 11648;
        // D s_330_45: read-reg s_330_44:struct
        let s_330_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_44 as isize);
            tracer.read_register(s_330_44 as isize, value);
            value
        };
        // C s_330_46: const #11648u : u32
        let s_330_46: u32 = 11648;
        // N s_330_47: write-reg s_330_46 <= s_330_45
        let s_330_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_46 as isize, s_330_45);
            tracer.write_register(s_330_46 as isize, s_330_45);
        };
        // C s_330_48: const #11648u : u32
        let s_330_48: u32 = 11648;
        // D s_330_49: read-reg s_330_48:struct
        let s_330_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_48 as isize);
            tracer.read_register(s_330_48 as isize, value);
            value
        };
        // C s_330_50: const #11648u : u32
        let s_330_50: u32 = 11648;
        // N s_330_51: write-reg s_330_50 <= s_330_49
        let s_330_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_50 as isize, s_330_49);
            tracer.write_register(s_330_50 as isize, s_330_49);
        };
        // C s_330_52: const #11648u : u32
        let s_330_52: u32 = 11648;
        // D s_330_53: read-reg s_330_52:struct
        let s_330_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_52 as isize);
            tracer.read_register(s_330_52 as isize, value);
            value
        };
        // C s_330_54: const #11648u : u32
        let s_330_54: u32 = 11648;
        // N s_330_55: write-reg s_330_54 <= s_330_53
        let s_330_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_54 as isize, s_330_53);
            tracer.write_register(s_330_54 as isize, s_330_53);
        };
        // C s_330_56: const #100912u : u32
        let s_330_56: u32 = 100912;
        // D s_330_57: read-reg s_330_56:struct
        let s_330_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_56 as isize);
            tracer.read_register(s_330_56 as isize, value);
            value
        };
        // C s_330_58: const #100912u : u32
        let s_330_58: u32 = 100912;
        // N s_330_59: write-reg s_330_58 <= s_330_57
        let s_330_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_58 as isize, s_330_57);
            tracer.write_register(s_330_58 as isize, s_330_57);
        };
        // C s_330_60: const #17112u : u32
        let s_330_60: u32 = 17112;
        // D s_330_61: read-reg s_330_60:struct
        let s_330_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_60 as isize);
            tracer.read_register(s_330_60 as isize, value);
            value
        };
        // C s_330_62: const #17112u : u32
        let s_330_62: u32 = 17112;
        // N s_330_63: write-reg s_330_62 <= s_330_61
        let s_330_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_62 as isize, s_330_61);
            tracer.write_register(s_330_62 as isize, s_330_61);
        };
        // C s_330_64: const #18296u : u32
        let s_330_64: u32 = 18296;
        // D s_330_65: read-reg s_330_64:struct
        let s_330_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_64 as isize);
            tracer.read_register(s_330_64 as isize, value);
            value
        };
        // C s_330_66: const #18296u : u32
        let s_330_66: u32 = 18296;
        // N s_330_67: write-reg s_330_66 <= s_330_65
        let s_330_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_66 as isize, s_330_65);
            tracer.write_register(s_330_66 as isize, s_330_65);
        };
        // C s_330_68: const #32s : i
        let s_330_68: i128 = 32;
        // C s_330_69: const #17232u : u32
        let s_330_69: u32 = 17232;
        // D s_330_70: read-reg s_330_69:u64
        let s_330_70: u64 = {
            let value = state.read_register::<u64>(s_330_69 as isize);
            tracer.read_register(s_330_69 as isize, value);
            value
        };
        // D s_330_71: cast zx s_330_70 -> bv
        let s_330_71: Bits = Bits::new(s_330_70 as u128, 64u16);
        // C s_330_72: const #0u : u32
        let s_330_72: u32 = 0;
        // C s_330_73: cast zx s_330_72 -> bv
        let s_330_73: Bits = Bits::new(s_330_72 as u128, 32u16);
        // C s_330_74: const #31s : i
        let s_330_74: i128 = 31;
        // C s_330_75: const #1u : u64
        let s_330_75: u64 = 1;
        // C s_330_76: cast zx s_330_75 -> bv
        let s_330_76: Bits = Bits::new(s_330_75 as u128, 64u16);
        // C s_330_77: lsl s_330_76 s_330_74
        let s_330_77: Bits = s_330_76 << s_330_74;
        // C s_330_78: sub s_330_77 s_330_76
        let s_330_78: Bits = ((s_330_77) - (s_330_76));
        // C s_330_79: and s_330_73 s_330_78
        let s_330_79: Bits = ((s_330_73) & (s_330_78));
        // C s_330_80: lsl s_330_79 s_330_68
        let s_330_80: Bits = s_330_79 << s_330_68;
        // C s_330_81: lsl s_330_78 s_330_68
        let s_330_81: Bits = s_330_78 << s_330_68;
        // C s_330_82: cmpl s_330_81
        let s_330_82: Bits = !s_330_81;
        // D s_330_83: and s_330_71 s_330_82
        let s_330_83: Bits = ((s_330_71) & (s_330_82));
        // D s_330_84: or s_330_83 s_330_80
        let s_330_84: Bits = ((s_330_83) | (s_330_80));
        // D s_330_85: cast reint s_330_84 -> u64
        let s_330_85: u64 = (s_330_84.value() as u64);
        // C s_330_86: const #17232u : u32
        let s_330_86: u32 = 17232;
        // N s_330_87: write-reg s_330_86 <= s_330_85
        let s_330_87: () = {
            state.write_register::<u64>(s_330_86 as isize, s_330_85);
            tracer.write_register(s_330_86 as isize, s_330_85);
        };
        // C s_330_88: const #22840u : u32
        let s_330_88: u32 = 22840;
        // D s_330_89: read-reg s_330_88:struct
        let s_330_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_88 as isize);
            tracer.read_register(s_330_88 as isize, value);
            value
        };
        // C s_330_90: const #22840u : u32
        let s_330_90: u32 = 22840;
        // N s_330_91: write-reg s_330_90 <= s_330_89
        let s_330_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_90 as isize, s_330_89);
            tracer.write_register(s_330_90 as isize, s_330_89);
        };
        // C s_330_92: const #12808u : u32
        let s_330_92: u32 = 12808;
        // D s_330_93: read-reg s_330_92:struct
        let s_330_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_92 as isize);
            tracer.read_register(s_330_92 as isize, value);
            value
        };
        // C s_330_94: const #12808u : u32
        let s_330_94: u32 = 12808;
        // N s_330_95: write-reg s_330_94 <= s_330_93
        let s_330_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_94 as isize, s_330_93);
            tracer.write_register(s_330_94 as isize, s_330_93);
        };
        // C s_330_96: const #12808u : u32
        let s_330_96: u32 = 12808;
        // D s_330_97: read-reg s_330_96:struct
        let s_330_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_96 as isize);
            tracer.read_register(s_330_96 as isize, value);
            value
        };
        // C s_330_98: const #12808u : u32
        let s_330_98: u32 = 12808;
        // N s_330_99: write-reg s_330_98 <= s_330_97
        let s_330_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_98 as isize, s_330_97);
            tracer.write_register(s_330_98 as isize, s_330_97);
        };
        // C s_330_100: const #12808u : u32
        let s_330_100: u32 = 12808;
        // D s_330_101: read-reg s_330_100:struct
        let s_330_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_100 as isize);
            tracer.read_register(s_330_100 as isize, value);
            value
        };
        // C s_330_102: const #12808u : u32
        let s_330_102: u32 = 12808;
        // N s_330_103: write-reg s_330_102 <= s_330_101
        let s_330_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_102 as isize, s_330_101);
            tracer.write_register(s_330_102 as isize, s_330_101);
        };
        // C s_330_104: const #14960u : u32
        let s_330_104: u32 = 14960;
        // D s_330_105: read-reg s_330_104:struct
        let s_330_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_104 as isize);
            tracer.read_register(s_330_104 as isize, value);
            value
        };
        // C s_330_106: const #14960u : u32
        let s_330_106: u32 = 14960;
        // N s_330_107: write-reg s_330_106 <= s_330_105
        let s_330_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_106 as isize, s_330_105);
            tracer.write_register(s_330_106 as isize, s_330_105);
        };
        // C s_330_108: const #14960u : u32
        let s_330_108: u32 = 14960;
        // D s_330_109: read-reg s_330_108:struct
        let s_330_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_108 as isize);
            tracer.read_register(s_330_108 as isize, value);
            value
        };
        // C s_330_110: const #14960u : u32
        let s_330_110: u32 = 14960;
        // N s_330_111: write-reg s_330_110 <= s_330_109
        let s_330_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_110 as isize, s_330_109);
            tracer.write_register(s_330_110 as isize, s_330_109);
        };
        // C s_330_112: const #32s : i
        let s_330_112: i128 = 32;
        // C s_330_113: const #15872u : u32
        let s_330_113: u32 = 15872;
        // D s_330_114: read-reg s_330_113:u64
        let s_330_114: u64 = {
            let value = state.read_register::<u64>(s_330_113 as isize);
            tracer.read_register(s_330_113 as isize, value);
            value
        };
        // D s_330_115: cast zx s_330_114 -> bv
        let s_330_115: Bits = Bits::new(s_330_114 as u128, 64u16);
        // C s_330_116: const #0u : u32
        let s_330_116: u32 = 0;
        // C s_330_117: cast zx s_330_116 -> bv
        let s_330_117: Bits = Bits::new(s_330_116 as u128, 32u16);
        // C s_330_118: const #31s : i
        let s_330_118: i128 = 31;
        // C s_330_119: const #1u : u64
        let s_330_119: u64 = 1;
        // C s_330_120: cast zx s_330_119 -> bv
        let s_330_120: Bits = Bits::new(s_330_119 as u128, 64u16);
        // C s_330_121: lsl s_330_120 s_330_118
        let s_330_121: Bits = s_330_120 << s_330_118;
        // C s_330_122: sub s_330_121 s_330_120
        let s_330_122: Bits = ((s_330_121) - (s_330_120));
        // C s_330_123: and s_330_117 s_330_122
        let s_330_123: Bits = ((s_330_117) & (s_330_122));
        // C s_330_124: lsl s_330_123 s_330_112
        let s_330_124: Bits = s_330_123 << s_330_112;
        // C s_330_125: lsl s_330_122 s_330_112
        let s_330_125: Bits = s_330_122 << s_330_112;
        // C s_330_126: cmpl s_330_125
        let s_330_126: Bits = !s_330_125;
        // D s_330_127: and s_330_115 s_330_126
        let s_330_127: Bits = ((s_330_115) & (s_330_126));
        // D s_330_128: or s_330_127 s_330_124
        let s_330_128: Bits = ((s_330_127) | (s_330_124));
        // D s_330_129: cast reint s_330_128 -> u64
        let s_330_129: u64 = (s_330_128.value() as u64);
        // C s_330_130: const #15872u : u32
        let s_330_130: u32 = 15872;
        // N s_330_131: write-reg s_330_130 <= s_330_129
        let s_330_131: () = {
            state.write_register::<u64>(s_330_130 as isize, s_330_129);
            tracer.write_register(s_330_130 as isize, s_330_129);
        };
        // C s_330_132: const #102840u : u32
        let s_330_132: u32 = 102840;
        // D s_330_133: read-reg s_330_132:struct
        let s_330_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_132 as isize);
            tracer.read_register(s_330_132 as isize, value);
            value
        };
        // C s_330_134: const #102840u : u32
        let s_330_134: u32 = 102840;
        // N s_330_135: write-reg s_330_134 <= s_330_133
        let s_330_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_134 as isize, s_330_133);
            tracer.write_register(s_330_134 as isize, s_330_133);
        };
        // C s_330_136: const #15056u : u32
        let s_330_136: u32 = 15056;
        // D s_330_137: read-reg s_330_136:struct
        let s_330_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_136 as isize);
            tracer.read_register(s_330_136 as isize, value);
            value
        };
        // C s_330_138: const #15056u : u32
        let s_330_138: u32 = 15056;
        // N s_330_139: write-reg s_330_138 <= s_330_137
        let s_330_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_138 as isize, s_330_137);
            tracer.write_register(s_330_138 as isize, s_330_137);
        };
        // C s_330_140: const #15056u : u32
        let s_330_140: u32 = 15056;
        // D s_330_141: read-reg s_330_140:struct
        let s_330_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_140 as isize);
            tracer.read_register(s_330_140 as isize, value);
            value
        };
        // C s_330_142: const #15056u : u32
        let s_330_142: u32 = 15056;
        // N s_330_143: write-reg s_330_142 <= s_330_141
        let s_330_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_142 as isize, s_330_141);
            tracer.write_register(s_330_142 as isize, s_330_141);
        };
        // C s_330_144: const #0u : u8
        let s_330_144: bool = false;
        // S s_330_145: call Bit(s_330_144)
        let s_330_145: bool = Bit(state, tracer, s_330_144);
        // C s_330_146: const #15056u : u32
        let s_330_146: u32 = 15056;
        // D s_330_147: read-reg s_330_146:struct
        let s_330_147: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_146 as isize);
            tracer.read_register(s_330_146 as isize, value);
            value
        };
        // C s_330_148: const #15056u : u32
        let s_330_148: u32 = 15056;
        // N s_330_149: write-reg s_330_148 <= s_330_147
        let s_330_149: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_148 as isize, s_330_147);
            tracer.write_register(s_330_148 as isize, s_330_147);
        };
        // C s_330_150: const #15056u : u32
        let s_330_150: u32 = 15056;
        // D s_330_151: read-reg s_330_150:struct
        let s_330_151: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_150 as isize);
            tracer.read_register(s_330_150 as isize, value);
            value
        };
        // C s_330_152: const #15056u : u32
        let s_330_152: u32 = 15056;
        // N s_330_153: write-reg s_330_152 <= s_330_151
        let s_330_153: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_152 as isize, s_330_151);
            tracer.write_register(s_330_152 as isize, s_330_151);
        };
        // C s_330_154: const #15056u : u32
        let s_330_154: u32 = 15056;
        // D s_330_155: read-reg s_330_154:struct
        let s_330_155: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_154 as isize);
            tracer.read_register(s_330_154 as isize, value);
            value
        };
        // C s_330_156: const #15056u : u32
        let s_330_156: u32 = 15056;
        // N s_330_157: write-reg s_330_156 <= s_330_155
        let s_330_157: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_156 as isize, s_330_155);
            tracer.write_register(s_330_156 as isize, s_330_155);
        };
        // C s_330_158: const #15056u : u32
        let s_330_158: u32 = 15056;
        // D s_330_159: read-reg s_330_158:struct
        let s_330_159: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_158 as isize);
            tracer.read_register(s_330_158 as isize, value);
            value
        };
        // C s_330_160: const #15056u : u32
        let s_330_160: u32 = 15056;
        // N s_330_161: write-reg s_330_160 <= s_330_159
        let s_330_161: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_160 as isize, s_330_159);
            tracer.write_register(s_330_160 as isize, s_330_159);
        };
        // C s_330_162: const #15056u : u32
        let s_330_162: u32 = 15056;
        // D s_330_163: read-reg s_330_162:struct
        let s_330_163: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_162 as isize);
            tracer.read_register(s_330_162 as isize, value);
            value
        };
        // C s_330_164: const #15056u : u32
        let s_330_164: u32 = 15056;
        // N s_330_165: write-reg s_330_164 <= s_330_163
        let s_330_165: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_164 as isize, s_330_163);
            tracer.write_register(s_330_164 as isize, s_330_163);
        };
        // C s_330_166: const #15056u : u32
        let s_330_166: u32 = 15056;
        // D s_330_167: read-reg s_330_166:struct
        let s_330_167: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_166 as isize);
            tracer.read_register(s_330_166 as isize, value);
            value
        };
        // C s_330_168: const #15056u : u32
        let s_330_168: u32 = 15056;
        // N s_330_169: write-reg s_330_168 <= s_330_167
        let s_330_169: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_168 as isize, s_330_167);
            tracer.write_register(s_330_168 as isize, s_330_167);
        };
        // C s_330_170: const #11984u : u32
        let s_330_170: u32 = 11984;
        // D s_330_171: read-reg s_330_170:struct
        let s_330_171: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_170 as isize);
            tracer.read_register(s_330_170 as isize, value);
            value
        };
        // C s_330_172: const #11984u : u32
        let s_330_172: u32 = 11984;
        // N s_330_173: write-reg s_330_172 <= s_330_171
        let s_330_173: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_172 as isize, s_330_171);
            tracer.write_register(s_330_172 as isize, s_330_171);
        };
        // C s_330_174: const #11984u : u32
        let s_330_174: u32 = 11984;
        // D s_330_175: read-reg s_330_174:struct
        let s_330_175: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_174 as isize);
            tracer.read_register(s_330_174 as isize, value);
            value
        };
        // C s_330_176: const #11984u : u32
        let s_330_176: u32 = 11984;
        // N s_330_177: write-reg s_330_176 <= s_330_175
        let s_330_177: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_176 as isize, s_330_175);
            tracer.write_register(s_330_176 as isize, s_330_175);
        };
        // C s_330_178: const #11984u : u32
        let s_330_178: u32 = 11984;
        // D s_330_179: read-reg s_330_178:struct
        let s_330_179: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_178 as isize);
            tracer.read_register(s_330_178 as isize, value);
            value
        };
        // C s_330_180: const #11984u : u32
        let s_330_180: u32 = 11984;
        // N s_330_181: write-reg s_330_180 <= s_330_179
        let s_330_181: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_180 as isize, s_330_179);
            tracer.write_register(s_330_180 as isize, s_330_179);
        };
        // C s_330_182: const #90872u : u32
        let s_330_182: u32 = 90872;
        // D s_330_183: read-reg s_330_182:struct
        let s_330_183: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_182 as isize);
            tracer.read_register(s_330_182 as isize, value);
            value
        };
        // C s_330_184: const #90872u : u32
        let s_330_184: u32 = 90872;
        // N s_330_185: write-reg s_330_184 <= s_330_183
        let s_330_185: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_184 as isize, s_330_183);
            tracer.write_register(s_330_184 as isize, s_330_183);
        };
        // C s_330_186: const #90872u : u32
        let s_330_186: u32 = 90872;
        // D s_330_187: read-reg s_330_186:struct
        let s_330_187: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_186 as isize);
            tracer.read_register(s_330_186 as isize, value);
            value
        };
        // C s_330_188: const #90872u : u32
        let s_330_188: u32 = 90872;
        // N s_330_189: write-reg s_330_188 <= s_330_187
        let s_330_189: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_188 as isize, s_330_187);
            tracer.write_register(s_330_188 as isize, s_330_187);
        };
        // C s_330_190: const #15744u : u32
        let s_330_190: u32 = 15744;
        // D s_330_191: read-reg s_330_190:struct
        let s_330_191: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_190 as isize);
            tracer.read_register(s_330_190 as isize, value);
            value
        };
        // C s_330_192: const #15744u : u32
        let s_330_192: u32 = 15744;
        // N s_330_193: write-reg s_330_192 <= s_330_191
        let s_330_193: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_192 as isize, s_330_191);
            tracer.write_register(s_330_192 as isize, s_330_191);
        };
        // C s_330_194: const #15744u : u32
        let s_330_194: u32 = 15744;
        // D s_330_195: read-reg s_330_194:struct
        let s_330_195: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_194 as isize);
            tracer.read_register(s_330_194 as isize, value);
            value
        };
        // C s_330_196: const #15744u : u32
        let s_330_196: u32 = 15744;
        // N s_330_197: write-reg s_330_196 <= s_330_195
        let s_330_197: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_196 as isize, s_330_195);
            tracer.write_register(s_330_196 as isize, s_330_195);
        };
        // C s_330_198: const #15744u : u32
        let s_330_198: u32 = 15744;
        // D s_330_199: read-reg s_330_198:struct
        let s_330_199: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_198 as isize);
            tracer.read_register(s_330_198 as isize, value);
            value
        };
        // C s_330_200: const #15744u : u32
        let s_330_200: u32 = 15744;
        // N s_330_201: write-reg s_330_200 <= s_330_199
        let s_330_201: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_200 as isize, s_330_199);
            tracer.write_register(s_330_200 as isize, s_330_199);
        };
        // C s_330_202: const #103944u : u32
        let s_330_202: u32 = 103944;
        // D s_330_203: read-reg s_330_202:struct
        let s_330_203: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_202 as isize);
            tracer.read_register(s_330_202 as isize, value);
            value
        };
        // C s_330_204: const #103944u : u32
        let s_330_204: u32 = 103944;
        // N s_330_205: write-reg s_330_204 <= s_330_203
        let s_330_205: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_204 as isize, s_330_203);
            tracer.write_register(s_330_204 as isize, s_330_203);
        };
        // C s_330_206: const #11992u : u32
        let s_330_206: u32 = 11992;
        // D s_330_207: read-reg s_330_206:struct
        let s_330_207: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_206 as isize);
            tracer.read_register(s_330_206 as isize, value);
            value
        };
        // C s_330_208: const #11992u : u32
        let s_330_208: u32 = 11992;
        // N s_330_209: write-reg s_330_208 <= s_330_207
        let s_330_209: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_208 as isize, s_330_207);
            tracer.write_register(s_330_208 as isize, s_330_207);
        };
        // C s_330_210: const #17200u : u32
        let s_330_210: u32 = 17200;
        // D s_330_211: read-reg s_330_210:struct
        let s_330_211: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_210 as isize);
            tracer.read_register(s_330_210 as isize, value);
            value
        };
        // C s_330_212: const #17200u : u32
        let s_330_212: u32 = 17200;
        // N s_330_213: write-reg s_330_212 <= s_330_211
        let s_330_213: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_212 as isize, s_330_211);
            tracer.write_register(s_330_212 as isize, s_330_211);
        };
        // C s_330_214: const #11464u : u32
        let s_330_214: u32 = 11464;
        // D s_330_215: read-reg s_330_214:struct
        let s_330_215: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_214 as isize);
            tracer.read_register(s_330_214 as isize, value);
            value
        };
        // C s_330_216: const #11464u : u32
        let s_330_216: u32 = 11464;
        // N s_330_217: write-reg s_330_216 <= s_330_215
        let s_330_217: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_216 as isize, s_330_215);
            tracer.write_register(s_330_216 as isize, s_330_215);
        };
        // C s_330_218: const #11464u : u32
        let s_330_218: u32 = 11464;
        // D s_330_219: read-reg s_330_218:struct
        let s_330_219: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_218 as isize);
            tracer.read_register(s_330_218 as isize, value);
            value
        };
        // C s_330_220: const #11464u : u32
        let s_330_220: u32 = 11464;
        // N s_330_221: write-reg s_330_220 <= s_330_219
        let s_330_221: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_220 as isize, s_330_219);
            tracer.write_register(s_330_220 as isize, s_330_219);
        };
        // C s_330_222: const #11464u : u32
        let s_330_222: u32 = 11464;
        // D s_330_223: read-reg s_330_222:struct
        let s_330_223: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_222 as isize);
            tracer.read_register(s_330_222 as isize, value);
            value
        };
        // C s_330_224: const #11464u : u32
        let s_330_224: u32 = 11464;
        // N s_330_225: write-reg s_330_224 <= s_330_223
        let s_330_225: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_224 as isize, s_330_223);
            tracer.write_register(s_330_224 as isize, s_330_223);
        };
        // C s_330_226: const #11464u : u32
        let s_330_226: u32 = 11464;
        // D s_330_227: read-reg s_330_226:struct
        let s_330_227: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_226 as isize);
            tracer.read_register(s_330_226 as isize, value);
            value
        };
        // C s_330_228: const #11464u : u32
        let s_330_228: u32 = 11464;
        // N s_330_229: write-reg s_330_228 <= s_330_227
        let s_330_229: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_228 as isize, s_330_227);
            tracer.write_register(s_330_228 as isize, s_330_227);
        };
        // C s_330_230: const #89608u : u32
        let s_330_230: u32 = 89608;
        // D s_330_231: read-reg s_330_230:struct
        let s_330_231: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_230 as isize);
            tracer.read_register(s_330_230 as isize, value);
            value
        };
        // C s_330_232: const #89608u : u32
        let s_330_232: u32 = 89608;
        // N s_330_233: write-reg s_330_232 <= s_330_231
        let s_330_233: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_232 as isize, s_330_231);
            tracer.write_register(s_330_232 as isize, s_330_231);
        };
        // C s_330_234: const #89608u : u32
        let s_330_234: u32 = 89608;
        // D s_330_235: read-reg s_330_234:struct
        let s_330_235: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_234 as isize);
            tracer.read_register(s_330_234 as isize, value);
            value
        };
        // C s_330_236: const #89608u : u32
        let s_330_236: u32 = 89608;
        // N s_330_237: write-reg s_330_236 <= s_330_235
        let s_330_237: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_236 as isize, s_330_235);
            tracer.write_register(s_330_236 as isize, s_330_235);
        };
        // C s_330_238: const #32s : i
        let s_330_238: i128 = 32;
        // C s_330_239: const #22536u : u32
        let s_330_239: u32 = 22536;
        // D s_330_240: read-reg s_330_239:u64
        let s_330_240: u64 = {
            let value = state.read_register::<u64>(s_330_239 as isize);
            tracer.read_register(s_330_239 as isize, value);
            value
        };
        // D s_330_241: cast zx s_330_240 -> bv
        let s_330_241: Bits = Bits::new(s_330_240 as u128, 64u16);
        // C s_330_242: const #0u : u32
        let s_330_242: u32 = 0;
        // C s_330_243: cast zx s_330_242 -> bv
        let s_330_243: Bits = Bits::new(s_330_242 as u128, 32u16);
        // C s_330_244: const #31s : i
        let s_330_244: i128 = 31;
        // C s_330_245: const #1u : u64
        let s_330_245: u64 = 1;
        // C s_330_246: cast zx s_330_245 -> bv
        let s_330_246: Bits = Bits::new(s_330_245 as u128, 64u16);
        // C s_330_247: lsl s_330_246 s_330_244
        let s_330_247: Bits = s_330_246 << s_330_244;
        // C s_330_248: sub s_330_247 s_330_246
        let s_330_248: Bits = ((s_330_247) - (s_330_246));
        // C s_330_249: and s_330_243 s_330_248
        let s_330_249: Bits = ((s_330_243) & (s_330_248));
        // C s_330_250: lsl s_330_249 s_330_238
        let s_330_250: Bits = s_330_249 << s_330_238;
        // C s_330_251: lsl s_330_248 s_330_238
        let s_330_251: Bits = s_330_248 << s_330_238;
        // C s_330_252: cmpl s_330_251
        let s_330_252: Bits = !s_330_251;
        // D s_330_253: and s_330_241 s_330_252
        let s_330_253: Bits = ((s_330_241) & (s_330_252));
        // D s_330_254: or s_330_253 s_330_250
        let s_330_254: Bits = ((s_330_253) | (s_330_250));
        // D s_330_255: cast reint s_330_254 -> u64
        let s_330_255: u64 = (s_330_254.value() as u64);
        // C s_330_256: const #22536u : u32
        let s_330_256: u32 = 22536;
        // N s_330_257: write-reg s_330_256 <= s_330_255
        let s_330_257: () = {
            state.write_register::<u64>(s_330_256 as isize, s_330_255);
            tracer.write_register(s_330_256 as isize, s_330_255);
        };
        // C s_330_258: const #15376u : u32
        let s_330_258: u32 = 15376;
        // D s_330_259: read-reg s_330_258:struct
        let s_330_259: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_258 as isize);
            tracer.read_register(s_330_258 as isize, value);
            value
        };
        // C s_330_260: const #15376u : u32
        let s_330_260: u32 = 15376;
        // N s_330_261: write-reg s_330_260 <= s_330_259
        let s_330_261: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_260 as isize, s_330_259);
            tracer.write_register(s_330_260 as isize, s_330_259);
        };
        // C s_330_262: const #15376u : u32
        let s_330_262: u32 = 15376;
        // D s_330_263: read-reg s_330_262:struct
        let s_330_263: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_262 as isize);
            tracer.read_register(s_330_262 as isize, value);
            value
        };
        // C s_330_264: const #15376u : u32
        let s_330_264: u32 = 15376;
        // N s_330_265: write-reg s_330_264 <= s_330_263
        let s_330_265: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_264 as isize, s_330_263);
            tracer.write_register(s_330_264 as isize, s_330_263);
        };
        // C s_330_266: const #15376u : u32
        let s_330_266: u32 = 15376;
        // D s_330_267: read-reg s_330_266:struct
        let s_330_267: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_266 as isize);
            tracer.read_register(s_330_266 as isize, value);
            value
        };
        // C s_330_268: const #15376u : u32
        let s_330_268: u32 = 15376;
        // N s_330_269: write-reg s_330_268 <= s_330_267
        let s_330_269: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_268 as isize, s_330_267);
            tracer.write_register(s_330_268 as isize, s_330_267);
        };
        // C s_330_270: const #20792u : u32
        let s_330_270: u32 = 20792;
        // D s_330_271: read-reg s_330_270:struct
        let s_330_271: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_270 as isize);
            tracer.read_register(s_330_270 as isize, value);
            value
        };
        // C s_330_272: const #20792u : u32
        let s_330_272: u32 = 20792;
        // N s_330_273: write-reg s_330_272 <= s_330_271
        let s_330_273: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_272 as isize, s_330_271);
            tracer.write_register(s_330_272 as isize, s_330_271);
        };
        // C s_330_274: const #11632u : u32
        let s_330_274: u32 = 11632;
        // D s_330_275: read-reg s_330_274:struct
        let s_330_275: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_274 as isize);
            tracer.read_register(s_330_274 as isize, value);
            value
        };
        // C s_330_276: const #11632u : u32
        let s_330_276: u32 = 11632;
        // N s_330_277: write-reg s_330_276 <= s_330_275
        let s_330_277: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_276 as isize, s_330_275);
            tracer.write_register(s_330_276 as isize, s_330_275);
        };
        // C s_330_278: const #0u : u8
        let s_330_278: bool = false;
        // S s_330_279: call Bit(s_330_278)
        let s_330_279: bool = Bit(state, tracer, s_330_278);
        // C s_330_280: const #11632u : u32
        let s_330_280: u32 = 11632;
        // D s_330_281: read-reg s_330_280:struct
        let s_330_281: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_280 as isize);
            tracer.read_register(s_330_280 as isize, value);
            value
        };
        // C s_330_282: const #11632u : u32
        let s_330_282: u32 = 11632;
        // N s_330_283: write-reg s_330_282 <= s_330_281
        let s_330_283: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_282 as isize, s_330_281);
            tracer.write_register(s_330_282 as isize, s_330_281);
        };
        // C s_330_284: const #0u : u8
        let s_330_284: bool = false;
        // S s_330_285: call Bit(s_330_284)
        let s_330_285: bool = Bit(state, tracer, s_330_284);
        // C s_330_286: const #11632u : u32
        let s_330_286: u32 = 11632;
        // D s_330_287: read-reg s_330_286:struct
        let s_330_287: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_286 as isize);
            tracer.read_register(s_330_286 as isize, value);
            value
        };
        // C s_330_288: const #11632u : u32
        let s_330_288: u32 = 11632;
        // N s_330_289: write-reg s_330_288 <= s_330_287
        let s_330_289: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_288 as isize, s_330_287);
            tracer.write_register(s_330_288 as isize, s_330_287);
        };
        // C s_330_290: const #11632u : u32
        let s_330_290: u32 = 11632;
        // D s_330_291: read-reg s_330_290:struct
        let s_330_291: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_290 as isize);
            tracer.read_register(s_330_290 as isize, value);
            value
        };
        // C s_330_292: const #11632u : u32
        let s_330_292: u32 = 11632;
        // N s_330_293: write-reg s_330_292 <= s_330_291
        let s_330_293: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_292 as isize, s_330_291);
            tracer.write_register(s_330_292 as isize, s_330_291);
        };
        // C s_330_294: const #20784u : u32
        let s_330_294: u32 = 20784;
        // D s_330_295: read-reg s_330_294:struct
        let s_330_295: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_294 as isize);
            tracer.read_register(s_330_294 as isize, value);
            value
        };
        // C s_330_296: const #20784u : u32
        let s_330_296: u32 = 20784;
        // N s_330_297: write-reg s_330_296 <= s_330_295
        let s_330_297: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_296 as isize, s_330_295);
            tracer.write_register(s_330_296 as isize, s_330_295);
        };
        // C s_330_298: const #0u : u8
        let s_330_298: bool = false;
        // S s_330_299: call Bit(s_330_298)
        let s_330_299: bool = Bit(state, tracer, s_330_298);
        // C s_330_300: const #20784u : u32
        let s_330_300: u32 = 20784;
        // D s_330_301: read-reg s_330_300:struct
        let s_330_301: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_300 as isize);
            tracer.read_register(s_330_300 as isize, value);
            value
        };
        // C s_330_302: const #20784u : u32
        let s_330_302: u32 = 20784;
        // N s_330_303: write-reg s_330_302 <= s_330_301
        let s_330_303: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_302 as isize, s_330_301);
            tracer.write_register(s_330_302 as isize, s_330_301);
        };
        // C s_330_304: const #0u : u8
        let s_330_304: bool = false;
        // S s_330_305: call Bit(s_330_304)
        let s_330_305: bool = Bit(state, tracer, s_330_304);
        // C s_330_306: const #20784u : u32
        let s_330_306: u32 = 20784;
        // D s_330_307: read-reg s_330_306:struct
        let s_330_307: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_306 as isize);
            tracer.read_register(s_330_306 as isize, value);
            value
        };
        // C s_330_308: const #20784u : u32
        let s_330_308: u32 = 20784;
        // N s_330_309: write-reg s_330_308 <= s_330_307
        let s_330_309: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_308 as isize, s_330_307);
            tracer.write_register(s_330_308 as isize, s_330_307);
        };
        // C s_330_310: const #20784u : u32
        let s_330_310: u32 = 20784;
        // D s_330_311: read-reg s_330_310:struct
        let s_330_311: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_310 as isize);
            tracer.read_register(s_330_310 as isize, value);
            value
        };
        // C s_330_312: const #20784u : u32
        let s_330_312: u32 = 20784;
        // N s_330_313: write-reg s_330_312 <= s_330_311
        let s_330_313: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_312 as isize, s_330_311);
            tracer.write_register(s_330_312 as isize, s_330_311);
        };
        // C s_330_314: const #0u : u8
        let s_330_314: bool = false;
        // S s_330_315: call Bit(s_330_314)
        let s_330_315: bool = Bit(state, tracer, s_330_314);
        // C s_330_316: const #20784u : u32
        let s_330_316: u32 = 20784;
        // D s_330_317: read-reg s_330_316:struct
        let s_330_317: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_316 as isize);
            tracer.read_register(s_330_316 as isize, value);
            value
        };
        // C s_330_318: const #20784u : u32
        let s_330_318: u32 = 20784;
        // N s_330_319: write-reg s_330_318 <= s_330_317
        let s_330_319: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_318 as isize, s_330_317);
            tracer.write_register(s_330_318 as isize, s_330_317);
        };
        // C s_330_320: const #20784u : u32
        let s_330_320: u32 = 20784;
        // D s_330_321: read-reg s_330_320:struct
        let s_330_321: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_320 as isize);
            tracer.read_register(s_330_320 as isize, value);
            value
        };
        // C s_330_322: const #20784u : u32
        let s_330_322: u32 = 20784;
        // N s_330_323: write-reg s_330_322 <= s_330_321
        let s_330_323: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_322 as isize, s_330_321);
            tracer.write_register(s_330_322 as isize, s_330_321);
        };
        // C s_330_324: const #20784u : u32
        let s_330_324: u32 = 20784;
        // D s_330_325: read-reg s_330_324:struct
        let s_330_325: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_324 as isize);
            tracer.read_register(s_330_324 as isize, value);
            value
        };
        // C s_330_326: const #20784u : u32
        let s_330_326: u32 = 20784;
        // N s_330_327: write-reg s_330_326 <= s_330_325
        let s_330_327: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_326 as isize, s_330_325);
            tracer.write_register(s_330_326 as isize, s_330_325);
        };
        // C s_330_328: const #10128u : u32
        let s_330_328: u32 = 10128;
        // D s_330_329: read-reg s_330_328:struct
        let s_330_329: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_330_328 as isize);
            tracer.read_register(s_330_328 as isize, value);
            value
        };
        // C s_330_330: const #10128u : u32
        let s_330_330: u32 = 10128;
        // N s_330_331: write-reg s_330_330 <= s_330_329
        let s_330_331: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_330_330 as isize, s_330_329);
            tracer.write_register(s_330_330 as isize, s_330_329);
        };
        // D s_330_332: read-var cold:u8
        let s_330_332: bool = fn_state.cold;
        // N s_330_333: branch s_330_332 b990 b331
        if s_330_332 {
            return block_990(state, tracer, fn_state);
        } else {
            return block_331(state, tracer, fn_state);
        };
    }
    fn block_331<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_331_0: jump b332
        return block_332(state, tracer, fn_state);
    }
    fn block_332<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_332_0: const #22712u : u32
        let s_332_0: u32 = 22712;
        // D s_332_1: read-reg s_332_0:struct
        let s_332_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_332_0 as isize);
            tracer.read_register(s_332_0 as isize, value);
            value
        };
        // C s_332_2: const #22712u : u32
        let s_332_2: u32 = 22712;
        // N s_332_3: write-reg s_332_2 <= s_332_1
        let s_332_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_332_2 as isize, s_332_1);
            tracer.write_register(s_332_2 as isize, s_332_1);
        };
        // C s_332_4: const #22712u : u32
        let s_332_4: u32 = 22712;
        // D s_332_5: read-reg s_332_4:struct
        let s_332_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_332_4 as isize);
            tracer.read_register(s_332_4 as isize, value);
            value
        };
        // C s_332_6: const #22712u : u32
        let s_332_6: u32 = 22712;
        // N s_332_7: write-reg s_332_6 <= s_332_5
        let s_332_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_332_6 as isize, s_332_5);
            tracer.write_register(s_332_6 as isize, s_332_5);
        };
        // C s_332_8: const #22712u : u32
        let s_332_8: u32 = 22712;
        // D s_332_9: read-reg s_332_8:struct
        let s_332_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_332_8 as isize);
            tracer.read_register(s_332_8 as isize, value);
            value
        };
        // C s_332_10: const #22712u : u32
        let s_332_10: u32 = 22712;
        // N s_332_11: write-reg s_332_10 <= s_332_9
        let s_332_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_332_10 as isize, s_332_9);
            tracer.write_register(s_332_10 as isize, s_332_9);
        };
        // C s_332_12: const #0u : u8
        let s_332_12: bool = false;
        // S s_332_13: call Bit(s_332_12)
        let s_332_13: bool = Bit(state, tracer, s_332_12);
        // C s_332_14: const #22712u : u32
        let s_332_14: u32 = 22712;
        // D s_332_15: read-reg s_332_14:struct
        let s_332_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_332_14 as isize);
            tracer.read_register(s_332_14 as isize, value);
            value
        };
        // C s_332_16: const #22712u : u32
        let s_332_16: u32 = 22712;
        // N s_332_17: write-reg s_332_16 <= s_332_15
        let s_332_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_332_16 as isize, s_332_15);
            tracer.write_register(s_332_16 as isize, s_332_15);
        };
        // D s_332_18: read-var cold:u8
        let s_332_18: bool = fn_state.cold;
        // N s_332_19: branch s_332_18 b989 b333
        if s_332_18 {
            return block_989(state, tracer, fn_state);
        } else {
            return block_333(state, tracer, fn_state);
        };
    }
    fn block_333<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_333_0: jump b334
        return block_334(state, tracer, fn_state);
    }
    fn block_334<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_334_0: const #22712u : u32
        let s_334_0: u32 = 22712;
        // D s_334_1: read-reg s_334_0:struct
        let s_334_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_334_0 as isize);
            tracer.read_register(s_334_0 as isize, value);
            value
        };
        // C s_334_2: const #22712u : u32
        let s_334_2: u32 = 22712;
        // N s_334_3: write-reg s_334_2 <= s_334_1
        let s_334_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_334_2 as isize, s_334_1);
            tracer.write_register(s_334_2 as isize, s_334_1);
        };
        // C s_334_4: const #22712u : u32
        let s_334_4: u32 = 22712;
        // D s_334_5: read-reg s_334_4:struct
        let s_334_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_334_4 as isize);
            tracer.read_register(s_334_4 as isize, value);
            value
        };
        // C s_334_6: const #22712u : u32
        let s_334_6: u32 = 22712;
        // N s_334_7: write-reg s_334_6 <= s_334_5
        let s_334_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_334_6 as isize, s_334_5);
            tracer.write_register(s_334_6 as isize, s_334_5);
        };
        // C s_334_8: const #22712u : u32
        let s_334_8: u32 = 22712;
        // D s_334_9: read-reg s_334_8:struct
        let s_334_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_334_8 as isize);
            tracer.read_register(s_334_8 as isize, value);
            value
        };
        // C s_334_10: const #22712u : u32
        let s_334_10: u32 = 22712;
        // N s_334_11: write-reg s_334_10 <= s_334_9
        let s_334_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_334_10 as isize, s_334_9);
            tracer.write_register(s_334_10 as isize, s_334_9);
        };
        // D s_334_12: read-var cold:u8
        let s_334_12: bool = fn_state.cold;
        // N s_334_13: branch s_334_12 b988 b335
        if s_334_12 {
            return block_988(state, tracer, fn_state);
        } else {
            return block_335(state, tracer, fn_state);
        };
    }
    fn block_335<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_335_0: jump b336
        return block_336(state, tracer, fn_state);
    }
    fn block_336<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_336_0: const #0u : u8
        let s_336_0: bool = false;
        // S s_336_1: call Bit(s_336_0)
        let s_336_1: bool = Bit(state, tracer, s_336_0);
        // C s_336_2: const #22712u : u32
        let s_336_2: u32 = 22712;
        // D s_336_3: read-reg s_336_2:struct
        let s_336_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_336_2 as isize);
            tracer.read_register(s_336_2 as isize, value);
            value
        };
        // C s_336_4: const #22712u : u32
        let s_336_4: u32 = 22712;
        // N s_336_5: write-reg s_336_4 <= s_336_3
        let s_336_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_336_4 as isize, s_336_3);
            tracer.write_register(s_336_4 as isize, s_336_3);
        };
        // D s_336_6: read-var cold:u8
        let s_336_6: bool = fn_state.cold;
        // N s_336_7: branch s_336_6 b987 b337
        if s_336_6 {
            return block_987(state, tracer, fn_state);
        } else {
            return block_337(state, tracer, fn_state);
        };
    }
    fn block_337<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_337_0: jump b338
        return block_338(state, tracer, fn_state);
    }
    fn block_338<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_338_0: const #22712u : u32
        let s_338_0: u32 = 22712;
        // D s_338_1: read-reg s_338_0:struct
        let s_338_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_0 as isize);
            tracer.read_register(s_338_0 as isize, value);
            value
        };
        // C s_338_2: const #22712u : u32
        let s_338_2: u32 = 22712;
        // N s_338_3: write-reg s_338_2 <= s_338_1
        let s_338_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_2 as isize, s_338_1);
            tracer.write_register(s_338_2 as isize, s_338_1);
        };
        // C s_338_4: const #22712u : u32
        let s_338_4: u32 = 22712;
        // D s_338_5: read-reg s_338_4:struct
        let s_338_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_4 as isize);
            tracer.read_register(s_338_4 as isize, value);
            value
        };
        // C s_338_6: const #22712u : u32
        let s_338_6: u32 = 22712;
        // N s_338_7: write-reg s_338_6 <= s_338_5
        let s_338_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_6 as isize, s_338_5);
            tracer.write_register(s_338_6 as isize, s_338_5);
        };
        // C s_338_8: const #0u : u8
        let s_338_8: bool = false;
        // S s_338_9: call Bit(s_338_8)
        let s_338_9: bool = Bit(state, tracer, s_338_8);
        // C s_338_10: const #22712u : u32
        let s_338_10: u32 = 22712;
        // D s_338_11: read-reg s_338_10:struct
        let s_338_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_10 as isize);
            tracer.read_register(s_338_10 as isize, value);
            value
        };
        // C s_338_12: const #22712u : u32
        let s_338_12: u32 = 22712;
        // N s_338_13: write-reg s_338_12 <= s_338_11
        let s_338_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_12 as isize, s_338_11);
            tracer.write_register(s_338_12 as isize, s_338_11);
        };
        // C s_338_14: const #22712u : u32
        let s_338_14: u32 = 22712;
        // D s_338_15: read-reg s_338_14:struct
        let s_338_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_14 as isize);
            tracer.read_register(s_338_14 as isize, value);
            value
        };
        // C s_338_16: const #22712u : u32
        let s_338_16: u32 = 22712;
        // N s_338_17: write-reg s_338_16 <= s_338_15
        let s_338_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_16 as isize, s_338_15);
            tracer.write_register(s_338_16 as isize, s_338_15);
        };
        // C s_338_18: const #22712u : u32
        let s_338_18: u32 = 22712;
        // D s_338_19: read-reg s_338_18:struct
        let s_338_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_18 as isize);
            tracer.read_register(s_338_18 as isize, value);
            value
        };
        // C s_338_20: const #22712u : u32
        let s_338_20: u32 = 22712;
        // N s_338_21: write-reg s_338_20 <= s_338_19
        let s_338_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_20 as isize, s_338_19);
            tracer.write_register(s_338_20 as isize, s_338_19);
        };
        // C s_338_22: const #22712u : u32
        let s_338_22: u32 = 22712;
        // D s_338_23: read-reg s_338_22:struct
        let s_338_23: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_22 as isize);
            tracer.read_register(s_338_22 as isize, value);
            value
        };
        // C s_338_24: const #22712u : u32
        let s_338_24: u32 = 22712;
        // N s_338_25: write-reg s_338_24 <= s_338_23
        let s_338_25: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_24 as isize, s_338_23);
            tracer.write_register(s_338_24 as isize, s_338_23);
        };
        // C s_338_26: const #22712u : u32
        let s_338_26: u32 = 22712;
        // D s_338_27: read-reg s_338_26:struct
        let s_338_27: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_26 as isize);
            tracer.read_register(s_338_26 as isize, value);
            value
        };
        // C s_338_28: const #22712u : u32
        let s_338_28: u32 = 22712;
        // N s_338_29: write-reg s_338_28 <= s_338_27
        let s_338_29: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_28 as isize, s_338_27);
            tracer.write_register(s_338_28 as isize, s_338_27);
        };
        // C s_338_30: const #0u : u8
        let s_338_30: bool = false;
        // S s_338_31: call Bit(s_338_30)
        let s_338_31: bool = Bit(state, tracer, s_338_30);
        // C s_338_32: const #22712u : u32
        let s_338_32: u32 = 22712;
        // D s_338_33: read-reg s_338_32:struct
        let s_338_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_32 as isize);
            tracer.read_register(s_338_32 as isize, value);
            value
        };
        // C s_338_34: const #22712u : u32
        let s_338_34: u32 = 22712;
        // N s_338_35: write-reg s_338_34 <= s_338_33
        let s_338_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_34 as isize, s_338_33);
            tracer.write_register(s_338_34 as isize, s_338_33);
        };
        // C s_338_36: const #0u : u8
        let s_338_36: bool = false;
        // S s_338_37: call Bit(s_338_36)
        let s_338_37: bool = Bit(state, tracer, s_338_36);
        // C s_338_38: const #22712u : u32
        let s_338_38: u32 = 22712;
        // D s_338_39: read-reg s_338_38:struct
        let s_338_39: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_38 as isize);
            tracer.read_register(s_338_38 as isize, value);
            value
        };
        // C s_338_40: const #22712u : u32
        let s_338_40: u32 = 22712;
        // N s_338_41: write-reg s_338_40 <= s_338_39
        let s_338_41: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_40 as isize, s_338_39);
            tracer.write_register(s_338_40 as isize, s_338_39);
        };
        // C s_338_42: const #22712u : u32
        let s_338_42: u32 = 22712;
        // D s_338_43: read-reg s_338_42:struct
        let s_338_43: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_42 as isize);
            tracer.read_register(s_338_42 as isize, value);
            value
        };
        // C s_338_44: const #22712u : u32
        let s_338_44: u32 = 22712;
        // N s_338_45: write-reg s_338_44 <= s_338_43
        let s_338_45: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_44 as isize, s_338_43);
            tracer.write_register(s_338_44 as isize, s_338_43);
        };
        // C s_338_46: const #0u : u8
        let s_338_46: bool = false;
        // S s_338_47: call Bit(s_338_46)
        let s_338_47: bool = Bit(state, tracer, s_338_46);
        // C s_338_48: const #22712u : u32
        let s_338_48: u32 = 22712;
        // D s_338_49: read-reg s_338_48:struct
        let s_338_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_48 as isize);
            tracer.read_register(s_338_48 as isize, value);
            value
        };
        // C s_338_50: const #22712u : u32
        let s_338_50: u32 = 22712;
        // N s_338_51: write-reg s_338_50 <= s_338_49
        let s_338_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_50 as isize, s_338_49);
            tracer.write_register(s_338_50 as isize, s_338_49);
        };
        // C s_338_52: const #22712u : u32
        let s_338_52: u32 = 22712;
        // D s_338_53: read-reg s_338_52:struct
        let s_338_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_52 as isize);
            tracer.read_register(s_338_52 as isize, value);
            value
        };
        // C s_338_54: const #22712u : u32
        let s_338_54: u32 = 22712;
        // N s_338_55: write-reg s_338_54 <= s_338_53
        let s_338_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_54 as isize, s_338_53);
            tracer.write_register(s_338_54 as isize, s_338_53);
        };
        // C s_338_56: const #0u : u8
        let s_338_56: bool = false;
        // S s_338_57: call Bit(s_338_56)
        let s_338_57: bool = Bit(state, tracer, s_338_56);
        // C s_338_58: const #22712u : u32
        let s_338_58: u32 = 22712;
        // D s_338_59: read-reg s_338_58:struct
        let s_338_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_58 as isize);
            tracer.read_register(s_338_58 as isize, value);
            value
        };
        // C s_338_60: const #22712u : u32
        let s_338_60: u32 = 22712;
        // N s_338_61: write-reg s_338_60 <= s_338_59
        let s_338_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_60 as isize, s_338_59);
            tracer.write_register(s_338_60 as isize, s_338_59);
        };
        // C s_338_62: const #22712u : u32
        let s_338_62: u32 = 22712;
        // D s_338_63: read-reg s_338_62:struct
        let s_338_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_62 as isize);
            tracer.read_register(s_338_62 as isize, value);
            value
        };
        // C s_338_64: const #22712u : u32
        let s_338_64: u32 = 22712;
        // N s_338_65: write-reg s_338_64 <= s_338_63
        let s_338_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_64 as isize, s_338_63);
            tracer.write_register(s_338_64 as isize, s_338_63);
        };
        // C s_338_66: const #1464u : u32
        let s_338_66: u32 = 1464;
        // D s_338_67: read-reg s_338_66:struct
        let s_338_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_66 as isize);
            tracer.read_register(s_338_66 as isize, value);
            value
        };
        // C s_338_68: const #1464u : u32
        let s_338_68: u32 = 1464;
        // N s_338_69: write-reg s_338_68 <= s_338_67
        let s_338_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_68 as isize, s_338_67);
            tracer.write_register(s_338_68 as isize, s_338_67);
        };
        // C s_338_70: const #1464u : u32
        let s_338_70: u32 = 1464;
        // D s_338_71: read-reg s_338_70:struct
        let s_338_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_70 as isize);
            tracer.read_register(s_338_70 as isize, value);
            value
        };
        // C s_338_72: const #1464u : u32
        let s_338_72: u32 = 1464;
        // N s_338_73: write-reg s_338_72 <= s_338_71
        let s_338_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_72 as isize, s_338_71);
            tracer.write_register(s_338_72 as isize, s_338_71);
        };
        // C s_338_74: const #1464u : u32
        let s_338_74: u32 = 1464;
        // D s_338_75: read-reg s_338_74:struct
        let s_338_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_74 as isize);
            tracer.read_register(s_338_74 as isize, value);
            value
        };
        // C s_338_76: const #1464u : u32
        let s_338_76: u32 = 1464;
        // N s_338_77: write-reg s_338_76 <= s_338_75
        let s_338_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_76 as isize, s_338_75);
            tracer.write_register(s_338_76 as isize, s_338_75);
        };
        // C s_338_78: const #0u : u8
        let s_338_78: bool = false;
        // S s_338_79: call Bit(s_338_78)
        let s_338_79: bool = Bit(state, tracer, s_338_78);
        // C s_338_80: const #1464u : u32
        let s_338_80: u32 = 1464;
        // D s_338_81: read-reg s_338_80:struct
        let s_338_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_80 as isize);
            tracer.read_register(s_338_80 as isize, value);
            value
        };
        // C s_338_82: const #1464u : u32
        let s_338_82: u32 = 1464;
        // N s_338_83: write-reg s_338_82 <= s_338_81
        let s_338_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_82 as isize, s_338_81);
            tracer.write_register(s_338_82 as isize, s_338_81);
        };
        // C s_338_84: const #1464u : u32
        let s_338_84: u32 = 1464;
        // D s_338_85: read-reg s_338_84:struct
        let s_338_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_84 as isize);
            tracer.read_register(s_338_84 as isize, value);
            value
        };
        // C s_338_86: const #1464u : u32
        let s_338_86: u32 = 1464;
        // N s_338_87: write-reg s_338_86 <= s_338_85
        let s_338_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_86 as isize, s_338_85);
            tracer.write_register(s_338_86 as isize, s_338_85);
        };
        // C s_338_88: const #0u : u8
        let s_338_88: bool = false;
        // S s_338_89: call Bit(s_338_88)
        let s_338_89: bool = Bit(state, tracer, s_338_88);
        // C s_338_90: const #1464u : u32
        let s_338_90: u32 = 1464;
        // D s_338_91: read-reg s_338_90:struct
        let s_338_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_90 as isize);
            tracer.read_register(s_338_90 as isize, value);
            value
        };
        // C s_338_92: const #1464u : u32
        let s_338_92: u32 = 1464;
        // N s_338_93: write-reg s_338_92 <= s_338_91
        let s_338_93: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_92 as isize, s_338_91);
            tracer.write_register(s_338_92 as isize, s_338_91);
        };
        // C s_338_94: const #11736u : u32
        let s_338_94: u32 = 11736;
        // D s_338_95: read-reg s_338_94:struct
        let s_338_95: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_94 as isize);
            tracer.read_register(s_338_94 as isize, value);
            value
        };
        // C s_338_96: const #11736u : u32
        let s_338_96: u32 = 11736;
        // N s_338_97: write-reg s_338_96 <= s_338_95
        let s_338_97: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_96 as isize, s_338_95);
            tracer.write_register(s_338_96 as isize, s_338_95);
        };
        // C s_338_98: const #0u : u8
        let s_338_98: bool = false;
        // S s_338_99: call Bit(s_338_98)
        let s_338_99: bool = Bit(state, tracer, s_338_98);
        // C s_338_100: const #11736u : u32
        let s_338_100: u32 = 11736;
        // D s_338_101: read-reg s_338_100:struct
        let s_338_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_100 as isize);
            tracer.read_register(s_338_100 as isize, value);
            value
        };
        // C s_338_102: const #11736u : u32
        let s_338_102: u32 = 11736;
        // N s_338_103: write-reg s_338_102 <= s_338_101
        let s_338_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_102 as isize, s_338_101);
            tracer.write_register(s_338_102 as isize, s_338_101);
        };
        // C s_338_104: const #16368u : u32
        let s_338_104: u32 = 16368;
        // D s_338_105: read-reg s_338_104:struct
        let s_338_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_104 as isize);
            tracer.read_register(s_338_104 as isize, value);
            value
        };
        // C s_338_106: const #16368u : u32
        let s_338_106: u32 = 16368;
        // N s_338_107: write-reg s_338_106 <= s_338_105
        let s_338_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_106 as isize, s_338_105);
            tracer.write_register(s_338_106 as isize, s_338_105);
        };
        // C s_338_108: const #16368u : u32
        let s_338_108: u32 = 16368;
        // D s_338_109: read-reg s_338_108:struct
        let s_338_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_108 as isize);
            tracer.read_register(s_338_108 as isize, value);
            value
        };
        // C s_338_110: const #16368u : u32
        let s_338_110: u32 = 16368;
        // N s_338_111: write-reg s_338_110 <= s_338_109
        let s_338_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_110 as isize, s_338_109);
            tracer.write_register(s_338_110 as isize, s_338_109);
        };
        // C s_338_112: const #16368u : u32
        let s_338_112: u32 = 16368;
        // D s_338_113: read-reg s_338_112:struct
        let s_338_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_112 as isize);
            tracer.read_register(s_338_112 as isize, value);
            value
        };
        // C s_338_114: const #16368u : u32
        let s_338_114: u32 = 16368;
        // N s_338_115: write-reg s_338_114 <= s_338_113
        let s_338_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_114 as isize, s_338_113);
            tracer.write_register(s_338_114 as isize, s_338_113);
        };
        // C s_338_116: const #16368u : u32
        let s_338_116: u32 = 16368;
        // D s_338_117: read-reg s_338_116:struct
        let s_338_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_116 as isize);
            tracer.read_register(s_338_116 as isize, value);
            value
        };
        // C s_338_118: const #16368u : u32
        let s_338_118: u32 = 16368;
        // N s_338_119: write-reg s_338_118 <= s_338_117
        let s_338_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_118 as isize, s_338_117);
            tracer.write_register(s_338_118 as isize, s_338_117);
        };
        // C s_338_120: const #20376u : u32
        let s_338_120: u32 = 20376;
        // D s_338_121: read-reg s_338_120:struct
        let s_338_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_120 as isize);
            tracer.read_register(s_338_120 as isize, value);
            value
        };
        // C s_338_122: const #20376u : u32
        let s_338_122: u32 = 20376;
        // N s_338_123: write-reg s_338_122 <= s_338_121
        let s_338_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_122 as isize, s_338_121);
            tracer.write_register(s_338_122 as isize, s_338_121);
        };
        // C s_338_124: const #16584u : u32
        let s_338_124: u32 = 16584;
        // D s_338_125: read-reg s_338_124:struct
        let s_338_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_124 as isize);
            tracer.read_register(s_338_124 as isize, value);
            value
        };
        // C s_338_126: const #16584u : u32
        let s_338_126: u32 = 16584;
        // N s_338_127: write-reg s_338_126 <= s_338_125
        let s_338_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_126 as isize, s_338_125);
            tracer.write_register(s_338_126 as isize, s_338_125);
        };
        // C s_338_128: const #1648u : u32
        let s_338_128: u32 = 1648;
        // D s_338_129: read-reg s_338_128:struct
        let s_338_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_128 as isize);
            tracer.read_register(s_338_128 as isize, value);
            value
        };
        // C s_338_130: const #1648u : u32
        let s_338_130: u32 = 1648;
        // N s_338_131: write-reg s_338_130 <= s_338_129
        let s_338_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_130 as isize, s_338_129);
            tracer.write_register(s_338_130 as isize, s_338_129);
        };
        // C s_338_132: const #0u : u8
        let s_338_132: bool = false;
        // S s_338_133: call Bit(s_338_132)
        let s_338_133: bool = Bit(state, tracer, s_338_132);
        // C s_338_134: const #1648u : u32
        let s_338_134: u32 = 1648;
        // D s_338_135: read-reg s_338_134:struct
        let s_338_135: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_134 as isize);
            tracer.read_register(s_338_134 as isize, value);
            value
        };
        // C s_338_136: const #1648u : u32
        let s_338_136: u32 = 1648;
        // N s_338_137: write-reg s_338_136 <= s_338_135
        let s_338_137: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_136 as isize, s_338_135);
            tracer.write_register(s_338_136 as isize, s_338_135);
        };
        // C s_338_138: const #1648u : u32
        let s_338_138: u32 = 1648;
        // D s_338_139: read-reg s_338_138:struct
        let s_338_139: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_138 as isize);
            tracer.read_register(s_338_138 as isize, value);
            value
        };
        // C s_338_140: const #1648u : u32
        let s_338_140: u32 = 1648;
        // N s_338_141: write-reg s_338_140 <= s_338_139
        let s_338_141: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_140 as isize, s_338_139);
            tracer.write_register(s_338_140 as isize, s_338_139);
        };
        // C s_338_142: const #13480u : u32
        let s_338_142: u32 = 13480;
        // D s_338_143: read-reg s_338_142:struct
        let s_338_143: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_142 as isize);
            tracer.read_register(s_338_142 as isize, value);
            value
        };
        // C s_338_144: const #13480u : u32
        let s_338_144: u32 = 13480;
        // N s_338_145: write-reg s_338_144 <= s_338_143
        let s_338_145: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_144 as isize, s_338_143);
            tracer.write_register(s_338_144 as isize, s_338_143);
        };
        // C s_338_146: const #12816u : u32
        let s_338_146: u32 = 12816;
        // D s_338_147: read-reg s_338_146:struct
        let s_338_147: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_146 as isize);
            tracer.read_register(s_338_146 as isize, value);
            value
        };
        // C s_338_148: const #12816u : u32
        let s_338_148: u32 = 12816;
        // N s_338_149: write-reg s_338_148 <= s_338_147
        let s_338_149: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_148 as isize, s_338_147);
            tracer.write_register(s_338_148 as isize, s_338_147);
        };
        // C s_338_150: const #1u : u8
        let s_338_150: bool = true;
        // S s_338_151: call Bit(s_338_150)
        let s_338_151: bool = Bit(state, tracer, s_338_150);
        // C s_338_152: const #12816u : u32
        let s_338_152: u32 = 12816;
        // D s_338_153: read-reg s_338_152:struct
        let s_338_153: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_152 as isize);
            tracer.read_register(s_338_152 as isize, value);
            value
        };
        // C s_338_154: const #12816u : u32
        let s_338_154: u32 = 12816;
        // N s_338_155: write-reg s_338_154 <= s_338_153
        let s_338_155: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_154 as isize, s_338_153);
            tracer.write_register(s_338_154 as isize, s_338_153);
        };
        // C s_338_156: const #1u : u8
        let s_338_156: bool = true;
        // S s_338_157: call Bit(s_338_156)
        let s_338_157: bool = Bit(state, tracer, s_338_156);
        // C s_338_158: const #12816u : u32
        let s_338_158: u32 = 12816;
        // D s_338_159: read-reg s_338_158:struct
        let s_338_159: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_158 as isize);
            tracer.read_register(s_338_158 as isize, value);
            value
        };
        // C s_338_160: const #12816u : u32
        let s_338_160: u32 = 12816;
        // N s_338_161: write-reg s_338_160 <= s_338_159
        let s_338_161: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_160 as isize, s_338_159);
            tracer.write_register(s_338_160 as isize, s_338_159);
        };
        // C s_338_162: const #0u : u8
        let s_338_162: bool = false;
        // S s_338_163: call Bit(s_338_162)
        let s_338_163: bool = Bit(state, tracer, s_338_162);
        // C s_338_164: const #12816u : u32
        let s_338_164: u32 = 12816;
        // D s_338_165: read-reg s_338_164:struct
        let s_338_165: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_164 as isize);
            tracer.read_register(s_338_164 as isize, value);
            value
        };
        // C s_338_166: const #12816u : u32
        let s_338_166: u32 = 12816;
        // N s_338_167: write-reg s_338_166 <= s_338_165
        let s_338_167: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_166 as isize, s_338_165);
            tracer.write_register(s_338_166 as isize, s_338_165);
        };
        // C s_338_168: const #12816u : u32
        let s_338_168: u32 = 12816;
        // D s_338_169: read-reg s_338_168:struct
        let s_338_169: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_168 as isize);
            tracer.read_register(s_338_168 as isize, value);
            value
        };
        // C s_338_170: const #12816u : u32
        let s_338_170: u32 = 12816;
        // N s_338_171: write-reg s_338_170 <= s_338_169
        let s_338_171: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_170 as isize, s_338_169);
            tracer.write_register(s_338_170 as isize, s_338_169);
        };
        // C s_338_172: const #12816u : u32
        let s_338_172: u32 = 12816;
        // D s_338_173: read-reg s_338_172:struct
        let s_338_173: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_172 as isize);
            tracer.read_register(s_338_172 as isize, value);
            value
        };
        // C s_338_174: const #12816u : u32
        let s_338_174: u32 = 12816;
        // N s_338_175: write-reg s_338_174 <= s_338_173
        let s_338_175: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_174 as isize, s_338_173);
            tracer.write_register(s_338_174 as isize, s_338_173);
        };
        // C s_338_176: const #0u : u8
        let s_338_176: bool = false;
        // S s_338_177: call Bit(s_338_176)
        let s_338_177: bool = Bit(state, tracer, s_338_176);
        // C s_338_178: const #12816u : u32
        let s_338_178: u32 = 12816;
        // D s_338_179: read-reg s_338_178:struct
        let s_338_179: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_178 as isize);
            tracer.read_register(s_338_178 as isize, value);
            value
        };
        // C s_338_180: const #12816u : u32
        let s_338_180: u32 = 12816;
        // N s_338_181: write-reg s_338_180 <= s_338_179
        let s_338_181: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_180 as isize, s_338_179);
            tracer.write_register(s_338_180 as isize, s_338_179);
        };
        // C s_338_182: const #0u : u8
        let s_338_182: bool = false;
        // S s_338_183: call Bit(s_338_182)
        let s_338_183: bool = Bit(state, tracer, s_338_182);
        // C s_338_184: const #12816u : u32
        let s_338_184: u32 = 12816;
        // D s_338_185: read-reg s_338_184:struct
        let s_338_185: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_184 as isize);
            tracer.read_register(s_338_184 as isize, value);
            value
        };
        // C s_338_186: const #12816u : u32
        let s_338_186: u32 = 12816;
        // N s_338_187: write-reg s_338_186 <= s_338_185
        let s_338_187: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_186 as isize, s_338_185);
            tracer.write_register(s_338_186 as isize, s_338_185);
        };
        // C s_338_188: const #100976u : u32
        let s_338_188: u32 = 100976;
        // D s_338_189: read-reg s_338_188:struct
        let s_338_189: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_188 as isize);
            tracer.read_register(s_338_188 as isize, value);
            value
        };
        // C s_338_190: const #100976u : u32
        let s_338_190: u32 = 100976;
        // N s_338_191: write-reg s_338_190 <= s_338_189
        let s_338_191: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_190 as isize, s_338_189);
            tracer.write_register(s_338_190 as isize, s_338_189);
        };
        // C s_338_192: const #14888u : u32
        let s_338_192: u32 = 14888;
        // D s_338_193: read-reg s_338_192:struct
        let s_338_193: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_192 as isize);
            tracer.read_register(s_338_192 as isize, value);
            value
        };
        // C s_338_194: const #14888u : u32
        let s_338_194: u32 = 14888;
        // N s_338_195: write-reg s_338_194 <= s_338_193
        let s_338_195: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_194 as isize, s_338_193);
            tracer.write_register(s_338_194 as isize, s_338_193);
        };
        // C s_338_196: const #14888u : u32
        let s_338_196: u32 = 14888;
        // D s_338_197: read-reg s_338_196:struct
        let s_338_197: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_196 as isize);
            tracer.read_register(s_338_196 as isize, value);
            value
        };
        // C s_338_198: const #14888u : u32
        let s_338_198: u32 = 14888;
        // N s_338_199: write-reg s_338_198 <= s_338_197
        let s_338_199: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_198 as isize, s_338_197);
            tracer.write_register(s_338_198 as isize, s_338_197);
        };
        // C s_338_200: const #14888u : u32
        let s_338_200: u32 = 14888;
        // D s_338_201: read-reg s_338_200:struct
        let s_338_201: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_200 as isize);
            tracer.read_register(s_338_200 as isize, value);
            value
        };
        // C s_338_202: const #14888u : u32
        let s_338_202: u32 = 14888;
        // N s_338_203: write-reg s_338_202 <= s_338_201
        let s_338_203: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_202 as isize, s_338_201);
            tracer.write_register(s_338_202 as isize, s_338_201);
        };
        // C s_338_204: const #19056u : u32
        let s_338_204: u32 = 19056;
        // D s_338_205: read-reg s_338_204:struct
        let s_338_205: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_204 as isize);
            tracer.read_register(s_338_204 as isize, value);
            value
        };
        // C s_338_206: const #19056u : u32
        let s_338_206: u32 = 19056;
        // N s_338_207: write-reg s_338_206 <= s_338_205
        let s_338_207: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_206 as isize, s_338_205);
            tracer.write_register(s_338_206 as isize, s_338_205);
        };
        // C s_338_208: const #1u : u8
        let s_338_208: bool = true;
        // S s_338_209: call Bit(s_338_208)
        let s_338_209: bool = Bit(state, tracer, s_338_208);
        // C s_338_210: const #19056u : u32
        let s_338_210: u32 = 19056;
        // D s_338_211: read-reg s_338_210:struct
        let s_338_211: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_210 as isize);
            tracer.read_register(s_338_210 as isize, value);
            value
        };
        // C s_338_212: const #19056u : u32
        let s_338_212: u32 = 19056;
        // N s_338_213: write-reg s_338_212 <= s_338_211
        let s_338_213: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_212 as isize, s_338_211);
            tracer.write_register(s_338_212 as isize, s_338_211);
        };
        // C s_338_214: const #0u : u8
        let s_338_214: bool = false;
        // S s_338_215: call Bit(s_338_214)
        let s_338_215: bool = Bit(state, tracer, s_338_214);
        // C s_338_216: const #19056u : u32
        let s_338_216: u32 = 19056;
        // D s_338_217: read-reg s_338_216:struct
        let s_338_217: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_216 as isize);
            tracer.read_register(s_338_216 as isize, value);
            value
        };
        // C s_338_218: const #19056u : u32
        let s_338_218: u32 = 19056;
        // N s_338_219: write-reg s_338_218 <= s_338_217
        let s_338_219: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_218 as isize, s_338_217);
            tracer.write_register(s_338_218 as isize, s_338_217);
        };
        // C s_338_220: const #19056u : u32
        let s_338_220: u32 = 19056;
        // D s_338_221: read-reg s_338_220:struct
        let s_338_221: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_220 as isize);
            tracer.read_register(s_338_220 as isize, value);
            value
        };
        // C s_338_222: const #19056u : u32
        let s_338_222: u32 = 19056;
        // N s_338_223: write-reg s_338_222 <= s_338_221
        let s_338_223: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_222 as isize, s_338_221);
            tracer.write_register(s_338_222 as isize, s_338_221);
        };
        // C s_338_224: const #18424u : u32
        let s_338_224: u32 = 18424;
        // D s_338_225: read-reg s_338_224:struct
        let s_338_225: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_224 as isize);
            tracer.read_register(s_338_224 as isize, value);
            value
        };
        // C s_338_226: const #18424u : u32
        let s_338_226: u32 = 18424;
        // N s_338_227: write-reg s_338_226 <= s_338_225
        let s_338_227: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_226 as isize, s_338_225);
            tracer.write_register(s_338_226 as isize, s_338_225);
        };
        // C s_338_228: const #18424u : u32
        let s_338_228: u32 = 18424;
        // D s_338_229: read-reg s_338_228:struct
        let s_338_229: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_228 as isize);
            tracer.read_register(s_338_228 as isize, value);
            value
        };
        // C s_338_230: const #18424u : u32
        let s_338_230: u32 = 18424;
        // N s_338_231: write-reg s_338_230 <= s_338_229
        let s_338_231: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_230 as isize, s_338_229);
            tracer.write_register(s_338_230 as isize, s_338_229);
        };
        // C s_338_232: const #14864u : u32
        let s_338_232: u32 = 14864;
        // D s_338_233: read-reg s_338_232:struct
        let s_338_233: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_232 as isize);
            tracer.read_register(s_338_232 as isize, value);
            value
        };
        // C s_338_234: const #14864u : u32
        let s_338_234: u32 = 14864;
        // N s_338_235: write-reg s_338_234 <= s_338_233
        let s_338_235: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_234 as isize, s_338_233);
            tracer.write_register(s_338_234 as isize, s_338_233);
        };
        // C s_338_236: const #14864u : u32
        let s_338_236: u32 = 14864;
        // D s_338_237: read-reg s_338_236:struct
        let s_338_237: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_236 as isize);
            tracer.read_register(s_338_236 as isize, value);
            value
        };
        // C s_338_238: const #14864u : u32
        let s_338_238: u32 = 14864;
        // N s_338_239: write-reg s_338_238 <= s_338_237
        let s_338_239: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_238 as isize, s_338_237);
            tracer.write_register(s_338_238 as isize, s_338_237);
        };
        // C s_338_240: const #16840u : u32
        let s_338_240: u32 = 16840;
        // D s_338_241: read-reg s_338_240:struct
        let s_338_241: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_240 as isize);
            tracer.read_register(s_338_240 as isize, value);
            value
        };
        // C s_338_242: const #16840u : u32
        let s_338_242: u32 = 16840;
        // N s_338_243: write-reg s_338_242 <= s_338_241
        let s_338_243: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_242 as isize, s_338_241);
            tracer.write_register(s_338_242 as isize, s_338_241);
        };
        // C s_338_244: const #16840u : u32
        let s_338_244: u32 = 16840;
        // D s_338_245: read-reg s_338_244:struct
        let s_338_245: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_244 as isize);
            tracer.read_register(s_338_244 as isize, value);
            value
        };
        // C s_338_246: const #16840u : u32
        let s_338_246: u32 = 16840;
        // N s_338_247: write-reg s_338_246 <= s_338_245
        let s_338_247: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_246 as isize, s_338_245);
            tracer.write_register(s_338_246 as isize, s_338_245);
        };
        // C s_338_248: const #16840u : u32
        let s_338_248: u32 = 16840;
        // D s_338_249: read-reg s_338_248:struct
        let s_338_249: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_248 as isize);
            tracer.read_register(s_338_248 as isize, value);
            value
        };
        // C s_338_250: const #16840u : u32
        let s_338_250: u32 = 16840;
        // N s_338_251: write-reg s_338_250 <= s_338_249
        let s_338_251: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_250 as isize, s_338_249);
            tracer.write_register(s_338_250 as isize, s_338_249);
        };
        // C s_338_252: const #0u : u8
        let s_338_252: bool = false;
        // S s_338_253: call Bit(s_338_252)
        let s_338_253: bool = Bit(state, tracer, s_338_252);
        // C s_338_254: const #16840u : u32
        let s_338_254: u32 = 16840;
        // D s_338_255: read-reg s_338_254:struct
        let s_338_255: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_254 as isize);
            tracer.read_register(s_338_254 as isize, value);
            value
        };
        // C s_338_256: const #16840u : u32
        let s_338_256: u32 = 16840;
        // N s_338_257: write-reg s_338_256 <= s_338_255
        let s_338_257: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_256 as isize, s_338_255);
            tracer.write_register(s_338_256 as isize, s_338_255);
        };
        // C s_338_258: const #0u : u8
        let s_338_258: bool = false;
        // S s_338_259: call Bit(s_338_258)
        let s_338_259: bool = Bit(state, tracer, s_338_258);
        // C s_338_260: const #16840u : u32
        let s_338_260: u32 = 16840;
        // D s_338_261: read-reg s_338_260:struct
        let s_338_261: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_260 as isize);
            tracer.read_register(s_338_260 as isize, value);
            value
        };
        // C s_338_262: const #16840u : u32
        let s_338_262: u32 = 16840;
        // N s_338_263: write-reg s_338_262 <= s_338_261
        let s_338_263: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_262 as isize, s_338_261);
            tracer.write_register(s_338_262 as isize, s_338_261);
        };
        // C s_338_264: const #16840u : u32
        let s_338_264: u32 = 16840;
        // D s_338_265: read-reg s_338_264:struct
        let s_338_265: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_264 as isize);
            tracer.read_register(s_338_264 as isize, value);
            value
        };
        // C s_338_266: const #16840u : u32
        let s_338_266: u32 = 16840;
        // N s_338_267: write-reg s_338_266 <= s_338_265
        let s_338_267: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_266 as isize, s_338_265);
            tracer.write_register(s_338_266 as isize, s_338_265);
        };
        // C s_338_268: const #102784u : u32
        let s_338_268: u32 = 102784;
        // D s_338_269: read-reg s_338_268:struct
        let s_338_269: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_338_268 as isize);
            tracer.read_register(s_338_268 as isize, value);
            value
        };
        // C s_338_270: const #102784u : u32
        let s_338_270: u32 = 102784;
        // N s_338_271: write-reg s_338_270 <= s_338_269
        let s_338_271: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_338_270 as isize, s_338_269);
            tracer.write_register(s_338_270 as isize, s_338_269);
        };
        // D s_338_272: read-var cold:u8
        let s_338_272: bool = fn_state.cold;
        // D s_338_273: not s_338_272
        let s_338_273: bool = !s_338_272;
        // N s_338_274: branch s_338_273 b986 b339
        if s_338_273 {
            return block_986(state, tracer, fn_state);
        } else {
            return block_339(state, tracer, fn_state);
        };
    }
    fn block_339<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_339_0: const #0u : u8
        let s_339_0: bool = false;
        // D s_339_1: write-var gs#39797 <= s_339_0
        fn_state.gs_39797 = s_339_0;
        // N s_339_2: jump b340
        return block_340(state, tracer, fn_state);
    }
    fn block_340<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_340_0: read-var gs#39797:u8
        let s_340_0: bool = fn_state.gs_39797;
        // N s_340_1: branch s_340_0 b985 b341
        if s_340_0 {
            return block_985(state, tracer, fn_state);
        } else {
            return block_341(state, tracer, fn_state);
        };
    }
    fn block_341<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_341_0: const #1s : i64
        let s_341_0: i64 = 1;
        // C s_341_1: cast zx s_341_0 -> i
        let s_341_1: i128 = (i128::try_from(s_341_0).unwrap());
        // S s_341_2: call __UNKNOWN_bits(s_341_1)
        let s_341_2: Bits = u__UNKNOWN_bits(state, tracer, s_341_1);
        // C s_341_3: const #102784u : u32
        let s_341_3: u32 = 102784;
        // D s_341_4: read-reg s_341_3:struct
        let s_341_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_341_3 as isize);
            tracer.read_register(s_341_3 as isize, value);
            value
        };
        // C s_341_5: const #102784u : u32
        let s_341_5: u32 = 102784;
        // N s_341_6: write-reg s_341_5 <= s_341_4
        let s_341_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_341_5 as isize, s_341_4);
            tracer.write_register(s_341_5 as isize, s_341_4);
        };
        // N s_341_7: jump b342
        return block_342(state, tracer, fn_state);
    }
    fn block_342<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_342_0: read-var cold:u8
        let s_342_0: bool = fn_state.cold;
        // D s_342_1: not s_342_0
        let s_342_1: bool = !s_342_0;
        // N s_342_2: branch s_342_1 b984 b343
        if s_342_1 {
            return block_984(state, tracer, fn_state);
        } else {
            return block_343(state, tracer, fn_state);
        };
    }
    fn block_343<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_343_0: const #0u : u8
        let s_343_0: bool = false;
        // D s_343_1: write-var gs#39798 <= s_343_0
        fn_state.gs_39798 = s_343_0;
        // N s_343_2: jump b344
        return block_344(state, tracer, fn_state);
    }
    fn block_344<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_344_0: read-var gs#39798:u8
        let s_344_0: bool = fn_state.gs_39798;
        // N s_344_1: branch s_344_0 b983 b345
        if s_344_0 {
            return block_983(state, tracer, fn_state);
        } else {
            return block_345(state, tracer, fn_state);
        };
    }
    fn block_345<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_345_0: const #1s : i64
        let s_345_0: i64 = 1;
        // C s_345_1: cast zx s_345_0 -> i
        let s_345_1: i128 = (i128::try_from(s_345_0).unwrap());
        // S s_345_2: call __UNKNOWN_bits(s_345_1)
        let s_345_2: Bits = u__UNKNOWN_bits(state, tracer, s_345_1);
        // C s_345_3: const #102784u : u32
        let s_345_3: u32 = 102784;
        // D s_345_4: read-reg s_345_3:struct
        let s_345_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_345_3 as isize);
            tracer.read_register(s_345_3 as isize, value);
            value
        };
        // C s_345_5: const #102784u : u32
        let s_345_5: u32 = 102784;
        // N s_345_6: write-reg s_345_5 <= s_345_4
        let s_345_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_345_5 as isize, s_345_4);
            tracer.write_register(s_345_5 as isize, s_345_4);
        };
        // N s_345_7: jump b346
        return block_346(state, tracer, fn_state);
    }
    fn block_346<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_346_0: read-var cold:u8
        let s_346_0: bool = fn_state.cold;
        // D s_346_1: not s_346_0
        let s_346_1: bool = !s_346_0;
        // N s_346_2: branch s_346_1 b982 b347
        if s_346_1 {
            return block_982(state, tracer, fn_state);
        } else {
            return block_347(state, tracer, fn_state);
        };
    }
    fn block_347<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_347_0: const #0u : u8
        let s_347_0: bool = false;
        // D s_347_1: write-var gs#39799 <= s_347_0
        fn_state.gs_39799 = s_347_0;
        // N s_347_2: jump b348
        return block_348(state, tracer, fn_state);
    }
    fn block_348<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_348_0: read-var gs#39799:u8
        let s_348_0: bool = fn_state.gs_39799;
        // N s_348_1: branch s_348_0 b981 b349
        if s_348_0 {
            return block_981(state, tracer, fn_state);
        } else {
            return block_349(state, tracer, fn_state);
        };
    }
    fn block_349<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_349_0: const #1s : i64
        let s_349_0: i64 = 1;
        // C s_349_1: cast zx s_349_0 -> i
        let s_349_1: i128 = (i128::try_from(s_349_0).unwrap());
        // S s_349_2: call __UNKNOWN_bits(s_349_1)
        let s_349_2: Bits = u__UNKNOWN_bits(state, tracer, s_349_1);
        // C s_349_3: const #102784u : u32
        let s_349_3: u32 = 102784;
        // D s_349_4: read-reg s_349_3:struct
        let s_349_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_349_3 as isize);
            tracer.read_register(s_349_3 as isize, value);
            value
        };
        // C s_349_5: const #102784u : u32
        let s_349_5: u32 = 102784;
        // N s_349_6: write-reg s_349_5 <= s_349_4
        let s_349_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_349_5 as isize, s_349_4);
            tracer.write_register(s_349_5 as isize, s_349_4);
        };
        // N s_349_7: jump b350
        return block_350(state, tracer, fn_state);
    }
    fn block_350<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_350_0: const #1480u : u32
        let s_350_0: u32 = 1480;
        // D s_350_1: read-reg s_350_0:struct
        let s_350_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_0 as isize);
            tracer.read_register(s_350_0 as isize, value);
            value
        };
        // C s_350_2: const #1480u : u32
        let s_350_2: u32 = 1480;
        // N s_350_3: write-reg s_350_2 <= s_350_1
        let s_350_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_2 as isize, s_350_1);
            tracer.write_register(s_350_2 as isize, s_350_1);
        };
        // C s_350_4: const #1480u : u32
        let s_350_4: u32 = 1480;
        // D s_350_5: read-reg s_350_4:struct
        let s_350_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_4 as isize);
            tracer.read_register(s_350_4 as isize, value);
            value
        };
        // C s_350_6: const #1480u : u32
        let s_350_6: u32 = 1480;
        // N s_350_7: write-reg s_350_6 <= s_350_5
        let s_350_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_6 as isize, s_350_5);
            tracer.write_register(s_350_6 as isize, s_350_5);
        };
        // C s_350_8: const #1480u : u32
        let s_350_8: u32 = 1480;
        // D s_350_9: read-reg s_350_8:struct
        let s_350_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_8 as isize);
            tracer.read_register(s_350_8 as isize, value);
            value
        };
        // C s_350_10: const #1480u : u32
        let s_350_10: u32 = 1480;
        // N s_350_11: write-reg s_350_10 <= s_350_9
        let s_350_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_10 as isize, s_350_9);
            tracer.write_register(s_350_10 as isize, s_350_9);
        };
        // C s_350_12: const #101912u : u32
        let s_350_12: u32 = 101912;
        // D s_350_13: read-reg s_350_12:struct
        let s_350_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_12 as isize);
            tracer.read_register(s_350_12 as isize, value);
            value
        };
        // C s_350_14: const #101912u : u32
        let s_350_14: u32 = 101912;
        // N s_350_15: write-reg s_350_14 <= s_350_13
        let s_350_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_14 as isize, s_350_13);
            tracer.write_register(s_350_14 as isize, s_350_13);
        };
        // C s_350_16: const #101912u : u32
        let s_350_16: u32 = 101912;
        // D s_350_17: read-reg s_350_16:struct
        let s_350_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_16 as isize);
            tracer.read_register(s_350_16 as isize, value);
            value
        };
        // C s_350_18: const #101912u : u32
        let s_350_18: u32 = 101912;
        // N s_350_19: write-reg s_350_18 <= s_350_17
        let s_350_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_18 as isize, s_350_17);
            tracer.write_register(s_350_18 as isize, s_350_17);
        };
        // C s_350_20: const #20992u : u32
        let s_350_20: u32 = 20992;
        // D s_350_21: read-reg s_350_20:struct
        let s_350_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_20 as isize);
            tracer.read_register(s_350_20 as isize, value);
            value
        };
        // C s_350_22: const #20992u : u32
        let s_350_22: u32 = 20992;
        // N s_350_23: write-reg s_350_22 <= s_350_21
        let s_350_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_22 as isize, s_350_21);
            tracer.write_register(s_350_22 as isize, s_350_21);
        };
        // C s_350_24: const #20992u : u32
        let s_350_24: u32 = 20992;
        // D s_350_25: read-reg s_350_24:struct
        let s_350_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_24 as isize);
            tracer.read_register(s_350_24 as isize, value);
            value
        };
        // C s_350_26: const #20992u : u32
        let s_350_26: u32 = 20992;
        // N s_350_27: write-reg s_350_26 <= s_350_25
        let s_350_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_26 as isize, s_350_25);
            tracer.write_register(s_350_26 as isize, s_350_25);
        };
        // C s_350_28: const #20992u : u32
        let s_350_28: u32 = 20992;
        // D s_350_29: read-reg s_350_28:struct
        let s_350_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_28 as isize);
            tracer.read_register(s_350_28 as isize, value);
            value
        };
        // C s_350_30: const #20992u : u32
        let s_350_30: u32 = 20992;
        // N s_350_31: write-reg s_350_30 <= s_350_29
        let s_350_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_30 as isize, s_350_29);
            tracer.write_register(s_350_30 as isize, s_350_29);
        };
        // C s_350_32: const #20992u : u32
        let s_350_32: u32 = 20992;
        // D s_350_33: read-reg s_350_32:struct
        let s_350_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_32 as isize);
            tracer.read_register(s_350_32 as isize, value);
            value
        };
        // C s_350_34: const #20992u : u32
        let s_350_34: u32 = 20992;
        // N s_350_35: write-reg s_350_34 <= s_350_33
        let s_350_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_34 as isize, s_350_33);
            tracer.write_register(s_350_34 as isize, s_350_33);
        };
        // C s_350_36: const #20992u : u32
        let s_350_36: u32 = 20992;
        // D s_350_37: read-reg s_350_36:struct
        let s_350_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_36 as isize);
            tracer.read_register(s_350_36 as isize, value);
            value
        };
        // C s_350_38: const #20992u : u32
        let s_350_38: u32 = 20992;
        // N s_350_39: write-reg s_350_38 <= s_350_37
        let s_350_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_38 as isize, s_350_37);
            tracer.write_register(s_350_38 as isize, s_350_37);
        };
        // C s_350_40: const #20992u : u32
        let s_350_40: u32 = 20992;
        // D s_350_41: read-reg s_350_40:struct
        let s_350_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_40 as isize);
            tracer.read_register(s_350_40 as isize, value);
            value
        };
        // C s_350_42: const #20992u : u32
        let s_350_42: u32 = 20992;
        // N s_350_43: write-reg s_350_42 <= s_350_41
        let s_350_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_42 as isize, s_350_41);
            tracer.write_register(s_350_42 as isize, s_350_41);
        };
        // C s_350_44: const #20992u : u32
        let s_350_44: u32 = 20992;
        // D s_350_45: read-reg s_350_44:struct
        let s_350_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_44 as isize);
            tracer.read_register(s_350_44 as isize, value);
            value
        };
        // C s_350_46: const #20992u : u32
        let s_350_46: u32 = 20992;
        // N s_350_47: write-reg s_350_46 <= s_350_45
        let s_350_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_46 as isize, s_350_45);
            tracer.write_register(s_350_46 as isize, s_350_45);
        };
        // C s_350_48: const #20992u : u32
        let s_350_48: u32 = 20992;
        // D s_350_49: read-reg s_350_48:struct
        let s_350_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_48 as isize);
            tracer.read_register(s_350_48 as isize, value);
            value
        };
        // C s_350_50: const #20992u : u32
        let s_350_50: u32 = 20992;
        // N s_350_51: write-reg s_350_50 <= s_350_49
        let s_350_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_50 as isize, s_350_49);
            tracer.write_register(s_350_50 as isize, s_350_49);
        };
        // C s_350_52: const #20992u : u32
        let s_350_52: u32 = 20992;
        // D s_350_53: read-reg s_350_52:struct
        let s_350_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_52 as isize);
            tracer.read_register(s_350_52 as isize, value);
            value
        };
        // C s_350_54: const #20992u : u32
        let s_350_54: u32 = 20992;
        // N s_350_55: write-reg s_350_54 <= s_350_53
        let s_350_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_54 as isize, s_350_53);
            tracer.write_register(s_350_54 as isize, s_350_53);
        };
        // C s_350_56: const #0u : u8
        let s_350_56: bool = false;
        // S s_350_57: call Bit(s_350_56)
        let s_350_57: bool = Bit(state, tracer, s_350_56);
        // C s_350_58: const #20992u : u32
        let s_350_58: u32 = 20992;
        // D s_350_59: read-reg s_350_58:struct
        let s_350_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_58 as isize);
            tracer.read_register(s_350_58 as isize, value);
            value
        };
        // C s_350_60: const #20992u : u32
        let s_350_60: u32 = 20992;
        // N s_350_61: write-reg s_350_60 <= s_350_59
        let s_350_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_60 as isize, s_350_59);
            tracer.write_register(s_350_60 as isize, s_350_59);
        };
        // C s_350_62: const #20992u : u32
        let s_350_62: u32 = 20992;
        // D s_350_63: read-reg s_350_62:struct
        let s_350_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_62 as isize);
            tracer.read_register(s_350_62 as isize, value);
            value
        };
        // C s_350_64: const #20992u : u32
        let s_350_64: u32 = 20992;
        // N s_350_65: write-reg s_350_64 <= s_350_63
        let s_350_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_64 as isize, s_350_63);
            tracer.write_register(s_350_64 as isize, s_350_63);
        };
        // C s_350_66: const #20992u : u32
        let s_350_66: u32 = 20992;
        // D s_350_67: read-reg s_350_66:struct
        let s_350_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_66 as isize);
            tracer.read_register(s_350_66 as isize, value);
            value
        };
        // C s_350_68: const #20992u : u32
        let s_350_68: u32 = 20992;
        // N s_350_69: write-reg s_350_68 <= s_350_67
        let s_350_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_68 as isize, s_350_67);
            tracer.write_register(s_350_68 as isize, s_350_67);
        };
        // C s_350_70: const #20992u : u32
        let s_350_70: u32 = 20992;
        // D s_350_71: read-reg s_350_70:struct
        let s_350_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_70 as isize);
            tracer.read_register(s_350_70 as isize, value);
            value
        };
        // C s_350_72: const #20992u : u32
        let s_350_72: u32 = 20992;
        // N s_350_73: write-reg s_350_72 <= s_350_71
        let s_350_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_72 as isize, s_350_71);
            tracer.write_register(s_350_72 as isize, s_350_71);
        };
        // C s_350_74: const #20992u : u32
        let s_350_74: u32 = 20992;
        // D s_350_75: read-reg s_350_74:struct
        let s_350_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_74 as isize);
            tracer.read_register(s_350_74 as isize, value);
            value
        };
        // C s_350_76: const #20992u : u32
        let s_350_76: u32 = 20992;
        // N s_350_77: write-reg s_350_76 <= s_350_75
        let s_350_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_76 as isize, s_350_75);
            tracer.write_register(s_350_76 as isize, s_350_75);
        };
        // C s_350_78: const #20992u : u32
        let s_350_78: u32 = 20992;
        // D s_350_79: read-reg s_350_78:struct
        let s_350_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_78 as isize);
            tracer.read_register(s_350_78 as isize, value);
            value
        };
        // C s_350_80: const #20992u : u32
        let s_350_80: u32 = 20992;
        // N s_350_81: write-reg s_350_80 <= s_350_79
        let s_350_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_80 as isize, s_350_79);
            tracer.write_register(s_350_80 as isize, s_350_79);
        };
        // C s_350_82: const #20992u : u32
        let s_350_82: u32 = 20992;
        // D s_350_83: read-reg s_350_82:struct
        let s_350_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_82 as isize);
            tracer.read_register(s_350_82 as isize, value);
            value
        };
        // C s_350_84: const #20992u : u32
        let s_350_84: u32 = 20992;
        // N s_350_85: write-reg s_350_84 <= s_350_83
        let s_350_85: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_84 as isize, s_350_83);
            tracer.write_register(s_350_84 as isize, s_350_83);
        };
        // C s_350_86: const #20992u : u32
        let s_350_86: u32 = 20992;
        // D s_350_87: read-reg s_350_86:struct
        let s_350_87: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_86 as isize);
            tracer.read_register(s_350_86 as isize, value);
            value
        };
        // C s_350_88: const #20992u : u32
        let s_350_88: u32 = 20992;
        // N s_350_89: write-reg s_350_88 <= s_350_87
        let s_350_89: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_88 as isize, s_350_87);
            tracer.write_register(s_350_88 as isize, s_350_87);
        };
        // C s_350_90: const #20992u : u32
        let s_350_90: u32 = 20992;
        // D s_350_91: read-reg s_350_90:struct
        let s_350_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_90 as isize);
            tracer.read_register(s_350_90 as isize, value);
            value
        };
        // C s_350_92: const #20992u : u32
        let s_350_92: u32 = 20992;
        // N s_350_93: write-reg s_350_92 <= s_350_91
        let s_350_93: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_92 as isize, s_350_91);
            tracer.write_register(s_350_92 as isize, s_350_91);
        };
        // C s_350_94: const #20992u : u32
        let s_350_94: u32 = 20992;
        // D s_350_95: read-reg s_350_94:struct
        let s_350_95: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_94 as isize);
            tracer.read_register(s_350_94 as isize, value);
            value
        };
        // C s_350_96: const #20992u : u32
        let s_350_96: u32 = 20992;
        // N s_350_97: write-reg s_350_96 <= s_350_95
        let s_350_97: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_96 as isize, s_350_95);
            tracer.write_register(s_350_96 as isize, s_350_95);
        };
        // C s_350_98: const #14496u : u32
        let s_350_98: u32 = 14496;
        // D s_350_99: read-reg s_350_98:struct
        let s_350_99: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_98 as isize);
            tracer.read_register(s_350_98 as isize, value);
            value
        };
        // C s_350_100: const #14496u : u32
        let s_350_100: u32 = 14496;
        // N s_350_101: write-reg s_350_100 <= s_350_99
        let s_350_101: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_100 as isize, s_350_99);
            tracer.write_register(s_350_100 as isize, s_350_99);
        };
        // C s_350_102: const #14496u : u32
        let s_350_102: u32 = 14496;
        // D s_350_103: read-reg s_350_102:struct
        let s_350_103: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_102 as isize);
            tracer.read_register(s_350_102 as isize, value);
            value
        };
        // C s_350_104: const #14496u : u32
        let s_350_104: u32 = 14496;
        // N s_350_105: write-reg s_350_104 <= s_350_103
        let s_350_105: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_104 as isize, s_350_103);
            tracer.write_register(s_350_104 as isize, s_350_103);
        };
        // C s_350_106: const #100832u : u32
        let s_350_106: u32 = 100832;
        // D s_350_107: read-reg s_350_106:struct
        let s_350_107: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_106 as isize);
            tracer.read_register(s_350_106 as isize, value);
            value
        };
        // C s_350_108: const #100832u : u32
        let s_350_108: u32 = 100832;
        // N s_350_109: write-reg s_350_108 <= s_350_107
        let s_350_109: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_108 as isize, s_350_107);
            tracer.write_register(s_350_108 as isize, s_350_107);
        };
        // C s_350_110: const #() : ()
        let s_350_110: () = ();
        // S s_350_111: call ICC_BPR1_EL1_read(s_350_110)
        let s_350_111: ProductType5c790c8ef59cc8b2 = ICC_BPR1_EL1_read(
            state,
            tracer,
            s_350_110,
        );
        // D s_350_112: write-var ga#32752 <= s_350_111
        fn_state.ga_32752 = s_350_111;
        // D s_350_113: read-var ga#32752.0:struct
        let s_350_113: u64 = fn_state.ga_32752._0;
        // C s_350_114: const #61s : i
        let s_350_114: i128 = 61;
        // C s_350_115: const #3s : i
        let s_350_115: i128 = 3;
        // D s_350_116: cast zx s_350_113 -> bv
        let s_350_116: Bits = Bits::new(s_350_113 as u128, 64u16);
        // C s_350_117: const #0u : u61
        let s_350_117: u64 = 0;
        // C s_350_118: cast zx s_350_117 -> bv
        let s_350_118: Bits = Bits::new(s_350_117 as u128, 61u16);
        // C s_350_119: const #1u : u64
        let s_350_119: u64 = 1;
        // C s_350_120: cast zx s_350_119 -> bv
        let s_350_120: Bits = Bits::new(s_350_119 as u128, 64u16);
        // C s_350_121: lsl s_350_120 s_350_114
        let s_350_121: Bits = s_350_120 << s_350_114;
        // C s_350_122: sub s_350_121 s_350_120
        let s_350_122: Bits = ((s_350_121) - (s_350_120));
        // C s_350_123: and s_350_118 s_350_122
        let s_350_123: Bits = ((s_350_118) & (s_350_122));
        // C s_350_124: lsl s_350_123 s_350_115
        let s_350_124: Bits = s_350_123 << s_350_115;
        // C s_350_125: lsl s_350_122 s_350_115
        let s_350_125: Bits = s_350_122 << s_350_115;
        // C s_350_126: cmpl s_350_125
        let s_350_126: Bits = !s_350_125;
        // D s_350_127: and s_350_116 s_350_126
        let s_350_127: Bits = ((s_350_116) & (s_350_126));
        // D s_350_128: or s_350_127 s_350_124
        let s_350_128: Bits = ((s_350_127) | (s_350_124));
        // D s_350_129: cast reint s_350_128 -> u64
        let s_350_129: u64 = (s_350_128.value() as u64);
        // D s_350_130: call Mk_ICC_BPR1_EL1_Type(s_350_129)
        let s_350_130: ProductType5c790c8ef59cc8b2 = Mk_ICC_BPR1_EL1_Type(
            state,
            tracer,
            s_350_129,
        );
        // D s_350_131: call ICC_BPR1_EL1_write(s_350_130)
        let s_350_131: () = ICC_BPR1_EL1_write(state, tracer, s_350_130);
        // C s_350_132: const #23112u : u32
        let s_350_132: u32 = 23112;
        // D s_350_133: read-reg s_350_132:struct
        let s_350_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_132 as isize);
            tracer.read_register(s_350_132 as isize, value);
            value
        };
        // C s_350_134: const #23112u : u32
        let s_350_134: u32 = 23112;
        // N s_350_135: write-reg s_350_134 <= s_350_133
        let s_350_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_134 as isize, s_350_133);
            tracer.write_register(s_350_134 as isize, s_350_133);
        };
        // C s_350_136: const #17248u : u32
        let s_350_136: u32 = 17248;
        // D s_350_137: read-reg s_350_136:struct
        let s_350_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_136 as isize);
            tracer.read_register(s_350_136 as isize, value);
            value
        };
        // C s_350_138: const #17248u : u32
        let s_350_138: u32 = 17248;
        // N s_350_139: write-reg s_350_138 <= s_350_137
        let s_350_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_138 as isize, s_350_137);
            tracer.write_register(s_350_138 as isize, s_350_137);
        };
        // C s_350_140: const #14896u : u32
        let s_350_140: u32 = 14896;
        // D s_350_141: read-reg s_350_140:struct
        let s_350_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_140 as isize);
            tracer.read_register(s_350_140 as isize, value);
            value
        };
        // C s_350_142: const #14896u : u32
        let s_350_142: u32 = 14896;
        // N s_350_143: write-reg s_350_142 <= s_350_141
        let s_350_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_142 as isize, s_350_141);
            tracer.write_register(s_350_142 as isize, s_350_141);
        };
        // C s_350_144: const #21016u : u32
        let s_350_144: u32 = 21016;
        // D s_350_145: read-reg s_350_144:struct
        let s_350_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_350_144 as isize);
            tracer.read_register(s_350_144 as isize, value);
            value
        };
        // C s_350_146: const #21016u : u32
        let s_350_146: u32 = 21016;
        // N s_350_147: write-reg s_350_146 <= s_350_145
        let s_350_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_350_146 as isize, s_350_145);
            tracer.write_register(s_350_146 as isize, s_350_145);
        };
        // D s_350_148: read-var cold:u8
        let s_350_148: bool = fn_state.cold;
        // D s_350_149: not s_350_148
        let s_350_149: bool = !s_350_148;
        // N s_350_150: branch s_350_149 b980 b351
        if s_350_149 {
            return block_980(state, tracer, fn_state);
        } else {
            return block_351(state, tracer, fn_state);
        };
    }
    fn block_351<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_351_0: const #0u : u8
        let s_351_0: bool = false;
        // D s_351_1: write-var gs#39895 <= s_351_0
        fn_state.gs_39895 = s_351_0;
        // N s_351_2: jump b352
        return block_352(state, tracer, fn_state);
    }
    fn block_352<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_352_0: read-var gs#39895:u8
        let s_352_0: bool = fn_state.gs_39895;
        // N s_352_1: branch s_352_0 b979 b353
        if s_352_0 {
            return block_979(state, tracer, fn_state);
        } else {
            return block_353(state, tracer, fn_state);
        };
    }
    fn block_353<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_353_0: const #1s : i64
        let s_353_0: i64 = 1;
        // C s_353_1: cast zx s_353_0 -> i
        let s_353_1: i128 = (i128::try_from(s_353_0).unwrap());
        // S s_353_2: call __UNKNOWN_bits(s_353_1)
        let s_353_2: Bits = u__UNKNOWN_bits(state, tracer, s_353_1);
        // C s_353_3: const #21016u : u32
        let s_353_3: u32 = 21016;
        // D s_353_4: read-reg s_353_3:struct
        let s_353_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_353_3 as isize);
            tracer.read_register(s_353_3 as isize, value);
            value
        };
        // C s_353_5: const #21016u : u32
        let s_353_5: u32 = 21016;
        // N s_353_6: write-reg s_353_5 <= s_353_4
        let s_353_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_353_5 as isize, s_353_4);
            tracer.write_register(s_353_5 as isize, s_353_4);
        };
        // N s_353_7: jump b354
        return block_354(state, tracer, fn_state);
    }
    fn block_354<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_354_0: const #0u : u8
        let s_354_0: bool = false;
        // S s_354_1: call Bit(s_354_0)
        let s_354_1: bool = Bit(state, tracer, s_354_0);
        // C s_354_2: const #21016u : u32
        let s_354_2: u32 = 21016;
        // D s_354_3: read-reg s_354_2:struct
        let s_354_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_354_2 as isize);
            tracer.read_register(s_354_2 as isize, value);
            value
        };
        // C s_354_4: const #21016u : u32
        let s_354_4: u32 = 21016;
        // N s_354_5: write-reg s_354_4 <= s_354_3
        let s_354_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_354_4 as isize, s_354_3);
            tracer.write_register(s_354_4 as isize, s_354_3);
        };
        // C s_354_6: const #0u : u8
        let s_354_6: bool = false;
        // S s_354_7: call Bit(s_354_6)
        let s_354_7: bool = Bit(state, tracer, s_354_6);
        // C s_354_8: const #21016u : u32
        let s_354_8: u32 = 21016;
        // D s_354_9: read-reg s_354_8:struct
        let s_354_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_354_8 as isize);
            tracer.read_register(s_354_8 as isize, value);
            value
        };
        // C s_354_10: const #21016u : u32
        let s_354_10: u32 = 21016;
        // N s_354_11: write-reg s_354_10 <= s_354_9
        let s_354_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_354_10 as isize, s_354_9);
            tracer.write_register(s_354_10 as isize, s_354_9);
        };
        // C s_354_12: const #21016u : u32
        let s_354_12: u32 = 21016;
        // D s_354_13: read-reg s_354_12:struct
        let s_354_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_354_12 as isize);
            tracer.read_register(s_354_12 as isize, value);
            value
        };
        // C s_354_14: const #21016u : u32
        let s_354_14: u32 = 21016;
        // N s_354_15: write-reg s_354_14 <= s_354_13
        let s_354_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_354_14 as isize, s_354_13);
            tracer.write_register(s_354_14 as isize, s_354_13);
        };
        // C s_354_16: const #101224u : u32
        let s_354_16: u32 = 101224;
        // D s_354_17: read-reg s_354_16:struct
        let s_354_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_354_16 as isize);
            tracer.read_register(s_354_16 as isize, value);
            value
        };
        // C s_354_18: const #101224u : u32
        let s_354_18: u32 = 101224;
        // N s_354_19: write-reg s_354_18 <= s_354_17
        let s_354_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_354_18 as isize, s_354_17);
            tracer.write_register(s_354_18 as isize, s_354_17);
        };
        // D s_354_20: read-var cold:u8
        let s_354_20: bool = fn_state.cold;
        // D s_354_21: not s_354_20
        let s_354_21: bool = !s_354_20;
        // N s_354_22: branch s_354_21 b978 b355
        if s_354_21 {
            return block_978(state, tracer, fn_state);
        } else {
            return block_355(state, tracer, fn_state);
        };
    }
    fn block_355<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_355_0: const #0u : u8
        let s_355_0: bool = false;
        // D s_355_1: write-var gs#39906 <= s_355_0
        fn_state.gs_39906 = s_355_0;
        // N s_355_2: jump b356
        return block_356(state, tracer, fn_state);
    }
    fn block_356<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_356_0: read-var gs#39906:u8
        let s_356_0: bool = fn_state.gs_39906;
        // N s_356_1: branch s_356_0 b977 b357
        if s_356_0 {
            return block_977(state, tracer, fn_state);
        } else {
            return block_357(state, tracer, fn_state);
        };
    }
    fn block_357<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_357_0: const #1s : i64
        let s_357_0: i64 = 1;
        // C s_357_1: cast zx s_357_0 -> i
        let s_357_1: i128 = (i128::try_from(s_357_0).unwrap());
        // S s_357_2: call __UNKNOWN_bits(s_357_1)
        let s_357_2: Bits = u__UNKNOWN_bits(state, tracer, s_357_1);
        // C s_357_3: const #101224u : u32
        let s_357_3: u32 = 101224;
        // D s_357_4: read-reg s_357_3:struct
        let s_357_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_357_3 as isize);
            tracer.read_register(s_357_3 as isize, value);
            value
        };
        // C s_357_5: const #101224u : u32
        let s_357_5: u32 = 101224;
        // N s_357_6: write-reg s_357_5 <= s_357_4
        let s_357_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_357_5 as isize, s_357_4);
            tracer.write_register(s_357_5 as isize, s_357_4);
        };
        // N s_357_7: jump b358
        return block_358(state, tracer, fn_state);
    }
    fn block_358<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_358_0: read-var cold:u8
        let s_358_0: bool = fn_state.cold;
        // D s_358_1: not s_358_0
        let s_358_1: bool = !s_358_0;
        // N s_358_2: branch s_358_1 b976 b359
        if s_358_1 {
            return block_976(state, tracer, fn_state);
        } else {
            return block_359(state, tracer, fn_state);
        };
    }
    fn block_359<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_359_0: const #0u : u8
        let s_359_0: bool = false;
        // D s_359_1: write-var gs#39907 <= s_359_0
        fn_state.gs_39907 = s_359_0;
        // N s_359_2: jump b360
        return block_360(state, tracer, fn_state);
    }
    fn block_360<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_360_0: read-var gs#39907:u8
        let s_360_0: bool = fn_state.gs_39907;
        // N s_360_1: branch s_360_0 b975 b361
        if s_360_0 {
            return block_975(state, tracer, fn_state);
        } else {
            return block_361(state, tracer, fn_state);
        };
    }
    fn block_361<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_361_0: const #1s : i64
        let s_361_0: i64 = 1;
        // C s_361_1: cast zx s_361_0 -> i
        let s_361_1: i128 = (i128::try_from(s_361_0).unwrap());
        // S s_361_2: call __UNKNOWN_bits(s_361_1)
        let s_361_2: Bits = u__UNKNOWN_bits(state, tracer, s_361_1);
        // C s_361_3: const #101224u : u32
        let s_361_3: u32 = 101224;
        // D s_361_4: read-reg s_361_3:struct
        let s_361_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_361_3 as isize);
            tracer.read_register(s_361_3 as isize, value);
            value
        };
        // C s_361_5: const #101224u : u32
        let s_361_5: u32 = 101224;
        // N s_361_6: write-reg s_361_5 <= s_361_4
        let s_361_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_361_5 as isize, s_361_4);
            tracer.write_register(s_361_5 as isize, s_361_4);
        };
        // N s_361_7: jump b362
        return block_362(state, tracer, fn_state);
    }
    fn block_362<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_362_0: read-var cold:u8
        let s_362_0: bool = fn_state.cold;
        // D s_362_1: not s_362_0
        let s_362_1: bool = !s_362_0;
        // N s_362_2: branch s_362_1 b974 b363
        if s_362_1 {
            return block_974(state, tracer, fn_state);
        } else {
            return block_363(state, tracer, fn_state);
        };
    }
    fn block_363<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_363_0: const #0u : u8
        let s_363_0: bool = false;
        // D s_363_1: write-var gs#39908 <= s_363_0
        fn_state.gs_39908 = s_363_0;
        // N s_363_2: jump b364
        return block_364(state, tracer, fn_state);
    }
    fn block_364<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_364_0: read-var gs#39908:u8
        let s_364_0: bool = fn_state.gs_39908;
        // N s_364_1: branch s_364_0 b973 b365
        if s_364_0 {
            return block_973(state, tracer, fn_state);
        } else {
            return block_365(state, tracer, fn_state);
        };
    }
    fn block_365<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_365_0: const #1s : i64
        let s_365_0: i64 = 1;
        // C s_365_1: cast zx s_365_0 -> i
        let s_365_1: i128 = (i128::try_from(s_365_0).unwrap());
        // S s_365_2: call __UNKNOWN_bits(s_365_1)
        let s_365_2: Bits = u__UNKNOWN_bits(state, tracer, s_365_1);
        // C s_365_3: const #101224u : u32
        let s_365_3: u32 = 101224;
        // D s_365_4: read-reg s_365_3:struct
        let s_365_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_365_3 as isize);
            tracer.read_register(s_365_3 as isize, value);
            value
        };
        // C s_365_5: const #101224u : u32
        let s_365_5: u32 = 101224;
        // N s_365_6: write-reg s_365_5 <= s_365_4
        let s_365_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_365_5 as isize, s_365_4);
            tracer.write_register(s_365_5 as isize, s_365_4);
        };
        // N s_365_7: jump b366
        return block_366(state, tracer, fn_state);
    }
    fn block_366<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_366_0: read-var cold:u8
        let s_366_0: bool = fn_state.cold;
        // D s_366_1: not s_366_0
        let s_366_1: bool = !s_366_0;
        // N s_366_2: branch s_366_1 b972 b367
        if s_366_1 {
            return block_972(state, tracer, fn_state);
        } else {
            return block_367(state, tracer, fn_state);
        };
    }
    fn block_367<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_367_0: const #0u : u8
        let s_367_0: bool = false;
        // D s_367_1: write-var gs#39909 <= s_367_0
        fn_state.gs_39909 = s_367_0;
        // N s_367_2: jump b368
        return block_368(state, tracer, fn_state);
    }
    fn block_368<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_368_0: read-var gs#39909:u8
        let s_368_0: bool = fn_state.gs_39909;
        // N s_368_1: branch s_368_0 b971 b369
        if s_368_0 {
            return block_971(state, tracer, fn_state);
        } else {
            return block_369(state, tracer, fn_state);
        };
    }
    fn block_369<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_369_0: const #1s : i64
        let s_369_0: i64 = 1;
        // C s_369_1: cast zx s_369_0 -> i
        let s_369_1: i128 = (i128::try_from(s_369_0).unwrap());
        // S s_369_2: call __UNKNOWN_bits(s_369_1)
        let s_369_2: Bits = u__UNKNOWN_bits(state, tracer, s_369_1);
        // C s_369_3: const #101224u : u32
        let s_369_3: u32 = 101224;
        // D s_369_4: read-reg s_369_3:struct
        let s_369_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_369_3 as isize);
            tracer.read_register(s_369_3 as isize, value);
            value
        };
        // C s_369_5: const #101224u : u32
        let s_369_5: u32 = 101224;
        // N s_369_6: write-reg s_369_5 <= s_369_4
        let s_369_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_369_5 as isize, s_369_4);
            tracer.write_register(s_369_5 as isize, s_369_4);
        };
        // N s_369_7: jump b370
        return block_370(state, tracer, fn_state);
    }
    fn block_370<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_370_0: read-var cold:u8
        let s_370_0: bool = fn_state.cold;
        // D s_370_1: not s_370_0
        let s_370_1: bool = !s_370_0;
        // N s_370_2: branch s_370_1 b970 b371
        if s_370_1 {
            return block_970(state, tracer, fn_state);
        } else {
            return block_371(state, tracer, fn_state);
        };
    }
    fn block_371<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_371_0: const #0u : u8
        let s_371_0: bool = false;
        // D s_371_1: write-var gs#39910 <= s_371_0
        fn_state.gs_39910 = s_371_0;
        // N s_371_2: jump b372
        return block_372(state, tracer, fn_state);
    }
    fn block_372<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_372_0: read-var gs#39910:u8
        let s_372_0: bool = fn_state.gs_39910;
        // N s_372_1: branch s_372_0 b969 b373
        if s_372_0 {
            return block_969(state, tracer, fn_state);
        } else {
            return block_373(state, tracer, fn_state);
        };
    }
    fn block_373<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_373_0: const #1s : i64
        let s_373_0: i64 = 1;
        // C s_373_1: cast zx s_373_0 -> i
        let s_373_1: i128 = (i128::try_from(s_373_0).unwrap());
        // S s_373_2: call __UNKNOWN_bits(s_373_1)
        let s_373_2: Bits = u__UNKNOWN_bits(state, tracer, s_373_1);
        // C s_373_3: const #101224u : u32
        let s_373_3: u32 = 101224;
        // D s_373_4: read-reg s_373_3:struct
        let s_373_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_373_3 as isize);
            tracer.read_register(s_373_3 as isize, value);
            value
        };
        // C s_373_5: const #101224u : u32
        let s_373_5: u32 = 101224;
        // N s_373_6: write-reg s_373_5 <= s_373_4
        let s_373_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_373_5 as isize, s_373_4);
            tracer.write_register(s_373_5 as isize, s_373_4);
        };
        // N s_373_7: jump b374
        return block_374(state, tracer, fn_state);
    }
    fn block_374<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_374_0: read-var cold:u8
        let s_374_0: bool = fn_state.cold;
        // D s_374_1: not s_374_0
        let s_374_1: bool = !s_374_0;
        // N s_374_2: branch s_374_1 b968 b375
        if s_374_1 {
            return block_968(state, tracer, fn_state);
        } else {
            return block_375(state, tracer, fn_state);
        };
    }
    fn block_375<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_375_0: const #0u : u8
        let s_375_0: bool = false;
        // D s_375_1: write-var gs#39911 <= s_375_0
        fn_state.gs_39911 = s_375_0;
        // N s_375_2: jump b376
        return block_376(state, tracer, fn_state);
    }
    fn block_376<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_376_0: read-var gs#39911:u8
        let s_376_0: bool = fn_state.gs_39911;
        // N s_376_1: branch s_376_0 b967 b377
        if s_376_0 {
            return block_967(state, tracer, fn_state);
        } else {
            return block_377(state, tracer, fn_state);
        };
    }
    fn block_377<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_377_0: const #1s : i64
        let s_377_0: i64 = 1;
        // C s_377_1: cast zx s_377_0 -> i
        let s_377_1: i128 = (i128::try_from(s_377_0).unwrap());
        // S s_377_2: call __UNKNOWN_bits(s_377_1)
        let s_377_2: Bits = u__UNKNOWN_bits(state, tracer, s_377_1);
        // C s_377_3: const #101224u : u32
        let s_377_3: u32 = 101224;
        // D s_377_4: read-reg s_377_3:struct
        let s_377_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_377_3 as isize);
            tracer.read_register(s_377_3 as isize, value);
            value
        };
        // C s_377_5: const #101224u : u32
        let s_377_5: u32 = 101224;
        // N s_377_6: write-reg s_377_5 <= s_377_4
        let s_377_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_377_5 as isize, s_377_4);
            tracer.write_register(s_377_5 as isize, s_377_4);
        };
        // N s_377_7: jump b378
        return block_378(state, tracer, fn_state);
    }
    fn block_378<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_378_0: read-var cold:u8
        let s_378_0: bool = fn_state.cold;
        // D s_378_1: not s_378_0
        let s_378_1: bool = !s_378_0;
        // N s_378_2: branch s_378_1 b966 b379
        if s_378_1 {
            return block_966(state, tracer, fn_state);
        } else {
            return block_379(state, tracer, fn_state);
        };
    }
    fn block_379<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_379_0: const #0u : u8
        let s_379_0: bool = false;
        // D s_379_1: write-var gs#39912 <= s_379_0
        fn_state.gs_39912 = s_379_0;
        // N s_379_2: jump b380
        return block_380(state, tracer, fn_state);
    }
    fn block_380<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_380_0: read-var gs#39912:u8
        let s_380_0: bool = fn_state.gs_39912;
        // N s_380_1: branch s_380_0 b965 b381
        if s_380_0 {
            return block_965(state, tracer, fn_state);
        } else {
            return block_381(state, tracer, fn_state);
        };
    }
    fn block_381<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_381_0: const #1s : i64
        let s_381_0: i64 = 1;
        // C s_381_1: cast zx s_381_0 -> i
        let s_381_1: i128 = (i128::try_from(s_381_0).unwrap());
        // S s_381_2: call __UNKNOWN_bits(s_381_1)
        let s_381_2: Bits = u__UNKNOWN_bits(state, tracer, s_381_1);
        // C s_381_3: const #101224u : u32
        let s_381_3: u32 = 101224;
        // D s_381_4: read-reg s_381_3:struct
        let s_381_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_381_3 as isize);
            tracer.read_register(s_381_3 as isize, value);
            value
        };
        // C s_381_5: const #101224u : u32
        let s_381_5: u32 = 101224;
        // N s_381_6: write-reg s_381_5 <= s_381_4
        let s_381_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_381_5 as isize, s_381_4);
            tracer.write_register(s_381_5 as isize, s_381_4);
        };
        // N s_381_7: jump b382
        return block_382(state, tracer, fn_state);
    }
    fn block_382<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_382_0: read-var cold:u8
        let s_382_0: bool = fn_state.cold;
        // D s_382_1: not s_382_0
        let s_382_1: bool = !s_382_0;
        // N s_382_2: branch s_382_1 b964 b383
        if s_382_1 {
            return block_964(state, tracer, fn_state);
        } else {
            return block_383(state, tracer, fn_state);
        };
    }
    fn block_383<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_383_0: const #0u : u8
        let s_383_0: bool = false;
        // D s_383_1: write-var gs#39913 <= s_383_0
        fn_state.gs_39913 = s_383_0;
        // N s_383_2: jump b384
        return block_384(state, tracer, fn_state);
    }
    fn block_384<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_384_0: read-var gs#39913:u8
        let s_384_0: bool = fn_state.gs_39913;
        // N s_384_1: branch s_384_0 b963 b385
        if s_384_0 {
            return block_963(state, tracer, fn_state);
        } else {
            return block_385(state, tracer, fn_state);
        };
    }
    fn block_385<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_385_0: const #1s : i64
        let s_385_0: i64 = 1;
        // C s_385_1: cast zx s_385_0 -> i
        let s_385_1: i128 = (i128::try_from(s_385_0).unwrap());
        // S s_385_2: call __UNKNOWN_bits(s_385_1)
        let s_385_2: Bits = u__UNKNOWN_bits(state, tracer, s_385_1);
        // C s_385_3: const #101224u : u32
        let s_385_3: u32 = 101224;
        // D s_385_4: read-reg s_385_3:struct
        let s_385_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_385_3 as isize);
            tracer.read_register(s_385_3 as isize, value);
            value
        };
        // C s_385_5: const #101224u : u32
        let s_385_5: u32 = 101224;
        // N s_385_6: write-reg s_385_5 <= s_385_4
        let s_385_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_385_5 as isize, s_385_4);
            tracer.write_register(s_385_5 as isize, s_385_4);
        };
        // N s_385_7: jump b386
        return block_386(state, tracer, fn_state);
    }
    fn block_386<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_386_0: read-var cold:u8
        let s_386_0: bool = fn_state.cold;
        // D s_386_1: not s_386_0
        let s_386_1: bool = !s_386_0;
        // N s_386_2: branch s_386_1 b962 b387
        if s_386_1 {
            return block_962(state, tracer, fn_state);
        } else {
            return block_387(state, tracer, fn_state);
        };
    }
    fn block_387<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_387_0: const #0u : u8
        let s_387_0: bool = false;
        // D s_387_1: write-var gs#39914 <= s_387_0
        fn_state.gs_39914 = s_387_0;
        // N s_387_2: jump b388
        return block_388(state, tracer, fn_state);
    }
    fn block_388<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_388_0: read-var gs#39914:u8
        let s_388_0: bool = fn_state.gs_39914;
        // N s_388_1: branch s_388_0 b961 b389
        if s_388_0 {
            return block_961(state, tracer, fn_state);
        } else {
            return block_389(state, tracer, fn_state);
        };
    }
    fn block_389<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_389_0: const #1s : i64
        let s_389_0: i64 = 1;
        // C s_389_1: cast zx s_389_0 -> i
        let s_389_1: i128 = (i128::try_from(s_389_0).unwrap());
        // S s_389_2: call __UNKNOWN_bits(s_389_1)
        let s_389_2: Bits = u__UNKNOWN_bits(state, tracer, s_389_1);
        // C s_389_3: const #101224u : u32
        let s_389_3: u32 = 101224;
        // D s_389_4: read-reg s_389_3:struct
        let s_389_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_389_3 as isize);
            tracer.read_register(s_389_3 as isize, value);
            value
        };
        // C s_389_5: const #101224u : u32
        let s_389_5: u32 = 101224;
        // N s_389_6: write-reg s_389_5 <= s_389_4
        let s_389_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_389_5 as isize, s_389_4);
            tracer.write_register(s_389_5 as isize, s_389_4);
        };
        // N s_389_7: jump b390
        return block_390(state, tracer, fn_state);
    }
    fn block_390<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_390_0: read-var cold:u8
        let s_390_0: bool = fn_state.cold;
        // D s_390_1: not s_390_0
        let s_390_1: bool = !s_390_0;
        // N s_390_2: branch s_390_1 b960 b391
        if s_390_1 {
            return block_960(state, tracer, fn_state);
        } else {
            return block_391(state, tracer, fn_state);
        };
    }
    fn block_391<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_391_0: const #0u : u8
        let s_391_0: bool = false;
        // D s_391_1: write-var gs#39915 <= s_391_0
        fn_state.gs_39915 = s_391_0;
        // N s_391_2: jump b392
        return block_392(state, tracer, fn_state);
    }
    fn block_392<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_392_0: read-var gs#39915:u8
        let s_392_0: bool = fn_state.gs_39915;
        // N s_392_1: branch s_392_0 b959 b393
        if s_392_0 {
            return block_959(state, tracer, fn_state);
        } else {
            return block_393(state, tracer, fn_state);
        };
    }
    fn block_393<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_393_0: const #1s : i64
        let s_393_0: i64 = 1;
        // C s_393_1: cast zx s_393_0 -> i
        let s_393_1: i128 = (i128::try_from(s_393_0).unwrap());
        // S s_393_2: call __UNKNOWN_bits(s_393_1)
        let s_393_2: Bits = u__UNKNOWN_bits(state, tracer, s_393_1);
        // C s_393_3: const #101224u : u32
        let s_393_3: u32 = 101224;
        // D s_393_4: read-reg s_393_3:struct
        let s_393_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_393_3 as isize);
            tracer.read_register(s_393_3 as isize, value);
            value
        };
        // C s_393_5: const #101224u : u32
        let s_393_5: u32 = 101224;
        // N s_393_6: write-reg s_393_5 <= s_393_4
        let s_393_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_393_5 as isize, s_393_4);
            tracer.write_register(s_393_5 as isize, s_393_4);
        };
        // N s_393_7: jump b394
        return block_394(state, tracer, fn_state);
    }
    fn block_394<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_394_0: read-var cold:u8
        let s_394_0: bool = fn_state.cold;
        // D s_394_1: not s_394_0
        let s_394_1: bool = !s_394_0;
        // N s_394_2: branch s_394_1 b958 b395
        if s_394_1 {
            return block_958(state, tracer, fn_state);
        } else {
            return block_395(state, tracer, fn_state);
        };
    }
    fn block_395<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_395_0: const #0u : u8
        let s_395_0: bool = false;
        // D s_395_1: write-var gs#39916 <= s_395_0
        fn_state.gs_39916 = s_395_0;
        // N s_395_2: jump b396
        return block_396(state, tracer, fn_state);
    }
    fn block_396<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_396_0: read-var gs#39916:u8
        let s_396_0: bool = fn_state.gs_39916;
        // N s_396_1: branch s_396_0 b957 b397
        if s_396_0 {
            return block_957(state, tracer, fn_state);
        } else {
            return block_397(state, tracer, fn_state);
        };
    }
    fn block_397<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_397_0: const #1s : i64
        let s_397_0: i64 = 1;
        // C s_397_1: cast zx s_397_0 -> i
        let s_397_1: i128 = (i128::try_from(s_397_0).unwrap());
        // S s_397_2: call __UNKNOWN_bits(s_397_1)
        let s_397_2: Bits = u__UNKNOWN_bits(state, tracer, s_397_1);
        // C s_397_3: const #101224u : u32
        let s_397_3: u32 = 101224;
        // D s_397_4: read-reg s_397_3:struct
        let s_397_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_397_3 as isize);
            tracer.read_register(s_397_3 as isize, value);
            value
        };
        // C s_397_5: const #101224u : u32
        let s_397_5: u32 = 101224;
        // N s_397_6: write-reg s_397_5 <= s_397_4
        let s_397_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_397_5 as isize, s_397_4);
            tracer.write_register(s_397_5 as isize, s_397_4);
        };
        // N s_397_7: jump b398
        return block_398(state, tracer, fn_state);
    }
    fn block_398<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_398_0: read-var cold:u8
        let s_398_0: bool = fn_state.cold;
        // D s_398_1: not s_398_0
        let s_398_1: bool = !s_398_0;
        // N s_398_2: branch s_398_1 b956 b399
        if s_398_1 {
            return block_956(state, tracer, fn_state);
        } else {
            return block_399(state, tracer, fn_state);
        };
    }
    fn block_399<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_399_0: const #0u : u8
        let s_399_0: bool = false;
        // D s_399_1: write-var gs#39917 <= s_399_0
        fn_state.gs_39917 = s_399_0;
        // N s_399_2: jump b400
        return block_400(state, tracer, fn_state);
    }
    fn block_400<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_400_0: read-var gs#39917:u8
        let s_400_0: bool = fn_state.gs_39917;
        // N s_400_1: branch s_400_0 b955 b401
        if s_400_0 {
            return block_955(state, tracer, fn_state);
        } else {
            return block_401(state, tracer, fn_state);
        };
    }
    fn block_401<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_401_0: const #1s : i64
        let s_401_0: i64 = 1;
        // C s_401_1: cast zx s_401_0 -> i
        let s_401_1: i128 = (i128::try_from(s_401_0).unwrap());
        // S s_401_2: call __UNKNOWN_bits(s_401_1)
        let s_401_2: Bits = u__UNKNOWN_bits(state, tracer, s_401_1);
        // C s_401_3: const #101224u : u32
        let s_401_3: u32 = 101224;
        // D s_401_4: read-reg s_401_3:struct
        let s_401_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_401_3 as isize);
            tracer.read_register(s_401_3 as isize, value);
            value
        };
        // C s_401_5: const #101224u : u32
        let s_401_5: u32 = 101224;
        // N s_401_6: write-reg s_401_5 <= s_401_4
        let s_401_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_401_5 as isize, s_401_4);
            tracer.write_register(s_401_5 as isize, s_401_4);
        };
        // N s_401_7: jump b402
        return block_402(state, tracer, fn_state);
    }
    fn block_402<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_402_0: read-var cold:u8
        let s_402_0: bool = fn_state.cold;
        // D s_402_1: not s_402_0
        let s_402_1: bool = !s_402_0;
        // N s_402_2: branch s_402_1 b954 b403
        if s_402_1 {
            return block_954(state, tracer, fn_state);
        } else {
            return block_403(state, tracer, fn_state);
        };
    }
    fn block_403<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_403_0: const #0u : u8
        let s_403_0: bool = false;
        // D s_403_1: write-var gs#39918 <= s_403_0
        fn_state.gs_39918 = s_403_0;
        // N s_403_2: jump b404
        return block_404(state, tracer, fn_state);
    }
    fn block_404<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_404_0: read-var gs#39918:u8
        let s_404_0: bool = fn_state.gs_39918;
        // N s_404_1: branch s_404_0 b953 b405
        if s_404_0 {
            return block_953(state, tracer, fn_state);
        } else {
            return block_405(state, tracer, fn_state);
        };
    }
    fn block_405<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_405_0: const #1s : i64
        let s_405_0: i64 = 1;
        // C s_405_1: cast zx s_405_0 -> i
        let s_405_1: i128 = (i128::try_from(s_405_0).unwrap());
        // S s_405_2: call __UNKNOWN_bits(s_405_1)
        let s_405_2: Bits = u__UNKNOWN_bits(state, tracer, s_405_1);
        // C s_405_3: const #101224u : u32
        let s_405_3: u32 = 101224;
        // D s_405_4: read-reg s_405_3:struct
        let s_405_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_405_3 as isize);
            tracer.read_register(s_405_3 as isize, value);
            value
        };
        // C s_405_5: const #101224u : u32
        let s_405_5: u32 = 101224;
        // N s_405_6: write-reg s_405_5 <= s_405_4
        let s_405_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_405_5 as isize, s_405_4);
            tracer.write_register(s_405_5 as isize, s_405_4);
        };
        // N s_405_7: jump b406
        return block_406(state, tracer, fn_state);
    }
    fn block_406<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_406_0: read-var cold:u8
        let s_406_0: bool = fn_state.cold;
        // D s_406_1: not s_406_0
        let s_406_1: bool = !s_406_0;
        // N s_406_2: branch s_406_1 b952 b407
        if s_406_1 {
            return block_952(state, tracer, fn_state);
        } else {
            return block_407(state, tracer, fn_state);
        };
    }
    fn block_407<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_407_0: const #0u : u8
        let s_407_0: bool = false;
        // D s_407_1: write-var gs#39919 <= s_407_0
        fn_state.gs_39919 = s_407_0;
        // N s_407_2: jump b408
        return block_408(state, tracer, fn_state);
    }
    fn block_408<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_408_0: read-var gs#39919:u8
        let s_408_0: bool = fn_state.gs_39919;
        // N s_408_1: branch s_408_0 b951 b409
        if s_408_0 {
            return block_951(state, tracer, fn_state);
        } else {
            return block_409(state, tracer, fn_state);
        };
    }
    fn block_409<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_409_0: const #1s : i64
        let s_409_0: i64 = 1;
        // C s_409_1: cast zx s_409_0 -> i
        let s_409_1: i128 = (i128::try_from(s_409_0).unwrap());
        // S s_409_2: call __UNKNOWN_bits(s_409_1)
        let s_409_2: Bits = u__UNKNOWN_bits(state, tracer, s_409_1);
        // C s_409_3: const #101224u : u32
        let s_409_3: u32 = 101224;
        // D s_409_4: read-reg s_409_3:struct
        let s_409_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_409_3 as isize);
            tracer.read_register(s_409_3 as isize, value);
            value
        };
        // C s_409_5: const #101224u : u32
        let s_409_5: u32 = 101224;
        // N s_409_6: write-reg s_409_5 <= s_409_4
        let s_409_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_409_5 as isize, s_409_4);
            tracer.write_register(s_409_5 as isize, s_409_4);
        };
        // N s_409_7: jump b410
        return block_410(state, tracer, fn_state);
    }
    fn block_410<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_410_0: read-var cold:u8
        let s_410_0: bool = fn_state.cold;
        // D s_410_1: not s_410_0
        let s_410_1: bool = !s_410_0;
        // N s_410_2: branch s_410_1 b950 b411
        if s_410_1 {
            return block_950(state, tracer, fn_state);
        } else {
            return block_411(state, tracer, fn_state);
        };
    }
    fn block_411<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_411_0: const #0u : u8
        let s_411_0: bool = false;
        // D s_411_1: write-var gs#39920 <= s_411_0
        fn_state.gs_39920 = s_411_0;
        // N s_411_2: jump b412
        return block_412(state, tracer, fn_state);
    }
    fn block_412<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_412_0: read-var gs#39920:u8
        let s_412_0: bool = fn_state.gs_39920;
        // N s_412_1: branch s_412_0 b949 b413
        if s_412_0 {
            return block_949(state, tracer, fn_state);
        } else {
            return block_413(state, tracer, fn_state);
        };
    }
    fn block_413<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_413_0: const #1s : i64
        let s_413_0: i64 = 1;
        // C s_413_1: cast zx s_413_0 -> i
        let s_413_1: i128 = (i128::try_from(s_413_0).unwrap());
        // S s_413_2: call __UNKNOWN_bits(s_413_1)
        let s_413_2: Bits = u__UNKNOWN_bits(state, tracer, s_413_1);
        // C s_413_3: const #101224u : u32
        let s_413_3: u32 = 101224;
        // D s_413_4: read-reg s_413_3:struct
        let s_413_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_413_3 as isize);
            tracer.read_register(s_413_3 as isize, value);
            value
        };
        // C s_413_5: const #101224u : u32
        let s_413_5: u32 = 101224;
        // N s_413_6: write-reg s_413_5 <= s_413_4
        let s_413_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_413_5 as isize, s_413_4);
            tracer.write_register(s_413_5 as isize, s_413_4);
        };
        // N s_413_7: jump b414
        return block_414(state, tracer, fn_state);
    }
    fn block_414<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_414_0: read-var cold:u8
        let s_414_0: bool = fn_state.cold;
        // D s_414_1: not s_414_0
        let s_414_1: bool = !s_414_0;
        // N s_414_2: branch s_414_1 b948 b415
        if s_414_1 {
            return block_948(state, tracer, fn_state);
        } else {
            return block_415(state, tracer, fn_state);
        };
    }
    fn block_415<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_415_0: const #0u : u8
        let s_415_0: bool = false;
        // D s_415_1: write-var gs#39921 <= s_415_0
        fn_state.gs_39921 = s_415_0;
        // N s_415_2: jump b416
        return block_416(state, tracer, fn_state);
    }
    fn block_416<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_416_0: read-var gs#39921:u8
        let s_416_0: bool = fn_state.gs_39921;
        // N s_416_1: branch s_416_0 b947 b417
        if s_416_0 {
            return block_947(state, tracer, fn_state);
        } else {
            return block_417(state, tracer, fn_state);
        };
    }
    fn block_417<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_417_0: const #1s : i64
        let s_417_0: i64 = 1;
        // C s_417_1: cast zx s_417_0 -> i
        let s_417_1: i128 = (i128::try_from(s_417_0).unwrap());
        // S s_417_2: call __UNKNOWN_bits(s_417_1)
        let s_417_2: Bits = u__UNKNOWN_bits(state, tracer, s_417_1);
        // C s_417_3: const #101224u : u32
        let s_417_3: u32 = 101224;
        // D s_417_4: read-reg s_417_3:struct
        let s_417_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_417_3 as isize);
            tracer.read_register(s_417_3 as isize, value);
            value
        };
        // C s_417_5: const #101224u : u32
        let s_417_5: u32 = 101224;
        // N s_417_6: write-reg s_417_5 <= s_417_4
        let s_417_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_417_5 as isize, s_417_4);
            tracer.write_register(s_417_5 as isize, s_417_4);
        };
        // N s_417_7: jump b418
        return block_418(state, tracer, fn_state);
    }
    fn block_418<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_418_0: read-var cold:u8
        let s_418_0: bool = fn_state.cold;
        // D s_418_1: not s_418_0
        let s_418_1: bool = !s_418_0;
        // N s_418_2: branch s_418_1 b946 b419
        if s_418_1 {
            return block_946(state, tracer, fn_state);
        } else {
            return block_419(state, tracer, fn_state);
        };
    }
    fn block_419<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_419_0: const #0u : u8
        let s_419_0: bool = false;
        // D s_419_1: write-var gs#39922 <= s_419_0
        fn_state.gs_39922 = s_419_0;
        // N s_419_2: jump b420
        return block_420(state, tracer, fn_state);
    }
    fn block_420<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_420_0: read-var gs#39922:u8
        let s_420_0: bool = fn_state.gs_39922;
        // N s_420_1: branch s_420_0 b945 b421
        if s_420_0 {
            return block_945(state, tracer, fn_state);
        } else {
            return block_421(state, tracer, fn_state);
        };
    }
    fn block_421<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_421_0: const #1s : i64
        let s_421_0: i64 = 1;
        // C s_421_1: cast zx s_421_0 -> i
        let s_421_1: i128 = (i128::try_from(s_421_0).unwrap());
        // S s_421_2: call __UNKNOWN_bits(s_421_1)
        let s_421_2: Bits = u__UNKNOWN_bits(state, tracer, s_421_1);
        // C s_421_3: const #101224u : u32
        let s_421_3: u32 = 101224;
        // D s_421_4: read-reg s_421_3:struct
        let s_421_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_421_3 as isize);
            tracer.read_register(s_421_3 as isize, value);
            value
        };
        // C s_421_5: const #101224u : u32
        let s_421_5: u32 = 101224;
        // N s_421_6: write-reg s_421_5 <= s_421_4
        let s_421_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_421_5 as isize, s_421_4);
            tracer.write_register(s_421_5 as isize, s_421_4);
        };
        // N s_421_7: jump b422
        return block_422(state, tracer, fn_state);
    }
    fn block_422<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_422_0: read-var cold:u8
        let s_422_0: bool = fn_state.cold;
        // D s_422_1: not s_422_0
        let s_422_1: bool = !s_422_0;
        // N s_422_2: branch s_422_1 b944 b423
        if s_422_1 {
            return block_944(state, tracer, fn_state);
        } else {
            return block_423(state, tracer, fn_state);
        };
    }
    fn block_423<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_423_0: const #0u : u8
        let s_423_0: bool = false;
        // D s_423_1: write-var gs#39923 <= s_423_0
        fn_state.gs_39923 = s_423_0;
        // N s_423_2: jump b424
        return block_424(state, tracer, fn_state);
    }
    fn block_424<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_424_0: read-var gs#39923:u8
        let s_424_0: bool = fn_state.gs_39923;
        // N s_424_1: branch s_424_0 b943 b425
        if s_424_0 {
            return block_943(state, tracer, fn_state);
        } else {
            return block_425(state, tracer, fn_state);
        };
    }
    fn block_425<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_425_0: const #1s : i64
        let s_425_0: i64 = 1;
        // C s_425_1: cast zx s_425_0 -> i
        let s_425_1: i128 = (i128::try_from(s_425_0).unwrap());
        // S s_425_2: call __UNKNOWN_bits(s_425_1)
        let s_425_2: Bits = u__UNKNOWN_bits(state, tracer, s_425_1);
        // C s_425_3: const #101224u : u32
        let s_425_3: u32 = 101224;
        // D s_425_4: read-reg s_425_3:struct
        let s_425_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_425_3 as isize);
            tracer.read_register(s_425_3 as isize, value);
            value
        };
        // C s_425_5: const #101224u : u32
        let s_425_5: u32 = 101224;
        // N s_425_6: write-reg s_425_5 <= s_425_4
        let s_425_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_425_5 as isize, s_425_4);
            tracer.write_register(s_425_5 as isize, s_425_4);
        };
        // N s_425_7: jump b426
        return block_426(state, tracer, fn_state);
    }
    fn block_426<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_426_0: read-var cold:u8
        let s_426_0: bool = fn_state.cold;
        // D s_426_1: not s_426_0
        let s_426_1: bool = !s_426_0;
        // N s_426_2: branch s_426_1 b942 b427
        if s_426_1 {
            return block_942(state, tracer, fn_state);
        } else {
            return block_427(state, tracer, fn_state);
        };
    }
    fn block_427<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_427_0: const #0u : u8
        let s_427_0: bool = false;
        // D s_427_1: write-var gs#39924 <= s_427_0
        fn_state.gs_39924 = s_427_0;
        // N s_427_2: jump b428
        return block_428(state, tracer, fn_state);
    }
    fn block_428<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_428_0: read-var gs#39924:u8
        let s_428_0: bool = fn_state.gs_39924;
        // N s_428_1: branch s_428_0 b941 b429
        if s_428_0 {
            return block_941(state, tracer, fn_state);
        } else {
            return block_429(state, tracer, fn_state);
        };
    }
    fn block_429<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_429_0: const #1s : i64
        let s_429_0: i64 = 1;
        // C s_429_1: cast zx s_429_0 -> i
        let s_429_1: i128 = (i128::try_from(s_429_0).unwrap());
        // S s_429_2: call __UNKNOWN_bits(s_429_1)
        let s_429_2: Bits = u__UNKNOWN_bits(state, tracer, s_429_1);
        // C s_429_3: const #101224u : u32
        let s_429_3: u32 = 101224;
        // D s_429_4: read-reg s_429_3:struct
        let s_429_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_429_3 as isize);
            tracer.read_register(s_429_3 as isize, value);
            value
        };
        // C s_429_5: const #101224u : u32
        let s_429_5: u32 = 101224;
        // N s_429_6: write-reg s_429_5 <= s_429_4
        let s_429_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_429_5 as isize, s_429_4);
            tracer.write_register(s_429_5 as isize, s_429_4);
        };
        // N s_429_7: jump b430
        return block_430(state, tracer, fn_state);
    }
    fn block_430<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_430_0: read-var cold:u8
        let s_430_0: bool = fn_state.cold;
        // D s_430_1: not s_430_0
        let s_430_1: bool = !s_430_0;
        // N s_430_2: branch s_430_1 b940 b431
        if s_430_1 {
            return block_940(state, tracer, fn_state);
        } else {
            return block_431(state, tracer, fn_state);
        };
    }
    fn block_431<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_431_0: const #0u : u8
        let s_431_0: bool = false;
        // D s_431_1: write-var gs#39925 <= s_431_0
        fn_state.gs_39925 = s_431_0;
        // N s_431_2: jump b432
        return block_432(state, tracer, fn_state);
    }
    fn block_432<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_432_0: read-var gs#39925:u8
        let s_432_0: bool = fn_state.gs_39925;
        // N s_432_1: branch s_432_0 b939 b433
        if s_432_0 {
            return block_939(state, tracer, fn_state);
        } else {
            return block_433(state, tracer, fn_state);
        };
    }
    fn block_433<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_433_0: const #1s : i64
        let s_433_0: i64 = 1;
        // C s_433_1: cast zx s_433_0 -> i
        let s_433_1: i128 = (i128::try_from(s_433_0).unwrap());
        // S s_433_2: call __UNKNOWN_bits(s_433_1)
        let s_433_2: Bits = u__UNKNOWN_bits(state, tracer, s_433_1);
        // C s_433_3: const #101224u : u32
        let s_433_3: u32 = 101224;
        // D s_433_4: read-reg s_433_3:struct
        let s_433_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_433_3 as isize);
            tracer.read_register(s_433_3 as isize, value);
            value
        };
        // C s_433_5: const #101224u : u32
        let s_433_5: u32 = 101224;
        // N s_433_6: write-reg s_433_5 <= s_433_4
        let s_433_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_433_5 as isize, s_433_4);
            tracer.write_register(s_433_5 as isize, s_433_4);
        };
        // N s_433_7: jump b434
        return block_434(state, tracer, fn_state);
    }
    fn block_434<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_434_0: const #90304u : u32
        let s_434_0: u32 = 90304;
        // D s_434_1: read-reg s_434_0:struct
        let s_434_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_0 as isize);
            tracer.read_register(s_434_0 as isize, value);
            value
        };
        // C s_434_2: const #90304u : u32
        let s_434_2: u32 = 90304;
        // N s_434_3: write-reg s_434_2 <= s_434_1
        let s_434_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_2 as isize, s_434_1);
            tracer.write_register(s_434_2 as isize, s_434_1);
        };
        // C s_434_4: const #22632u : u32
        let s_434_4: u32 = 22632;
        // D s_434_5: read-reg s_434_4:struct
        let s_434_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_4 as isize);
            tracer.read_register(s_434_4 as isize, value);
            value
        };
        // C s_434_6: const #22632u : u32
        let s_434_6: u32 = 22632;
        // N s_434_7: write-reg s_434_6 <= s_434_5
        let s_434_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_6 as isize, s_434_5);
            tracer.write_register(s_434_6 as isize, s_434_5);
        };
        // C s_434_8: const #0u : u8
        let s_434_8: bool = false;
        // S s_434_9: call Bit(s_434_8)
        let s_434_9: bool = Bit(state, tracer, s_434_8);
        // C s_434_10: const #22632u : u32
        let s_434_10: u32 = 22632;
        // D s_434_11: read-reg s_434_10:struct
        let s_434_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_10 as isize);
            tracer.read_register(s_434_10 as isize, value);
            value
        };
        // C s_434_12: const #22632u : u32
        let s_434_12: u32 = 22632;
        // N s_434_13: write-reg s_434_12 <= s_434_11
        let s_434_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_12 as isize, s_434_11);
            tracer.write_register(s_434_12 as isize, s_434_11);
        };
        // C s_434_14: const #() : ()
        let s_434_14: () = ();
        // S s_434_15: call SDER32_EL3_read(s_434_14)
        let s_434_15: ProductType5c790c8ef59cc8b2 = SDER32_EL3_read(
            state,
            tracer,
            s_434_14,
        );
        // D s_434_16: write-var ga#32969 <= s_434_15
        fn_state.ga_32969 = s_434_15;
        // D s_434_17: read-var ga#32969.0:struct
        let s_434_17: u64 = fn_state.ga_32969._0;
        // C s_434_18: const #62s : i
        let s_434_18: i128 = 62;
        // C s_434_19: const #2s : i
        let s_434_19: i128 = 2;
        // D s_434_20: cast zx s_434_17 -> bv
        let s_434_20: Bits = Bits::new(s_434_17 as u128, 64u16);
        // C s_434_21: const #0u : u62
        let s_434_21: u64 = 0;
        // C s_434_22: cast zx s_434_21 -> bv
        let s_434_22: Bits = Bits::new(s_434_21 as u128, 62u16);
        // C s_434_23: const #1u : u64
        let s_434_23: u64 = 1;
        // C s_434_24: cast zx s_434_23 -> bv
        let s_434_24: Bits = Bits::new(s_434_23 as u128, 64u16);
        // C s_434_25: lsl s_434_24 s_434_18
        let s_434_25: Bits = s_434_24 << s_434_18;
        // C s_434_26: sub s_434_25 s_434_24
        let s_434_26: Bits = ((s_434_25) - (s_434_24));
        // C s_434_27: and s_434_22 s_434_26
        let s_434_27: Bits = ((s_434_22) & (s_434_26));
        // C s_434_28: lsl s_434_27 s_434_19
        let s_434_28: Bits = s_434_27 << s_434_19;
        // C s_434_29: lsl s_434_26 s_434_19
        let s_434_29: Bits = s_434_26 << s_434_19;
        // C s_434_30: cmpl s_434_29
        let s_434_30: Bits = !s_434_29;
        // D s_434_31: and s_434_20 s_434_30
        let s_434_31: Bits = ((s_434_20) & (s_434_30));
        // D s_434_32: or s_434_31 s_434_28
        let s_434_32: Bits = ((s_434_31) | (s_434_28));
        // D s_434_33: cast reint s_434_32 -> u64
        let s_434_33: u64 = (s_434_32.value() as u64);
        // D s_434_34: call Mk_SDER32_EL3_Type(s_434_33)
        let s_434_34: ProductType5c790c8ef59cc8b2 = Mk_SDER32_EL3_Type(
            state,
            tracer,
            s_434_33,
        );
        // D s_434_35: call SDER32_EL3_write(s_434_34)
        let s_434_35: () = SDER32_EL3_write(state, tracer, s_434_34);
        // C s_434_36: const #11888u : u32
        let s_434_36: u32 = 11888;
        // D s_434_37: read-reg s_434_36:struct
        let s_434_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_36 as isize);
            tracer.read_register(s_434_36 as isize, value);
            value
        };
        // C s_434_38: const #11888u : u32
        let s_434_38: u32 = 11888;
        // N s_434_39: write-reg s_434_38 <= s_434_37
        let s_434_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_38 as isize, s_434_37);
            tracer.write_register(s_434_38 as isize, s_434_37);
        };
        // C s_434_40: const #11888u : u32
        let s_434_40: u32 = 11888;
        // D s_434_41: read-reg s_434_40:struct
        let s_434_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_40 as isize);
            tracer.read_register(s_434_40 as isize, value);
            value
        };
        // C s_434_42: const #11888u : u32
        let s_434_42: u32 = 11888;
        // N s_434_43: write-reg s_434_42 <= s_434_41
        let s_434_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_42 as isize, s_434_41);
            tracer.write_register(s_434_42 as isize, s_434_41);
        };
        // C s_434_44: const #20672u : u32
        let s_434_44: u32 = 20672;
        // D s_434_45: read-reg s_434_44:struct
        let s_434_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_44 as isize);
            tracer.read_register(s_434_44 as isize, value);
            value
        };
        // C s_434_46: const #20672u : u32
        let s_434_46: u32 = 20672;
        // N s_434_47: write-reg s_434_46 <= s_434_45
        let s_434_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_46 as isize, s_434_45);
            tracer.write_register(s_434_46 as isize, s_434_45);
        };
        // C s_434_48: const #1u : u8
        let s_434_48: bool = true;
        // S s_434_49: call Bit(s_434_48)
        let s_434_49: bool = Bit(state, tracer, s_434_48);
        // C s_434_50: const #20672u : u32
        let s_434_50: u32 = 20672;
        // D s_434_51: read-reg s_434_50:struct
        let s_434_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_50 as isize);
            tracer.read_register(s_434_50 as isize, value);
            value
        };
        // C s_434_52: const #20672u : u32
        let s_434_52: u32 = 20672;
        // N s_434_53: write-reg s_434_52 <= s_434_51
        let s_434_53: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_52 as isize, s_434_51);
            tracer.write_register(s_434_52 as isize, s_434_51);
        };
        // C s_434_54: const #20672u : u32
        let s_434_54: u32 = 20672;
        // D s_434_55: read-reg s_434_54:struct
        let s_434_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_54 as isize);
            tracer.read_register(s_434_54 as isize, value);
            value
        };
        // C s_434_56: const #20672u : u32
        let s_434_56: u32 = 20672;
        // N s_434_57: write-reg s_434_56 <= s_434_55
        let s_434_57: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_56 as isize, s_434_55);
            tracer.write_register(s_434_56 as isize, s_434_55);
        };
        // C s_434_58: const #22112u : u32
        let s_434_58: u32 = 22112;
        // D s_434_59: read-reg s_434_58:struct
        let s_434_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_58 as isize);
            tracer.read_register(s_434_58 as isize, value);
            value
        };
        // C s_434_60: const #22112u : u32
        let s_434_60: u32 = 22112;
        // N s_434_61: write-reg s_434_60 <= s_434_59
        let s_434_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_60 as isize, s_434_59);
            tracer.write_register(s_434_60 as isize, s_434_59);
        };
        // C s_434_62: const #17352u : u32
        let s_434_62: u32 = 17352;
        // D s_434_63: read-reg s_434_62:struct
        let s_434_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_62 as isize);
            tracer.read_register(s_434_62 as isize, value);
            value
        };
        // C s_434_64: const #17352u : u32
        let s_434_64: u32 = 17352;
        // N s_434_65: write-reg s_434_64 <= s_434_63
        let s_434_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_64 as isize, s_434_63);
            tracer.write_register(s_434_64 as isize, s_434_63);
        };
        // C s_434_66: const #17352u : u32
        let s_434_66: u32 = 17352;
        // D s_434_67: read-reg s_434_66:struct
        let s_434_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_66 as isize);
            tracer.read_register(s_434_66 as isize, value);
            value
        };
        // C s_434_68: const #17352u : u32
        let s_434_68: u32 = 17352;
        // N s_434_69: write-reg s_434_68 <= s_434_67
        let s_434_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_68 as isize, s_434_67);
            tracer.write_register(s_434_68 as isize, s_434_67);
        };
        // C s_434_70: const #90944u : u32
        let s_434_70: u32 = 90944;
        // D s_434_71: read-reg s_434_70:struct
        let s_434_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_70 as isize);
            tracer.read_register(s_434_70 as isize, value);
            value
        };
        // C s_434_72: const #90944u : u32
        let s_434_72: u32 = 90944;
        // N s_434_73: write-reg s_434_72 <= s_434_71
        let s_434_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_72 as isize, s_434_71);
            tracer.write_register(s_434_72 as isize, s_434_71);
        };
        // C s_434_74: const #90944u : u32
        let s_434_74: u32 = 90944;
        // D s_434_75: read-reg s_434_74:struct
        let s_434_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_74 as isize);
            tracer.read_register(s_434_74 as isize, value);
            value
        };
        // C s_434_76: const #90944u : u32
        let s_434_76: u32 = 90944;
        // N s_434_77: write-reg s_434_76 <= s_434_75
        let s_434_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_76 as isize, s_434_75);
            tracer.write_register(s_434_76 as isize, s_434_75);
        };
        // C s_434_78: const #18416u : u32
        let s_434_78: u32 = 18416;
        // D s_434_79: read-reg s_434_78:struct
        let s_434_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_78 as isize);
            tracer.read_register(s_434_78 as isize, value);
            value
        };
        // C s_434_80: const #18416u : u32
        let s_434_80: u32 = 18416;
        // N s_434_81: write-reg s_434_80 <= s_434_79
        let s_434_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_80 as isize, s_434_79);
            tracer.write_register(s_434_80 as isize, s_434_79);
        };
        // C s_434_82: const #18416u : u32
        let s_434_82: u32 = 18416;
        // D s_434_83: read-reg s_434_82:struct
        let s_434_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_82 as isize);
            tracer.read_register(s_434_82 as isize, value);
            value
        };
        // C s_434_84: const #18416u : u32
        let s_434_84: u32 = 18416;
        // N s_434_85: write-reg s_434_84 <= s_434_83
        let s_434_85: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_84 as isize, s_434_83);
            tracer.write_register(s_434_84 as isize, s_434_83);
        };
        // C s_434_86: const #13552u : u32
        let s_434_86: u32 = 13552;
        // D s_434_87: read-reg s_434_86:struct
        let s_434_87: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_86 as isize);
            tracer.read_register(s_434_86 as isize, value);
            value
        };
        // C s_434_88: const #13552u : u32
        let s_434_88: u32 = 13552;
        // N s_434_89: write-reg s_434_88 <= s_434_87
        let s_434_89: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_88 as isize, s_434_87);
            tracer.write_register(s_434_88 as isize, s_434_87);
        };
        // C s_434_90: const #104720u : u32
        let s_434_90: u32 = 104720;
        // D s_434_91: read-reg s_434_90:struct
        let s_434_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_90 as isize);
            tracer.read_register(s_434_90 as isize, value);
            value
        };
        // C s_434_92: const #104720u : u32
        let s_434_92: u32 = 104720;
        // N s_434_93: write-reg s_434_92 <= s_434_91
        let s_434_93: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_92 as isize, s_434_91);
            tracer.write_register(s_434_92 as isize, s_434_91);
        };
        // C s_434_94: const #104720u : u32
        let s_434_94: u32 = 104720;
        // D s_434_95: read-reg s_434_94:struct
        let s_434_95: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_94 as isize);
            tracer.read_register(s_434_94 as isize, value);
            value
        };
        // C s_434_96: const #104720u : u32
        let s_434_96: u32 = 104720;
        // N s_434_97: write-reg s_434_96 <= s_434_95
        let s_434_97: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_96 as isize, s_434_95);
            tracer.write_register(s_434_96 as isize, s_434_95);
        };
        // C s_434_98: const #0s : i
        let s_434_98: i128 = 0;
        // C s_434_99: const #23104u : u32
        let s_434_99: u32 = 23104;
        // D s_434_100: read-reg s_434_99:u64
        let s_434_100: u64 = {
            let value = state.read_register::<u64>(s_434_99 as isize);
            tracer.read_register(s_434_99 as isize, value);
            value
        };
        // D s_434_101: cast zx s_434_100 -> bv
        let s_434_101: Bits = Bits::new(s_434_100 as u128, 64u16);
        // C s_434_102: const #0u : u11
        let s_434_102: u16 = 0;
        // C s_434_103: cast zx s_434_102 -> bv
        let s_434_103: Bits = Bits::new(s_434_102 as u128, 11u16);
        // C s_434_104: const #10s : i
        let s_434_104: i128 = 10;
        // C s_434_105: const #1u : u64
        let s_434_105: u64 = 1;
        // C s_434_106: cast zx s_434_105 -> bv
        let s_434_106: Bits = Bits::new(s_434_105 as u128, 64u16);
        // C s_434_107: lsl s_434_106 s_434_104
        let s_434_107: Bits = s_434_106 << s_434_104;
        // C s_434_108: sub s_434_107 s_434_106
        let s_434_108: Bits = ((s_434_107) - (s_434_106));
        // C s_434_109: and s_434_103 s_434_108
        let s_434_109: Bits = ((s_434_103) & (s_434_108));
        // C s_434_110: lsl s_434_109 s_434_98
        let s_434_110: Bits = s_434_109 << s_434_98;
        // C s_434_111: lsl s_434_108 s_434_98
        let s_434_111: Bits = s_434_108 << s_434_98;
        // C s_434_112: cmpl s_434_111
        let s_434_112: Bits = !s_434_111;
        // D s_434_113: and s_434_101 s_434_112
        let s_434_113: Bits = ((s_434_101) & (s_434_112));
        // D s_434_114: or s_434_113 s_434_110
        let s_434_114: Bits = ((s_434_113) | (s_434_110));
        // D s_434_115: cast reint s_434_114 -> u64
        let s_434_115: u64 = (s_434_114.value() as u64);
        // C s_434_116: const #23104u : u32
        let s_434_116: u32 = 23104;
        // N s_434_117: write-reg s_434_116 <= s_434_115
        let s_434_117: () = {
            state.write_register::<u64>(s_434_116 as isize, s_434_115);
            tracer.write_register(s_434_116 as isize, s_434_115);
        };
        // C s_434_118: const #16s : i
        let s_434_118: i128 = 16;
        // C s_434_119: const #21080u : u32
        let s_434_119: u32 = 21080;
        // D s_434_120: read-reg s_434_119:u64
        let s_434_120: u64 = {
            let value = state.read_register::<u64>(s_434_119 as isize);
            tracer.read_register(s_434_119 as isize, value);
            value
        };
        // D s_434_121: cast zx s_434_120 -> bv
        let s_434_121: Bits = Bits::new(s_434_120 as u128, 64u16);
        // C s_434_122: const #0u : u48
        let s_434_122: u64 = 0;
        // C s_434_123: cast zx s_434_122 -> bv
        let s_434_123: Bits = Bits::new(s_434_122 as u128, 48u16);
        // C s_434_124: const #47s : i
        let s_434_124: i128 = 47;
        // C s_434_125: const #1u : u64
        let s_434_125: u64 = 1;
        // C s_434_126: cast zx s_434_125 -> bv
        let s_434_126: Bits = Bits::new(s_434_125 as u128, 64u16);
        // C s_434_127: lsl s_434_126 s_434_124
        let s_434_127: Bits = s_434_126 << s_434_124;
        // C s_434_128: sub s_434_127 s_434_126
        let s_434_128: Bits = ((s_434_127) - (s_434_126));
        // C s_434_129: and s_434_123 s_434_128
        let s_434_129: Bits = ((s_434_123) & (s_434_128));
        // C s_434_130: lsl s_434_129 s_434_118
        let s_434_130: Bits = s_434_129 << s_434_118;
        // C s_434_131: lsl s_434_128 s_434_118
        let s_434_131: Bits = s_434_128 << s_434_118;
        // C s_434_132: cmpl s_434_131
        let s_434_132: Bits = !s_434_131;
        // D s_434_133: and s_434_121 s_434_132
        let s_434_133: Bits = ((s_434_121) & (s_434_132));
        // D s_434_134: or s_434_133 s_434_130
        let s_434_134: Bits = ((s_434_133) | (s_434_130));
        // D s_434_135: cast reint s_434_134 -> u64
        let s_434_135: u64 = (s_434_134.value() as u64);
        // C s_434_136: const #21080u : u32
        let s_434_136: u32 = 21080;
        // N s_434_137: write-reg s_434_136 <= s_434_135
        let s_434_137: () = {
            state.write_register::<u64>(s_434_136 as isize, s_434_135);
            tracer.write_register(s_434_136 as isize, s_434_135);
        };
        // C s_434_138: const #0s : i
        let s_434_138: i128 = 0;
        // C s_434_139: const #21080u : u32
        let s_434_139: u32 = 21080;
        // D s_434_140: read-reg s_434_139:u64
        let s_434_140: u64 = {
            let value = state.read_register::<u64>(s_434_139 as isize);
            tracer.read_register(s_434_139 as isize, value);
            value
        };
        // D s_434_141: cast zx s_434_140 -> bv
        let s_434_141: Bits = Bits::new(s_434_140 as u128, 64u16);
        // C s_434_142: const #0u : u64
        let s_434_142: u64 = 0;
        // C s_434_143: cast zx s_434_142 -> bv
        let s_434_143: Bits = Bits::new(s_434_142 as u128, 64u16);
        // C s_434_144: const #63s : i
        let s_434_144: i128 = 63;
        // C s_434_145: const #1u : u64
        let s_434_145: u64 = 1;
        // C s_434_146: cast zx s_434_145 -> bv
        let s_434_146: Bits = Bits::new(s_434_145 as u128, 64u16);
        // C s_434_147: lsl s_434_146 s_434_144
        let s_434_147: Bits = s_434_146 << s_434_144;
        // C s_434_148: sub s_434_147 s_434_146
        let s_434_148: Bits = ((s_434_147) - (s_434_146));
        // C s_434_149: and s_434_143 s_434_148
        let s_434_149: Bits = ((s_434_143) & (s_434_148));
        // C s_434_150: lsl s_434_149 s_434_138
        let s_434_150: Bits = s_434_149 << s_434_138;
        // C s_434_151: lsl s_434_148 s_434_138
        let s_434_151: Bits = s_434_148 << s_434_138;
        // C s_434_152: cmpl s_434_151
        let s_434_152: Bits = !s_434_151;
        // D s_434_153: and s_434_141 s_434_152
        let s_434_153: Bits = ((s_434_141) & (s_434_152));
        // D s_434_154: or s_434_153 s_434_150
        let s_434_154: Bits = ((s_434_153) | (s_434_150));
        // D s_434_155: cast reint s_434_154 -> u64
        let s_434_155: u64 = (s_434_154.value() as u64);
        // C s_434_156: const #21080u : u32
        let s_434_156: u32 = 21080;
        // N s_434_157: write-reg s_434_156 <= s_434_155
        let s_434_157: () = {
            state.write_register::<u64>(s_434_156 as isize, s_434_155);
            tracer.write_register(s_434_156 as isize, s_434_155);
        };
        // C s_434_158: const #104880u : u32
        let s_434_158: u32 = 104880;
        // D s_434_159: read-reg s_434_158:struct
        let s_434_159: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_434_158 as isize);
            tracer.read_register(s_434_158 as isize, value);
            value
        };
        // C s_434_160: const #104880u : u32
        let s_434_160: u32 = 104880;
        // N s_434_161: write-reg s_434_160 <= s_434_159
        let s_434_161: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_434_160 as isize, s_434_159);
            tracer.write_register(s_434_160 as isize, s_434_159);
        };
        // D s_434_162: read-var cold:u8
        let s_434_162: bool = fn_state.cold;
        // D s_434_163: not s_434_162
        let s_434_163: bool = !s_434_162;
        // N s_434_164: branch s_434_163 b938 b435
        if s_434_163 {
            return block_938(state, tracer, fn_state);
        } else {
            return block_435(state, tracer, fn_state);
        };
    }
    fn block_435<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_435_0: const #0u : u8
        let s_435_0: bool = false;
        // D s_435_1: write-var gs#39990 <= s_435_0
        fn_state.gs_39990 = s_435_0;
        // N s_435_2: jump b436
        return block_436(state, tracer, fn_state);
    }
    fn block_436<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_436_0: read-var gs#39990:u8
        let s_436_0: bool = fn_state.gs_39990;
        // N s_436_1: branch s_436_0 b937 b437
        if s_436_0 {
            return block_937(state, tracer, fn_state);
        } else {
            return block_437(state, tracer, fn_state);
        };
    }
    fn block_437<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_437_0: const #1s : i64
        let s_437_0: i64 = 1;
        // C s_437_1: cast zx s_437_0 -> i
        let s_437_1: i128 = (i128::try_from(s_437_0).unwrap());
        // S s_437_2: call __UNKNOWN_bits(s_437_1)
        let s_437_2: Bits = u__UNKNOWN_bits(state, tracer, s_437_1);
        // C s_437_3: const #104880u : u32
        let s_437_3: u32 = 104880;
        // D s_437_4: read-reg s_437_3:struct
        let s_437_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_437_3 as isize);
            tracer.read_register(s_437_3 as isize, value);
            value
        };
        // C s_437_5: const #104880u : u32
        let s_437_5: u32 = 104880;
        // N s_437_6: write-reg s_437_5 <= s_437_4
        let s_437_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_437_5 as isize, s_437_4);
            tracer.write_register(s_437_5 as isize, s_437_4);
        };
        // N s_437_7: jump b438
        return block_438(state, tracer, fn_state);
    }
    fn block_438<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_438_0: const #0u : u8
        let s_438_0: bool = false;
        // S s_438_1: call Bit(s_438_0)
        let s_438_1: bool = Bit(state, tracer, s_438_0);
        // C s_438_2: const #104880u : u32
        let s_438_2: u32 = 104880;
        // D s_438_3: read-reg s_438_2:struct
        let s_438_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_438_2 as isize);
            tracer.read_register(s_438_2 as isize, value);
            value
        };
        // C s_438_4: const #104880u : u32
        let s_438_4: u32 = 104880;
        // N s_438_5: write-reg s_438_4 <= s_438_3
        let s_438_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_438_4 as isize, s_438_3);
            tracer.write_register(s_438_4 as isize, s_438_3);
        };
        // C s_438_6: const #104880u : u32
        let s_438_6: u32 = 104880;
        // D s_438_7: read-reg s_438_6:struct
        let s_438_7: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_438_6 as isize);
            tracer.read_register(s_438_6 as isize, value);
            value
        };
        // C s_438_8: const #104880u : u32
        let s_438_8: u32 = 104880;
        // N s_438_9: write-reg s_438_8 <= s_438_7
        let s_438_9: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_438_8 as isize, s_438_7);
            tracer.write_register(s_438_8 as isize, s_438_7);
        };
        // C s_438_10: const #104880u : u32
        let s_438_10: u32 = 104880;
        // D s_438_11: read-reg s_438_10:struct
        let s_438_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_438_10 as isize);
            tracer.read_register(s_438_10 as isize, value);
            value
        };
        // C s_438_12: const #104880u : u32
        let s_438_12: u32 = 104880;
        // N s_438_13: write-reg s_438_12 <= s_438_11
        let s_438_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_438_12 as isize, s_438_11);
            tracer.write_register(s_438_12 as isize, s_438_11);
        };
        // D s_438_14: read-var cold:u8
        let s_438_14: bool = fn_state.cold;
        // D s_438_15: not s_438_14
        let s_438_15: bool = !s_438_14;
        // N s_438_16: branch s_438_15 b936 b439
        if s_438_15 {
            return block_936(state, tracer, fn_state);
        } else {
            return block_439(state, tracer, fn_state);
        };
    }
    fn block_439<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_439_0: const #0u : u8
        let s_439_0: bool = false;
        // D s_439_1: write-var gs#39999 <= s_439_0
        fn_state.gs_39999 = s_439_0;
        // N s_439_2: jump b440
        return block_440(state, tracer, fn_state);
    }
    fn block_440<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_440_0: read-var gs#39999:u8
        let s_440_0: bool = fn_state.gs_39999;
        // N s_440_1: branch s_440_0 b935 b441
        if s_440_0 {
            return block_935(state, tracer, fn_state);
        } else {
            return block_441(state, tracer, fn_state);
        };
    }
    fn block_441<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_441_0: const #2s : i64
        let s_441_0: i64 = 2;
        // C s_441_1: cast zx s_441_0 -> i
        let s_441_1: i128 = (i128::try_from(s_441_0).unwrap());
        // S s_441_2: call __UNKNOWN_bits(s_441_1)
        let s_441_2: Bits = u__UNKNOWN_bits(state, tracer, s_441_1);
        // C s_441_3: const #104880u : u32
        let s_441_3: u32 = 104880;
        // D s_441_4: read-reg s_441_3:struct
        let s_441_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_441_3 as isize);
            tracer.read_register(s_441_3 as isize, value);
            value
        };
        // C s_441_5: const #104880u : u32
        let s_441_5: u32 = 104880;
        // N s_441_6: write-reg s_441_5 <= s_441_4
        let s_441_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_441_5 as isize, s_441_4);
            tracer.write_register(s_441_5 as isize, s_441_4);
        };
        // N s_441_7: jump b442
        return block_442(state, tracer, fn_state);
    }
    fn block_442<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_442_0: read-var cold:u8
        let s_442_0: bool = fn_state.cold;
        // N s_442_1: branch s_442_0 b934 b443
        if s_442_0 {
            return block_934(state, tracer, fn_state);
        } else {
            return block_443(state, tracer, fn_state);
        };
    }
    fn block_443<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_443_0: jump b444
        return block_444(state, tracer, fn_state);
    }
    fn block_444<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_444_0: const #104880u : u32
        let s_444_0: u32 = 104880;
        // D s_444_1: read-reg s_444_0:struct
        let s_444_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_0 as isize);
            tracer.read_register(s_444_0 as isize, value);
            value
        };
        // C s_444_2: const #104880u : u32
        let s_444_2: u32 = 104880;
        // N s_444_3: write-reg s_444_2 <= s_444_1
        let s_444_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_2 as isize, s_444_1);
            tracer.write_register(s_444_2 as isize, s_444_1);
        };
        // C s_444_4: const #104880u : u32
        let s_444_4: u32 = 104880;
        // D s_444_5: read-reg s_444_4:struct
        let s_444_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_4 as isize);
            tracer.read_register(s_444_4 as isize, value);
            value
        };
        // C s_444_6: const #104880u : u32
        let s_444_6: u32 = 104880;
        // N s_444_7: write-reg s_444_6 <= s_444_5
        let s_444_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_6 as isize, s_444_5);
            tracer.write_register(s_444_6 as isize, s_444_5);
        };
        // C s_444_8: const #104880u : u32
        let s_444_8: u32 = 104880;
        // D s_444_9: read-reg s_444_8:struct
        let s_444_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_8 as isize);
            tracer.read_register(s_444_8 as isize, value);
            value
        };
        // C s_444_10: const #104880u : u32
        let s_444_10: u32 = 104880;
        // N s_444_11: write-reg s_444_10 <= s_444_9
        let s_444_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_10 as isize, s_444_9);
            tracer.write_register(s_444_10 as isize, s_444_9);
        };
        // C s_444_12: const #0u : u8
        let s_444_12: bool = false;
        // S s_444_13: call Bit(s_444_12)
        let s_444_13: bool = Bit(state, tracer, s_444_12);
        // C s_444_14: const #104880u : u32
        let s_444_14: u32 = 104880;
        // D s_444_15: read-reg s_444_14:struct
        let s_444_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_14 as isize);
            tracer.read_register(s_444_14 as isize, value);
            value
        };
        // C s_444_16: const #104880u : u32
        let s_444_16: u32 = 104880;
        // N s_444_17: write-reg s_444_16 <= s_444_15
        let s_444_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_16 as isize, s_444_15);
            tracer.write_register(s_444_16 as isize, s_444_15);
        };
        // C s_444_18: const #104880u : u32
        let s_444_18: u32 = 104880;
        // D s_444_19: read-reg s_444_18:struct
        let s_444_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_18 as isize);
            tracer.read_register(s_444_18 as isize, value);
            value
        };
        // C s_444_20: const #104880u : u32
        let s_444_20: u32 = 104880;
        // N s_444_21: write-reg s_444_20 <= s_444_19
        let s_444_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_20 as isize, s_444_19);
            tracer.write_register(s_444_20 as isize, s_444_19);
        };
        // C s_444_22: const #0u : u8
        let s_444_22: bool = false;
        // S s_444_23: call Bit(s_444_22)
        let s_444_23: bool = Bit(state, tracer, s_444_22);
        // C s_444_24: const #104880u : u32
        let s_444_24: u32 = 104880;
        // D s_444_25: read-reg s_444_24:struct
        let s_444_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_24 as isize);
            tracer.read_register(s_444_24 as isize, value);
            value
        };
        // C s_444_26: const #104880u : u32
        let s_444_26: u32 = 104880;
        // N s_444_27: write-reg s_444_26 <= s_444_25
        let s_444_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_26 as isize, s_444_25);
            tracer.write_register(s_444_26 as isize, s_444_25);
        };
        // C s_444_28: const #22056u : u32
        let s_444_28: u32 = 22056;
        // D s_444_29: read-reg s_444_28:struct
        let s_444_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_28 as isize);
            tracer.read_register(s_444_28 as isize, value);
            value
        };
        // C s_444_30: const #22056u : u32
        let s_444_30: u32 = 22056;
        // N s_444_31: write-reg s_444_30 <= s_444_29
        let s_444_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_30 as isize, s_444_29);
            tracer.write_register(s_444_30 as isize, s_444_29);
        };
        // C s_444_32: const #22056u : u32
        let s_444_32: u32 = 22056;
        // D s_444_33: read-reg s_444_32:struct
        let s_444_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_32 as isize);
            tracer.read_register(s_444_32 as isize, value);
            value
        };
        // C s_444_34: const #22056u : u32
        let s_444_34: u32 = 22056;
        // N s_444_35: write-reg s_444_34 <= s_444_33
        let s_444_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_34 as isize, s_444_33);
            tracer.write_register(s_444_34 as isize, s_444_33);
        };
        // C s_444_36: const #101088u : u32
        let s_444_36: u32 = 101088;
        // D s_444_37: read-reg s_444_36:struct
        let s_444_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_36 as isize);
            tracer.read_register(s_444_36 as isize, value);
            value
        };
        // C s_444_38: const #101088u : u32
        let s_444_38: u32 = 101088;
        // N s_444_39: write-reg s_444_38 <= s_444_37
        let s_444_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_38 as isize, s_444_37);
            tracer.write_register(s_444_38 as isize, s_444_37);
        };
        // C s_444_40: const #12048u : u32
        let s_444_40: u32 = 12048;
        // D s_444_41: read-reg s_444_40:struct
        let s_444_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_40 as isize);
            tracer.read_register(s_444_40 as isize, value);
            value
        };
        // C s_444_42: const #12048u : u32
        let s_444_42: u32 = 12048;
        // N s_444_43: write-reg s_444_42 <= s_444_41
        let s_444_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_42 as isize, s_444_41);
            tracer.write_register(s_444_42 as isize, s_444_41);
        };
        // C s_444_44: const #20304u : u32
        let s_444_44: u32 = 20304;
        // D s_444_45: read-reg s_444_44:struct
        let s_444_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_44 as isize);
            tracer.read_register(s_444_44 as isize, value);
            value
        };
        // C s_444_46: const #20304u : u32
        let s_444_46: u32 = 20304;
        // N s_444_47: write-reg s_444_46 <= s_444_45
        let s_444_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_46 as isize, s_444_45);
            tracer.write_register(s_444_46 as isize, s_444_45);
        };
        // C s_444_48: const #0u : u8
        let s_444_48: bool = false;
        // S s_444_49: call Bit(s_444_48)
        let s_444_49: bool = Bit(state, tracer, s_444_48);
        // C s_444_50: const #20304u : u32
        let s_444_50: u32 = 20304;
        // D s_444_51: read-reg s_444_50:struct
        let s_444_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_50 as isize);
            tracer.read_register(s_444_50 as isize, value);
            value
        };
        // C s_444_52: const #20304u : u32
        let s_444_52: u32 = 20304;
        // N s_444_53: write-reg s_444_52 <= s_444_51
        let s_444_53: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_52 as isize, s_444_51);
            tracer.write_register(s_444_52 as isize, s_444_51);
        };
        // C s_444_54: const #20304u : u32
        let s_444_54: u32 = 20304;
        // D s_444_55: read-reg s_444_54:struct
        let s_444_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_54 as isize);
            tracer.read_register(s_444_54 as isize, value);
            value
        };
        // C s_444_56: const #20304u : u32
        let s_444_56: u32 = 20304;
        // N s_444_57: write-reg s_444_56 <= s_444_55
        let s_444_57: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_56 as isize, s_444_55);
            tracer.write_register(s_444_56 as isize, s_444_55);
        };
        // C s_444_58: const #20304u : u32
        let s_444_58: u32 = 20304;
        // D s_444_59: read-reg s_444_58:struct
        let s_444_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_58 as isize);
            tracer.read_register(s_444_58 as isize, value);
            value
        };
        // C s_444_60: const #20304u : u32
        let s_444_60: u32 = 20304;
        // N s_444_61: write-reg s_444_60 <= s_444_59
        let s_444_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_60 as isize, s_444_59);
            tracer.write_register(s_444_60 as isize, s_444_59);
        };
        // C s_444_62: const #20304u : u32
        let s_444_62: u32 = 20304;
        // D s_444_63: read-reg s_444_62:struct
        let s_444_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_62 as isize);
            tracer.read_register(s_444_62 as isize, value);
            value
        };
        // C s_444_64: const #20304u : u32
        let s_444_64: u32 = 20304;
        // N s_444_65: write-reg s_444_64 <= s_444_63
        let s_444_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_64 as isize, s_444_63);
            tracer.write_register(s_444_64 as isize, s_444_63);
        };
        // C s_444_66: const #0u : u8
        let s_444_66: bool = false;
        // S s_444_67: call Bit(s_444_66)
        let s_444_67: bool = Bit(state, tracer, s_444_66);
        // C s_444_68: const #20304u : u32
        let s_444_68: u32 = 20304;
        // D s_444_69: read-reg s_444_68:struct
        let s_444_69: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_68 as isize);
            tracer.read_register(s_444_68 as isize, value);
            value
        };
        // C s_444_70: const #20304u : u32
        let s_444_70: u32 = 20304;
        // N s_444_71: write-reg s_444_70 <= s_444_69
        let s_444_71: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_70 as isize, s_444_69);
            tracer.write_register(s_444_70 as isize, s_444_69);
        };
        // C s_444_72: const #23280u : u32
        let s_444_72: u32 = 23280;
        // D s_444_73: read-reg s_444_72:struct
        let s_444_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_72 as isize);
            tracer.read_register(s_444_72 as isize, value);
            value
        };
        // C s_444_74: const #23280u : u32
        let s_444_74: u32 = 23280;
        // N s_444_75: write-reg s_444_74 <= s_444_73
        let s_444_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_74 as isize, s_444_73);
            tracer.write_register(s_444_74 as isize, s_444_73);
        };
        // C s_444_76: const #23280u : u32
        let s_444_76: u32 = 23280;
        // D s_444_77: read-reg s_444_76:struct
        let s_444_77: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_76 as isize);
            tracer.read_register(s_444_76 as isize, value);
            value
        };
        // C s_444_78: const #23280u : u32
        let s_444_78: u32 = 23280;
        // N s_444_79: write-reg s_444_78 <= s_444_77
        let s_444_79: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_78 as isize, s_444_77);
            tracer.write_register(s_444_78 as isize, s_444_77);
        };
        // C s_444_80: const #23280u : u32
        let s_444_80: u32 = 23280;
        // D s_444_81: read-reg s_444_80:struct
        let s_444_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_80 as isize);
            tracer.read_register(s_444_80 as isize, value);
            value
        };
        // C s_444_82: const #23280u : u32
        let s_444_82: u32 = 23280;
        // N s_444_83: write-reg s_444_82 <= s_444_81
        let s_444_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_82 as isize, s_444_81);
            tracer.write_register(s_444_82 as isize, s_444_81);
        };
        // C s_444_84: const #23280u : u32
        let s_444_84: u32 = 23280;
        // D s_444_85: read-reg s_444_84:struct
        let s_444_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_84 as isize);
            tracer.read_register(s_444_84 as isize, value);
            value
        };
        // C s_444_86: const #23280u : u32
        let s_444_86: u32 = 23280;
        // N s_444_87: write-reg s_444_86 <= s_444_85
        let s_444_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_86 as isize, s_444_85);
            tracer.write_register(s_444_86 as isize, s_444_85);
        };
        // C s_444_88: const #20600u : u32
        let s_444_88: u32 = 20600;
        // D s_444_89: read-reg s_444_88:struct
        let s_444_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_88 as isize);
            tracer.read_register(s_444_88 as isize, value);
            value
        };
        // C s_444_90: const #20600u : u32
        let s_444_90: u32 = 20600;
        // N s_444_91: write-reg s_444_90 <= s_444_89
        let s_444_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_90 as isize, s_444_89);
            tracer.write_register(s_444_90 as isize, s_444_89);
        };
        // C s_444_92: const #19968u : u32
        let s_444_92: u32 = 19968;
        // D s_444_93: read-reg s_444_92:struct
        let s_444_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_92 as isize);
            tracer.read_register(s_444_92 as isize, value);
            value
        };
        // C s_444_94: const #19968u : u32
        let s_444_94: u32 = 19968;
        // N s_444_95: write-reg s_444_94 <= s_444_93
        let s_444_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_94 as isize, s_444_93);
            tracer.write_register(s_444_94 as isize, s_444_93);
        };
        // C s_444_96: const #102288u : u32
        let s_444_96: u32 = 102288;
        // D s_444_97: read-reg s_444_96:struct
        let s_444_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_96 as isize);
            tracer.read_register(s_444_96 as isize, value);
            value
        };
        // C s_444_98: const #102288u : u32
        let s_444_98: u32 = 102288;
        // N s_444_99: write-reg s_444_98 <= s_444_97
        let s_444_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_98 as isize, s_444_97);
            tracer.write_register(s_444_98 as isize, s_444_97);
        };
        // C s_444_100: const #0u : u8
        let s_444_100: bool = false;
        // S s_444_101: call Bit(s_444_100)
        let s_444_101: bool = Bit(state, tracer, s_444_100);
        // C s_444_102: const #102288u : u32
        let s_444_102: u32 = 102288;
        // D s_444_103: read-reg s_444_102:struct
        let s_444_103: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_102 as isize);
            tracer.read_register(s_444_102 as isize, value);
            value
        };
        // C s_444_104: const #102288u : u32
        let s_444_104: u32 = 102288;
        // N s_444_105: write-reg s_444_104 <= s_444_103
        let s_444_105: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_104 as isize, s_444_103);
            tracer.write_register(s_444_104 as isize, s_444_103);
        };
        // C s_444_106: const #102288u : u32
        let s_444_106: u32 = 102288;
        // D s_444_107: read-reg s_444_106:struct
        let s_444_107: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_106 as isize);
            tracer.read_register(s_444_106 as isize, value);
            value
        };
        // C s_444_108: const #102288u : u32
        let s_444_108: u32 = 102288;
        // N s_444_109: write-reg s_444_108 <= s_444_107
        let s_444_109: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_108 as isize, s_444_107);
            tracer.write_register(s_444_108 as isize, s_444_107);
        };
        // C s_444_110: const #0u : u8
        let s_444_110: bool = false;
        // S s_444_111: call Bit(s_444_110)
        let s_444_111: bool = Bit(state, tracer, s_444_110);
        // C s_444_112: const #102288u : u32
        let s_444_112: u32 = 102288;
        // D s_444_113: read-reg s_444_112:struct
        let s_444_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_112 as isize);
            tracer.read_register(s_444_112 as isize, value);
            value
        };
        // C s_444_114: const #102288u : u32
        let s_444_114: u32 = 102288;
        // N s_444_115: write-reg s_444_114 <= s_444_113
        let s_444_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_114 as isize, s_444_113);
            tracer.write_register(s_444_114 as isize, s_444_113);
        };
        // C s_444_116: const #0u : u8
        let s_444_116: bool = false;
        // S s_444_117: call Bit(s_444_116)
        let s_444_117: bool = Bit(state, tracer, s_444_116);
        // C s_444_118: const #102288u : u32
        let s_444_118: u32 = 102288;
        // D s_444_119: read-reg s_444_118:struct
        let s_444_119: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_118 as isize);
            tracer.read_register(s_444_118 as isize, value);
            value
        };
        // C s_444_120: const #102288u : u32
        let s_444_120: u32 = 102288;
        // N s_444_121: write-reg s_444_120 <= s_444_119
        let s_444_121: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_120 as isize, s_444_119);
            tracer.write_register(s_444_120 as isize, s_444_119);
        };
        // C s_444_122: const #102288u : u32
        let s_444_122: u32 = 102288;
        // D s_444_123: read-reg s_444_122:struct
        let s_444_123: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_122 as isize);
            tracer.read_register(s_444_122 as isize, value);
            value
        };
        // C s_444_124: const #102288u : u32
        let s_444_124: u32 = 102288;
        // N s_444_125: write-reg s_444_124 <= s_444_123
        let s_444_125: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_124 as isize, s_444_123);
            tracer.write_register(s_444_124 as isize, s_444_123);
        };
        // C s_444_126: const #0u : u8
        let s_444_126: bool = false;
        // S s_444_127: call Bit(s_444_126)
        let s_444_127: bool = Bit(state, tracer, s_444_126);
        // C s_444_128: const #102288u : u32
        let s_444_128: u32 = 102288;
        // D s_444_129: read-reg s_444_128:struct
        let s_444_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_128 as isize);
            tracer.read_register(s_444_128 as isize, value);
            value
        };
        // C s_444_130: const #102288u : u32
        let s_444_130: u32 = 102288;
        // N s_444_131: write-reg s_444_130 <= s_444_129
        let s_444_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_130 as isize, s_444_129);
            tracer.write_register(s_444_130 as isize, s_444_129);
        };
        // C s_444_132: const #0u : u8
        let s_444_132: bool = false;
        // S s_444_133: call Bit(s_444_132)
        let s_444_133: bool = Bit(state, tracer, s_444_132);
        // C s_444_134: const #102288u : u32
        let s_444_134: u32 = 102288;
        // D s_444_135: read-reg s_444_134:struct
        let s_444_135: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_134 as isize);
            tracer.read_register(s_444_134 as isize, value);
            value
        };
        // C s_444_136: const #102288u : u32
        let s_444_136: u32 = 102288;
        // N s_444_137: write-reg s_444_136 <= s_444_135
        let s_444_137: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_136 as isize, s_444_135);
            tracer.write_register(s_444_136 as isize, s_444_135);
        };
        // C s_444_138: const #16592u : u32
        let s_444_138: u32 = 16592;
        // D s_444_139: read-reg s_444_138:struct
        let s_444_139: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_138 as isize);
            tracer.read_register(s_444_138 as isize, value);
            value
        };
        // C s_444_140: const #16592u : u32
        let s_444_140: u32 = 16592;
        // N s_444_141: write-reg s_444_140 <= s_444_139
        let s_444_141: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_140 as isize, s_444_139);
            tracer.write_register(s_444_140 as isize, s_444_139);
        };
        // C s_444_142: const #16592u : u32
        let s_444_142: u32 = 16592;
        // D s_444_143: read-reg s_444_142:struct
        let s_444_143: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_142 as isize);
            tracer.read_register(s_444_142 as isize, value);
            value
        };
        // C s_444_144: const #16592u : u32
        let s_444_144: u32 = 16592;
        // N s_444_145: write-reg s_444_144 <= s_444_143
        let s_444_145: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_144 as isize, s_444_143);
            tracer.write_register(s_444_144 as isize, s_444_143);
        };
        // C s_444_146: const #16592u : u32
        let s_444_146: u32 = 16592;
        // D s_444_147: read-reg s_444_146:struct
        let s_444_147: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_146 as isize);
            tracer.read_register(s_444_146 as isize, value);
            value
        };
        // C s_444_148: const #16592u : u32
        let s_444_148: u32 = 16592;
        // N s_444_149: write-reg s_444_148 <= s_444_147
        let s_444_149: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_148 as isize, s_444_147);
            tracer.write_register(s_444_148 as isize, s_444_147);
        };
        // C s_444_150: const #16592u : u32
        let s_444_150: u32 = 16592;
        // D s_444_151: read-reg s_444_150:struct
        let s_444_151: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_150 as isize);
            tracer.read_register(s_444_150 as isize, value);
            value
        };
        // C s_444_152: const #16592u : u32
        let s_444_152: u32 = 16592;
        // N s_444_153: write-reg s_444_152 <= s_444_151
        let s_444_153: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_152 as isize, s_444_151);
            tracer.write_register(s_444_152 as isize, s_444_151);
        };
        // C s_444_154: const #16592u : u32
        let s_444_154: u32 = 16592;
        // D s_444_155: read-reg s_444_154:struct
        let s_444_155: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_154 as isize);
            tracer.read_register(s_444_154 as isize, value);
            value
        };
        // C s_444_156: const #16592u : u32
        let s_444_156: u32 = 16592;
        // N s_444_157: write-reg s_444_156 <= s_444_155
        let s_444_157: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_156 as isize, s_444_155);
            tracer.write_register(s_444_156 as isize, s_444_155);
        };
        // C s_444_158: const #16592u : u32
        let s_444_158: u32 = 16592;
        // D s_444_159: read-reg s_444_158:struct
        let s_444_159: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_158 as isize);
            tracer.read_register(s_444_158 as isize, value);
            value
        };
        // C s_444_160: const #16592u : u32
        let s_444_160: u32 = 16592;
        // N s_444_161: write-reg s_444_160 <= s_444_159
        let s_444_161: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_160 as isize, s_444_159);
            tracer.write_register(s_444_160 as isize, s_444_159);
        };
        // C s_444_162: const #16592u : u32
        let s_444_162: u32 = 16592;
        // D s_444_163: read-reg s_444_162:struct
        let s_444_163: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_162 as isize);
            tracer.read_register(s_444_162 as isize, value);
            value
        };
        // C s_444_164: const #16592u : u32
        let s_444_164: u32 = 16592;
        // N s_444_165: write-reg s_444_164 <= s_444_163
        let s_444_165: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_164 as isize, s_444_163);
            tracer.write_register(s_444_164 as isize, s_444_163);
        };
        // C s_444_166: const #16592u : u32
        let s_444_166: u32 = 16592;
        // D s_444_167: read-reg s_444_166:struct
        let s_444_167: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_166 as isize);
            tracer.read_register(s_444_166 as isize, value);
            value
        };
        // C s_444_168: const #16592u : u32
        let s_444_168: u32 = 16592;
        // N s_444_169: write-reg s_444_168 <= s_444_167
        let s_444_169: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_168 as isize, s_444_167);
            tracer.write_register(s_444_168 as isize, s_444_167);
        };
        // C s_444_170: const #16592u : u32
        let s_444_170: u32 = 16592;
        // D s_444_171: read-reg s_444_170:struct
        let s_444_171: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_170 as isize);
            tracer.read_register(s_444_170 as isize, value);
            value
        };
        // C s_444_172: const #16592u : u32
        let s_444_172: u32 = 16592;
        // N s_444_173: write-reg s_444_172 <= s_444_171
        let s_444_173: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_172 as isize, s_444_171);
            tracer.write_register(s_444_172 as isize, s_444_171);
        };
        // C s_444_174: const #16592u : u32
        let s_444_174: u32 = 16592;
        // D s_444_175: read-reg s_444_174:struct
        let s_444_175: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_174 as isize);
            tracer.read_register(s_444_174 as isize, value);
            value
        };
        // C s_444_176: const #16592u : u32
        let s_444_176: u32 = 16592;
        // N s_444_177: write-reg s_444_176 <= s_444_175
        let s_444_177: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_176 as isize, s_444_175);
            tracer.write_register(s_444_176 as isize, s_444_175);
        };
        // C s_444_178: const #16592u : u32
        let s_444_178: u32 = 16592;
        // D s_444_179: read-reg s_444_178:struct
        let s_444_179: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_178 as isize);
            tracer.read_register(s_444_178 as isize, value);
            value
        };
        // C s_444_180: const #16592u : u32
        let s_444_180: u32 = 16592;
        // N s_444_181: write-reg s_444_180 <= s_444_179
        let s_444_181: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_180 as isize, s_444_179);
            tracer.write_register(s_444_180 as isize, s_444_179);
        };
        // C s_444_182: const #16592u : u32
        let s_444_182: u32 = 16592;
        // D s_444_183: read-reg s_444_182:struct
        let s_444_183: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_182 as isize);
            tracer.read_register(s_444_182 as isize, value);
            value
        };
        // C s_444_184: const #16592u : u32
        let s_444_184: u32 = 16592;
        // N s_444_185: write-reg s_444_184 <= s_444_183
        let s_444_185: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_184 as isize, s_444_183);
            tracer.write_register(s_444_184 as isize, s_444_183);
        };
        // C s_444_186: const #0u : u8
        let s_444_186: bool = false;
        // S s_444_187: call Bit(s_444_186)
        let s_444_187: bool = Bit(state, tracer, s_444_186);
        // C s_444_188: const #16592u : u32
        let s_444_188: u32 = 16592;
        // D s_444_189: read-reg s_444_188:struct
        let s_444_189: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_188 as isize);
            tracer.read_register(s_444_188 as isize, value);
            value
        };
        // C s_444_190: const #16592u : u32
        let s_444_190: u32 = 16592;
        // N s_444_191: write-reg s_444_190 <= s_444_189
        let s_444_191: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_190 as isize, s_444_189);
            tracer.write_register(s_444_190 as isize, s_444_189);
        };
        // C s_444_192: const #16592u : u32
        let s_444_192: u32 = 16592;
        // D s_444_193: read-reg s_444_192:struct
        let s_444_193: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_444_192 as isize);
            tracer.read_register(s_444_192 as isize, value);
            value
        };
        // C s_444_194: const #16592u : u32
        let s_444_194: u32 = 16592;
        // N s_444_195: write-reg s_444_194 <= s_444_193
        let s_444_195: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_444_194 as isize, s_444_193);
            tracer.write_register(s_444_194 as isize, s_444_193);
        };
        // D s_444_196: read-var cold:u8
        let s_444_196: bool = fn_state.cold;
        // D s_444_197: not s_444_196
        let s_444_197: bool = !s_444_196;
        // N s_444_198: branch s_444_197 b933 b445
        if s_444_197 {
            return block_933(state, tracer, fn_state);
        } else {
            return block_445(state, tracer, fn_state);
        };
    }
    fn block_445<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_445_0: const #0u : u8
        let s_445_0: bool = false;
        // D s_445_1: write-var gs#40122 <= s_445_0
        fn_state.gs_40122 = s_445_0;
        // N s_445_2: jump b446
        return block_446(state, tracer, fn_state);
    }
    fn block_446<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_446_0: read-var gs#40122:u8
        let s_446_0: bool = fn_state.gs_40122;
        // N s_446_1: branch s_446_0 b932 b447
        if s_446_0 {
            return block_932(state, tracer, fn_state);
        } else {
            return block_447(state, tracer, fn_state);
        };
    }
    fn block_447<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_447_0: const #1s : i64
        let s_447_0: i64 = 1;
        // C s_447_1: cast zx s_447_0 -> i
        let s_447_1: i128 = (i128::try_from(s_447_0).unwrap());
        // S s_447_2: call __UNKNOWN_bits(s_447_1)
        let s_447_2: Bits = u__UNKNOWN_bits(state, tracer, s_447_1);
        // C s_447_3: const #16592u : u32
        let s_447_3: u32 = 16592;
        // D s_447_4: read-reg s_447_3:struct
        let s_447_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_447_3 as isize);
            tracer.read_register(s_447_3 as isize, value);
            value
        };
        // C s_447_5: const #16592u : u32
        let s_447_5: u32 = 16592;
        // N s_447_6: write-reg s_447_5 <= s_447_4
        let s_447_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_447_5 as isize, s_447_4);
            tracer.write_register(s_447_5 as isize, s_447_4);
        };
        // N s_447_7: jump b448
        return block_448(state, tracer, fn_state);
    }
    fn block_448<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_448_0: read-var cold:u8
        let s_448_0: bool = fn_state.cold;
        // D s_448_1: not s_448_0
        let s_448_1: bool = !s_448_0;
        // N s_448_2: branch s_448_1 b931 b449
        if s_448_1 {
            return block_931(state, tracer, fn_state);
        } else {
            return block_449(state, tracer, fn_state);
        };
    }
    fn block_449<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_449_0: const #0u : u8
        let s_449_0: bool = false;
        // D s_449_1: write-var gs#40123 <= s_449_0
        fn_state.gs_40123 = s_449_0;
        // N s_449_2: jump b450
        return block_450(state, tracer, fn_state);
    }
    fn block_450<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_450_0: read-var gs#40123:u8
        let s_450_0: bool = fn_state.gs_40123;
        // N s_450_1: branch s_450_0 b930 b451
        if s_450_0 {
            return block_930(state, tracer, fn_state);
        } else {
            return block_451(state, tracer, fn_state);
        };
    }
    fn block_451<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_451_0: const #1s : i64
        let s_451_0: i64 = 1;
        // C s_451_1: cast zx s_451_0 -> i
        let s_451_1: i128 = (i128::try_from(s_451_0).unwrap());
        // S s_451_2: call __UNKNOWN_bits(s_451_1)
        let s_451_2: Bits = u__UNKNOWN_bits(state, tracer, s_451_1);
        // C s_451_3: const #16592u : u32
        let s_451_3: u32 = 16592;
        // D s_451_4: read-reg s_451_3:struct
        let s_451_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_451_3 as isize);
            tracer.read_register(s_451_3 as isize, value);
            value
        };
        // C s_451_5: const #16592u : u32
        let s_451_5: u32 = 16592;
        // N s_451_6: write-reg s_451_5 <= s_451_4
        let s_451_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_451_5 as isize, s_451_4);
            tracer.write_register(s_451_5 as isize, s_451_4);
        };
        // N s_451_7: jump b452
        return block_452(state, tracer, fn_state);
    }
    fn block_452<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_452_0: read-var cold:u8
        let s_452_0: bool = fn_state.cold;
        // D s_452_1: not s_452_0
        let s_452_1: bool = !s_452_0;
        // N s_452_2: branch s_452_1 b929 b453
        if s_452_1 {
            return block_929(state, tracer, fn_state);
        } else {
            return block_453(state, tracer, fn_state);
        };
    }
    fn block_453<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_453_0: const #0u : u8
        let s_453_0: bool = false;
        // D s_453_1: write-var gs#40124 <= s_453_0
        fn_state.gs_40124 = s_453_0;
        // N s_453_2: jump b454
        return block_454(state, tracer, fn_state);
    }
    fn block_454<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_454_0: read-var gs#40124:u8
        let s_454_0: bool = fn_state.gs_40124;
        // N s_454_1: branch s_454_0 b928 b455
        if s_454_0 {
            return block_928(state, tracer, fn_state);
        } else {
            return block_455(state, tracer, fn_state);
        };
    }
    fn block_455<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_455_0: const #1s : i64
        let s_455_0: i64 = 1;
        // C s_455_1: cast zx s_455_0 -> i
        let s_455_1: i128 = (i128::try_from(s_455_0).unwrap());
        // S s_455_2: call __UNKNOWN_bits(s_455_1)
        let s_455_2: Bits = u__UNKNOWN_bits(state, tracer, s_455_1);
        // C s_455_3: const #16592u : u32
        let s_455_3: u32 = 16592;
        // D s_455_4: read-reg s_455_3:struct
        let s_455_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_455_3 as isize);
            tracer.read_register(s_455_3 as isize, value);
            value
        };
        // C s_455_5: const #16592u : u32
        let s_455_5: u32 = 16592;
        // N s_455_6: write-reg s_455_5 <= s_455_4
        let s_455_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_455_5 as isize, s_455_4);
            tracer.write_register(s_455_5 as isize, s_455_4);
        };
        // N s_455_7: jump b456
        return block_456(state, tracer, fn_state);
    }
    fn block_456<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_456_0: read-var cold:u8
        let s_456_0: bool = fn_state.cold;
        // D s_456_1: not s_456_0
        let s_456_1: bool = !s_456_0;
        // N s_456_2: branch s_456_1 b927 b457
        if s_456_1 {
            return block_927(state, tracer, fn_state);
        } else {
            return block_457(state, tracer, fn_state);
        };
    }
    fn block_457<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_457_0: const #0u : u8
        let s_457_0: bool = false;
        // D s_457_1: write-var gs#40125 <= s_457_0
        fn_state.gs_40125 = s_457_0;
        // N s_457_2: jump b458
        return block_458(state, tracer, fn_state);
    }
    fn block_458<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_458_0: read-var gs#40125:u8
        let s_458_0: bool = fn_state.gs_40125;
        // N s_458_1: branch s_458_0 b926 b459
        if s_458_0 {
            return block_926(state, tracer, fn_state);
        } else {
            return block_459(state, tracer, fn_state);
        };
    }
    fn block_459<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_459_0: const #1s : i64
        let s_459_0: i64 = 1;
        // C s_459_1: cast zx s_459_0 -> i
        let s_459_1: i128 = (i128::try_from(s_459_0).unwrap());
        // S s_459_2: call __UNKNOWN_bits(s_459_1)
        let s_459_2: Bits = u__UNKNOWN_bits(state, tracer, s_459_1);
        // C s_459_3: const #16592u : u32
        let s_459_3: u32 = 16592;
        // D s_459_4: read-reg s_459_3:struct
        let s_459_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_459_3 as isize);
            tracer.read_register(s_459_3 as isize, value);
            value
        };
        // C s_459_5: const #16592u : u32
        let s_459_5: u32 = 16592;
        // N s_459_6: write-reg s_459_5 <= s_459_4
        let s_459_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_459_5 as isize, s_459_4);
            tracer.write_register(s_459_5 as isize, s_459_4);
        };
        // N s_459_7: jump b460
        return block_460(state, tracer, fn_state);
    }
    fn block_460<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_460_0: read-var cold:u8
        let s_460_0: bool = fn_state.cold;
        // D s_460_1: not s_460_0
        let s_460_1: bool = !s_460_0;
        // N s_460_2: branch s_460_1 b925 b461
        if s_460_1 {
            return block_925(state, tracer, fn_state);
        } else {
            return block_461(state, tracer, fn_state);
        };
    }
    fn block_461<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_461_0: const #0u : u8
        let s_461_0: bool = false;
        // D s_461_1: write-var gs#40126 <= s_461_0
        fn_state.gs_40126 = s_461_0;
        // N s_461_2: jump b462
        return block_462(state, tracer, fn_state);
    }
    fn block_462<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_462_0: read-var gs#40126:u8
        let s_462_0: bool = fn_state.gs_40126;
        // N s_462_1: branch s_462_0 b924 b463
        if s_462_0 {
            return block_924(state, tracer, fn_state);
        } else {
            return block_463(state, tracer, fn_state);
        };
    }
    fn block_463<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_463_0: const #1s : i64
        let s_463_0: i64 = 1;
        // C s_463_1: cast zx s_463_0 -> i
        let s_463_1: i128 = (i128::try_from(s_463_0).unwrap());
        // S s_463_2: call __UNKNOWN_bits(s_463_1)
        let s_463_2: Bits = u__UNKNOWN_bits(state, tracer, s_463_1);
        // C s_463_3: const #16592u : u32
        let s_463_3: u32 = 16592;
        // D s_463_4: read-reg s_463_3:struct
        let s_463_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_463_3 as isize);
            tracer.read_register(s_463_3 as isize, value);
            value
        };
        // C s_463_5: const #16592u : u32
        let s_463_5: u32 = 16592;
        // N s_463_6: write-reg s_463_5 <= s_463_4
        let s_463_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_463_5 as isize, s_463_4);
            tracer.write_register(s_463_5 as isize, s_463_4);
        };
        // N s_463_7: jump b464
        return block_464(state, tracer, fn_state);
    }
    fn block_464<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_464_0: read-var cold:u8
        let s_464_0: bool = fn_state.cold;
        // D s_464_1: not s_464_0
        let s_464_1: bool = !s_464_0;
        // N s_464_2: branch s_464_1 b923 b465
        if s_464_1 {
            return block_923(state, tracer, fn_state);
        } else {
            return block_465(state, tracer, fn_state);
        };
    }
    fn block_465<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_465_0: const #0u : u8
        let s_465_0: bool = false;
        // D s_465_1: write-var gs#40127 <= s_465_0
        fn_state.gs_40127 = s_465_0;
        // N s_465_2: jump b466
        return block_466(state, tracer, fn_state);
    }
    fn block_466<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_466_0: read-var gs#40127:u8
        let s_466_0: bool = fn_state.gs_40127;
        // N s_466_1: branch s_466_0 b922 b467
        if s_466_0 {
            return block_922(state, tracer, fn_state);
        } else {
            return block_467(state, tracer, fn_state);
        };
    }
    fn block_467<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_467_0: const #1s : i64
        let s_467_0: i64 = 1;
        // C s_467_1: cast zx s_467_0 -> i
        let s_467_1: i128 = (i128::try_from(s_467_0).unwrap());
        // S s_467_2: call __UNKNOWN_bits(s_467_1)
        let s_467_2: Bits = u__UNKNOWN_bits(state, tracer, s_467_1);
        // C s_467_3: const #16592u : u32
        let s_467_3: u32 = 16592;
        // D s_467_4: read-reg s_467_3:struct
        let s_467_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_467_3 as isize);
            tracer.read_register(s_467_3 as isize, value);
            value
        };
        // C s_467_5: const #16592u : u32
        let s_467_5: u32 = 16592;
        // N s_467_6: write-reg s_467_5 <= s_467_4
        let s_467_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_467_5 as isize, s_467_4);
            tracer.write_register(s_467_5 as isize, s_467_4);
        };
        // N s_467_7: jump b468
        return block_468(state, tracer, fn_state);
    }
    fn block_468<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_468_0: read-var cold:u8
        let s_468_0: bool = fn_state.cold;
        // D s_468_1: not s_468_0
        let s_468_1: bool = !s_468_0;
        // N s_468_2: branch s_468_1 b921 b469
        if s_468_1 {
            return block_921(state, tracer, fn_state);
        } else {
            return block_469(state, tracer, fn_state);
        };
    }
    fn block_469<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_469_0: const #0u : u8
        let s_469_0: bool = false;
        // D s_469_1: write-var gs#40128 <= s_469_0
        fn_state.gs_40128 = s_469_0;
        // N s_469_2: jump b470
        return block_470(state, tracer, fn_state);
    }
    fn block_470<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_470_0: read-var gs#40128:u8
        let s_470_0: bool = fn_state.gs_40128;
        // N s_470_1: branch s_470_0 b920 b471
        if s_470_0 {
            return block_920(state, tracer, fn_state);
        } else {
            return block_471(state, tracer, fn_state);
        };
    }
    fn block_471<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_471_0: const #1s : i64
        let s_471_0: i64 = 1;
        // C s_471_1: cast zx s_471_0 -> i
        let s_471_1: i128 = (i128::try_from(s_471_0).unwrap());
        // S s_471_2: call __UNKNOWN_bits(s_471_1)
        let s_471_2: Bits = u__UNKNOWN_bits(state, tracer, s_471_1);
        // C s_471_3: const #16592u : u32
        let s_471_3: u32 = 16592;
        // D s_471_4: read-reg s_471_3:struct
        let s_471_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_471_3 as isize);
            tracer.read_register(s_471_3 as isize, value);
            value
        };
        // C s_471_5: const #16592u : u32
        let s_471_5: u32 = 16592;
        // N s_471_6: write-reg s_471_5 <= s_471_4
        let s_471_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_471_5 as isize, s_471_4);
            tracer.write_register(s_471_5 as isize, s_471_4);
        };
        // N s_471_7: jump b472
        return block_472(state, tracer, fn_state);
    }
    fn block_472<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_472_0: read-var cold:u8
        let s_472_0: bool = fn_state.cold;
        // D s_472_1: not s_472_0
        let s_472_1: bool = !s_472_0;
        // N s_472_2: branch s_472_1 b919 b473
        if s_472_1 {
            return block_919(state, tracer, fn_state);
        } else {
            return block_473(state, tracer, fn_state);
        };
    }
    fn block_473<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_473_0: const #0u : u8
        let s_473_0: bool = false;
        // D s_473_1: write-var gs#40129 <= s_473_0
        fn_state.gs_40129 = s_473_0;
        // N s_473_2: jump b474
        return block_474(state, tracer, fn_state);
    }
    fn block_474<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_474_0: read-var gs#40129:u8
        let s_474_0: bool = fn_state.gs_40129;
        // N s_474_1: branch s_474_0 b918 b475
        if s_474_0 {
            return block_918(state, tracer, fn_state);
        } else {
            return block_475(state, tracer, fn_state);
        };
    }
    fn block_475<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_475_0: const #1s : i64
        let s_475_0: i64 = 1;
        // C s_475_1: cast zx s_475_0 -> i
        let s_475_1: i128 = (i128::try_from(s_475_0).unwrap());
        // S s_475_2: call __UNKNOWN_bits(s_475_1)
        let s_475_2: Bits = u__UNKNOWN_bits(state, tracer, s_475_1);
        // C s_475_3: const #16592u : u32
        let s_475_3: u32 = 16592;
        // D s_475_4: read-reg s_475_3:struct
        let s_475_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_475_3 as isize);
            tracer.read_register(s_475_3 as isize, value);
            value
        };
        // C s_475_5: const #16592u : u32
        let s_475_5: u32 = 16592;
        // N s_475_6: write-reg s_475_5 <= s_475_4
        let s_475_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_475_5 as isize, s_475_4);
            tracer.write_register(s_475_5 as isize, s_475_4);
        };
        // N s_475_7: jump b476
        return block_476(state, tracer, fn_state);
    }
    fn block_476<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_476_0: read-var cold:u8
        let s_476_0: bool = fn_state.cold;
        // D s_476_1: not s_476_0
        let s_476_1: bool = !s_476_0;
        // N s_476_2: branch s_476_1 b917 b477
        if s_476_1 {
            return block_917(state, tracer, fn_state);
        } else {
            return block_477(state, tracer, fn_state);
        };
    }
    fn block_477<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_477_0: const #0u : u8
        let s_477_0: bool = false;
        // D s_477_1: write-var gs#40130 <= s_477_0
        fn_state.gs_40130 = s_477_0;
        // N s_477_2: jump b478
        return block_478(state, tracer, fn_state);
    }
    fn block_478<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_478_0: read-var gs#40130:u8
        let s_478_0: bool = fn_state.gs_40130;
        // N s_478_1: branch s_478_0 b916 b479
        if s_478_0 {
            return block_916(state, tracer, fn_state);
        } else {
            return block_479(state, tracer, fn_state);
        };
    }
    fn block_479<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_479_0: const #1s : i64
        let s_479_0: i64 = 1;
        // C s_479_1: cast zx s_479_0 -> i
        let s_479_1: i128 = (i128::try_from(s_479_0).unwrap());
        // S s_479_2: call __UNKNOWN_bits(s_479_1)
        let s_479_2: Bits = u__UNKNOWN_bits(state, tracer, s_479_1);
        // C s_479_3: const #16592u : u32
        let s_479_3: u32 = 16592;
        // D s_479_4: read-reg s_479_3:struct
        let s_479_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_479_3 as isize);
            tracer.read_register(s_479_3 as isize, value);
            value
        };
        // C s_479_5: const #16592u : u32
        let s_479_5: u32 = 16592;
        // N s_479_6: write-reg s_479_5 <= s_479_4
        let s_479_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_479_5 as isize, s_479_4);
            tracer.write_register(s_479_5 as isize, s_479_4);
        };
        // N s_479_7: jump b480
        return block_480(state, tracer, fn_state);
    }
    fn block_480<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_480_0: read-var cold:u8
        let s_480_0: bool = fn_state.cold;
        // D s_480_1: not s_480_0
        let s_480_1: bool = !s_480_0;
        // N s_480_2: branch s_480_1 b915 b481
        if s_480_1 {
            return block_915(state, tracer, fn_state);
        } else {
            return block_481(state, tracer, fn_state);
        };
    }
    fn block_481<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_481_0: const #0u : u8
        let s_481_0: bool = false;
        // D s_481_1: write-var gs#40131 <= s_481_0
        fn_state.gs_40131 = s_481_0;
        // N s_481_2: jump b482
        return block_482(state, tracer, fn_state);
    }
    fn block_482<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_482_0: read-var gs#40131:u8
        let s_482_0: bool = fn_state.gs_40131;
        // N s_482_1: branch s_482_0 b914 b483
        if s_482_0 {
            return block_914(state, tracer, fn_state);
        } else {
            return block_483(state, tracer, fn_state);
        };
    }
    fn block_483<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_483_0: const #1s : i64
        let s_483_0: i64 = 1;
        // C s_483_1: cast zx s_483_0 -> i
        let s_483_1: i128 = (i128::try_from(s_483_0).unwrap());
        // S s_483_2: call __UNKNOWN_bits(s_483_1)
        let s_483_2: Bits = u__UNKNOWN_bits(state, tracer, s_483_1);
        // C s_483_3: const #16592u : u32
        let s_483_3: u32 = 16592;
        // D s_483_4: read-reg s_483_3:struct
        let s_483_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_483_3 as isize);
            tracer.read_register(s_483_3 as isize, value);
            value
        };
        // C s_483_5: const #16592u : u32
        let s_483_5: u32 = 16592;
        // N s_483_6: write-reg s_483_5 <= s_483_4
        let s_483_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_483_5 as isize, s_483_4);
            tracer.write_register(s_483_5 as isize, s_483_4);
        };
        // N s_483_7: jump b484
        return block_484(state, tracer, fn_state);
    }
    fn block_484<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_484_0: const #16592u : u32
        let s_484_0: u32 = 16592;
        // D s_484_1: read-reg s_484_0:struct
        let s_484_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_0 as isize);
            tracer.read_register(s_484_0 as isize, value);
            value
        };
        // C s_484_2: const #16592u : u32
        let s_484_2: u32 = 16592;
        // N s_484_3: write-reg s_484_2 <= s_484_1
        let s_484_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_2 as isize, s_484_1);
            tracer.write_register(s_484_2 as isize, s_484_1);
        };
        // C s_484_4: const #16592u : u32
        let s_484_4: u32 = 16592;
        // D s_484_5: read-reg s_484_4:struct
        let s_484_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_4 as isize);
            tracer.read_register(s_484_4 as isize, value);
            value
        };
        // C s_484_6: const #16592u : u32
        let s_484_6: u32 = 16592;
        // N s_484_7: write-reg s_484_6 <= s_484_5
        let s_484_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_6 as isize, s_484_5);
            tracer.write_register(s_484_6 as isize, s_484_5);
        };
        // C s_484_8: const #16592u : u32
        let s_484_8: u32 = 16592;
        // D s_484_9: read-reg s_484_8:struct
        let s_484_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_8 as isize);
            tracer.read_register(s_484_8 as isize, value);
            value
        };
        // C s_484_10: const #16592u : u32
        let s_484_10: u32 = 16592;
        // N s_484_11: write-reg s_484_10 <= s_484_9
        let s_484_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_10 as isize, s_484_9);
            tracer.write_register(s_484_10 as isize, s_484_9);
        };
        // C s_484_12: const #16592u : u32
        let s_484_12: u32 = 16592;
        // D s_484_13: read-reg s_484_12:struct
        let s_484_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_12 as isize);
            tracer.read_register(s_484_12 as isize, value);
            value
        };
        // C s_484_14: const #16592u : u32
        let s_484_14: u32 = 16592;
        // N s_484_15: write-reg s_484_14 <= s_484_13
        let s_484_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_14 as isize, s_484_13);
            tracer.write_register(s_484_14 as isize, s_484_13);
        };
        // C s_484_16: const #16592u : u32
        let s_484_16: u32 = 16592;
        // D s_484_17: read-reg s_484_16:struct
        let s_484_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_16 as isize);
            tracer.read_register(s_484_16 as isize, value);
            value
        };
        // C s_484_18: const #16592u : u32
        let s_484_18: u32 = 16592;
        // N s_484_19: write-reg s_484_18 <= s_484_17
        let s_484_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_18 as isize, s_484_17);
            tracer.write_register(s_484_18 as isize, s_484_17);
        };
        // C s_484_20: const #16592u : u32
        let s_484_20: u32 = 16592;
        // D s_484_21: read-reg s_484_20:struct
        let s_484_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_20 as isize);
            tracer.read_register(s_484_20 as isize, value);
            value
        };
        // C s_484_22: const #16592u : u32
        let s_484_22: u32 = 16592;
        // N s_484_23: write-reg s_484_22 <= s_484_21
        let s_484_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_22 as isize, s_484_21);
            tracer.write_register(s_484_22 as isize, s_484_21);
        };
        // C s_484_24: const #16592u : u32
        let s_484_24: u32 = 16592;
        // D s_484_25: read-reg s_484_24:struct
        let s_484_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_24 as isize);
            tracer.read_register(s_484_24 as isize, value);
            value
        };
        // C s_484_26: const #16592u : u32
        let s_484_26: u32 = 16592;
        // N s_484_27: write-reg s_484_26 <= s_484_25
        let s_484_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_26 as isize, s_484_25);
            tracer.write_register(s_484_26 as isize, s_484_25);
        };
        // C s_484_28: const #16592u : u32
        let s_484_28: u32 = 16592;
        // D s_484_29: read-reg s_484_28:struct
        let s_484_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_28 as isize);
            tracer.read_register(s_484_28 as isize, value);
            value
        };
        // C s_484_30: const #16592u : u32
        let s_484_30: u32 = 16592;
        // N s_484_31: write-reg s_484_30 <= s_484_29
        let s_484_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_30 as isize, s_484_29);
            tracer.write_register(s_484_30 as isize, s_484_29);
        };
        // C s_484_32: const #16592u : u32
        let s_484_32: u32 = 16592;
        // D s_484_33: read-reg s_484_32:struct
        let s_484_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_32 as isize);
            tracer.read_register(s_484_32 as isize, value);
            value
        };
        // C s_484_34: const #16592u : u32
        let s_484_34: u32 = 16592;
        // N s_484_35: write-reg s_484_34 <= s_484_33
        let s_484_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_34 as isize, s_484_33);
            tracer.write_register(s_484_34 as isize, s_484_33);
        };
        // C s_484_36: const #16592u : u32
        let s_484_36: u32 = 16592;
        // D s_484_37: read-reg s_484_36:struct
        let s_484_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_36 as isize);
            tracer.read_register(s_484_36 as isize, value);
            value
        };
        // C s_484_38: const #16592u : u32
        let s_484_38: u32 = 16592;
        // N s_484_39: write-reg s_484_38 <= s_484_37
        let s_484_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_38 as isize, s_484_37);
            tracer.write_register(s_484_38 as isize, s_484_37);
        };
        // C s_484_40: const #16592u : u32
        let s_484_40: u32 = 16592;
        // D s_484_41: read-reg s_484_40:struct
        let s_484_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_40 as isize);
            tracer.read_register(s_484_40 as isize, value);
            value
        };
        // C s_484_42: const #16592u : u32
        let s_484_42: u32 = 16592;
        // N s_484_43: write-reg s_484_42 <= s_484_41
        let s_484_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_42 as isize, s_484_41);
            tracer.write_register(s_484_42 as isize, s_484_41);
        };
        // C s_484_44: const #16592u : u32
        let s_484_44: u32 = 16592;
        // D s_484_45: read-reg s_484_44:struct
        let s_484_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_44 as isize);
            tracer.read_register(s_484_44 as isize, value);
            value
        };
        // C s_484_46: const #16592u : u32
        let s_484_46: u32 = 16592;
        // N s_484_47: write-reg s_484_46 <= s_484_45
        let s_484_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_46 as isize, s_484_45);
            tracer.write_register(s_484_46 as isize, s_484_45);
        };
        // C s_484_48: const #16592u : u32
        let s_484_48: u32 = 16592;
        // D s_484_49: read-reg s_484_48:struct
        let s_484_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_48 as isize);
            tracer.read_register(s_484_48 as isize, value);
            value
        };
        // C s_484_50: const #16592u : u32
        let s_484_50: u32 = 16592;
        // N s_484_51: write-reg s_484_50 <= s_484_49
        let s_484_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_50 as isize, s_484_49);
            tracer.write_register(s_484_50 as isize, s_484_49);
        };
        // C s_484_52: const #16592u : u32
        let s_484_52: u32 = 16592;
        // D s_484_53: read-reg s_484_52:struct
        let s_484_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_52 as isize);
            tracer.read_register(s_484_52 as isize, value);
            value
        };
        // C s_484_54: const #16592u : u32
        let s_484_54: u32 = 16592;
        // N s_484_55: write-reg s_484_54 <= s_484_53
        let s_484_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_54 as isize, s_484_53);
            tracer.write_register(s_484_54 as isize, s_484_53);
        };
        // C s_484_56: const #16592u : u32
        let s_484_56: u32 = 16592;
        // D s_484_57: read-reg s_484_56:struct
        let s_484_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_56 as isize);
            tracer.read_register(s_484_56 as isize, value);
            value
        };
        // C s_484_58: const #16592u : u32
        let s_484_58: u32 = 16592;
        // N s_484_59: write-reg s_484_58 <= s_484_57
        let s_484_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_58 as isize, s_484_57);
            tracer.write_register(s_484_58 as isize, s_484_57);
        };
        // C s_484_60: const #16592u : u32
        let s_484_60: u32 = 16592;
        // D s_484_61: read-reg s_484_60:struct
        let s_484_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_60 as isize);
            tracer.read_register(s_484_60 as isize, value);
            value
        };
        // C s_484_62: const #16592u : u32
        let s_484_62: u32 = 16592;
        // N s_484_63: write-reg s_484_62 <= s_484_61
        let s_484_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_62 as isize, s_484_61);
            tracer.write_register(s_484_62 as isize, s_484_61);
        };
        // C s_484_64: const #16592u : u32
        let s_484_64: u32 = 16592;
        // D s_484_65: read-reg s_484_64:struct
        let s_484_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_64 as isize);
            tracer.read_register(s_484_64 as isize, value);
            value
        };
        // C s_484_66: const #16592u : u32
        let s_484_66: u32 = 16592;
        // N s_484_67: write-reg s_484_66 <= s_484_65
        let s_484_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_66 as isize, s_484_65);
            tracer.write_register(s_484_66 as isize, s_484_65);
        };
        // C s_484_68: const #16592u : u32
        let s_484_68: u32 = 16592;
        // D s_484_69: read-reg s_484_68:struct
        let s_484_69: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_68 as isize);
            tracer.read_register(s_484_68 as isize, value);
            value
        };
        // C s_484_70: const #16592u : u32
        let s_484_70: u32 = 16592;
        // N s_484_71: write-reg s_484_70 <= s_484_69
        let s_484_71: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_70 as isize, s_484_69);
            tracer.write_register(s_484_70 as isize, s_484_69);
        };
        // C s_484_72: const #16592u : u32
        let s_484_72: u32 = 16592;
        // D s_484_73: read-reg s_484_72:struct
        let s_484_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_72 as isize);
            tracer.read_register(s_484_72 as isize, value);
            value
        };
        // C s_484_74: const #16592u : u32
        let s_484_74: u32 = 16592;
        // N s_484_75: write-reg s_484_74 <= s_484_73
        let s_484_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_74 as isize, s_484_73);
            tracer.write_register(s_484_74 as isize, s_484_73);
        };
        // C s_484_76: const #16592u : u32
        let s_484_76: u32 = 16592;
        // D s_484_77: read-reg s_484_76:struct
        let s_484_77: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_76 as isize);
            tracer.read_register(s_484_76 as isize, value);
            value
        };
        // C s_484_78: const #16592u : u32
        let s_484_78: u32 = 16592;
        // N s_484_79: write-reg s_484_78 <= s_484_77
        let s_484_79: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_78 as isize, s_484_77);
            tracer.write_register(s_484_78 as isize, s_484_77);
        };
        // C s_484_80: const #16592u : u32
        let s_484_80: u32 = 16592;
        // D s_484_81: read-reg s_484_80:struct
        let s_484_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_80 as isize);
            tracer.read_register(s_484_80 as isize, value);
            value
        };
        // C s_484_82: const #16592u : u32
        let s_484_82: u32 = 16592;
        // N s_484_83: write-reg s_484_82 <= s_484_81
        let s_484_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_82 as isize, s_484_81);
            tracer.write_register(s_484_82 as isize, s_484_81);
        };
        // C s_484_84: const #16592u : u32
        let s_484_84: u32 = 16592;
        // D s_484_85: read-reg s_484_84:struct
        let s_484_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_84 as isize);
            tracer.read_register(s_484_84 as isize, value);
            value
        };
        // C s_484_86: const #16592u : u32
        let s_484_86: u32 = 16592;
        // N s_484_87: write-reg s_484_86 <= s_484_85
        let s_484_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_86 as isize, s_484_85);
            tracer.write_register(s_484_86 as isize, s_484_85);
        };
        // C s_484_88: const #16592u : u32
        let s_484_88: u32 = 16592;
        // D s_484_89: read-reg s_484_88:struct
        let s_484_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_88 as isize);
            tracer.read_register(s_484_88 as isize, value);
            value
        };
        // C s_484_90: const #16592u : u32
        let s_484_90: u32 = 16592;
        // N s_484_91: write-reg s_484_90 <= s_484_89
        let s_484_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_90 as isize, s_484_89);
            tracer.write_register(s_484_90 as isize, s_484_89);
        };
        // C s_484_92: const #16592u : u32
        let s_484_92: u32 = 16592;
        // D s_484_93: read-reg s_484_92:struct
        let s_484_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_92 as isize);
            tracer.read_register(s_484_92 as isize, value);
            value
        };
        // C s_484_94: const #16592u : u32
        let s_484_94: u32 = 16592;
        // N s_484_95: write-reg s_484_94 <= s_484_93
        let s_484_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_94 as isize, s_484_93);
            tracer.write_register(s_484_94 as isize, s_484_93);
        };
        // C s_484_96: const #16592u : u32
        let s_484_96: u32 = 16592;
        // D s_484_97: read-reg s_484_96:struct
        let s_484_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_96 as isize);
            tracer.read_register(s_484_96 as isize, value);
            value
        };
        // C s_484_98: const #16592u : u32
        let s_484_98: u32 = 16592;
        // N s_484_99: write-reg s_484_98 <= s_484_97
        let s_484_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_98 as isize, s_484_97);
            tracer.write_register(s_484_98 as isize, s_484_97);
        };
        // C s_484_100: const #16592u : u32
        let s_484_100: u32 = 16592;
        // D s_484_101: read-reg s_484_100:struct
        let s_484_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_100 as isize);
            tracer.read_register(s_484_100 as isize, value);
            value
        };
        // C s_484_102: const #16592u : u32
        let s_484_102: u32 = 16592;
        // N s_484_103: write-reg s_484_102 <= s_484_101
        let s_484_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_102 as isize, s_484_101);
            tracer.write_register(s_484_102 as isize, s_484_101);
        };
        // C s_484_104: const #16592u : u32
        let s_484_104: u32 = 16592;
        // D s_484_105: read-reg s_484_104:struct
        let s_484_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_104 as isize);
            tracer.read_register(s_484_104 as isize, value);
            value
        };
        // C s_484_106: const #16592u : u32
        let s_484_106: u32 = 16592;
        // N s_484_107: write-reg s_484_106 <= s_484_105
        let s_484_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_106 as isize, s_484_105);
            tracer.write_register(s_484_106 as isize, s_484_105);
        };
        // C s_484_108: const #16592u : u32
        let s_484_108: u32 = 16592;
        // D s_484_109: read-reg s_484_108:struct
        let s_484_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_108 as isize);
            tracer.read_register(s_484_108 as isize, value);
            value
        };
        // C s_484_110: const #16592u : u32
        let s_484_110: u32 = 16592;
        // N s_484_111: write-reg s_484_110 <= s_484_109
        let s_484_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_110 as isize, s_484_109);
            tracer.write_register(s_484_110 as isize, s_484_109);
        };
        // C s_484_112: const #16592u : u32
        let s_484_112: u32 = 16592;
        // D s_484_113: read-reg s_484_112:struct
        let s_484_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_112 as isize);
            tracer.read_register(s_484_112 as isize, value);
            value
        };
        // C s_484_114: const #16592u : u32
        let s_484_114: u32 = 16592;
        // N s_484_115: write-reg s_484_114 <= s_484_113
        let s_484_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_114 as isize, s_484_113);
            tracer.write_register(s_484_114 as isize, s_484_113);
        };
        // C s_484_116: const #16592u : u32
        let s_484_116: u32 = 16592;
        // D s_484_117: read-reg s_484_116:struct
        let s_484_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_116 as isize);
            tracer.read_register(s_484_116 as isize, value);
            value
        };
        // C s_484_118: const #16592u : u32
        let s_484_118: u32 = 16592;
        // N s_484_119: write-reg s_484_118 <= s_484_117
        let s_484_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_118 as isize, s_484_117);
            tracer.write_register(s_484_118 as isize, s_484_117);
        };
        // C s_484_120: const #16592u : u32
        let s_484_120: u32 = 16592;
        // D s_484_121: read-reg s_484_120:struct
        let s_484_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_120 as isize);
            tracer.read_register(s_484_120 as isize, value);
            value
        };
        // C s_484_122: const #16592u : u32
        let s_484_122: u32 = 16592;
        // N s_484_123: write-reg s_484_122 <= s_484_121
        let s_484_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_122 as isize, s_484_121);
            tracer.write_register(s_484_122 as isize, s_484_121);
        };
        // C s_484_124: const #16592u : u32
        let s_484_124: u32 = 16592;
        // D s_484_125: read-reg s_484_124:struct
        let s_484_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_124 as isize);
            tracer.read_register(s_484_124 as isize, value);
            value
        };
        // C s_484_126: const #16592u : u32
        let s_484_126: u32 = 16592;
        // N s_484_127: write-reg s_484_126 <= s_484_125
        let s_484_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_126 as isize, s_484_125);
            tracer.write_register(s_484_126 as isize, s_484_125);
        };
        // C s_484_128: const #16592u : u32
        let s_484_128: u32 = 16592;
        // D s_484_129: read-reg s_484_128:struct
        let s_484_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_128 as isize);
            tracer.read_register(s_484_128 as isize, value);
            value
        };
        // C s_484_130: const #16592u : u32
        let s_484_130: u32 = 16592;
        // N s_484_131: write-reg s_484_130 <= s_484_129
        let s_484_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_130 as isize, s_484_129);
            tracer.write_register(s_484_130 as isize, s_484_129);
        };
        // C s_484_132: const #16592u : u32
        let s_484_132: u32 = 16592;
        // D s_484_133: read-reg s_484_132:struct
        let s_484_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_132 as isize);
            tracer.read_register(s_484_132 as isize, value);
            value
        };
        // C s_484_134: const #16592u : u32
        let s_484_134: u32 = 16592;
        // N s_484_135: write-reg s_484_134 <= s_484_133
        let s_484_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_134 as isize, s_484_133);
            tracer.write_register(s_484_134 as isize, s_484_133);
        };
        // C s_484_136: const #16592u : u32
        let s_484_136: u32 = 16592;
        // D s_484_137: read-reg s_484_136:struct
        let s_484_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_136 as isize);
            tracer.read_register(s_484_136 as isize, value);
            value
        };
        // C s_484_138: const #16592u : u32
        let s_484_138: u32 = 16592;
        // N s_484_139: write-reg s_484_138 <= s_484_137
        let s_484_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_138 as isize, s_484_137);
            tracer.write_register(s_484_138 as isize, s_484_137);
        };
        // C s_484_140: const #16592u : u32
        let s_484_140: u32 = 16592;
        // D s_484_141: read-reg s_484_140:struct
        let s_484_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_140 as isize);
            tracer.read_register(s_484_140 as isize, value);
            value
        };
        // C s_484_142: const #16592u : u32
        let s_484_142: u32 = 16592;
        // N s_484_143: write-reg s_484_142 <= s_484_141
        let s_484_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_142 as isize, s_484_141);
            tracer.write_register(s_484_142 as isize, s_484_141);
        };
        // C s_484_144: const #16592u : u32
        let s_484_144: u32 = 16592;
        // D s_484_145: read-reg s_484_144:struct
        let s_484_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_144 as isize);
            tracer.read_register(s_484_144 as isize, value);
            value
        };
        // C s_484_146: const #16592u : u32
        let s_484_146: u32 = 16592;
        // N s_484_147: write-reg s_484_146 <= s_484_145
        let s_484_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_146 as isize, s_484_145);
            tracer.write_register(s_484_146 as isize, s_484_145);
        };
        // C s_484_148: const #16592u : u32
        let s_484_148: u32 = 16592;
        // D s_484_149: read-reg s_484_148:struct
        let s_484_149: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_148 as isize);
            tracer.read_register(s_484_148 as isize, value);
            value
        };
        // C s_484_150: const #16592u : u32
        let s_484_150: u32 = 16592;
        // N s_484_151: write-reg s_484_150 <= s_484_149
        let s_484_151: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_150 as isize, s_484_149);
            tracer.write_register(s_484_150 as isize, s_484_149);
        };
        // C s_484_152: const #16592u : u32
        let s_484_152: u32 = 16592;
        // D s_484_153: read-reg s_484_152:struct
        let s_484_153: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_152 as isize);
            tracer.read_register(s_484_152 as isize, value);
            value
        };
        // C s_484_154: const #16592u : u32
        let s_484_154: u32 = 16592;
        // N s_484_155: write-reg s_484_154 <= s_484_153
        let s_484_155: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_154 as isize, s_484_153);
            tracer.write_register(s_484_154 as isize, s_484_153);
        };
        // C s_484_156: const #16592u : u32
        let s_484_156: u32 = 16592;
        // D s_484_157: read-reg s_484_156:struct
        let s_484_157: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_156 as isize);
            tracer.read_register(s_484_156 as isize, value);
            value
        };
        // C s_484_158: const #16592u : u32
        let s_484_158: u32 = 16592;
        // N s_484_159: write-reg s_484_158 <= s_484_157
        let s_484_159: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_158 as isize, s_484_157);
            tracer.write_register(s_484_158 as isize, s_484_157);
        };
        // C s_484_160: const #20416u : u32
        let s_484_160: u32 = 20416;
        // D s_484_161: read-reg s_484_160:struct
        let s_484_161: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_160 as isize);
            tracer.read_register(s_484_160 as isize, value);
            value
        };
        // C s_484_162: const #20416u : u32
        let s_484_162: u32 = 20416;
        // N s_484_163: write-reg s_484_162 <= s_484_161
        let s_484_163: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_162 as isize, s_484_161);
            tracer.write_register(s_484_162 as isize, s_484_161);
        };
        // C s_484_164: const #20416u : u32
        let s_484_164: u32 = 20416;
        // D s_484_165: read-reg s_484_164:struct
        let s_484_165: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_164 as isize);
            tracer.read_register(s_484_164 as isize, value);
            value
        };
        // C s_484_166: const #20416u : u32
        let s_484_166: u32 = 20416;
        // N s_484_167: write-reg s_484_166 <= s_484_165
        let s_484_167: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_166 as isize, s_484_165);
            tracer.write_register(s_484_166 as isize, s_484_165);
        };
        // C s_484_168: const #11088u : u32
        let s_484_168: u32 = 11088;
        // D s_484_169: read-reg s_484_168:struct
        let s_484_169: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_168 as isize);
            tracer.read_register(s_484_168 as isize, value);
            value
        };
        // C s_484_170: const #11088u : u32
        let s_484_170: u32 = 11088;
        // N s_484_171: write-reg s_484_170 <= s_484_169
        let s_484_171: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_170 as isize, s_484_169);
            tracer.write_register(s_484_170 as isize, s_484_169);
        };
        // C s_484_172: const #11088u : u32
        let s_484_172: u32 = 11088;
        // D s_484_173: read-reg s_484_172:struct
        let s_484_173: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_172 as isize);
            tracer.read_register(s_484_172 as isize, value);
            value
        };
        // C s_484_174: const #11088u : u32
        let s_484_174: u32 = 11088;
        // N s_484_175: write-reg s_484_174 <= s_484_173
        let s_484_175: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_174 as isize, s_484_173);
            tracer.write_register(s_484_174 as isize, s_484_173);
        };
        // C s_484_176: const #11088u : u32
        let s_484_176: u32 = 11088;
        // D s_484_177: read-reg s_484_176:struct
        let s_484_177: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_176 as isize);
            tracer.read_register(s_484_176 as isize, value);
            value
        };
        // C s_484_178: const #11088u : u32
        let s_484_178: u32 = 11088;
        // N s_484_179: write-reg s_484_178 <= s_484_177
        let s_484_179: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_178 as isize, s_484_177);
            tracer.write_register(s_484_178 as isize, s_484_177);
        };
        // C s_484_180: const #11088u : u32
        let s_484_180: u32 = 11088;
        // D s_484_181: read-reg s_484_180:struct
        let s_484_181: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_180 as isize);
            tracer.read_register(s_484_180 as isize, value);
            value
        };
        // C s_484_182: const #11088u : u32
        let s_484_182: u32 = 11088;
        // N s_484_183: write-reg s_484_182 <= s_484_181
        let s_484_183: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_182 as isize, s_484_181);
            tracer.write_register(s_484_182 as isize, s_484_181);
        };
        // C s_484_184: const #11088u : u32
        let s_484_184: u32 = 11088;
        // D s_484_185: read-reg s_484_184:struct
        let s_484_185: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_184 as isize);
            tracer.read_register(s_484_184 as isize, value);
            value
        };
        // C s_484_186: const #11088u : u32
        let s_484_186: u32 = 11088;
        // N s_484_187: write-reg s_484_186 <= s_484_185
        let s_484_187: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_186 as isize, s_484_185);
            tracer.write_register(s_484_186 as isize, s_484_185);
        };
        // C s_484_188: const #11088u : u32
        let s_484_188: u32 = 11088;
        // D s_484_189: read-reg s_484_188:struct
        let s_484_189: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_188 as isize);
            tracer.read_register(s_484_188 as isize, value);
            value
        };
        // C s_484_190: const #11088u : u32
        let s_484_190: u32 = 11088;
        // N s_484_191: write-reg s_484_190 <= s_484_189
        let s_484_191: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_190 as isize, s_484_189);
            tracer.write_register(s_484_190 as isize, s_484_189);
        };
        // C s_484_192: const #11088u : u32
        let s_484_192: u32 = 11088;
        // D s_484_193: read-reg s_484_192:struct
        let s_484_193: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_192 as isize);
            tracer.read_register(s_484_192 as isize, value);
            value
        };
        // C s_484_194: const #11088u : u32
        let s_484_194: u32 = 11088;
        // N s_484_195: write-reg s_484_194 <= s_484_193
        let s_484_195: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_194 as isize, s_484_193);
            tracer.write_register(s_484_194 as isize, s_484_193);
        };
        // C s_484_196: const #11088u : u32
        let s_484_196: u32 = 11088;
        // D s_484_197: read-reg s_484_196:struct
        let s_484_197: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_196 as isize);
            tracer.read_register(s_484_196 as isize, value);
            value
        };
        // C s_484_198: const #11088u : u32
        let s_484_198: u32 = 11088;
        // N s_484_199: write-reg s_484_198 <= s_484_197
        let s_484_199: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_198 as isize, s_484_197);
            tracer.write_register(s_484_198 as isize, s_484_197);
        };
        // C s_484_200: const #1u : u8
        let s_484_200: bool = true;
        // S s_484_201: call Bit(s_484_200)
        let s_484_201: bool = Bit(state, tracer, s_484_200);
        // C s_484_202: const #11088u : u32
        let s_484_202: u32 = 11088;
        // D s_484_203: read-reg s_484_202:struct
        let s_484_203: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_202 as isize);
            tracer.read_register(s_484_202 as isize, value);
            value
        };
        // C s_484_204: const #11088u : u32
        let s_484_204: u32 = 11088;
        // N s_484_205: write-reg s_484_204 <= s_484_203
        let s_484_205: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_204 as isize, s_484_203);
            tracer.write_register(s_484_204 as isize, s_484_203);
        };
        // C s_484_206: const #0u : u8
        let s_484_206: bool = false;
        // S s_484_207: call Bit(s_484_206)
        let s_484_207: bool = Bit(state, tracer, s_484_206);
        // C s_484_208: const #11088u : u32
        let s_484_208: u32 = 11088;
        // D s_484_209: read-reg s_484_208:struct
        let s_484_209: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_208 as isize);
            tracer.read_register(s_484_208 as isize, value);
            value
        };
        // C s_484_210: const #11088u : u32
        let s_484_210: u32 = 11088;
        // N s_484_211: write-reg s_484_210 <= s_484_209
        let s_484_211: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_210 as isize, s_484_209);
            tracer.write_register(s_484_210 as isize, s_484_209);
        };
        // C s_484_212: const #1u : u8
        let s_484_212: bool = true;
        // S s_484_213: call Bit(s_484_212)
        let s_484_213: bool = Bit(state, tracer, s_484_212);
        // C s_484_214: const #11088u : u32
        let s_484_214: u32 = 11088;
        // D s_484_215: read-reg s_484_214:struct
        let s_484_215: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_214 as isize);
            tracer.read_register(s_484_214 as isize, value);
            value
        };
        // C s_484_216: const #11088u : u32
        let s_484_216: u32 = 11088;
        // N s_484_217: write-reg s_484_216 <= s_484_215
        let s_484_217: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_216 as isize, s_484_215);
            tracer.write_register(s_484_216 as isize, s_484_215);
        };
        // C s_484_218: const #11088u : u32
        let s_484_218: u32 = 11088;
        // D s_484_219: read-reg s_484_218:struct
        let s_484_219: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_218 as isize);
            tracer.read_register(s_484_218 as isize, value);
            value
        };
        // C s_484_220: const #11088u : u32
        let s_484_220: u32 = 11088;
        // N s_484_221: write-reg s_484_220 <= s_484_219
        let s_484_221: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_220 as isize, s_484_219);
            tracer.write_register(s_484_220 as isize, s_484_219);
        };
        // C s_484_222: const #17192u : u32
        let s_484_222: u32 = 17192;
        // D s_484_223: read-reg s_484_222:struct
        let s_484_223: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_222 as isize);
            tracer.read_register(s_484_222 as isize, value);
            value
        };
        // C s_484_224: const #17192u : u32
        let s_484_224: u32 = 17192;
        // N s_484_225: write-reg s_484_224 <= s_484_223
        let s_484_225: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_224 as isize, s_484_223);
            tracer.write_register(s_484_224 as isize, s_484_223);
        };
        // C s_484_226: const #22528u : u32
        let s_484_226: u32 = 22528;
        // D s_484_227: read-reg s_484_226:struct
        let s_484_227: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_484_226 as isize);
            tracer.read_register(s_484_226 as isize, value);
            value
        };
        // C s_484_228: const #22528u : u32
        let s_484_228: u32 = 22528;
        // N s_484_229: write-reg s_484_228 <= s_484_227
        let s_484_229: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_484_228 as isize, s_484_227);
            tracer.write_register(s_484_228 as isize, s_484_227);
        };
        // D s_484_230: read-var cold:u8
        let s_484_230: bool = fn_state.cold;
        // D s_484_231: not s_484_230
        let s_484_231: bool = !s_484_230;
        // N s_484_232: branch s_484_231 b913 b485
        if s_484_231 {
            return block_913(state, tracer, fn_state);
        } else {
            return block_485(state, tracer, fn_state);
        };
    }
    fn block_485<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_485_0: const #0u : u8
        let s_485_0: bool = false;
        // D s_485_1: write-var gs#40297 <= s_485_0
        fn_state.gs_40297 = s_485_0;
        // N s_485_2: jump b486
        return block_486(state, tracer, fn_state);
    }
    fn block_486<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_486_0: read-var gs#40297:u8
        let s_486_0: bool = fn_state.gs_40297;
        // N s_486_1: branch s_486_0 b912 b487
        if s_486_0 {
            return block_912(state, tracer, fn_state);
        } else {
            return block_487(state, tracer, fn_state);
        };
    }
    fn block_487<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_487_0: const #1s : i64
        let s_487_0: i64 = 1;
        // C s_487_1: cast zx s_487_0 -> i
        let s_487_1: i128 = (i128::try_from(s_487_0).unwrap());
        // S s_487_2: call __UNKNOWN_bits(s_487_1)
        let s_487_2: Bits = u__UNKNOWN_bits(state, tracer, s_487_1);
        // C s_487_3: const #22528u : u32
        let s_487_3: u32 = 22528;
        // D s_487_4: read-reg s_487_3:struct
        let s_487_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_487_3 as isize);
            tracer.read_register(s_487_3 as isize, value);
            value
        };
        // C s_487_5: const #22528u : u32
        let s_487_5: u32 = 22528;
        // N s_487_6: write-reg s_487_5 <= s_487_4
        let s_487_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_487_5 as isize, s_487_4);
            tracer.write_register(s_487_5 as isize, s_487_4);
        };
        // N s_487_7: jump b488
        return block_488(state, tracer, fn_state);
    }
    fn block_488<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_488_0: read-var cold:u8
        let s_488_0: bool = fn_state.cold;
        // D s_488_1: not s_488_0
        let s_488_1: bool = !s_488_0;
        // N s_488_2: branch s_488_1 b911 b489
        if s_488_1 {
            return block_911(state, tracer, fn_state);
        } else {
            return block_489(state, tracer, fn_state);
        };
    }
    fn block_489<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_489_0: const #0u : u8
        let s_489_0: bool = false;
        // D s_489_1: write-var gs#40298 <= s_489_0
        fn_state.gs_40298 = s_489_0;
        // N s_489_2: jump b490
        return block_490(state, tracer, fn_state);
    }
    fn block_490<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_490_0: read-var gs#40298:u8
        let s_490_0: bool = fn_state.gs_40298;
        // N s_490_1: branch s_490_0 b910 b491
        if s_490_0 {
            return block_910(state, tracer, fn_state);
        } else {
            return block_491(state, tracer, fn_state);
        };
    }
    fn block_491<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_491_0: const #1s : i64
        let s_491_0: i64 = 1;
        // C s_491_1: cast zx s_491_0 -> i
        let s_491_1: i128 = (i128::try_from(s_491_0).unwrap());
        // S s_491_2: call __UNKNOWN_bits(s_491_1)
        let s_491_2: Bits = u__UNKNOWN_bits(state, tracer, s_491_1);
        // C s_491_3: const #22528u : u32
        let s_491_3: u32 = 22528;
        // D s_491_4: read-reg s_491_3:struct
        let s_491_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_491_3 as isize);
            tracer.read_register(s_491_3 as isize, value);
            value
        };
        // C s_491_5: const #22528u : u32
        let s_491_5: u32 = 22528;
        // N s_491_6: write-reg s_491_5 <= s_491_4
        let s_491_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_491_5 as isize, s_491_4);
            tracer.write_register(s_491_5 as isize, s_491_4);
        };
        // N s_491_7: jump b492
        return block_492(state, tracer, fn_state);
    }
    fn block_492<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_492_0: read-var cold:u8
        let s_492_0: bool = fn_state.cold;
        // D s_492_1: not s_492_0
        let s_492_1: bool = !s_492_0;
        // N s_492_2: branch s_492_1 b909 b493
        if s_492_1 {
            return block_909(state, tracer, fn_state);
        } else {
            return block_493(state, tracer, fn_state);
        };
    }
    fn block_493<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_493_0: const #0u : u8
        let s_493_0: bool = false;
        // D s_493_1: write-var gs#40299 <= s_493_0
        fn_state.gs_40299 = s_493_0;
        // N s_493_2: jump b494
        return block_494(state, tracer, fn_state);
    }
    fn block_494<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_494_0: read-var gs#40299:u8
        let s_494_0: bool = fn_state.gs_40299;
        // N s_494_1: branch s_494_0 b908 b495
        if s_494_0 {
            return block_908(state, tracer, fn_state);
        } else {
            return block_495(state, tracer, fn_state);
        };
    }
    fn block_495<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_495_0: const #1s : i64
        let s_495_0: i64 = 1;
        // C s_495_1: cast zx s_495_0 -> i
        let s_495_1: i128 = (i128::try_from(s_495_0).unwrap());
        // S s_495_2: call __UNKNOWN_bits(s_495_1)
        let s_495_2: Bits = u__UNKNOWN_bits(state, tracer, s_495_1);
        // C s_495_3: const #22528u : u32
        let s_495_3: u32 = 22528;
        // D s_495_4: read-reg s_495_3:struct
        let s_495_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_495_3 as isize);
            tracer.read_register(s_495_3 as isize, value);
            value
        };
        // C s_495_5: const #22528u : u32
        let s_495_5: u32 = 22528;
        // N s_495_6: write-reg s_495_5 <= s_495_4
        let s_495_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_495_5 as isize, s_495_4);
            tracer.write_register(s_495_5 as isize, s_495_4);
        };
        // N s_495_7: jump b496
        return block_496(state, tracer, fn_state);
    }
    fn block_496<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_496_0: read-var cold:u8
        let s_496_0: bool = fn_state.cold;
        // D s_496_1: not s_496_0
        let s_496_1: bool = !s_496_0;
        // N s_496_2: branch s_496_1 b907 b497
        if s_496_1 {
            return block_907(state, tracer, fn_state);
        } else {
            return block_497(state, tracer, fn_state);
        };
    }
    fn block_497<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_497_0: const #0u : u8
        let s_497_0: bool = false;
        // D s_497_1: write-var gs#40300 <= s_497_0
        fn_state.gs_40300 = s_497_0;
        // N s_497_2: jump b498
        return block_498(state, tracer, fn_state);
    }
    fn block_498<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_498_0: read-var gs#40300:u8
        let s_498_0: bool = fn_state.gs_40300;
        // N s_498_1: branch s_498_0 b906 b499
        if s_498_0 {
            return block_906(state, tracer, fn_state);
        } else {
            return block_499(state, tracer, fn_state);
        };
    }
    fn block_499<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_499_0: const #1s : i64
        let s_499_0: i64 = 1;
        // C s_499_1: cast zx s_499_0 -> i
        let s_499_1: i128 = (i128::try_from(s_499_0).unwrap());
        // S s_499_2: call __UNKNOWN_bits(s_499_1)
        let s_499_2: Bits = u__UNKNOWN_bits(state, tracer, s_499_1);
        // C s_499_3: const #22528u : u32
        let s_499_3: u32 = 22528;
        // D s_499_4: read-reg s_499_3:struct
        let s_499_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_499_3 as isize);
            tracer.read_register(s_499_3 as isize, value);
            value
        };
        // C s_499_5: const #22528u : u32
        let s_499_5: u32 = 22528;
        // N s_499_6: write-reg s_499_5 <= s_499_4
        let s_499_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_499_5 as isize, s_499_4);
            tracer.write_register(s_499_5 as isize, s_499_4);
        };
        // N s_499_7: jump b500
        return block_500(state, tracer, fn_state);
    }
    fn block_500<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_500_0: read-var cold:u8
        let s_500_0: bool = fn_state.cold;
        // D s_500_1: not s_500_0
        let s_500_1: bool = !s_500_0;
        // N s_500_2: branch s_500_1 b905 b501
        if s_500_1 {
            return block_905(state, tracer, fn_state);
        } else {
            return block_501(state, tracer, fn_state);
        };
    }
    fn block_501<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_501_0: const #0u : u8
        let s_501_0: bool = false;
        // D s_501_1: write-var gs#40301 <= s_501_0
        fn_state.gs_40301 = s_501_0;
        // N s_501_2: jump b502
        return block_502(state, tracer, fn_state);
    }
    fn block_502<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_502_0: read-var gs#40301:u8
        let s_502_0: bool = fn_state.gs_40301;
        // N s_502_1: branch s_502_0 b904 b503
        if s_502_0 {
            return block_904(state, tracer, fn_state);
        } else {
            return block_503(state, tracer, fn_state);
        };
    }
    fn block_503<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_503_0: const #1s : i64
        let s_503_0: i64 = 1;
        // C s_503_1: cast zx s_503_0 -> i
        let s_503_1: i128 = (i128::try_from(s_503_0).unwrap());
        // S s_503_2: call __UNKNOWN_bits(s_503_1)
        let s_503_2: Bits = u__UNKNOWN_bits(state, tracer, s_503_1);
        // C s_503_3: const #22528u : u32
        let s_503_3: u32 = 22528;
        // D s_503_4: read-reg s_503_3:struct
        let s_503_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_503_3 as isize);
            tracer.read_register(s_503_3 as isize, value);
            value
        };
        // C s_503_5: const #22528u : u32
        let s_503_5: u32 = 22528;
        // N s_503_6: write-reg s_503_5 <= s_503_4
        let s_503_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_503_5 as isize, s_503_4);
            tracer.write_register(s_503_5 as isize, s_503_4);
        };
        // N s_503_7: jump b504
        return block_504(state, tracer, fn_state);
    }
    fn block_504<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_504_0: read-var cold:u8
        let s_504_0: bool = fn_state.cold;
        // D s_504_1: not s_504_0
        let s_504_1: bool = !s_504_0;
        // N s_504_2: branch s_504_1 b903 b505
        if s_504_1 {
            return block_903(state, tracer, fn_state);
        } else {
            return block_505(state, tracer, fn_state);
        };
    }
    fn block_505<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_505_0: const #0u : u8
        let s_505_0: bool = false;
        // D s_505_1: write-var gs#40302 <= s_505_0
        fn_state.gs_40302 = s_505_0;
        // N s_505_2: jump b506
        return block_506(state, tracer, fn_state);
    }
    fn block_506<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_506_0: read-var gs#40302:u8
        let s_506_0: bool = fn_state.gs_40302;
        // N s_506_1: branch s_506_0 b902 b507
        if s_506_0 {
            return block_902(state, tracer, fn_state);
        } else {
            return block_507(state, tracer, fn_state);
        };
    }
    fn block_507<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_507_0: const #1s : i64
        let s_507_0: i64 = 1;
        // C s_507_1: cast zx s_507_0 -> i
        let s_507_1: i128 = (i128::try_from(s_507_0).unwrap());
        // S s_507_2: call __UNKNOWN_bits(s_507_1)
        let s_507_2: Bits = u__UNKNOWN_bits(state, tracer, s_507_1);
        // C s_507_3: const #22528u : u32
        let s_507_3: u32 = 22528;
        // D s_507_4: read-reg s_507_3:struct
        let s_507_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_507_3 as isize);
            tracer.read_register(s_507_3 as isize, value);
            value
        };
        // C s_507_5: const #22528u : u32
        let s_507_5: u32 = 22528;
        // N s_507_6: write-reg s_507_5 <= s_507_4
        let s_507_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_507_5 as isize, s_507_4);
            tracer.write_register(s_507_5 as isize, s_507_4);
        };
        // N s_507_7: jump b508
        return block_508(state, tracer, fn_state);
    }
    fn block_508<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_508_0: read-var cold:u8
        let s_508_0: bool = fn_state.cold;
        // D s_508_1: not s_508_0
        let s_508_1: bool = !s_508_0;
        // N s_508_2: branch s_508_1 b901 b509
        if s_508_1 {
            return block_901(state, tracer, fn_state);
        } else {
            return block_509(state, tracer, fn_state);
        };
    }
    fn block_509<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_509_0: const #0u : u8
        let s_509_0: bool = false;
        // D s_509_1: write-var gs#40303 <= s_509_0
        fn_state.gs_40303 = s_509_0;
        // N s_509_2: jump b510
        return block_510(state, tracer, fn_state);
    }
    fn block_510<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_510_0: read-var gs#40303:u8
        let s_510_0: bool = fn_state.gs_40303;
        // N s_510_1: branch s_510_0 b900 b511
        if s_510_0 {
            return block_900(state, tracer, fn_state);
        } else {
            return block_511(state, tracer, fn_state);
        };
    }
    fn block_511<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_511_0: const #1s : i64
        let s_511_0: i64 = 1;
        // C s_511_1: cast zx s_511_0 -> i
        let s_511_1: i128 = (i128::try_from(s_511_0).unwrap());
        // S s_511_2: call __UNKNOWN_bits(s_511_1)
        let s_511_2: Bits = u__UNKNOWN_bits(state, tracer, s_511_1);
        // C s_511_3: const #22528u : u32
        let s_511_3: u32 = 22528;
        // D s_511_4: read-reg s_511_3:struct
        let s_511_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_511_3 as isize);
            tracer.read_register(s_511_3 as isize, value);
            value
        };
        // C s_511_5: const #22528u : u32
        let s_511_5: u32 = 22528;
        // N s_511_6: write-reg s_511_5 <= s_511_4
        let s_511_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_511_5 as isize, s_511_4);
            tracer.write_register(s_511_5 as isize, s_511_4);
        };
        // N s_511_7: jump b512
        return block_512(state, tracer, fn_state);
    }
    fn block_512<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_512_0: const #22528u : u32
        let s_512_0: u32 = 22528;
        // D s_512_1: read-reg s_512_0:struct
        let s_512_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_512_0 as isize);
            tracer.read_register(s_512_0 as isize, value);
            value
        };
        // C s_512_2: const #22528u : u32
        let s_512_2: u32 = 22528;
        // N s_512_3: write-reg s_512_2 <= s_512_1
        let s_512_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_512_2 as isize, s_512_1);
            tracer.write_register(s_512_2 as isize, s_512_1);
        };
        // D s_512_4: read-var cold:u8
        let s_512_4: bool = fn_state.cold;
        // D s_512_5: not s_512_4
        let s_512_5: bool = !s_512_4;
        // N s_512_6: branch s_512_5 b899 b513
        if s_512_5 {
            return block_899(state, tracer, fn_state);
        } else {
            return block_513(state, tracer, fn_state);
        };
    }
    fn block_513<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_513_0: const #0u : u8
        let s_513_0: bool = false;
        // D s_513_1: write-var gs#40307 <= s_513_0
        fn_state.gs_40307 = s_513_0;
        // N s_513_2: jump b514
        return block_514(state, tracer, fn_state);
    }
    fn block_514<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_514_0: read-var gs#40307:u8
        let s_514_0: bool = fn_state.gs_40307;
        // N s_514_1: branch s_514_0 b898 b515
        if s_514_0 {
            return block_898(state, tracer, fn_state);
        } else {
            return block_515(state, tracer, fn_state);
        };
    }
    fn block_515<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_515_0: const #1s : i64
        let s_515_0: i64 = 1;
        // C s_515_1: cast zx s_515_0 -> i
        let s_515_1: i128 = (i128::try_from(s_515_0).unwrap());
        // S s_515_2: call __UNKNOWN_bits(s_515_1)
        let s_515_2: Bits = u__UNKNOWN_bits(state, tracer, s_515_1);
        // C s_515_3: const #22528u : u32
        let s_515_3: u32 = 22528;
        // D s_515_4: read-reg s_515_3:struct
        let s_515_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_515_3 as isize);
            tracer.read_register(s_515_3 as isize, value);
            value
        };
        // C s_515_5: const #22528u : u32
        let s_515_5: u32 = 22528;
        // N s_515_6: write-reg s_515_5 <= s_515_4
        let s_515_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_515_5 as isize, s_515_4);
            tracer.write_register(s_515_5 as isize, s_515_4);
        };
        // N s_515_7: jump b516
        return block_516(state, tracer, fn_state);
    }
    fn block_516<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_516_0: read-var cold:u8
        let s_516_0: bool = fn_state.cold;
        // D s_516_1: not s_516_0
        let s_516_1: bool = !s_516_0;
        // N s_516_2: branch s_516_1 b897 b517
        if s_516_1 {
            return block_897(state, tracer, fn_state);
        } else {
            return block_517(state, tracer, fn_state);
        };
    }
    fn block_517<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_517_0: const #0u : u8
        let s_517_0: bool = false;
        // D s_517_1: write-var gs#40308 <= s_517_0
        fn_state.gs_40308 = s_517_0;
        // N s_517_2: jump b518
        return block_518(state, tracer, fn_state);
    }
    fn block_518<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_518_0: read-var gs#40308:u8
        let s_518_0: bool = fn_state.gs_40308;
        // N s_518_1: branch s_518_0 b896 b519
        if s_518_0 {
            return block_896(state, tracer, fn_state);
        } else {
            return block_519(state, tracer, fn_state);
        };
    }
    fn block_519<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_519_0: const #1s : i64
        let s_519_0: i64 = 1;
        // C s_519_1: cast zx s_519_0 -> i
        let s_519_1: i128 = (i128::try_from(s_519_0).unwrap());
        // S s_519_2: call __UNKNOWN_bits(s_519_1)
        let s_519_2: Bits = u__UNKNOWN_bits(state, tracer, s_519_1);
        // C s_519_3: const #22528u : u32
        let s_519_3: u32 = 22528;
        // D s_519_4: read-reg s_519_3:struct
        let s_519_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_519_3 as isize);
            tracer.read_register(s_519_3 as isize, value);
            value
        };
        // C s_519_5: const #22528u : u32
        let s_519_5: u32 = 22528;
        // N s_519_6: write-reg s_519_5 <= s_519_4
        let s_519_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_519_5 as isize, s_519_4);
            tracer.write_register(s_519_5 as isize, s_519_4);
        };
        // N s_519_7: jump b520
        return block_520(state, tracer, fn_state);
    }
    fn block_520<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_520_0: read-var cold:u8
        let s_520_0: bool = fn_state.cold;
        // D s_520_1: not s_520_0
        let s_520_1: bool = !s_520_0;
        // N s_520_2: branch s_520_1 b895 b521
        if s_520_1 {
            return block_895(state, tracer, fn_state);
        } else {
            return block_521(state, tracer, fn_state);
        };
    }
    fn block_521<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_521_0: const #0u : u8
        let s_521_0: bool = false;
        // D s_521_1: write-var gs#40309 <= s_521_0
        fn_state.gs_40309 = s_521_0;
        // N s_521_2: jump b522
        return block_522(state, tracer, fn_state);
    }
    fn block_522<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_522_0: read-var gs#40309:u8
        let s_522_0: bool = fn_state.gs_40309;
        // N s_522_1: branch s_522_0 b894 b523
        if s_522_0 {
            return block_894(state, tracer, fn_state);
        } else {
            return block_523(state, tracer, fn_state);
        };
    }
    fn block_523<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_523_0: const #1s : i64
        let s_523_0: i64 = 1;
        // C s_523_1: cast zx s_523_0 -> i
        let s_523_1: i128 = (i128::try_from(s_523_0).unwrap());
        // S s_523_2: call __UNKNOWN_bits(s_523_1)
        let s_523_2: Bits = u__UNKNOWN_bits(state, tracer, s_523_1);
        // C s_523_3: const #22528u : u32
        let s_523_3: u32 = 22528;
        // D s_523_4: read-reg s_523_3:struct
        let s_523_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_523_3 as isize);
            tracer.read_register(s_523_3 as isize, value);
            value
        };
        // C s_523_5: const #22528u : u32
        let s_523_5: u32 = 22528;
        // N s_523_6: write-reg s_523_5 <= s_523_4
        let s_523_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_523_5 as isize, s_523_4);
            tracer.write_register(s_523_5 as isize, s_523_4);
        };
        // N s_523_7: jump b524
        return block_524(state, tracer, fn_state);
    }
    fn block_524<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_524_0: read-var cold:u8
        let s_524_0: bool = fn_state.cold;
        // D s_524_1: not s_524_0
        let s_524_1: bool = !s_524_0;
        // N s_524_2: branch s_524_1 b893 b525
        if s_524_1 {
            return block_893(state, tracer, fn_state);
        } else {
            return block_525(state, tracer, fn_state);
        };
    }
    fn block_525<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_525_0: const #0u : u8
        let s_525_0: bool = false;
        // D s_525_1: write-var gs#40310 <= s_525_0
        fn_state.gs_40310 = s_525_0;
        // N s_525_2: jump b526
        return block_526(state, tracer, fn_state);
    }
    fn block_526<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_526_0: read-var gs#40310:u8
        let s_526_0: bool = fn_state.gs_40310;
        // N s_526_1: branch s_526_0 b892 b527
        if s_526_0 {
            return block_892(state, tracer, fn_state);
        } else {
            return block_527(state, tracer, fn_state);
        };
    }
    fn block_527<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_527_0: const #1s : i64
        let s_527_0: i64 = 1;
        // C s_527_1: cast zx s_527_0 -> i
        let s_527_1: i128 = (i128::try_from(s_527_0).unwrap());
        // S s_527_2: call __UNKNOWN_bits(s_527_1)
        let s_527_2: Bits = u__UNKNOWN_bits(state, tracer, s_527_1);
        // C s_527_3: const #22528u : u32
        let s_527_3: u32 = 22528;
        // D s_527_4: read-reg s_527_3:struct
        let s_527_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_527_3 as isize);
            tracer.read_register(s_527_3 as isize, value);
            value
        };
        // C s_527_5: const #22528u : u32
        let s_527_5: u32 = 22528;
        // N s_527_6: write-reg s_527_5 <= s_527_4
        let s_527_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_527_5 as isize, s_527_4);
            tracer.write_register(s_527_5 as isize, s_527_4);
        };
        // N s_527_7: jump b528
        return block_528(state, tracer, fn_state);
    }
    fn block_528<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_528_0: read-var cold:u8
        let s_528_0: bool = fn_state.cold;
        // D s_528_1: not s_528_0
        let s_528_1: bool = !s_528_0;
        // N s_528_2: branch s_528_1 b891 b529
        if s_528_1 {
            return block_891(state, tracer, fn_state);
        } else {
            return block_529(state, tracer, fn_state);
        };
    }
    fn block_529<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_529_0: const #0u : u8
        let s_529_0: bool = false;
        // D s_529_1: write-var gs#40311 <= s_529_0
        fn_state.gs_40311 = s_529_0;
        // N s_529_2: jump b530
        return block_530(state, tracer, fn_state);
    }
    fn block_530<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_530_0: read-var gs#40311:u8
        let s_530_0: bool = fn_state.gs_40311;
        // N s_530_1: branch s_530_0 b890 b531
        if s_530_0 {
            return block_890(state, tracer, fn_state);
        } else {
            return block_531(state, tracer, fn_state);
        };
    }
    fn block_531<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_531_0: const #1s : i64
        let s_531_0: i64 = 1;
        // C s_531_1: cast zx s_531_0 -> i
        let s_531_1: i128 = (i128::try_from(s_531_0).unwrap());
        // S s_531_2: call __UNKNOWN_bits(s_531_1)
        let s_531_2: Bits = u__UNKNOWN_bits(state, tracer, s_531_1);
        // C s_531_3: const #22528u : u32
        let s_531_3: u32 = 22528;
        // D s_531_4: read-reg s_531_3:struct
        let s_531_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_531_3 as isize);
            tracer.read_register(s_531_3 as isize, value);
            value
        };
        // C s_531_5: const #22528u : u32
        let s_531_5: u32 = 22528;
        // N s_531_6: write-reg s_531_5 <= s_531_4
        let s_531_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_531_5 as isize, s_531_4);
            tracer.write_register(s_531_5 as isize, s_531_4);
        };
        // N s_531_7: jump b532
        return block_532(state, tracer, fn_state);
    }
    fn block_532<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_532_0: read-var cold:u8
        let s_532_0: bool = fn_state.cold;
        // D s_532_1: not s_532_0
        let s_532_1: bool = !s_532_0;
        // N s_532_2: branch s_532_1 b889 b533
        if s_532_1 {
            return block_889(state, tracer, fn_state);
        } else {
            return block_533(state, tracer, fn_state);
        };
    }
    fn block_533<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_533_0: const #0u : u8
        let s_533_0: bool = false;
        // D s_533_1: write-var gs#40312 <= s_533_0
        fn_state.gs_40312 = s_533_0;
        // N s_533_2: jump b534
        return block_534(state, tracer, fn_state);
    }
    fn block_534<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_534_0: read-var gs#40312:u8
        let s_534_0: bool = fn_state.gs_40312;
        // N s_534_1: branch s_534_0 b888 b535
        if s_534_0 {
            return block_888(state, tracer, fn_state);
        } else {
            return block_535(state, tracer, fn_state);
        };
    }
    fn block_535<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_535_0: const #1s : i64
        let s_535_0: i64 = 1;
        // C s_535_1: cast zx s_535_0 -> i
        let s_535_1: i128 = (i128::try_from(s_535_0).unwrap());
        // S s_535_2: call __UNKNOWN_bits(s_535_1)
        let s_535_2: Bits = u__UNKNOWN_bits(state, tracer, s_535_1);
        // C s_535_3: const #22528u : u32
        let s_535_3: u32 = 22528;
        // D s_535_4: read-reg s_535_3:struct
        let s_535_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_535_3 as isize);
            tracer.read_register(s_535_3 as isize, value);
            value
        };
        // C s_535_5: const #22528u : u32
        let s_535_5: u32 = 22528;
        // N s_535_6: write-reg s_535_5 <= s_535_4
        let s_535_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_535_5 as isize, s_535_4);
            tracer.write_register(s_535_5 as isize, s_535_4);
        };
        // N s_535_7: jump b536
        return block_536(state, tracer, fn_state);
    }
    fn block_536<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_536_0: read-var cold:u8
        let s_536_0: bool = fn_state.cold;
        // D s_536_1: not s_536_0
        let s_536_1: bool = !s_536_0;
        // N s_536_2: branch s_536_1 b887 b537
        if s_536_1 {
            return block_887(state, tracer, fn_state);
        } else {
            return block_537(state, tracer, fn_state);
        };
    }
    fn block_537<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_537_0: const #0u : u8
        let s_537_0: bool = false;
        // D s_537_1: write-var gs#40313 <= s_537_0
        fn_state.gs_40313 = s_537_0;
        // N s_537_2: jump b538
        return block_538(state, tracer, fn_state);
    }
    fn block_538<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_538_0: read-var gs#40313:u8
        let s_538_0: bool = fn_state.gs_40313;
        // N s_538_1: branch s_538_0 b886 b539
        if s_538_0 {
            return block_886(state, tracer, fn_state);
        } else {
            return block_539(state, tracer, fn_state);
        };
    }
    fn block_539<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_539_0: const #1s : i64
        let s_539_0: i64 = 1;
        // C s_539_1: cast zx s_539_0 -> i
        let s_539_1: i128 = (i128::try_from(s_539_0).unwrap());
        // S s_539_2: call __UNKNOWN_bits(s_539_1)
        let s_539_2: Bits = u__UNKNOWN_bits(state, tracer, s_539_1);
        // C s_539_3: const #22528u : u32
        let s_539_3: u32 = 22528;
        // D s_539_4: read-reg s_539_3:struct
        let s_539_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_539_3 as isize);
            tracer.read_register(s_539_3 as isize, value);
            value
        };
        // C s_539_5: const #22528u : u32
        let s_539_5: u32 = 22528;
        // N s_539_6: write-reg s_539_5 <= s_539_4
        let s_539_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_539_5 as isize, s_539_4);
            tracer.write_register(s_539_5 as isize, s_539_4);
        };
        // N s_539_7: jump b540
        return block_540(state, tracer, fn_state);
    }
    fn block_540<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_540_0: read-var cold:u8
        let s_540_0: bool = fn_state.cold;
        // D s_540_1: not s_540_0
        let s_540_1: bool = !s_540_0;
        // N s_540_2: branch s_540_1 b885 b541
        if s_540_1 {
            return block_885(state, tracer, fn_state);
        } else {
            return block_541(state, tracer, fn_state);
        };
    }
    fn block_541<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_541_0: const #0u : u8
        let s_541_0: bool = false;
        // D s_541_1: write-var gs#40314 <= s_541_0
        fn_state.gs_40314 = s_541_0;
        // N s_541_2: jump b542
        return block_542(state, tracer, fn_state);
    }
    fn block_542<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_542_0: read-var gs#40314:u8
        let s_542_0: bool = fn_state.gs_40314;
        // N s_542_1: branch s_542_0 b884 b543
        if s_542_0 {
            return block_884(state, tracer, fn_state);
        } else {
            return block_543(state, tracer, fn_state);
        };
    }
    fn block_543<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_543_0: const #1s : i64
        let s_543_0: i64 = 1;
        // C s_543_1: cast zx s_543_0 -> i
        let s_543_1: i128 = (i128::try_from(s_543_0).unwrap());
        // S s_543_2: call __UNKNOWN_bits(s_543_1)
        let s_543_2: Bits = u__UNKNOWN_bits(state, tracer, s_543_1);
        // C s_543_3: const #22528u : u32
        let s_543_3: u32 = 22528;
        // D s_543_4: read-reg s_543_3:struct
        let s_543_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_543_3 as isize);
            tracer.read_register(s_543_3 as isize, value);
            value
        };
        // C s_543_5: const #22528u : u32
        let s_543_5: u32 = 22528;
        // N s_543_6: write-reg s_543_5 <= s_543_4
        let s_543_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_543_5 as isize, s_543_4);
            tracer.write_register(s_543_5 as isize, s_543_4);
        };
        // N s_543_7: jump b544
        return block_544(state, tracer, fn_state);
    }
    fn block_544<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_544_0: read-var cold:u8
        let s_544_0: bool = fn_state.cold;
        // D s_544_1: not s_544_0
        let s_544_1: bool = !s_544_0;
        // N s_544_2: branch s_544_1 b883 b545
        if s_544_1 {
            return block_883(state, tracer, fn_state);
        } else {
            return block_545(state, tracer, fn_state);
        };
    }
    fn block_545<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_545_0: const #0u : u8
        let s_545_0: bool = false;
        // D s_545_1: write-var gs#40315 <= s_545_0
        fn_state.gs_40315 = s_545_0;
        // N s_545_2: jump b546
        return block_546(state, tracer, fn_state);
    }
    fn block_546<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_546_0: read-var gs#40315:u8
        let s_546_0: bool = fn_state.gs_40315;
        // N s_546_1: branch s_546_0 b882 b547
        if s_546_0 {
            return block_882(state, tracer, fn_state);
        } else {
            return block_547(state, tracer, fn_state);
        };
    }
    fn block_547<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_547_0: const #1s : i64
        let s_547_0: i64 = 1;
        // C s_547_1: cast zx s_547_0 -> i
        let s_547_1: i128 = (i128::try_from(s_547_0).unwrap());
        // S s_547_2: call __UNKNOWN_bits(s_547_1)
        let s_547_2: Bits = u__UNKNOWN_bits(state, tracer, s_547_1);
        // C s_547_3: const #22528u : u32
        let s_547_3: u32 = 22528;
        // D s_547_4: read-reg s_547_3:struct
        let s_547_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_547_3 as isize);
            tracer.read_register(s_547_3 as isize, value);
            value
        };
        // C s_547_5: const #22528u : u32
        let s_547_5: u32 = 22528;
        // N s_547_6: write-reg s_547_5 <= s_547_4
        let s_547_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_547_5 as isize, s_547_4);
            tracer.write_register(s_547_5 as isize, s_547_4);
        };
        // N s_547_7: jump b548
        return block_548(state, tracer, fn_state);
    }
    fn block_548<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_548_0: read-var cold:u8
        let s_548_0: bool = fn_state.cold;
        // D s_548_1: not s_548_0
        let s_548_1: bool = !s_548_0;
        // N s_548_2: branch s_548_1 b881 b549
        if s_548_1 {
            return block_881(state, tracer, fn_state);
        } else {
            return block_549(state, tracer, fn_state);
        };
    }
    fn block_549<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_549_0: const #0u : u8
        let s_549_0: bool = false;
        // D s_549_1: write-var gs#40316 <= s_549_0
        fn_state.gs_40316 = s_549_0;
        // N s_549_2: jump b550
        return block_550(state, tracer, fn_state);
    }
    fn block_550<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_550_0: read-var gs#40316:u8
        let s_550_0: bool = fn_state.gs_40316;
        // N s_550_1: branch s_550_0 b880 b551
        if s_550_0 {
            return block_880(state, tracer, fn_state);
        } else {
            return block_551(state, tracer, fn_state);
        };
    }
    fn block_551<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_551_0: const #1s : i64
        let s_551_0: i64 = 1;
        // C s_551_1: cast zx s_551_0 -> i
        let s_551_1: i128 = (i128::try_from(s_551_0).unwrap());
        // S s_551_2: call __UNKNOWN_bits(s_551_1)
        let s_551_2: Bits = u__UNKNOWN_bits(state, tracer, s_551_1);
        // C s_551_3: const #22528u : u32
        let s_551_3: u32 = 22528;
        // D s_551_4: read-reg s_551_3:struct
        let s_551_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_551_3 as isize);
            tracer.read_register(s_551_3 as isize, value);
            value
        };
        // C s_551_5: const #22528u : u32
        let s_551_5: u32 = 22528;
        // N s_551_6: write-reg s_551_5 <= s_551_4
        let s_551_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_551_5 as isize, s_551_4);
            tracer.write_register(s_551_5 as isize, s_551_4);
        };
        // N s_551_7: jump b552
        return block_552(state, tracer, fn_state);
    }
    fn block_552<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_552_0: read-var cold:u8
        let s_552_0: bool = fn_state.cold;
        // D s_552_1: not s_552_0
        let s_552_1: bool = !s_552_0;
        // N s_552_2: branch s_552_1 b879 b553
        if s_552_1 {
            return block_879(state, tracer, fn_state);
        } else {
            return block_553(state, tracer, fn_state);
        };
    }
    fn block_553<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_553_0: const #0u : u8
        let s_553_0: bool = false;
        // D s_553_1: write-var gs#40317 <= s_553_0
        fn_state.gs_40317 = s_553_0;
        // N s_553_2: jump b554
        return block_554(state, tracer, fn_state);
    }
    fn block_554<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_554_0: read-var gs#40317:u8
        let s_554_0: bool = fn_state.gs_40317;
        // N s_554_1: branch s_554_0 b878 b555
        if s_554_0 {
            return block_878(state, tracer, fn_state);
        } else {
            return block_555(state, tracer, fn_state);
        };
    }
    fn block_555<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_555_0: const #1s : i64
        let s_555_0: i64 = 1;
        // C s_555_1: cast zx s_555_0 -> i
        let s_555_1: i128 = (i128::try_from(s_555_0).unwrap());
        // S s_555_2: call __UNKNOWN_bits(s_555_1)
        let s_555_2: Bits = u__UNKNOWN_bits(state, tracer, s_555_1);
        // C s_555_3: const #22528u : u32
        let s_555_3: u32 = 22528;
        // D s_555_4: read-reg s_555_3:struct
        let s_555_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_555_3 as isize);
            tracer.read_register(s_555_3 as isize, value);
            value
        };
        // C s_555_5: const #22528u : u32
        let s_555_5: u32 = 22528;
        // N s_555_6: write-reg s_555_5 <= s_555_4
        let s_555_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_555_5 as isize, s_555_4);
            tracer.write_register(s_555_5 as isize, s_555_4);
        };
        // N s_555_7: jump b556
        return block_556(state, tracer, fn_state);
    }
    fn block_556<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_556_0: read-var cold:u8
        let s_556_0: bool = fn_state.cold;
        // D s_556_1: not s_556_0
        let s_556_1: bool = !s_556_0;
        // N s_556_2: branch s_556_1 b877 b557
        if s_556_1 {
            return block_877(state, tracer, fn_state);
        } else {
            return block_557(state, tracer, fn_state);
        };
    }
    fn block_557<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_557_0: const #0u : u8
        let s_557_0: bool = false;
        // D s_557_1: write-var gs#40318 <= s_557_0
        fn_state.gs_40318 = s_557_0;
        // N s_557_2: jump b558
        return block_558(state, tracer, fn_state);
    }
    fn block_558<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_558_0: read-var gs#40318:u8
        let s_558_0: bool = fn_state.gs_40318;
        // N s_558_1: branch s_558_0 b876 b559
        if s_558_0 {
            return block_876(state, tracer, fn_state);
        } else {
            return block_559(state, tracer, fn_state);
        };
    }
    fn block_559<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_559_0: const #1s : i64
        let s_559_0: i64 = 1;
        // C s_559_1: cast zx s_559_0 -> i
        let s_559_1: i128 = (i128::try_from(s_559_0).unwrap());
        // S s_559_2: call __UNKNOWN_bits(s_559_1)
        let s_559_2: Bits = u__UNKNOWN_bits(state, tracer, s_559_1);
        // C s_559_3: const #22528u : u32
        let s_559_3: u32 = 22528;
        // D s_559_4: read-reg s_559_3:struct
        let s_559_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_559_3 as isize);
            tracer.read_register(s_559_3 as isize, value);
            value
        };
        // C s_559_5: const #22528u : u32
        let s_559_5: u32 = 22528;
        // N s_559_6: write-reg s_559_5 <= s_559_4
        let s_559_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_559_5 as isize, s_559_4);
            tracer.write_register(s_559_5 as isize, s_559_4);
        };
        // N s_559_7: jump b560
        return block_560(state, tracer, fn_state);
    }
    fn block_560<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_560_0: const #10600u : u32
        let s_560_0: u32 = 10600;
        // D s_560_1: read-reg s_560_0:struct
        let s_560_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_560_0 as isize);
            tracer.read_register(s_560_0 as isize, value);
            value
        };
        // C s_560_2: const #10600u : u32
        let s_560_2: u32 = 10600;
        // N s_560_3: write-reg s_560_2 <= s_560_1
        let s_560_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_560_2 as isize, s_560_1);
            tracer.write_register(s_560_2 as isize, s_560_1);
        };
        // C s_560_4: const #15352u : u32
        let s_560_4: u32 = 15352;
        // D s_560_5: read-reg s_560_4:struct
        let s_560_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_560_4 as isize);
            tracer.read_register(s_560_4 as isize, value);
            value
        };
        // C s_560_6: const #15352u : u32
        let s_560_6: u32 = 15352;
        // N s_560_7: write-reg s_560_6 <= s_560_5
        let s_560_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_560_6 as isize, s_560_5);
            tracer.write_register(s_560_6 as isize, s_560_5);
        };
        // C s_560_8: const #16376u : u32
        let s_560_8: u32 = 16376;
        // D s_560_9: read-reg s_560_8:struct
        let s_560_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_560_8 as isize);
            tracer.read_register(s_560_8 as isize, value);
            value
        };
        // C s_560_10: const #16376u : u32
        let s_560_10: u32 = 16376;
        // N s_560_11: write-reg s_560_10 <= s_560_9
        let s_560_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_560_10 as isize, s_560_9);
            tracer.write_register(s_560_10 as isize, s_560_9);
        };
        // D s_560_12: read-var cold:u8
        let s_560_12: bool = fn_state.cold;
        // D s_560_13: not s_560_12
        let s_560_13: bool = !s_560_12;
        // N s_560_14: branch s_560_13 b875 b561
        if s_560_13 {
            return block_875(state, tracer, fn_state);
        } else {
            return block_561(state, tracer, fn_state);
        };
    }
    fn block_561<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_561_0: const #0u : u8
        let s_561_0: bool = false;
        // D s_561_1: write-var gs#40328 <= s_561_0
        fn_state.gs_40328 = s_561_0;
        // N s_561_2: jump b562
        return block_562(state, tracer, fn_state);
    }
    fn block_562<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_562_0: read-var gs#40328:u8
        let s_562_0: bool = fn_state.gs_40328;
        // N s_562_1: branch s_562_0 b874 b563
        if s_562_0 {
            return block_874(state, tracer, fn_state);
        } else {
            return block_563(state, tracer, fn_state);
        };
    }
    fn block_563<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_563_0: const #1s : i64
        let s_563_0: i64 = 1;
        // C s_563_1: cast zx s_563_0 -> i
        let s_563_1: i128 = (i128::try_from(s_563_0).unwrap());
        // S s_563_2: call __UNKNOWN_bits(s_563_1)
        let s_563_2: Bits = u__UNKNOWN_bits(state, tracer, s_563_1);
        // C s_563_3: const #16376u : u32
        let s_563_3: u32 = 16376;
        // D s_563_4: read-reg s_563_3:struct
        let s_563_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_563_3 as isize);
            tracer.read_register(s_563_3 as isize, value);
            value
        };
        // C s_563_5: const #16376u : u32
        let s_563_5: u32 = 16376;
        // N s_563_6: write-reg s_563_5 <= s_563_4
        let s_563_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_563_5 as isize, s_563_4);
            tracer.write_register(s_563_5 as isize, s_563_4);
        };
        // N s_563_7: jump b564
        return block_564(state, tracer, fn_state);
    }
    fn block_564<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_564_0: const #0u : u8
        let s_564_0: bool = false;
        // S s_564_1: call Bit(s_564_0)
        let s_564_1: bool = Bit(state, tracer, s_564_0);
        // C s_564_2: const #16376u : u32
        let s_564_2: u32 = 16376;
        // D s_564_3: read-reg s_564_2:struct
        let s_564_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_564_2 as isize);
            tracer.read_register(s_564_2 as isize, value);
            value
        };
        // C s_564_4: const #16376u : u32
        let s_564_4: u32 = 16376;
        // N s_564_5: write-reg s_564_4 <= s_564_3
        let s_564_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_564_4 as isize, s_564_3);
            tracer.write_register(s_564_4 as isize, s_564_3);
        };
        // D s_564_6: read-var cold:u8
        let s_564_6: bool = fn_state.cold;
        // D s_564_7: not s_564_6
        let s_564_7: bool = !s_564_6;
        // N s_564_8: branch s_564_7 b873 b565
        if s_564_7 {
            return block_873(state, tracer, fn_state);
        } else {
            return block_565(state, tracer, fn_state);
        };
    }
    fn block_565<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_565_0: const #0u : u8
        let s_565_0: bool = false;
        // D s_565_1: write-var gs#40331 <= s_565_0
        fn_state.gs_40331 = s_565_0;
        // N s_565_2: jump b566
        return block_566(state, tracer, fn_state);
    }
    fn block_566<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_566_0: read-var gs#40331:u8
        let s_566_0: bool = fn_state.gs_40331;
        // N s_566_1: branch s_566_0 b872 b567
        if s_566_0 {
            return block_872(state, tracer, fn_state);
        } else {
            return block_567(state, tracer, fn_state);
        };
    }
    fn block_567<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_567_0: const #1s : i64
        let s_567_0: i64 = 1;
        // C s_567_1: cast zx s_567_0 -> i
        let s_567_1: i128 = (i128::try_from(s_567_0).unwrap());
        // S s_567_2: call __UNKNOWN_bits(s_567_1)
        let s_567_2: Bits = u__UNKNOWN_bits(state, tracer, s_567_1);
        // C s_567_3: const #16376u : u32
        let s_567_3: u32 = 16376;
        // D s_567_4: read-reg s_567_3:struct
        let s_567_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_567_3 as isize);
            tracer.read_register(s_567_3 as isize, value);
            value
        };
        // C s_567_5: const #16376u : u32
        let s_567_5: u32 = 16376;
        // N s_567_6: write-reg s_567_5 <= s_567_4
        let s_567_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_567_5 as isize, s_567_4);
            tracer.write_register(s_567_5 as isize, s_567_4);
        };
        // N s_567_7: jump b568
        return block_568(state, tracer, fn_state);
    }
    fn block_568<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_568_0: const #90168u : u32
        let s_568_0: u32 = 90168;
        // D s_568_1: read-reg s_568_0:struct
        let s_568_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_0 as isize);
            tracer.read_register(s_568_0 as isize, value);
            value
        };
        // C s_568_2: const #90168u : u32
        let s_568_2: u32 = 90168;
        // N s_568_3: write-reg s_568_2 <= s_568_1
        let s_568_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_2 as isize, s_568_1);
            tracer.write_register(s_568_2 as isize, s_568_1);
        };
        // C s_568_4: const #20464u : u32
        let s_568_4: u32 = 20464;
        // D s_568_5: read-reg s_568_4:struct
        let s_568_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_4 as isize);
            tracer.read_register(s_568_4 as isize, value);
            value
        };
        // C s_568_6: const #20464u : u32
        let s_568_6: u32 = 20464;
        // N s_568_7: write-reg s_568_6 <= s_568_5
        let s_568_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_6 as isize, s_568_5);
            tracer.write_register(s_568_6 as isize, s_568_5);
        };
        // C s_568_8: const #20464u : u32
        let s_568_8: u32 = 20464;
        // D s_568_9: read-reg s_568_8:struct
        let s_568_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_8 as isize);
            tracer.read_register(s_568_8 as isize, value);
            value
        };
        // C s_568_10: const #20464u : u32
        let s_568_10: u32 = 20464;
        // N s_568_11: write-reg s_568_10 <= s_568_9
        let s_568_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_10 as isize, s_568_9);
            tracer.write_register(s_568_10 as isize, s_568_9);
        };
        // C s_568_12: const #20464u : u32
        let s_568_12: u32 = 20464;
        // D s_568_13: read-reg s_568_12:struct
        let s_568_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_12 as isize);
            tracer.read_register(s_568_12 as isize, value);
            value
        };
        // C s_568_14: const #20464u : u32
        let s_568_14: u32 = 20464;
        // N s_568_15: write-reg s_568_14 <= s_568_13
        let s_568_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_14 as isize, s_568_13);
            tracer.write_register(s_568_14 as isize, s_568_13);
        };
        // C s_568_16: const #90816u : u32
        let s_568_16: u32 = 90816;
        // D s_568_17: read-reg s_568_16:struct
        let s_568_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_16 as isize);
            tracer.read_register(s_568_16 as isize, value);
            value
        };
        // C s_568_18: const #90816u : u32
        let s_568_18: u32 = 90816;
        // N s_568_19: write-reg s_568_18 <= s_568_17
        let s_568_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_18 as isize, s_568_17);
            tracer.write_register(s_568_18 as isize, s_568_17);
        };
        // C s_568_20: const #90816u : u32
        let s_568_20: u32 = 90816;
        // D s_568_21: read-reg s_568_20:struct
        let s_568_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_20 as isize);
            tracer.read_register(s_568_20 as isize, value);
            value
        };
        // C s_568_22: const #90816u : u32
        let s_568_22: u32 = 90816;
        // N s_568_23: write-reg s_568_22 <= s_568_21
        let s_568_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_22 as isize, s_568_21);
            tracer.write_register(s_568_22 as isize, s_568_21);
        };
        // C s_568_24: const #16552u : u32
        let s_568_24: u32 = 16552;
        // D s_568_25: read-reg s_568_24:struct
        let s_568_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_24 as isize);
            tracer.read_register(s_568_24 as isize, value);
            value
        };
        // C s_568_26: const #16552u : u32
        let s_568_26: u32 = 16552;
        // N s_568_27: write-reg s_568_26 <= s_568_25
        let s_568_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_26 as isize, s_568_25);
            tracer.write_register(s_568_26 as isize, s_568_25);
        };
        // C s_568_28: const #16552u : u32
        let s_568_28: u32 = 16552;
        // D s_568_29: read-reg s_568_28:struct
        let s_568_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_28 as isize);
            tracer.read_register(s_568_28 as isize, value);
            value
        };
        // C s_568_30: const #16552u : u32
        let s_568_30: u32 = 16552;
        // N s_568_31: write-reg s_568_30 <= s_568_29
        let s_568_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_30 as isize, s_568_29);
            tracer.write_register(s_568_30 as isize, s_568_29);
        };
        // C s_568_32: const #20976u : u32
        let s_568_32: u32 = 20976;
        // D s_568_33: read-reg s_568_32:struct
        let s_568_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_32 as isize);
            tracer.read_register(s_568_32 as isize, value);
            value
        };
        // C s_568_34: const #20976u : u32
        let s_568_34: u32 = 20976;
        // N s_568_35: write-reg s_568_34 <= s_568_33
        let s_568_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_34 as isize, s_568_33);
            tracer.write_register(s_568_34 as isize, s_568_33);
        };
        // C s_568_36: const #20976u : u32
        let s_568_36: u32 = 20976;
        // D s_568_37: read-reg s_568_36:struct
        let s_568_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_36 as isize);
            tracer.read_register(s_568_36 as isize, value);
            value
        };
        // C s_568_38: const #20976u : u32
        let s_568_38: u32 = 20976;
        // N s_568_39: write-reg s_568_38 <= s_568_37
        let s_568_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_38 as isize, s_568_37);
            tracer.write_register(s_568_38 as isize, s_568_37);
        };
        // C s_568_40: const #20976u : u32
        let s_568_40: u32 = 20976;
        // D s_568_41: read-reg s_568_40:struct
        let s_568_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_40 as isize);
            tracer.read_register(s_568_40 as isize, value);
            value
        };
        // C s_568_42: const #20976u : u32
        let s_568_42: u32 = 20976;
        // N s_568_43: write-reg s_568_42 <= s_568_41
        let s_568_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_42 as isize, s_568_41);
            tracer.write_register(s_568_42 as isize, s_568_41);
        };
        // C s_568_44: const #0u : u8
        let s_568_44: bool = false;
        // S s_568_45: call Bit(s_568_44)
        let s_568_45: bool = Bit(state, tracer, s_568_44);
        // C s_568_46: const #90704u : u32
        let s_568_46: u32 = 90704;
        // D s_568_47: read-reg s_568_46:struct
        let s_568_47: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_46 as isize);
            tracer.read_register(s_568_46 as isize, value);
            value
        };
        // C s_568_48: const #90704u : u32
        let s_568_48: u32 = 90704;
        // N s_568_49: write-reg s_568_48 <= s_568_47
        let s_568_49: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_48 as isize, s_568_47);
            tracer.write_register(s_568_48 as isize, s_568_47);
        };
        // C s_568_50: const #90704u : u32
        let s_568_50: u32 = 90704;
        // D s_568_51: read-reg s_568_50:struct
        let s_568_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_50 as isize);
            tracer.read_register(s_568_50 as isize, value);
            value
        };
        // C s_568_52: const #90704u : u32
        let s_568_52: u32 = 90704;
        // N s_568_53: write-reg s_568_52 <= s_568_51
        let s_568_53: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_52 as isize, s_568_51);
            tracer.write_register(s_568_52 as isize, s_568_51);
        };
        // C s_568_54: const #90704u : u32
        let s_568_54: u32 = 90704;
        // D s_568_55: read-reg s_568_54:struct
        let s_568_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_54 as isize);
            tracer.read_register(s_568_54 as isize, value);
            value
        };
        // C s_568_56: const #90704u : u32
        let s_568_56: u32 = 90704;
        // N s_568_57: write-reg s_568_56 <= s_568_55
        let s_568_57: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_56 as isize, s_568_55);
            tracer.write_register(s_568_56 as isize, s_568_55);
        };
        // C s_568_58: const #0u : u8
        let s_568_58: bool = false;
        // S s_568_59: call Bit(s_568_58)
        let s_568_59: bool = Bit(state, tracer, s_568_58);
        // C s_568_60: const #90704u : u32
        let s_568_60: u32 = 90704;
        // D s_568_61: read-reg s_568_60:struct
        let s_568_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_60 as isize);
            tracer.read_register(s_568_60 as isize, value);
            value
        };
        // C s_568_62: const #90704u : u32
        let s_568_62: u32 = 90704;
        // N s_568_63: write-reg s_568_62 <= s_568_61
        let s_568_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_62 as isize, s_568_61);
            tracer.write_register(s_568_62 as isize, s_568_61);
        };
        // C s_568_64: const #0u : u8
        let s_568_64: bool = false;
        // S s_568_65: call Bit(s_568_64)
        let s_568_65: bool = Bit(state, tracer, s_568_64);
        // C s_568_66: const #90704u : u32
        let s_568_66: u32 = 90704;
        // D s_568_67: read-reg s_568_66:struct
        let s_568_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_66 as isize);
            tracer.read_register(s_568_66 as isize, value);
            value
        };
        // C s_568_68: const #90704u : u32
        let s_568_68: u32 = 90704;
        // N s_568_69: write-reg s_568_68 <= s_568_67
        let s_568_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_68 as isize, s_568_67);
            tracer.write_register(s_568_68 as isize, s_568_67);
        };
        // C s_568_70: const #90704u : u32
        let s_568_70: u32 = 90704;
        // D s_568_71: read-reg s_568_70:struct
        let s_568_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_70 as isize);
            tracer.read_register(s_568_70 as isize, value);
            value
        };
        // C s_568_72: const #90704u : u32
        let s_568_72: u32 = 90704;
        // N s_568_73: write-reg s_568_72 <= s_568_71
        let s_568_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_72 as isize, s_568_71);
            tracer.write_register(s_568_72 as isize, s_568_71);
        };
        // C s_568_74: const #90704u : u32
        let s_568_74: u32 = 90704;
        // D s_568_75: read-reg s_568_74:struct
        let s_568_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_74 as isize);
            tracer.read_register(s_568_74 as isize, value);
            value
        };
        // C s_568_76: const #90704u : u32
        let s_568_76: u32 = 90704;
        // N s_568_77: write-reg s_568_76 <= s_568_75
        let s_568_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_76 as isize, s_568_75);
            tracer.write_register(s_568_76 as isize, s_568_75);
        };
        // C s_568_78: const #90704u : u32
        let s_568_78: u32 = 90704;
        // D s_568_79: read-reg s_568_78:struct
        let s_568_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_78 as isize);
            tracer.read_register(s_568_78 as isize, value);
            value
        };
        // C s_568_80: const #90704u : u32
        let s_568_80: u32 = 90704;
        // N s_568_81: write-reg s_568_80 <= s_568_79
        let s_568_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_80 as isize, s_568_79);
            tracer.write_register(s_568_80 as isize, s_568_79);
        };
        // C s_568_82: const #90704u : u32
        let s_568_82: u32 = 90704;
        // D s_568_83: read-reg s_568_82:struct
        let s_568_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_82 as isize);
            tracer.read_register(s_568_82 as isize, value);
            value
        };
        // C s_568_84: const #90704u : u32
        let s_568_84: u32 = 90704;
        // N s_568_85: write-reg s_568_84 <= s_568_83
        let s_568_85: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_84 as isize, s_568_83);
            tracer.write_register(s_568_84 as isize, s_568_83);
        };
        // C s_568_86: const #0u : u8
        let s_568_86: bool = false;
        // S s_568_87: call Bit(s_568_86)
        let s_568_87: bool = Bit(state, tracer, s_568_86);
        // C s_568_88: const #90704u : u32
        let s_568_88: u32 = 90704;
        // D s_568_89: read-reg s_568_88:struct
        let s_568_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_88 as isize);
            tracer.read_register(s_568_88 as isize, value);
            value
        };
        // C s_568_90: const #90704u : u32
        let s_568_90: u32 = 90704;
        // N s_568_91: write-reg s_568_90 <= s_568_89
        let s_568_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_90 as isize, s_568_89);
            tracer.write_register(s_568_90 as isize, s_568_89);
        };
        // C s_568_92: const #90704u : u32
        let s_568_92: u32 = 90704;
        // D s_568_93: read-reg s_568_92:struct
        let s_568_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_92 as isize);
            tracer.read_register(s_568_92 as isize, value);
            value
        };
        // C s_568_94: const #90704u : u32
        let s_568_94: u32 = 90704;
        // N s_568_95: write-reg s_568_94 <= s_568_93
        let s_568_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_94 as isize, s_568_93);
            tracer.write_register(s_568_94 as isize, s_568_93);
        };
        // C s_568_96: const #10200u : u32
        let s_568_96: u32 = 10200;
        // D s_568_97: read-reg s_568_96:struct
        let s_568_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_96 as isize);
            tracer.read_register(s_568_96 as isize, value);
            value
        };
        // C s_568_98: const #10200u : u32
        let s_568_98: u32 = 10200;
        // N s_568_99: write-reg s_568_98 <= s_568_97
        let s_568_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_98 as isize, s_568_97);
            tracer.write_register(s_568_98 as isize, s_568_97);
        };
        // C s_568_100: const #10200u : u32
        let s_568_100: u32 = 10200;
        // D s_568_101: read-reg s_568_100:struct
        let s_568_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_100 as isize);
            tracer.read_register(s_568_100 as isize, value);
            value
        };
        // C s_568_102: const #10200u : u32
        let s_568_102: u32 = 10200;
        // N s_568_103: write-reg s_568_102 <= s_568_101
        let s_568_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_102 as isize, s_568_101);
            tracer.write_register(s_568_102 as isize, s_568_101);
        };
        // C s_568_104: const #10200u : u32
        let s_568_104: u32 = 10200;
        // D s_568_105: read-reg s_568_104:struct
        let s_568_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_104 as isize);
            tracer.read_register(s_568_104 as isize, value);
            value
        };
        // C s_568_106: const #10200u : u32
        let s_568_106: u32 = 10200;
        // N s_568_107: write-reg s_568_106 <= s_568_105
        let s_568_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_106 as isize, s_568_105);
            tracer.write_register(s_568_106 as isize, s_568_105);
        };
        // C s_568_108: const #10200u : u32
        let s_568_108: u32 = 10200;
        // D s_568_109: read-reg s_568_108:struct
        let s_568_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_108 as isize);
            tracer.read_register(s_568_108 as isize, value);
            value
        };
        // C s_568_110: const #10200u : u32
        let s_568_110: u32 = 10200;
        // N s_568_111: write-reg s_568_110 <= s_568_109
        let s_568_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_110 as isize, s_568_109);
            tracer.write_register(s_568_110 as isize, s_568_109);
        };
        // C s_568_112: const #90728u : u32
        let s_568_112: u32 = 90728;
        // D s_568_113: read-reg s_568_112:struct
        let s_568_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_112 as isize);
            tracer.read_register(s_568_112 as isize, value);
            value
        };
        // C s_568_114: const #90728u : u32
        let s_568_114: u32 = 90728;
        // N s_568_115: write-reg s_568_114 <= s_568_113
        let s_568_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_114 as isize, s_568_113);
            tracer.write_register(s_568_114 as isize, s_568_113);
        };
        // C s_568_116: const #90728u : u32
        let s_568_116: u32 = 90728;
        // D s_568_117: read-reg s_568_116:struct
        let s_568_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_116 as isize);
            tracer.read_register(s_568_116 as isize, value);
            value
        };
        // C s_568_118: const #90728u : u32
        let s_568_118: u32 = 90728;
        // N s_568_119: write-reg s_568_118 <= s_568_117
        let s_568_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_118 as isize, s_568_117);
            tracer.write_register(s_568_118 as isize, s_568_117);
        };
        // C s_568_120: const #0u : u8
        let s_568_120: bool = false;
        // S s_568_121: call Bit(s_568_120)
        let s_568_121: bool = Bit(state, tracer, s_568_120);
        // C s_568_122: const #17360u : u32
        let s_568_122: u32 = 17360;
        // D s_568_123: read-reg s_568_122:struct
        let s_568_123: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_122 as isize);
            tracer.read_register(s_568_122 as isize, value);
            value
        };
        // C s_568_124: const #17360u : u32
        let s_568_124: u32 = 17360;
        // N s_568_125: write-reg s_568_124 <= s_568_123
        let s_568_125: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_124 as isize, s_568_123);
            tracer.write_register(s_568_124 as isize, s_568_123);
        };
        // C s_568_126: const #17360u : u32
        let s_568_126: u32 = 17360;
        // D s_568_127: read-reg s_568_126:struct
        let s_568_127: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_126 as isize);
            tracer.read_register(s_568_126 as isize, value);
            value
        };
        // C s_568_128: const #17360u : u32
        let s_568_128: u32 = 17360;
        // N s_568_129: write-reg s_568_128 <= s_568_127
        let s_568_129: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_128 as isize, s_568_127);
            tracer.write_register(s_568_128 as isize, s_568_127);
        };
        // C s_568_130: const #17360u : u32
        let s_568_130: u32 = 17360;
        // D s_568_131: read-reg s_568_130:struct
        let s_568_131: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_130 as isize);
            tracer.read_register(s_568_130 as isize, value);
            value
        };
        // C s_568_132: const #17360u : u32
        let s_568_132: u32 = 17360;
        // N s_568_133: write-reg s_568_132 <= s_568_131
        let s_568_133: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_132 as isize, s_568_131);
            tracer.write_register(s_568_132 as isize, s_568_131);
        };
        // C s_568_134: const #17360u : u32
        let s_568_134: u32 = 17360;
        // D s_568_135: read-reg s_568_134:struct
        let s_568_135: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_134 as isize);
            tracer.read_register(s_568_134 as isize, value);
            value
        };
        // C s_568_136: const #17360u : u32
        let s_568_136: u32 = 17360;
        // N s_568_137: write-reg s_568_136 <= s_568_135
        let s_568_137: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_136 as isize, s_568_135);
            tracer.write_register(s_568_136 as isize, s_568_135);
        };
        // C s_568_138: const #17360u : u32
        let s_568_138: u32 = 17360;
        // D s_568_139: read-reg s_568_138:struct
        let s_568_139: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_138 as isize);
            tracer.read_register(s_568_138 as isize, value);
            value
        };
        // C s_568_140: const #17360u : u32
        let s_568_140: u32 = 17360;
        // N s_568_141: write-reg s_568_140 <= s_568_139
        let s_568_141: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_140 as isize, s_568_139);
            tracer.write_register(s_568_140 as isize, s_568_139);
        };
        // C s_568_142: const #17360u : u32
        let s_568_142: u32 = 17360;
        // D s_568_143: read-reg s_568_142:struct
        let s_568_143: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_142 as isize);
            tracer.read_register(s_568_142 as isize, value);
            value
        };
        // C s_568_144: const #17360u : u32
        let s_568_144: u32 = 17360;
        // N s_568_145: write-reg s_568_144 <= s_568_143
        let s_568_145: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_144 as isize, s_568_143);
            tracer.write_register(s_568_144 as isize, s_568_143);
        };
        // C s_568_146: const #17360u : u32
        let s_568_146: u32 = 17360;
        // D s_568_147: read-reg s_568_146:struct
        let s_568_147: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_146 as isize);
            tracer.read_register(s_568_146 as isize, value);
            value
        };
        // C s_568_148: const #17360u : u32
        let s_568_148: u32 = 17360;
        // N s_568_149: write-reg s_568_148 <= s_568_147
        let s_568_149: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_148 as isize, s_568_147);
            tracer.write_register(s_568_148 as isize, s_568_147);
        };
        // C s_568_150: const #17360u : u32
        let s_568_150: u32 = 17360;
        // D s_568_151: read-reg s_568_150:struct
        let s_568_151: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_150 as isize);
            tracer.read_register(s_568_150 as isize, value);
            value
        };
        // C s_568_152: const #17360u : u32
        let s_568_152: u32 = 17360;
        // N s_568_153: write-reg s_568_152 <= s_568_151
        let s_568_153: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_152 as isize, s_568_151);
            tracer.write_register(s_568_152 as isize, s_568_151);
        };
        // C s_568_154: const #17360u : u32
        let s_568_154: u32 = 17360;
        // D s_568_155: read-reg s_568_154:struct
        let s_568_155: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_154 as isize);
            tracer.read_register(s_568_154 as isize, value);
            value
        };
        // C s_568_156: const #17360u : u32
        let s_568_156: u32 = 17360;
        // N s_568_157: write-reg s_568_156 <= s_568_155
        let s_568_157: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_156 as isize, s_568_155);
            tracer.write_register(s_568_156 as isize, s_568_155);
        };
        // C s_568_158: const #0u : u8
        let s_568_158: bool = false;
        // S s_568_159: call Bit(s_568_158)
        let s_568_159: bool = Bit(state, tracer, s_568_158);
        // C s_568_160: const #17360u : u32
        let s_568_160: u32 = 17360;
        // D s_568_161: read-reg s_568_160:struct
        let s_568_161: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_160 as isize);
            tracer.read_register(s_568_160 as isize, value);
            value
        };
        // C s_568_162: const #17360u : u32
        let s_568_162: u32 = 17360;
        // N s_568_163: write-reg s_568_162 <= s_568_161
        let s_568_163: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_162 as isize, s_568_161);
            tracer.write_register(s_568_162 as isize, s_568_161);
        };
        // C s_568_164: const #17360u : u32
        let s_568_164: u32 = 17360;
        // D s_568_165: read-reg s_568_164:struct
        let s_568_165: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_164 as isize);
            tracer.read_register(s_568_164 as isize, value);
            value
        };
        // C s_568_166: const #17360u : u32
        let s_568_166: u32 = 17360;
        // N s_568_167: write-reg s_568_166 <= s_568_165
        let s_568_167: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_166 as isize, s_568_165);
            tracer.write_register(s_568_166 as isize, s_568_165);
        };
        // C s_568_168: const #17360u : u32
        let s_568_168: u32 = 17360;
        // D s_568_169: read-reg s_568_168:struct
        let s_568_169: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_168 as isize);
            tracer.read_register(s_568_168 as isize, value);
            value
        };
        // C s_568_170: const #17360u : u32
        let s_568_170: u32 = 17360;
        // N s_568_171: write-reg s_568_170 <= s_568_169
        let s_568_171: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_170 as isize, s_568_169);
            tracer.write_register(s_568_170 as isize, s_568_169);
        };
        // C s_568_172: const #17360u : u32
        let s_568_172: u32 = 17360;
        // D s_568_173: read-reg s_568_172:struct
        let s_568_173: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_172 as isize);
            tracer.read_register(s_568_172 as isize, value);
            value
        };
        // C s_568_174: const #17360u : u32
        let s_568_174: u32 = 17360;
        // N s_568_175: write-reg s_568_174 <= s_568_173
        let s_568_175: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_174 as isize, s_568_173);
            tracer.write_register(s_568_174 as isize, s_568_173);
        };
        // C s_568_176: const #0u : u8
        let s_568_176: bool = false;
        // S s_568_177: call Bit(s_568_176)
        let s_568_177: bool = Bit(state, tracer, s_568_176);
        // C s_568_178: const #17360u : u32
        let s_568_178: u32 = 17360;
        // D s_568_179: read-reg s_568_178:struct
        let s_568_179: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_178 as isize);
            tracer.read_register(s_568_178 as isize, value);
            value
        };
        // C s_568_180: const #17360u : u32
        let s_568_180: u32 = 17360;
        // N s_568_181: write-reg s_568_180 <= s_568_179
        let s_568_181: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_180 as isize, s_568_179);
            tracer.write_register(s_568_180 as isize, s_568_179);
        };
        // C s_568_182: const #17360u : u32
        let s_568_182: u32 = 17360;
        // D s_568_183: read-reg s_568_182:struct
        let s_568_183: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_182 as isize);
            tracer.read_register(s_568_182 as isize, value);
            value
        };
        // C s_568_184: const #17360u : u32
        let s_568_184: u32 = 17360;
        // N s_568_185: write-reg s_568_184 <= s_568_183
        let s_568_185: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_184 as isize, s_568_183);
            tracer.write_register(s_568_184 as isize, s_568_183);
        };
        // C s_568_186: const #17360u : u32
        let s_568_186: u32 = 17360;
        // D s_568_187: read-reg s_568_186:struct
        let s_568_187: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_186 as isize);
            tracer.read_register(s_568_186 as isize, value);
            value
        };
        // C s_568_188: const #17360u : u32
        let s_568_188: u32 = 17360;
        // N s_568_189: write-reg s_568_188 <= s_568_187
        let s_568_189: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_188 as isize, s_568_187);
            tracer.write_register(s_568_188 as isize, s_568_187);
        };
        // C s_568_190: const #17360u : u32
        let s_568_190: u32 = 17360;
        // D s_568_191: read-reg s_568_190:struct
        let s_568_191: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_190 as isize);
            tracer.read_register(s_568_190 as isize, value);
            value
        };
        // C s_568_192: const #17360u : u32
        let s_568_192: u32 = 17360;
        // N s_568_193: write-reg s_568_192 <= s_568_191
        let s_568_193: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_192 as isize, s_568_191);
            tracer.write_register(s_568_192 as isize, s_568_191);
        };
        // C s_568_194: const #17360u : u32
        let s_568_194: u32 = 17360;
        // D s_568_195: read-reg s_568_194:struct
        let s_568_195: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_194 as isize);
            tracer.read_register(s_568_194 as isize, value);
            value
        };
        // C s_568_196: const #17360u : u32
        let s_568_196: u32 = 17360;
        // N s_568_197: write-reg s_568_196 <= s_568_195
        let s_568_197: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_196 as isize, s_568_195);
            tracer.write_register(s_568_196 as isize, s_568_195);
        };
        // C s_568_198: const #17360u : u32
        let s_568_198: u32 = 17360;
        // D s_568_199: read-reg s_568_198:struct
        let s_568_199: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_198 as isize);
            tracer.read_register(s_568_198 as isize, value);
            value
        };
        // C s_568_200: const #17360u : u32
        let s_568_200: u32 = 17360;
        // N s_568_201: write-reg s_568_200 <= s_568_199
        let s_568_201: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_200 as isize, s_568_199);
            tracer.write_register(s_568_200 as isize, s_568_199);
        };
        // C s_568_202: const #17360u : u32
        let s_568_202: u32 = 17360;
        // D s_568_203: read-reg s_568_202:struct
        let s_568_203: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_202 as isize);
            tracer.read_register(s_568_202 as isize, value);
            value
        };
        // C s_568_204: const #17360u : u32
        let s_568_204: u32 = 17360;
        // N s_568_205: write-reg s_568_204 <= s_568_203
        let s_568_205: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_204 as isize, s_568_203);
            tracer.write_register(s_568_204 as isize, s_568_203);
        };
        // C s_568_206: const #0u : u8
        let s_568_206: bool = false;
        // S s_568_207: call Bit(s_568_206)
        let s_568_207: bool = Bit(state, tracer, s_568_206);
        // C s_568_208: const #17360u : u32
        let s_568_208: u32 = 17360;
        // D s_568_209: read-reg s_568_208:struct
        let s_568_209: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_208 as isize);
            tracer.read_register(s_568_208 as isize, value);
            value
        };
        // C s_568_210: const #17360u : u32
        let s_568_210: u32 = 17360;
        // N s_568_211: write-reg s_568_210 <= s_568_209
        let s_568_211: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_210 as isize, s_568_209);
            tracer.write_register(s_568_210 as isize, s_568_209);
        };
        // C s_568_212: const #17360u : u32
        let s_568_212: u32 = 17360;
        // D s_568_213: read-reg s_568_212:struct
        let s_568_213: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_212 as isize);
            tracer.read_register(s_568_212 as isize, value);
            value
        };
        // C s_568_214: const #17360u : u32
        let s_568_214: u32 = 17360;
        // N s_568_215: write-reg s_568_214 <= s_568_213
        let s_568_215: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_214 as isize, s_568_213);
            tracer.write_register(s_568_214 as isize, s_568_213);
        };
        // C s_568_216: const #17360u : u32
        let s_568_216: u32 = 17360;
        // D s_568_217: read-reg s_568_216:struct
        let s_568_217: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_216 as isize);
            tracer.read_register(s_568_216 as isize, value);
            value
        };
        // C s_568_218: const #17360u : u32
        let s_568_218: u32 = 17360;
        // N s_568_219: write-reg s_568_218 <= s_568_217
        let s_568_219: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_218 as isize, s_568_217);
            tracer.write_register(s_568_218 as isize, s_568_217);
        };
        // C s_568_220: const #17360u : u32
        let s_568_220: u32 = 17360;
        // D s_568_221: read-reg s_568_220:struct
        let s_568_221: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_220 as isize);
            tracer.read_register(s_568_220 as isize, value);
            value
        };
        // C s_568_222: const #17360u : u32
        let s_568_222: u32 = 17360;
        // N s_568_223: write-reg s_568_222 <= s_568_221
        let s_568_223: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_222 as isize, s_568_221);
            tracer.write_register(s_568_222 as isize, s_568_221);
        };
        // C s_568_224: const #0u : u8
        let s_568_224: bool = false;
        // S s_568_225: call Bit(s_568_224)
        let s_568_225: bool = Bit(state, tracer, s_568_224);
        // C s_568_226: const #17360u : u32
        let s_568_226: u32 = 17360;
        // D s_568_227: read-reg s_568_226:struct
        let s_568_227: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_226 as isize);
            tracer.read_register(s_568_226 as isize, value);
            value
        };
        // C s_568_228: const #17360u : u32
        let s_568_228: u32 = 17360;
        // N s_568_229: write-reg s_568_228 <= s_568_227
        let s_568_229: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_228 as isize, s_568_227);
            tracer.write_register(s_568_228 as isize, s_568_227);
        };
        // C s_568_230: const #17360u : u32
        let s_568_230: u32 = 17360;
        // D s_568_231: read-reg s_568_230:struct
        let s_568_231: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_230 as isize);
            tracer.read_register(s_568_230 as isize, value);
            value
        };
        // C s_568_232: const #17360u : u32
        let s_568_232: u32 = 17360;
        // N s_568_233: write-reg s_568_232 <= s_568_231
        let s_568_233: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_232 as isize, s_568_231);
            tracer.write_register(s_568_232 as isize, s_568_231);
        };
        // C s_568_234: const #17360u : u32
        let s_568_234: u32 = 17360;
        // D s_568_235: read-reg s_568_234:struct
        let s_568_235: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_234 as isize);
            tracer.read_register(s_568_234 as isize, value);
            value
        };
        // C s_568_236: const #17360u : u32
        let s_568_236: u32 = 17360;
        // N s_568_237: write-reg s_568_236 <= s_568_235
        let s_568_237: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_236 as isize, s_568_235);
            tracer.write_register(s_568_236 as isize, s_568_235);
        };
        // C s_568_238: const #17360u : u32
        let s_568_238: u32 = 17360;
        // D s_568_239: read-reg s_568_238:struct
        let s_568_239: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_238 as isize);
            tracer.read_register(s_568_238 as isize, value);
            value
        };
        // C s_568_240: const #17360u : u32
        let s_568_240: u32 = 17360;
        // N s_568_241: write-reg s_568_240 <= s_568_239
        let s_568_241: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_240 as isize, s_568_239);
            tracer.write_register(s_568_240 as isize, s_568_239);
        };
        // C s_568_242: const #17360u : u32
        let s_568_242: u32 = 17360;
        // D s_568_243: read-reg s_568_242:struct
        let s_568_243: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_242 as isize);
            tracer.read_register(s_568_242 as isize, value);
            value
        };
        // C s_568_244: const #17360u : u32
        let s_568_244: u32 = 17360;
        // N s_568_245: write-reg s_568_244 <= s_568_243
        let s_568_245: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_244 as isize, s_568_243);
            tracer.write_register(s_568_244 as isize, s_568_243);
        };
        // C s_568_246: const #17360u : u32
        let s_568_246: u32 = 17360;
        // D s_568_247: read-reg s_568_246:struct
        let s_568_247: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_246 as isize);
            tracer.read_register(s_568_246 as isize, value);
            value
        };
        // C s_568_248: const #17360u : u32
        let s_568_248: u32 = 17360;
        // N s_568_249: write-reg s_568_248 <= s_568_247
        let s_568_249: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_248 as isize, s_568_247);
            tracer.write_register(s_568_248 as isize, s_568_247);
        };
        // C s_568_250: const #17360u : u32
        let s_568_250: u32 = 17360;
        // D s_568_251: read-reg s_568_250:struct
        let s_568_251: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_250 as isize);
            tracer.read_register(s_568_250 as isize, value);
            value
        };
        // C s_568_252: const #17360u : u32
        let s_568_252: u32 = 17360;
        // N s_568_253: write-reg s_568_252 <= s_568_251
        let s_568_253: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_252 as isize, s_568_251);
            tracer.write_register(s_568_252 as isize, s_568_251);
        };
        // C s_568_254: const #17360u : u32
        let s_568_254: u32 = 17360;
        // D s_568_255: read-reg s_568_254:struct
        let s_568_255: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_254 as isize);
            tracer.read_register(s_568_254 as isize, value);
            value
        };
        // C s_568_256: const #17360u : u32
        let s_568_256: u32 = 17360;
        // N s_568_257: write-reg s_568_256 <= s_568_255
        let s_568_257: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_256 as isize, s_568_255);
            tracer.write_register(s_568_256 as isize, s_568_255);
        };
        // C s_568_258: const #0u : u8
        let s_568_258: bool = false;
        // S s_568_259: call Bit(s_568_258)
        let s_568_259: bool = Bit(state, tracer, s_568_258);
        // C s_568_260: const #17360u : u32
        let s_568_260: u32 = 17360;
        // D s_568_261: read-reg s_568_260:struct
        let s_568_261: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_260 as isize);
            tracer.read_register(s_568_260 as isize, value);
            value
        };
        // C s_568_262: const #17360u : u32
        let s_568_262: u32 = 17360;
        // N s_568_263: write-reg s_568_262 <= s_568_261
        let s_568_263: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_262 as isize, s_568_261);
            tracer.write_register(s_568_262 as isize, s_568_261);
        };
        // C s_568_264: const #17360u : u32
        let s_568_264: u32 = 17360;
        // D s_568_265: read-reg s_568_264:struct
        let s_568_265: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_264 as isize);
            tracer.read_register(s_568_264 as isize, value);
            value
        };
        // C s_568_266: const #17360u : u32
        let s_568_266: u32 = 17360;
        // N s_568_267: write-reg s_568_266 <= s_568_265
        let s_568_267: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_266 as isize, s_568_265);
            tracer.write_register(s_568_266 as isize, s_568_265);
        };
        // C s_568_268: const #17360u : u32
        let s_568_268: u32 = 17360;
        // D s_568_269: read-reg s_568_268:struct
        let s_568_269: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_268 as isize);
            tracer.read_register(s_568_268 as isize, value);
            value
        };
        // C s_568_270: const #17360u : u32
        let s_568_270: u32 = 17360;
        // N s_568_271: write-reg s_568_270 <= s_568_269
        let s_568_271: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_270 as isize, s_568_269);
            tracer.write_register(s_568_270 as isize, s_568_269);
        };
        // C s_568_272: const #17360u : u32
        let s_568_272: u32 = 17360;
        // D s_568_273: read-reg s_568_272:struct
        let s_568_273: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_272 as isize);
            tracer.read_register(s_568_272 as isize, value);
            value
        };
        // C s_568_274: const #17360u : u32
        let s_568_274: u32 = 17360;
        // N s_568_275: write-reg s_568_274 <= s_568_273
        let s_568_275: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_274 as isize, s_568_273);
            tracer.write_register(s_568_274 as isize, s_568_273);
        };
        // C s_568_276: const #17360u : u32
        let s_568_276: u32 = 17360;
        // D s_568_277: read-reg s_568_276:struct
        let s_568_277: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_276 as isize);
            tracer.read_register(s_568_276 as isize, value);
            value
        };
        // C s_568_278: const #17360u : u32
        let s_568_278: u32 = 17360;
        // N s_568_279: write-reg s_568_278 <= s_568_277
        let s_568_279: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_278 as isize, s_568_277);
            tracer.write_register(s_568_278 as isize, s_568_277);
        };
        // C s_568_280: const #17360u : u32
        let s_568_280: u32 = 17360;
        // D s_568_281: read-reg s_568_280:struct
        let s_568_281: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_280 as isize);
            tracer.read_register(s_568_280 as isize, value);
            value
        };
        // C s_568_282: const #17360u : u32
        let s_568_282: u32 = 17360;
        // N s_568_283: write-reg s_568_282 <= s_568_281
        let s_568_283: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_282 as isize, s_568_281);
            tracer.write_register(s_568_282 as isize, s_568_281);
        };
        // C s_568_284: const #17360u : u32
        let s_568_284: u32 = 17360;
        // D s_568_285: read-reg s_568_284:struct
        let s_568_285: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_568_284 as isize);
            tracer.read_register(s_568_284 as isize, value);
            value
        };
        // C s_568_286: const #17360u : u32
        let s_568_286: u32 = 17360;
        // N s_568_287: write-reg s_568_286 <= s_568_285
        let s_568_287: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_568_286 as isize, s_568_285);
            tracer.write_register(s_568_286 as isize, s_568_285);
        };
        // D s_568_288: read-var cold:u8
        let s_568_288: bool = fn_state.cold;
        // D s_568_289: not s_568_288
        let s_568_289: bool = !s_568_288;
        // N s_568_290: branch s_568_289 b871 b569
        if s_568_289 {
            return block_871(state, tracer, fn_state);
        } else {
            return block_569(state, tracer, fn_state);
        };
    }
    fn block_569<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_569_0: const #0u : u8
        let s_569_0: bool = false;
        // D s_569_1: write-var gs#40523 <= s_569_0
        fn_state.gs_40523 = s_569_0;
        // N s_569_2: jump b570
        return block_570(state, tracer, fn_state);
    }
    fn block_570<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_570_0: read-var gs#40523:u8
        let s_570_0: bool = fn_state.gs_40523;
        // N s_570_1: branch s_570_0 b870 b571
        if s_570_0 {
            return block_870(state, tracer, fn_state);
        } else {
            return block_571(state, tracer, fn_state);
        };
    }
    fn block_571<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_571_0: const #1s : i64
        let s_571_0: i64 = 1;
        // C s_571_1: cast zx s_571_0 -> i
        let s_571_1: i128 = (i128::try_from(s_571_0).unwrap());
        // S s_571_2: call __UNKNOWN_bits(s_571_1)
        let s_571_2: Bits = u__UNKNOWN_bits(state, tracer, s_571_1);
        // C s_571_3: const #17360u : u32
        let s_571_3: u32 = 17360;
        // D s_571_4: read-reg s_571_3:struct
        let s_571_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_571_3 as isize);
            tracer.read_register(s_571_3 as isize, value);
            value
        };
        // C s_571_5: const #17360u : u32
        let s_571_5: u32 = 17360;
        // N s_571_6: write-reg s_571_5 <= s_571_4
        let s_571_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_571_5 as isize, s_571_4);
            tracer.write_register(s_571_5 as isize, s_571_4);
        };
        // N s_571_7: jump b572
        return block_572(state, tracer, fn_state);
    }
    fn block_572<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_572_0: const #17360u : u32
        let s_572_0: u32 = 17360;
        // D s_572_1: read-reg s_572_0:struct
        let s_572_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_572_0 as isize);
            tracer.read_register(s_572_0 as isize, value);
            value
        };
        // C s_572_2: const #17360u : u32
        let s_572_2: u32 = 17360;
        // N s_572_3: write-reg s_572_2 <= s_572_1
        let s_572_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_572_2 as isize, s_572_1);
            tracer.write_register(s_572_2 as isize, s_572_1);
        };
        // C s_572_4: const #17360u : u32
        let s_572_4: u32 = 17360;
        // D s_572_5: read-reg s_572_4:struct
        let s_572_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_572_4 as isize);
            tracer.read_register(s_572_4 as isize, value);
            value
        };
        // C s_572_6: const #17360u : u32
        let s_572_6: u32 = 17360;
        // N s_572_7: write-reg s_572_6 <= s_572_5
        let s_572_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_572_6 as isize, s_572_5);
            tracer.write_register(s_572_6 as isize, s_572_5);
        };
        // D s_572_8: read-var cold:u8
        let s_572_8: bool = fn_state.cold;
        // D s_572_9: not s_572_8
        let s_572_9: bool = !s_572_8;
        // N s_572_10: branch s_572_9 b869 b573
        if s_572_9 {
            return block_869(state, tracer, fn_state);
        } else {
            return block_573(state, tracer, fn_state);
        };
    }
    fn block_573<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_573_0: const #0u : u8
        let s_573_0: bool = false;
        // D s_573_1: write-var gs#40530 <= s_573_0
        fn_state.gs_40530 = s_573_0;
        // N s_573_2: jump b574
        return block_574(state, tracer, fn_state);
    }
    fn block_574<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_574_0: read-var gs#40530:u8
        let s_574_0: bool = fn_state.gs_40530;
        // N s_574_1: branch s_574_0 b868 b575
        if s_574_0 {
            return block_868(state, tracer, fn_state);
        } else {
            return block_575(state, tracer, fn_state);
        };
    }
    fn block_575<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_575_0: const #1s : i64
        let s_575_0: i64 = 1;
        // C s_575_1: cast zx s_575_0 -> i
        let s_575_1: i128 = (i128::try_from(s_575_0).unwrap());
        // S s_575_2: call __UNKNOWN_bits(s_575_1)
        let s_575_2: Bits = u__UNKNOWN_bits(state, tracer, s_575_1);
        // C s_575_3: const #17360u : u32
        let s_575_3: u32 = 17360;
        // D s_575_4: read-reg s_575_3:struct
        let s_575_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_575_3 as isize);
            tracer.read_register(s_575_3 as isize, value);
            value
        };
        // C s_575_5: const #17360u : u32
        let s_575_5: u32 = 17360;
        // N s_575_6: write-reg s_575_5 <= s_575_4
        let s_575_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_575_5 as isize, s_575_4);
            tracer.write_register(s_575_5 as isize, s_575_4);
        };
        // N s_575_7: jump b576
        return block_576(state, tracer, fn_state);
    }
    fn block_576<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_576_0: const #17360u : u32
        let s_576_0: u32 = 17360;
        // D s_576_1: read-reg s_576_0:struct
        let s_576_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_0 as isize);
            tracer.read_register(s_576_0 as isize, value);
            value
        };
        // C s_576_2: const #17360u : u32
        let s_576_2: u32 = 17360;
        // N s_576_3: write-reg s_576_2 <= s_576_1
        let s_576_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_2 as isize, s_576_1);
            tracer.write_register(s_576_2 as isize, s_576_1);
        };
        // C s_576_4: const #17360u : u32
        let s_576_4: u32 = 17360;
        // D s_576_5: read-reg s_576_4:struct
        let s_576_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_4 as isize);
            tracer.read_register(s_576_4 as isize, value);
            value
        };
        // C s_576_6: const #17360u : u32
        let s_576_6: u32 = 17360;
        // N s_576_7: write-reg s_576_6 <= s_576_5
        let s_576_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_6 as isize, s_576_5);
            tracer.write_register(s_576_6 as isize, s_576_5);
        };
        // C s_576_8: const #0u : u8
        let s_576_8: bool = false;
        // S s_576_9: call Bit(s_576_8)
        let s_576_9: bool = Bit(state, tracer, s_576_8);
        // C s_576_10: const #17360u : u32
        let s_576_10: u32 = 17360;
        // D s_576_11: read-reg s_576_10:struct
        let s_576_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_10 as isize);
            tracer.read_register(s_576_10 as isize, value);
            value
        };
        // C s_576_12: const #17360u : u32
        let s_576_12: u32 = 17360;
        // N s_576_13: write-reg s_576_12 <= s_576_11
        let s_576_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_12 as isize, s_576_11);
            tracer.write_register(s_576_12 as isize, s_576_11);
        };
        // C s_576_14: const #17360u : u32
        let s_576_14: u32 = 17360;
        // D s_576_15: read-reg s_576_14:struct
        let s_576_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_14 as isize);
            tracer.read_register(s_576_14 as isize, value);
            value
        };
        // C s_576_16: const #17360u : u32
        let s_576_16: u32 = 17360;
        // N s_576_17: write-reg s_576_16 <= s_576_15
        let s_576_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_16 as isize, s_576_15);
            tracer.write_register(s_576_16 as isize, s_576_15);
        };
        // C s_576_18: const #17360u : u32
        let s_576_18: u32 = 17360;
        // D s_576_19: read-reg s_576_18:struct
        let s_576_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_18 as isize);
            tracer.read_register(s_576_18 as isize, value);
            value
        };
        // C s_576_20: const #17360u : u32
        let s_576_20: u32 = 17360;
        // N s_576_21: write-reg s_576_20 <= s_576_19
        let s_576_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_20 as isize, s_576_19);
            tracer.write_register(s_576_20 as isize, s_576_19);
        };
        // C s_576_22: const #0u : u8
        let s_576_22: bool = false;
        // S s_576_23: call Bit(s_576_22)
        let s_576_23: bool = Bit(state, tracer, s_576_22);
        // C s_576_24: const #17360u : u32
        let s_576_24: u32 = 17360;
        // D s_576_25: read-reg s_576_24:struct
        let s_576_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_24 as isize);
            tracer.read_register(s_576_24 as isize, value);
            value
        };
        // C s_576_26: const #17360u : u32
        let s_576_26: u32 = 17360;
        // N s_576_27: write-reg s_576_26 <= s_576_25
        let s_576_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_26 as isize, s_576_25);
            tracer.write_register(s_576_26 as isize, s_576_25);
        };
        // C s_576_28: const #17360u : u32
        let s_576_28: u32 = 17360;
        // D s_576_29: read-reg s_576_28:struct
        let s_576_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_28 as isize);
            tracer.read_register(s_576_28 as isize, value);
            value
        };
        // C s_576_30: const #17360u : u32
        let s_576_30: u32 = 17360;
        // N s_576_31: write-reg s_576_30 <= s_576_29
        let s_576_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_30 as isize, s_576_29);
            tracer.write_register(s_576_30 as isize, s_576_29);
        };
        // C s_576_32: const #17360u : u32
        let s_576_32: u32 = 17360;
        // D s_576_33: read-reg s_576_32:struct
        let s_576_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_32 as isize);
            tracer.read_register(s_576_32 as isize, value);
            value
        };
        // C s_576_34: const #17360u : u32
        let s_576_34: u32 = 17360;
        // N s_576_35: write-reg s_576_34 <= s_576_33
        let s_576_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_34 as isize, s_576_33);
            tracer.write_register(s_576_34 as isize, s_576_33);
        };
        // C s_576_36: const #17360u : u32
        let s_576_36: u32 = 17360;
        // D s_576_37: read-reg s_576_36:struct
        let s_576_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_36 as isize);
            tracer.read_register(s_576_36 as isize, value);
            value
        };
        // C s_576_38: const #17360u : u32
        let s_576_38: u32 = 17360;
        // N s_576_39: write-reg s_576_38 <= s_576_37
        let s_576_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_38 as isize, s_576_37);
            tracer.write_register(s_576_38 as isize, s_576_37);
        };
        // C s_576_40: const #17360u : u32
        let s_576_40: u32 = 17360;
        // D s_576_41: read-reg s_576_40:struct
        let s_576_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_40 as isize);
            tracer.read_register(s_576_40 as isize, value);
            value
        };
        // C s_576_42: const #17360u : u32
        let s_576_42: u32 = 17360;
        // N s_576_43: write-reg s_576_42 <= s_576_41
        let s_576_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_42 as isize, s_576_41);
            tracer.write_register(s_576_42 as isize, s_576_41);
        };
        // C s_576_44: const #17360u : u32
        let s_576_44: u32 = 17360;
        // D s_576_45: read-reg s_576_44:struct
        let s_576_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_44 as isize);
            tracer.read_register(s_576_44 as isize, value);
            value
        };
        // C s_576_46: const #17360u : u32
        let s_576_46: u32 = 17360;
        // N s_576_47: write-reg s_576_46 <= s_576_45
        let s_576_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_46 as isize, s_576_45);
            tracer.write_register(s_576_46 as isize, s_576_45);
        };
        // C s_576_48: const #17360u : u32
        let s_576_48: u32 = 17360;
        // D s_576_49: read-reg s_576_48:struct
        let s_576_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_48 as isize);
            tracer.read_register(s_576_48 as isize, value);
            value
        };
        // C s_576_50: const #17360u : u32
        let s_576_50: u32 = 17360;
        // N s_576_51: write-reg s_576_50 <= s_576_49
        let s_576_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_50 as isize, s_576_49);
            tracer.write_register(s_576_50 as isize, s_576_49);
        };
        // C s_576_52: const #103952u : u32
        let s_576_52: u32 = 103952;
        // D s_576_53: read-reg s_576_52:struct
        let s_576_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_52 as isize);
            tracer.read_register(s_576_52 as isize, value);
            value
        };
        // C s_576_54: const #103952u : u32
        let s_576_54: u32 = 103952;
        // N s_576_55: write-reg s_576_54 <= s_576_53
        let s_576_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_54 as isize, s_576_53);
            tracer.write_register(s_576_54 as isize, s_576_53);
        };
        // C s_576_56: const #0s : i
        let s_576_56: i128 = 0;
        // C s_576_57: const #20144u : u32
        let s_576_57: u32 = 20144;
        // D s_576_58: read-reg s_576_57:u64
        let s_576_58: u64 = {
            let value = state.read_register::<u64>(s_576_57 as isize);
            tracer.read_register(s_576_57 as isize, value);
            value
        };
        // D s_576_59: cast zx s_576_58 -> bv
        let s_576_59: Bits = Bits::new(s_576_58 as u128, 64u16);
        // C s_576_60: const #0u : u64
        let s_576_60: u64 = 0;
        // C s_576_61: cast zx s_576_60 -> bv
        let s_576_61: Bits = Bits::new(s_576_60 as u128, 64u16);
        // C s_576_62: const #63s : i
        let s_576_62: i128 = 63;
        // C s_576_63: const #1u : u64
        let s_576_63: u64 = 1;
        // C s_576_64: cast zx s_576_63 -> bv
        let s_576_64: Bits = Bits::new(s_576_63 as u128, 64u16);
        // C s_576_65: lsl s_576_64 s_576_62
        let s_576_65: Bits = s_576_64 << s_576_62;
        // C s_576_66: sub s_576_65 s_576_64
        let s_576_66: Bits = ((s_576_65) - (s_576_64));
        // C s_576_67: and s_576_61 s_576_66
        let s_576_67: Bits = ((s_576_61) & (s_576_66));
        // C s_576_68: lsl s_576_67 s_576_56
        let s_576_68: Bits = s_576_67 << s_576_56;
        // C s_576_69: lsl s_576_66 s_576_56
        let s_576_69: Bits = s_576_66 << s_576_56;
        // C s_576_70: cmpl s_576_69
        let s_576_70: Bits = !s_576_69;
        // D s_576_71: and s_576_59 s_576_70
        let s_576_71: Bits = ((s_576_59) & (s_576_70));
        // D s_576_72: or s_576_71 s_576_68
        let s_576_72: Bits = ((s_576_71) | (s_576_68));
        // D s_576_73: cast reint s_576_72 -> u64
        let s_576_73: u64 = (s_576_72.value() as u64);
        // C s_576_74: const #20144u : u32
        let s_576_74: u32 = 20144;
        // N s_576_75: write-reg s_576_74 <= s_576_73
        let s_576_75: () = {
            state.write_register::<u64>(s_576_74 as isize, s_576_73);
            tracer.write_register(s_576_74 as isize, s_576_73);
        };
        // C s_576_76: const #21776u : u32
        let s_576_76: u32 = 21776;
        // D s_576_77: read-reg s_576_76:struct
        let s_576_77: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_76 as isize);
            tracer.read_register(s_576_76 as isize, value);
            value
        };
        // C s_576_78: const #21776u : u32
        let s_576_78: u32 = 21776;
        // N s_576_79: write-reg s_576_78 <= s_576_77
        let s_576_79: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_78 as isize, s_576_77);
            tracer.write_register(s_576_78 as isize, s_576_77);
        };
        // C s_576_80: const #21776u : u32
        let s_576_80: u32 = 21776;
        // D s_576_81: read-reg s_576_80:struct
        let s_576_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_80 as isize);
            tracer.read_register(s_576_80 as isize, value);
            value
        };
        // C s_576_82: const #21776u : u32
        let s_576_82: u32 = 21776;
        // N s_576_83: write-reg s_576_82 <= s_576_81
        let s_576_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_82 as isize, s_576_81);
            tracer.write_register(s_576_82 as isize, s_576_81);
        };
        // C s_576_84: const #100216u : u32
        let s_576_84: u32 = 100216;
        // D s_576_85: read-reg s_576_84:struct
        let s_576_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_84 as isize);
            tracer.read_register(s_576_84 as isize, value);
            value
        };
        // C s_576_86: const #100216u : u32
        let s_576_86: u32 = 100216;
        // N s_576_87: write-reg s_576_86 <= s_576_85
        let s_576_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_86 as isize, s_576_85);
            tracer.write_register(s_576_86 as isize, s_576_85);
        };
        // C s_576_88: const #23448u : u32
        let s_576_88: u32 = 23448;
        // D s_576_89: read-reg s_576_88:struct
        let s_576_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_88 as isize);
            tracer.read_register(s_576_88 as isize, value);
            value
        };
        // C s_576_90: const #23448u : u32
        let s_576_90: u32 = 23448;
        // N s_576_91: write-reg s_576_90 <= s_576_89
        let s_576_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_90 as isize, s_576_89);
            tracer.write_register(s_576_90 as isize, s_576_89);
        };
        // C s_576_92: const #23184u : u32
        let s_576_92: u32 = 23184;
        // D s_576_93: read-reg s_576_92:struct
        let s_576_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_92 as isize);
            tracer.read_register(s_576_92 as isize, value);
            value
        };
        // C s_576_94: const #23184u : u32
        let s_576_94: u32 = 23184;
        // N s_576_95: write-reg s_576_94 <= s_576_93
        let s_576_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_94 as isize, s_576_93);
            tracer.write_register(s_576_94 as isize, s_576_93);
        };
        // C s_576_96: const #17376u : u32
        let s_576_96: u32 = 17376;
        // D s_576_97: read-reg s_576_96:struct
        let s_576_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_96 as isize);
            tracer.read_register(s_576_96 as isize, value);
            value
        };
        // C s_576_98: const #17376u : u32
        let s_576_98: u32 = 17376;
        // N s_576_99: write-reg s_576_98 <= s_576_97
        let s_576_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_98 as isize, s_576_97);
            tracer.write_register(s_576_98 as isize, s_576_97);
        };
        // C s_576_100: const #1u : u8
        let s_576_100: bool = true;
        // S s_576_101: call Bit(s_576_100)
        let s_576_101: bool = Bit(state, tracer, s_576_100);
        // C s_576_102: const #17376u : u32
        let s_576_102: u32 = 17376;
        // D s_576_103: read-reg s_576_102:struct
        let s_576_103: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_102 as isize);
            tracer.read_register(s_576_102 as isize, value);
            value
        };
        // C s_576_104: const #17376u : u32
        let s_576_104: u32 = 17376;
        // N s_576_105: write-reg s_576_104 <= s_576_103
        let s_576_105: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_104 as isize, s_576_103);
            tracer.write_register(s_576_104 as isize, s_576_103);
        };
        // C s_576_106: const #17376u : u32
        let s_576_106: u32 = 17376;
        // D s_576_107: read-reg s_576_106:struct
        let s_576_107: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_106 as isize);
            tracer.read_register(s_576_106 as isize, value);
            value
        };
        // C s_576_108: const #17376u : u32
        let s_576_108: u32 = 17376;
        // N s_576_109: write-reg s_576_108 <= s_576_107
        let s_576_109: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_108 as isize, s_576_107);
            tracer.write_register(s_576_108 as isize, s_576_107);
        };
        // C s_576_110: const #21088u : u32
        let s_576_110: u32 = 21088;
        // D s_576_111: read-reg s_576_110:struct
        let s_576_111: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_110 as isize);
            tracer.read_register(s_576_110 as isize, value);
            value
        };
        // C s_576_112: const #21088u : u32
        let s_576_112: u32 = 21088;
        // N s_576_113: write-reg s_576_112 <= s_576_111
        let s_576_113: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_112 as isize, s_576_111);
            tracer.write_register(s_576_112 as isize, s_576_111);
        };
        // C s_576_114: const #21088u : u32
        let s_576_114: u32 = 21088;
        // D s_576_115: read-reg s_576_114:struct
        let s_576_115: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_576_114 as isize);
            tracer.read_register(s_576_114 as isize, value);
            value
        };
        // C s_576_116: const #21088u : u32
        let s_576_116: u32 = 21088;
        // N s_576_117: write-reg s_576_116 <= s_576_115
        let s_576_117: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_576_116 as isize, s_576_115);
            tracer.write_register(s_576_116 as isize, s_576_115);
        };
        // D s_576_118: read-var cold:u8
        let s_576_118: bool = fn_state.cold;
        // N s_576_119: branch s_576_118 b867 b577
        if s_576_118 {
            return block_867(state, tracer, fn_state);
        } else {
            return block_577(state, tracer, fn_state);
        };
    }
    fn block_577<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_577_0: jump b578
        return block_578(state, tracer, fn_state);
    }
    fn block_578<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_578_0: const #21032u : u32
        let s_578_0: u32 = 21032;
        // D s_578_1: read-reg s_578_0:struct
        let s_578_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_0 as isize);
            tracer.read_register(s_578_0 as isize, value);
            value
        };
        // C s_578_2: const #21032u : u32
        let s_578_2: u32 = 21032;
        // N s_578_3: write-reg s_578_2 <= s_578_1
        let s_578_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_2 as isize, s_578_1);
            tracer.write_register(s_578_2 as isize, s_578_1);
        };
        // C s_578_4: const #32s : i
        let s_578_4: i128 = 32;
        // C s_578_5: const #10608u : u32
        let s_578_5: u32 = 10608;
        // D s_578_6: read-reg s_578_5:u64
        let s_578_6: u64 = {
            let value = state.read_register::<u64>(s_578_5 as isize);
            tracer.read_register(s_578_5 as isize, value);
            value
        };
        // D s_578_7: cast zx s_578_6 -> bv
        let s_578_7: Bits = Bits::new(s_578_6 as u128, 64u16);
        // C s_578_8: const #0u : u32
        let s_578_8: u32 = 0;
        // C s_578_9: cast zx s_578_8 -> bv
        let s_578_9: Bits = Bits::new(s_578_8 as u128, 32u16);
        // C s_578_10: const #31s : i
        let s_578_10: i128 = 31;
        // C s_578_11: const #1u : u64
        let s_578_11: u64 = 1;
        // C s_578_12: cast zx s_578_11 -> bv
        let s_578_12: Bits = Bits::new(s_578_11 as u128, 64u16);
        // C s_578_13: lsl s_578_12 s_578_10
        let s_578_13: Bits = s_578_12 << s_578_10;
        // C s_578_14: sub s_578_13 s_578_12
        let s_578_14: Bits = ((s_578_13) - (s_578_12));
        // C s_578_15: and s_578_9 s_578_14
        let s_578_15: Bits = ((s_578_9) & (s_578_14));
        // C s_578_16: lsl s_578_15 s_578_4
        let s_578_16: Bits = s_578_15 << s_578_4;
        // C s_578_17: lsl s_578_14 s_578_4
        let s_578_17: Bits = s_578_14 << s_578_4;
        // C s_578_18: cmpl s_578_17
        let s_578_18: Bits = !s_578_17;
        // D s_578_19: and s_578_7 s_578_18
        let s_578_19: Bits = ((s_578_7) & (s_578_18));
        // D s_578_20: or s_578_19 s_578_16
        let s_578_20: Bits = ((s_578_19) | (s_578_16));
        // D s_578_21: cast reint s_578_20 -> u64
        let s_578_21: u64 = (s_578_20.value() as u64);
        // C s_578_22: const #10608u : u32
        let s_578_22: u32 = 10608;
        // N s_578_23: write-reg s_578_22 <= s_578_21
        let s_578_23: () = {
            state.write_register::<u64>(s_578_22 as isize, s_578_21);
            tracer.write_register(s_578_22 as isize, s_578_21);
        };
        // C s_578_24: const #11744u : u32
        let s_578_24: u32 = 11744;
        // D s_578_25: read-reg s_578_24:struct
        let s_578_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_24 as isize);
            tracer.read_register(s_578_24 as isize, value);
            value
        };
        // C s_578_26: const #11744u : u32
        let s_578_26: u32 = 11744;
        // N s_578_27: write-reg s_578_26 <= s_578_25
        let s_578_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_26 as isize, s_578_25);
            tracer.write_register(s_578_26 as isize, s_578_25);
        };
        // C s_578_28: const #11744u : u32
        let s_578_28: u32 = 11744;
        // D s_578_29: read-reg s_578_28:struct
        let s_578_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_28 as isize);
            tracer.read_register(s_578_28 as isize, value);
            value
        };
        // C s_578_30: const #11744u : u32
        let s_578_30: u32 = 11744;
        // N s_578_31: write-reg s_578_30 <= s_578_29
        let s_578_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_30 as isize, s_578_29);
            tracer.write_register(s_578_30 as isize, s_578_29);
        };
        // C s_578_32: const #19280u : u32
        let s_578_32: u32 = 19280;
        // D s_578_33: read-reg s_578_32:struct
        let s_578_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_32 as isize);
            tracer.read_register(s_578_32 as isize, value);
            value
        };
        // C s_578_34: const #19280u : u32
        let s_578_34: u32 = 19280;
        // N s_578_35: write-reg s_578_34 <= s_578_33
        let s_578_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_34 as isize, s_578_33);
            tracer.write_register(s_578_34 as isize, s_578_33);
        };
        // C s_578_36: const #13664u : u32
        let s_578_36: u32 = 13664;
        // D s_578_37: read-reg s_578_36:struct
        let s_578_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_36 as isize);
            tracer.read_register(s_578_36 as isize, value);
            value
        };
        // C s_578_38: const #13664u : u32
        let s_578_38: u32 = 13664;
        // N s_578_39: write-reg s_578_38 <= s_578_37
        let s_578_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_38 as isize, s_578_37);
            tracer.write_register(s_578_38 as isize, s_578_37);
        };
        // C s_578_40: const #104664u : u32
        let s_578_40: u32 = 104664;
        // D s_578_41: read-reg s_578_40:struct
        let s_578_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_40 as isize);
            tracer.read_register(s_578_40 as isize, value);
            value
        };
        // C s_578_42: const #104664u : u32
        let s_578_42: u32 = 104664;
        // N s_578_43: write-reg s_578_42 <= s_578_41
        let s_578_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_42 as isize, s_578_41);
            tracer.write_register(s_578_42 as isize, s_578_41);
        };
        // C s_578_44: const #104664u : u32
        let s_578_44: u32 = 104664;
        // D s_578_45: read-reg s_578_44:struct
        let s_578_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_44 as isize);
            tracer.read_register(s_578_44 as isize, value);
            value
        };
        // C s_578_46: const #104664u : u32
        let s_578_46: u32 = 104664;
        // N s_578_47: write-reg s_578_46 <= s_578_45
        let s_578_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_46 as isize, s_578_45);
            tracer.write_register(s_578_46 as isize, s_578_45);
        };
        // C s_578_48: const #104664u : u32
        let s_578_48: u32 = 104664;
        // D s_578_49: read-reg s_578_48:struct
        let s_578_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_48 as isize);
            tracer.read_register(s_578_48 as isize, value);
            value
        };
        // C s_578_50: const #104664u : u32
        let s_578_50: u32 = 104664;
        // N s_578_51: write-reg s_578_50 <= s_578_49
        let s_578_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_50 as isize, s_578_49);
            tracer.write_register(s_578_50 as isize, s_578_49);
        };
        // C s_578_52: const #104664u : u32
        let s_578_52: u32 = 104664;
        // D s_578_53: read-reg s_578_52:struct
        let s_578_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_52 as isize);
            tracer.read_register(s_578_52 as isize, value);
            value
        };
        // C s_578_54: const #104664u : u32
        let s_578_54: u32 = 104664;
        // N s_578_55: write-reg s_578_54 <= s_578_53
        let s_578_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_54 as isize, s_578_53);
            tracer.write_register(s_578_54 as isize, s_578_53);
        };
        // C s_578_56: const #104664u : u32
        let s_578_56: u32 = 104664;
        // D s_578_57: read-reg s_578_56:struct
        let s_578_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_56 as isize);
            tracer.read_register(s_578_56 as isize, value);
            value
        };
        // C s_578_58: const #104664u : u32
        let s_578_58: u32 = 104664;
        // N s_578_59: write-reg s_578_58 <= s_578_57
        let s_578_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_58 as isize, s_578_57);
            tracer.write_register(s_578_58 as isize, s_578_57);
        };
        // C s_578_60: const #11064u : u32
        let s_578_60: u32 = 11064;
        // D s_578_61: read-reg s_578_60:struct
        let s_578_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_60 as isize);
            tracer.read_register(s_578_60 as isize, value);
            value
        };
        // C s_578_62: const #11064u : u32
        let s_578_62: u32 = 11064;
        // N s_578_63: write-reg s_578_62 <= s_578_61
        let s_578_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_62 as isize, s_578_61);
            tracer.write_register(s_578_62 as isize, s_578_61);
        };
        // C s_578_64: const #11064u : u32
        let s_578_64: u32 = 11064;
        // D s_578_65: read-reg s_578_64:struct
        let s_578_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_64 as isize);
            tracer.read_register(s_578_64 as isize, value);
            value
        };
        // C s_578_66: const #11064u : u32
        let s_578_66: u32 = 11064;
        // N s_578_67: write-reg s_578_66 <= s_578_65
        let s_578_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_66 as isize, s_578_65);
            tracer.write_register(s_578_66 as isize, s_578_65);
        };
        // C s_578_68: const #101896u : u32
        let s_578_68: u32 = 101896;
        // D s_578_69: read-reg s_578_68:struct
        let s_578_69: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_68 as isize);
            tracer.read_register(s_578_68 as isize, value);
            value
        };
        // C s_578_70: const #101896u : u32
        let s_578_70: u32 = 101896;
        // N s_578_71: write-reg s_578_70 <= s_578_69
        let s_578_71: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_70 as isize, s_578_69);
            tracer.write_register(s_578_70 as isize, s_578_69);
        };
        // C s_578_72: const #101896u : u32
        let s_578_72: u32 = 101896;
        // D s_578_73: read-reg s_578_72:struct
        let s_578_73: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_72 as isize);
            tracer.read_register(s_578_72 as isize, value);
            value
        };
        // C s_578_74: const #101896u : u32
        let s_578_74: u32 = 101896;
        // N s_578_75: write-reg s_578_74 <= s_578_73
        let s_578_75: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_74 as isize, s_578_73);
            tracer.write_register(s_578_74 as isize, s_578_73);
        };
        // C s_578_76: const #15072u : u32
        let s_578_76: u32 = 15072;
        // D s_578_77: read-reg s_578_76:struct
        let s_578_77: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_76 as isize);
            tracer.read_register(s_578_76 as isize, value);
            value
        };
        // C s_578_78: const #15072u : u32
        let s_578_78: u32 = 15072;
        // N s_578_79: write-reg s_578_78 <= s_578_77
        let s_578_79: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_78 as isize, s_578_77);
            tracer.write_register(s_578_78 as isize, s_578_77);
        };
        // C s_578_80: const #15072u : u32
        let s_578_80: u32 = 15072;
        // D s_578_81: read-reg s_578_80:struct
        let s_578_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_80 as isize);
            tracer.read_register(s_578_80 as isize, value);
            value
        };
        // C s_578_82: const #15072u : u32
        let s_578_82: u32 = 15072;
        // N s_578_83: write-reg s_578_82 <= s_578_81
        let s_578_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_82 as isize, s_578_81);
            tracer.write_register(s_578_82 as isize, s_578_81);
        };
        // C s_578_84: const #90960u : u32
        let s_578_84: u32 = 90960;
        // D s_578_85: read-reg s_578_84:struct
        let s_578_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_84 as isize);
            tracer.read_register(s_578_84 as isize, value);
            value
        };
        // C s_578_86: const #90960u : u32
        let s_578_86: u32 = 90960;
        // N s_578_87: write-reg s_578_86 <= s_578_85
        let s_578_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_86 as isize, s_578_85);
            tracer.write_register(s_578_86 as isize, s_578_85);
        };
        // C s_578_88: const #90960u : u32
        let s_578_88: u32 = 90960;
        // D s_578_89: read-reg s_578_88:struct
        let s_578_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_88 as isize);
            tracer.read_register(s_578_88 as isize, value);
            value
        };
        // C s_578_90: const #90960u : u32
        let s_578_90: u32 = 90960;
        // N s_578_91: write-reg s_578_90 <= s_578_89
        let s_578_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_90 as isize, s_578_89);
            tracer.write_register(s_578_90 as isize, s_578_89);
        };
        // C s_578_92: const #90960u : u32
        let s_578_92: u32 = 90960;
        // D s_578_93: read-reg s_578_92:struct
        let s_578_93: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_92 as isize);
            tracer.read_register(s_578_92 as isize, value);
            value
        };
        // C s_578_94: const #90960u : u32
        let s_578_94: u32 = 90960;
        // N s_578_95: write-reg s_578_94 <= s_578_93
        let s_578_95: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_94 as isize, s_578_93);
            tracer.write_register(s_578_94 as isize, s_578_93);
        };
        // C s_578_96: const #17304u : u32
        let s_578_96: u32 = 17304;
        // D s_578_97: read-reg s_578_96:struct
        let s_578_97: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_96 as isize);
            tracer.read_register(s_578_96 as isize, value);
            value
        };
        // C s_578_98: const #17304u : u32
        let s_578_98: u32 = 17304;
        // N s_578_99: write-reg s_578_98 <= s_578_97
        let s_578_99: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_98 as isize, s_578_97);
            tracer.write_register(s_578_98 as isize, s_578_97);
        };
        // C s_578_100: const #17304u : u32
        let s_578_100: u32 = 17304;
        // D s_578_101: read-reg s_578_100:struct
        let s_578_101: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_100 as isize);
            tracer.read_register(s_578_100 as isize, value);
            value
        };
        // C s_578_102: const #17304u : u32
        let s_578_102: u32 = 17304;
        // N s_578_103: write-reg s_578_102 <= s_578_101
        let s_578_103: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_102 as isize, s_578_101);
            tracer.write_register(s_578_102 as isize, s_578_101);
        };
        // C s_578_104: const #17304u : u32
        let s_578_104: u32 = 17304;
        // D s_578_105: read-reg s_578_104:struct
        let s_578_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_104 as isize);
            tracer.read_register(s_578_104 as isize, value);
            value
        };
        // C s_578_106: const #17304u : u32
        let s_578_106: u32 = 17304;
        // N s_578_107: write-reg s_578_106 <= s_578_105
        let s_578_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_106 as isize, s_578_105);
            tracer.write_register(s_578_106 as isize, s_578_105);
        };
        // C s_578_108: const #10376u : u32
        let s_578_108: u32 = 10376;
        // D s_578_109: read-reg s_578_108:struct
        let s_578_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_108 as isize);
            tracer.read_register(s_578_108 as isize, value);
            value
        };
        // C s_578_110: const #10376u : u32
        let s_578_110: u32 = 10376;
        // N s_578_111: write-reg s_578_110 <= s_578_109
        let s_578_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_110 as isize, s_578_109);
            tracer.write_register(s_578_110 as isize, s_578_109);
        };
        // C s_578_112: const #10376u : u32
        let s_578_112: u32 = 10376;
        // D s_578_113: read-reg s_578_112:struct
        let s_578_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_112 as isize);
            tracer.read_register(s_578_112 as isize, value);
            value
        };
        // C s_578_114: const #10376u : u32
        let s_578_114: u32 = 10376;
        // N s_578_115: write-reg s_578_114 <= s_578_113
        let s_578_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_114 as isize, s_578_113);
            tracer.write_register(s_578_114 as isize, s_578_113);
        };
        // C s_578_116: const #10376u : u32
        let s_578_116: u32 = 10376;
        // D s_578_117: read-reg s_578_116:struct
        let s_578_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_116 as isize);
            tracer.read_register(s_578_116 as isize, value);
            value
        };
        // C s_578_118: const #10376u : u32
        let s_578_118: u32 = 10376;
        // N s_578_119: write-reg s_578_118 <= s_578_117
        let s_578_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_118 as isize, s_578_117);
            tracer.write_register(s_578_118 as isize, s_578_117);
        };
        // C s_578_120: const #100256u : u32
        let s_578_120: u32 = 100256;
        // D s_578_121: read-reg s_578_120:struct
        let s_578_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_120 as isize);
            tracer.read_register(s_578_120 as isize, value);
            value
        };
        // C s_578_122: const #100256u : u32
        let s_578_122: u32 = 100256;
        // N s_578_123: write-reg s_578_122 <= s_578_121
        let s_578_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_122 as isize, s_578_121);
            tracer.write_register(s_578_122 as isize, s_578_121);
        };
        // C s_578_124: const #100256u : u32
        let s_578_124: u32 = 100256;
        // D s_578_125: read-reg s_578_124:struct
        let s_578_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_124 as isize);
            tracer.read_register(s_578_124 as isize, value);
            value
        };
        // C s_578_126: const #100256u : u32
        let s_578_126: u32 = 100256;
        // N s_578_127: write-reg s_578_126 <= s_578_125
        let s_578_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_126 as isize, s_578_125);
            tracer.write_register(s_578_126 as isize, s_578_125);
        };
        // C s_578_128: const #100256u : u32
        let s_578_128: u32 = 100256;
        // D s_578_129: read-reg s_578_128:struct
        let s_578_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_128 as isize);
            tracer.read_register(s_578_128 as isize, value);
            value
        };
        // C s_578_130: const #100256u : u32
        let s_578_130: u32 = 100256;
        // N s_578_131: write-reg s_578_130 <= s_578_129
        let s_578_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_130 as isize, s_578_129);
            tracer.write_register(s_578_130 as isize, s_578_129);
        };
        // C s_578_132: const #100256u : u32
        let s_578_132: u32 = 100256;
        // D s_578_133: read-reg s_578_132:struct
        let s_578_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_132 as isize);
            tracer.read_register(s_578_132 as isize, value);
            value
        };
        // C s_578_134: const #100256u : u32
        let s_578_134: u32 = 100256;
        // N s_578_135: write-reg s_578_134 <= s_578_133
        let s_578_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_134 as isize, s_578_133);
            tracer.write_register(s_578_134 as isize, s_578_133);
        };
        // C s_578_136: const #17608u : u32
        let s_578_136: u32 = 17608;
        // D s_578_137: read-reg s_578_136:struct
        let s_578_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_578_136 as isize);
            tracer.read_register(s_578_136 as isize, value);
            value
        };
        // C s_578_138: const #17608u : u32
        let s_578_138: u32 = 17608;
        // N s_578_139: write-reg s_578_138 <= s_578_137
        let s_578_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_578_138 as isize, s_578_137);
            tracer.write_register(s_578_138 as isize, s_578_137);
        };
        // C s_578_140: const #424u : u32
        let s_578_140: u32 = 424;
        // D s_578_141: read-reg s_578_140:u8
        let s_578_141: u8 = {
            let value = state.read_register::<u8>(s_578_140 as isize);
            tracer.read_register(s_578_140 as isize, value);
            value
        };
        // C s_578_142: const #2u : u8
        let s_578_142: u8 = 2;
        // D s_578_143: cmp-lt s_578_141 s_578_142
        let s_578_143: bool = ((s_578_141) < (s_578_142));
        // N s_578_144: branch s_578_143 b866 b579
        if s_578_143 {
            return block_866(state, tracer, fn_state);
        } else {
            return block_579(state, tracer, fn_state);
        };
    }
    fn block_579<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_579_0: read-var cold:u8
        let s_579_0: bool = fn_state.cold;
        // D s_579_1: not s_579_0
        let s_579_1: bool = !s_579_0;
        // N s_579_2: branch s_579_1 b865 b580
        if s_579_1 {
            return block_865(state, tracer, fn_state);
        } else {
            return block_580(state, tracer, fn_state);
        };
    }
    fn block_580<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_580_0: const #0u : u8
        let s_580_0: bool = false;
        // D s_580_1: write-var gs#41700 <= s_580_0
        fn_state.gs_41700 = s_580_0;
        // N s_580_2: jump b581
        return block_581(state, tracer, fn_state);
    }
    fn block_581<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_581_0: read-var gs#41700:u8
        let s_581_0: bool = fn_state.gs_41700;
        // N s_581_1: branch s_581_0 b864 b582
        if s_581_0 {
            return block_864(state, tracer, fn_state);
        } else {
            return block_582(state, tracer, fn_state);
        };
    }
    fn block_582<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_582_0: jump b583
        return block_583(state, tracer, fn_state);
    }
    fn block_583<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_583_0: const #17608u : u32
        let s_583_0: u32 = 17608;
        // D s_583_1: read-reg s_583_0:struct
        let s_583_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_0 as isize);
            tracer.read_register(s_583_0 as isize, value);
            value
        };
        // C s_583_2: const #17608u : u32
        let s_583_2: u32 = 17608;
        // N s_583_3: write-reg s_583_2 <= s_583_1
        let s_583_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_2 as isize, s_583_1);
            tracer.write_register(s_583_2 as isize, s_583_1);
        };
        // C s_583_4: const #17608u : u32
        let s_583_4: u32 = 17608;
        // D s_583_5: read-reg s_583_4:struct
        let s_583_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_4 as isize);
            tracer.read_register(s_583_4 as isize, value);
            value
        };
        // C s_583_6: const #17608u : u32
        let s_583_6: u32 = 17608;
        // N s_583_7: write-reg s_583_6 <= s_583_5
        let s_583_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_6 as isize, s_583_5);
            tracer.write_register(s_583_6 as isize, s_583_5);
        };
        // C s_583_8: const #11032u : u32
        let s_583_8: u32 = 11032;
        // D s_583_9: read-reg s_583_8:struct
        let s_583_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_8 as isize);
            tracer.read_register(s_583_8 as isize, value);
            value
        };
        // C s_583_10: const #11032u : u32
        let s_583_10: u32 = 11032;
        // N s_583_11: write-reg s_583_10 <= s_583_9
        let s_583_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_10 as isize, s_583_9);
            tracer.write_register(s_583_10 as isize, s_583_9);
        };
        // C s_583_12: const #11032u : u32
        let s_583_12: u32 = 11032;
        // D s_583_13: read-reg s_583_12:struct
        let s_583_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_12 as isize);
            tracer.read_register(s_583_12 as isize, value);
            value
        };
        // C s_583_14: const #11032u : u32
        let s_583_14: u32 = 11032;
        // N s_583_15: write-reg s_583_14 <= s_583_13
        let s_583_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_14 as isize, s_583_13);
            tracer.write_register(s_583_14 as isize, s_583_13);
        };
        // C s_583_16: const #11032u : u32
        let s_583_16: u32 = 11032;
        // D s_583_17: read-reg s_583_16:struct
        let s_583_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_16 as isize);
            tracer.read_register(s_583_16 as isize, value);
            value
        };
        // C s_583_18: const #11032u : u32
        let s_583_18: u32 = 11032;
        // N s_583_19: write-reg s_583_18 <= s_583_17
        let s_583_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_18 as isize, s_583_17);
            tracer.write_register(s_583_18 as isize, s_583_17);
        };
        // C s_583_20: const #0u : u8
        let s_583_20: bool = false;
        // S s_583_21: call Bit(s_583_20)
        let s_583_21: bool = Bit(state, tracer, s_583_20);
        // C s_583_22: const #11032u : u32
        let s_583_22: u32 = 11032;
        // D s_583_23: read-reg s_583_22:struct
        let s_583_23: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_22 as isize);
            tracer.read_register(s_583_22 as isize, value);
            value
        };
        // C s_583_24: const #11032u : u32
        let s_583_24: u32 = 11032;
        // N s_583_25: write-reg s_583_24 <= s_583_23
        let s_583_25: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_24 as isize, s_583_23);
            tracer.write_register(s_583_24 as isize, s_583_23);
        };
        // C s_583_26: const #90504u : u32
        let s_583_26: u32 = 90504;
        // D s_583_27: read-reg s_583_26:struct
        let s_583_27: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_26 as isize);
            tracer.read_register(s_583_26 as isize, value);
            value
        };
        // C s_583_28: const #90504u : u32
        let s_583_28: u32 = 90504;
        // N s_583_29: write-reg s_583_28 <= s_583_27
        let s_583_29: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_28 as isize, s_583_27);
            tracer.write_register(s_583_28 as isize, s_583_27);
        };
        // C s_583_30: const #90504u : u32
        let s_583_30: u32 = 90504;
        // D s_583_31: read-reg s_583_30:struct
        let s_583_31: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_30 as isize);
            tracer.read_register(s_583_30 as isize, value);
            value
        };
        // C s_583_32: const #90504u : u32
        let s_583_32: u32 = 90504;
        // N s_583_33: write-reg s_583_32 <= s_583_31
        let s_583_33: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_32 as isize, s_583_31);
            tracer.write_register(s_583_32 as isize, s_583_31);
        };
        // C s_583_34: const #0u : u8
        let s_583_34: bool = false;
        // S s_583_35: call Bit(s_583_34)
        let s_583_35: bool = Bit(state, tracer, s_583_34);
        // C s_583_36: const #90504u : u32
        let s_583_36: u32 = 90504;
        // D s_583_37: read-reg s_583_36:struct
        let s_583_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_36 as isize);
            tracer.read_register(s_583_36 as isize, value);
            value
        };
        // C s_583_38: const #90504u : u32
        let s_583_38: u32 = 90504;
        // N s_583_39: write-reg s_583_38 <= s_583_37
        let s_583_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_38 as isize, s_583_37);
            tracer.write_register(s_583_38 as isize, s_583_37);
        };
        // C s_583_40: const #90504u : u32
        let s_583_40: u32 = 90504;
        // D s_583_41: read-reg s_583_40:struct
        let s_583_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_583_40 as isize);
            tracer.read_register(s_583_40 as isize, value);
            value
        };
        // C s_583_42: const #90504u : u32
        let s_583_42: u32 = 90504;
        // N s_583_43: write-reg s_583_42 <= s_583_41
        let s_583_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_583_42 as isize, s_583_41);
            tracer.write_register(s_583_42 as isize, s_583_41);
        };
        // C s_583_44: const #424u : u32
        let s_583_44: u32 = 424;
        // D s_583_45: read-reg s_583_44:u8
        let s_583_45: u8 = {
            let value = state.read_register::<u8>(s_583_44 as isize);
            tracer.read_register(s_583_44 as isize, value);
            value
        };
        // C s_583_46: const #2u : u8
        let s_583_46: u8 = 2;
        // D s_583_47: cmp-lt s_583_45 s_583_46
        let s_583_47: bool = ((s_583_45) < (s_583_46));
        // N s_583_48: branch s_583_47 b863 b584
        if s_583_47 {
            return block_863(state, tracer, fn_state);
        } else {
            return block_584(state, tracer, fn_state);
        };
    }
    fn block_584<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_584_0: read-var cold:u8
        let s_584_0: bool = fn_state.cold;
        // D s_584_1: not s_584_0
        let s_584_1: bool = !s_584_0;
        // N s_584_2: branch s_584_1 b862 b585
        if s_584_1 {
            return block_862(state, tracer, fn_state);
        } else {
            return block_585(state, tracer, fn_state);
        };
    }
    fn block_585<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_585_0: const #0u : u8
        let s_585_0: bool = false;
        // D s_585_1: write-var gs#41681 <= s_585_0
        fn_state.gs_41681 = s_585_0;
        // N s_585_2: jump b586
        return block_586(state, tracer, fn_state);
    }
    fn block_586<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_586_0: read-var gs#41681:u8
        let s_586_0: bool = fn_state.gs_41681;
        // N s_586_1: branch s_586_0 b861 b587
        if s_586_0 {
            return block_861(state, tracer, fn_state);
        } else {
            return block_587(state, tracer, fn_state);
        };
    }
    fn block_587<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_587_0: jump b588
        return block_588(state, tracer, fn_state);
    }
    fn block_588<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_588_0: const #424u : u32
        let s_588_0: u32 = 424;
        // D s_588_1: read-reg s_588_0:u8
        let s_588_1: u8 = {
            let value = state.read_register::<u8>(s_588_0 as isize);
            tracer.read_register(s_588_0 as isize, value);
            value
        };
        // C s_588_2: const #2u : u8
        let s_588_2: u8 = 2;
        // D s_588_3: cmp-lt s_588_1 s_588_2
        let s_588_3: bool = ((s_588_1) < (s_588_2));
        // N s_588_4: branch s_588_3 b860 b589
        if s_588_3 {
            return block_860(state, tracer, fn_state);
        } else {
            return block_589(state, tracer, fn_state);
        };
    }
    fn block_589<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_589_0: read-var cold:u8
        let s_589_0: bool = fn_state.cold;
        // D s_589_1: not s_589_0
        let s_589_1: bool = !s_589_0;
        // N s_589_2: branch s_589_1 b859 b590
        if s_589_1 {
            return block_859(state, tracer, fn_state);
        } else {
            return block_590(state, tracer, fn_state);
        };
    }
    fn block_590<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_590_0: const #0u : u8
        let s_590_0: bool = false;
        // D s_590_1: write-var gs#41672 <= s_590_0
        fn_state.gs_41672 = s_590_0;
        // N s_590_2: jump b591
        return block_591(state, tracer, fn_state);
    }
    fn block_591<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_591_0: read-var gs#41672:u8
        let s_591_0: bool = fn_state.gs_41672;
        // N s_591_1: branch s_591_0 b858 b592
        if s_591_0 {
            return block_858(state, tracer, fn_state);
        } else {
            return block_592(state, tracer, fn_state);
        };
    }
    fn block_592<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_592_0: jump b593
        return block_593(state, tracer, fn_state);
    }
    fn block_593<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_593_0: const #() : ()
        let s_593_0: () = ();
        // S s_593_1: call MPAM3_EL3_read(s_593_0)
        let s_593_1: ProductType5c790c8ef59cc8b2 = MPAM3_EL3_read(
            state,
            tracer,
            s_593_0,
        );
        // C s_593_2: const #0u : u8
        let s_593_2: bool = false;
        // S s_593_3: call _update_MPAM3_EL3_Type_MPAMEN(s_593_1, s_593_2)
        let s_593_3: ProductType5c790c8ef59cc8b2 = u_update_MPAM3_EL3_Type_MPAMEN(
            state,
            tracer,
            s_593_1,
            s_593_2,
        );
        // S s_593_4: call MPAM3_EL3_write(s_593_3)
        let s_593_4: () = MPAM3_EL3_write(state, tracer, s_593_3);
        // C s_593_5: const #() : ()
        let s_593_5: () = ();
        // S s_593_6: call MPAM3_EL3_read(s_593_5)
        let s_593_6: ProductType5c790c8ef59cc8b2 = MPAM3_EL3_read(
            state,
            tracer,
            s_593_5,
        );
        // C s_593_7: const #1u : u8
        let s_593_7: bool = true;
        // S s_593_8: call _update_MPAM3_EL3_Type_TRAPLOWER(s_593_6, s_593_7)
        let s_593_8: ProductType5c790c8ef59cc8b2 = u_update_MPAM3_EL3_Type_TRAPLOWER(
            state,
            tracer,
            s_593_6,
            s_593_7,
        );
        // S s_593_9: call MPAM3_EL3_write(s_593_8)
        let s_593_9: () = MPAM3_EL3_write(state, tracer, s_593_8);
        // C s_593_10: const #() : ()
        let s_593_10: () = ();
        // S s_593_11: call MPAM3_EL3_read(s_593_10)
        let s_593_11: ProductType5c790c8ef59cc8b2 = MPAM3_EL3_read(
            state,
            tracer,
            s_593_10,
        );
        // D s_593_12: write-var ga#33869 <= s_593_11
        fn_state.ga_33869 = s_593_11;
        // D s_593_13: read-var ga#33869.0:struct
        let s_593_13: u64 = fn_state.ga_33869._0;
        // C s_593_14: const #2s : i
        let s_593_14: i128 = 2;
        // C s_593_15: const #58s : i
        let s_593_15: i128 = 58;
        // D s_593_16: cast zx s_593_13 -> bv
        let s_593_16: Bits = Bits::new(s_593_13 as u128, 64u16);
        // C s_593_17: const #0u : u8
        let s_593_17: u8 = 0;
        // C s_593_18: cast zx s_593_17 -> bv
        let s_593_18: Bits = Bits::new(s_593_17 as u128, 2u16);
        // C s_593_19: const #1u : u64
        let s_593_19: u64 = 1;
        // C s_593_20: cast zx s_593_19 -> bv
        let s_593_20: Bits = Bits::new(s_593_19 as u128, 64u16);
        // C s_593_21: lsl s_593_20 s_593_14
        let s_593_21: Bits = s_593_20 << s_593_14;
        // C s_593_22: sub s_593_21 s_593_20
        let s_593_22: Bits = ((s_593_21) - (s_593_20));
        // C s_593_23: and s_593_18 s_593_22
        let s_593_23: Bits = ((s_593_18) & (s_593_22));
        // C s_593_24: lsl s_593_23 s_593_15
        let s_593_24: Bits = s_593_23 << s_593_15;
        // C s_593_25: lsl s_593_22 s_593_15
        let s_593_25: Bits = s_593_22 << s_593_15;
        // C s_593_26: cmpl s_593_25
        let s_593_26: Bits = !s_593_25;
        // D s_593_27: and s_593_16 s_593_26
        let s_593_27: Bits = ((s_593_16) & (s_593_26));
        // D s_593_28: or s_593_27 s_593_24
        let s_593_28: Bits = ((s_593_27) | (s_593_24));
        // D s_593_29: cast reint s_593_28 -> u64
        let s_593_29: u64 = (s_593_28.value() as u64);
        // D s_593_30: call Mk_MPAM3_EL3_Type(s_593_29)
        let s_593_30: ProductType5c790c8ef59cc8b2 = Mk_MPAM3_EL3_Type(
            state,
            tracer,
            s_593_29,
        );
        // D s_593_31: call MPAM3_EL3_write(s_593_30)
        let s_593_31: () = MPAM3_EL3_write(state, tracer, s_593_30);
        // C s_593_32: const #() : ()
        let s_593_32: () = ();
        // S s_593_33: call MPAM3_EL3_read(s_593_32)
        let s_593_33: ProductType5c790c8ef59cc8b2 = MPAM3_EL3_read(
            state,
            tracer,
            s_593_32,
        );
        // D s_593_34: write-var ga#33873 <= s_593_33
        fn_state.ga_33873 = s_593_33;
        // D s_593_35: read-var ga#33873.0:struct
        let s_593_35: u64 = fn_state.ga_33873._0;
        // C s_593_36: const #2s : i
        let s_593_36: i128 = 2;
        // C s_593_37: const #53s : i
        let s_593_37: i128 = 53;
        // D s_593_38: cast zx s_593_35 -> bv
        let s_593_38: Bits = Bits::new(s_593_35 as u128, 64u16);
        // C s_593_39: const #0u : u8
        let s_593_39: u8 = 0;
        // C s_593_40: cast zx s_593_39 -> bv
        let s_593_40: Bits = Bits::new(s_593_39 as u128, 2u16);
        // C s_593_41: const #1u : u64
        let s_593_41: u64 = 1;
        // C s_593_42: cast zx s_593_41 -> bv
        let s_593_42: Bits = Bits::new(s_593_41 as u128, 64u16);
        // C s_593_43: lsl s_593_42 s_593_36
        let s_593_43: Bits = s_593_42 << s_593_36;
        // C s_593_44: sub s_593_43 s_593_42
        let s_593_44: Bits = ((s_593_43) - (s_593_42));
        // C s_593_45: and s_593_40 s_593_44
        let s_593_45: Bits = ((s_593_40) & (s_593_44));
        // C s_593_46: lsl s_593_45 s_593_37
        let s_593_46: Bits = s_593_45 << s_593_37;
        // C s_593_47: lsl s_593_44 s_593_37
        let s_593_47: Bits = s_593_44 << s_593_37;
        // C s_593_48: cmpl s_593_47
        let s_593_48: Bits = !s_593_47;
        // D s_593_49: and s_593_38 s_593_48
        let s_593_49: Bits = ((s_593_38) & (s_593_48));
        // D s_593_50: or s_593_49 s_593_46
        let s_593_50: Bits = ((s_593_49) | (s_593_46));
        // D s_593_51: cast reint s_593_50 -> u64
        let s_593_51: u64 = (s_593_50.value() as u64);
        // D s_593_52: call Mk_MPAM3_EL3_Type(s_593_51)
        let s_593_52: ProductType5c790c8ef59cc8b2 = Mk_MPAM3_EL3_Type(
            state,
            tracer,
            s_593_51,
        );
        // D s_593_53: call MPAM3_EL3_write(s_593_52)
        let s_593_53: () = MPAM3_EL3_write(state, tracer, s_593_52);
        // C s_593_54: const #() : ()
        let s_593_54: () = ();
        // S s_593_55: call MPAM3_EL3_read(s_593_54)
        let s_593_55: ProductType5c790c8ef59cc8b2 = MPAM3_EL3_read(
            state,
            tracer,
            s_593_54,
        );
        // D s_593_56: write-var ga#33877 <= s_593_55
        fn_state.ga_33877 = s_593_55;
        // D s_593_57: read-var ga#33877.0:struct
        let s_593_57: u64 = fn_state.ga_33877._0;
        // C s_593_58: const #4s : i
        let s_593_58: i128 = 4;
        // C s_593_59: const #48s : i
        let s_593_59: i128 = 48;
        // D s_593_60: cast zx s_593_57 -> bv
        let s_593_60: Bits = Bits::new(s_593_57 as u128, 64u16);
        // C s_593_61: const #0u : u8
        let s_593_61: u8 = 0;
        // C s_593_62: cast zx s_593_61 -> bv
        let s_593_62: Bits = Bits::new(s_593_61 as u128, 4u16);
        // C s_593_63: const #1u : u64
        let s_593_63: u64 = 1;
        // C s_593_64: cast zx s_593_63 -> bv
        let s_593_64: Bits = Bits::new(s_593_63 as u128, 64u16);
        // C s_593_65: lsl s_593_64 s_593_58
        let s_593_65: Bits = s_593_64 << s_593_58;
        // C s_593_66: sub s_593_65 s_593_64
        let s_593_66: Bits = ((s_593_65) - (s_593_64));
        // C s_593_67: and s_593_62 s_593_66
        let s_593_67: Bits = ((s_593_62) & (s_593_66));
        // C s_593_68: lsl s_593_67 s_593_59
        let s_593_68: Bits = s_593_67 << s_593_59;
        // C s_593_69: lsl s_593_66 s_593_59
        let s_593_69: Bits = s_593_66 << s_593_59;
        // C s_593_70: cmpl s_593_69
        let s_593_70: Bits = !s_593_69;
        // D s_593_71: and s_593_60 s_593_70
        let s_593_71: Bits = ((s_593_60) & (s_593_70));
        // D s_593_72: or s_593_71 s_593_68
        let s_593_72: Bits = ((s_593_71) | (s_593_68));
        // D s_593_73: cast reint s_593_72 -> u64
        let s_593_73: u64 = (s_593_72.value() as u64);
        // D s_593_74: call Mk_MPAM3_EL3_Type(s_593_73)
        let s_593_74: ProductType5c790c8ef59cc8b2 = Mk_MPAM3_EL3_Type(
            state,
            tracer,
            s_593_73,
        );
        // D s_593_75: call MPAM3_EL3_write(s_593_74)
        let s_593_75: () = MPAM3_EL3_write(state, tracer, s_593_74);
        // C s_593_76: const #16624u : u32
        let s_593_76: u32 = 16624;
        // D s_593_77: read-reg s_593_76:struct
        let s_593_77: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_76 as isize);
            tracer.read_register(s_593_76 as isize, value);
            value
        };
        // C s_593_78: const #16624u : u32
        let s_593_78: u32 = 16624;
        // N s_593_79: write-reg s_593_78 <= s_593_77
        let s_593_79: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_78 as isize, s_593_77);
            tracer.write_register(s_593_78 as isize, s_593_77);
        };
        // C s_593_80: const #102344u : u32
        let s_593_80: u32 = 102344;
        // D s_593_81: read-reg s_593_80:struct
        let s_593_81: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_80 as isize);
            tracer.read_register(s_593_80 as isize, value);
            value
        };
        // C s_593_82: const #102344u : u32
        let s_593_82: u32 = 102344;
        // N s_593_83: write-reg s_593_82 <= s_593_81
        let s_593_83: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_82 as isize, s_593_81);
            tracer.write_register(s_593_82 as isize, s_593_81);
        };
        // C s_593_84: const #102344u : u32
        let s_593_84: u32 = 102344;
        // D s_593_85: read-reg s_593_84:struct
        let s_593_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_84 as isize);
            tracer.read_register(s_593_84 as isize, value);
            value
        };
        // C s_593_86: const #102344u : u32
        let s_593_86: u32 = 102344;
        // N s_593_87: write-reg s_593_86 <= s_593_85
        let s_593_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_86 as isize, s_593_85);
            tracer.write_register(s_593_86 as isize, s_593_85);
        };
        // C s_593_88: const #102344u : u32
        let s_593_88: u32 = 102344;
        // D s_593_89: read-reg s_593_88:struct
        let s_593_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_88 as isize);
            tracer.read_register(s_593_88 as isize, value);
            value
        };
        // C s_593_90: const #102344u : u32
        let s_593_90: u32 = 102344;
        // N s_593_91: write-reg s_593_90 <= s_593_89
        let s_593_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_90 as isize, s_593_89);
            tracer.write_register(s_593_90 as isize, s_593_89);
        };
        // C s_593_92: const #() : ()
        let s_593_92: () = ();
        // S s_593_93: call MPAM1_EL1_read(s_593_92)
        let s_593_93: ProductType5c790c8ef59cc8b2 = MPAM1_EL1_read(
            state,
            tracer,
            s_593_92,
        );
        // C s_593_94: const #0u : u8
        let s_593_94: bool = false;
        // S s_593_95: call _update_MPAM1_EL1_Type_MPAMEN(s_593_93, s_593_94)
        let s_593_95: ProductType5c790c8ef59cc8b2 = u_update_MPAM1_EL1_Type_MPAMEN(
            state,
            tracer,
            s_593_93,
            s_593_94,
        );
        // S s_593_96: call MPAM1_EL1_write(s_593_95)
        let s_593_96: () = MPAM1_EL1_write(state, tracer, s_593_95);
        // C s_593_97: const #() : ()
        let s_593_97: () = ();
        // S s_593_98: call MPAM1_EL1_read(s_593_97)
        let s_593_98: ProductType5c790c8ef59cc8b2 = MPAM1_EL1_read(
            state,
            tracer,
            s_593_97,
        );
        // D s_593_99: write-var ga#33891 <= s_593_98
        fn_state.ga_33891 = s_593_98;
        // D s_593_100: read-var ga#33891.0:struct
        let s_593_100: u64 = fn_state.ga_33891._0;
        // C s_593_101: const #2s : i
        let s_593_101: i128 = 2;
        // C s_593_102: const #61s : i
        let s_593_102: i128 = 61;
        // D s_593_103: cast zx s_593_100 -> bv
        let s_593_103: Bits = Bits::new(s_593_100 as u128, 64u16);
        // C s_593_104: const #0u : u8
        let s_593_104: u8 = 0;
        // C s_593_105: cast zx s_593_104 -> bv
        let s_593_105: Bits = Bits::new(s_593_104 as u128, 2u16);
        // C s_593_106: const #1u : u64
        let s_593_106: u64 = 1;
        // C s_593_107: cast zx s_593_106 -> bv
        let s_593_107: Bits = Bits::new(s_593_106 as u128, 64u16);
        // C s_593_108: lsl s_593_107 s_593_101
        let s_593_108: Bits = s_593_107 << s_593_101;
        // C s_593_109: sub s_593_108 s_593_107
        let s_593_109: Bits = ((s_593_108) - (s_593_107));
        // C s_593_110: and s_593_105 s_593_109
        let s_593_110: Bits = ((s_593_105) & (s_593_109));
        // C s_593_111: lsl s_593_110 s_593_102
        let s_593_111: Bits = s_593_110 << s_593_102;
        // C s_593_112: lsl s_593_109 s_593_102
        let s_593_112: Bits = s_593_109 << s_593_102;
        // C s_593_113: cmpl s_593_112
        let s_593_113: Bits = !s_593_112;
        // D s_593_114: and s_593_103 s_593_113
        let s_593_114: Bits = ((s_593_103) & (s_593_113));
        // D s_593_115: or s_593_114 s_593_111
        let s_593_115: Bits = ((s_593_114) | (s_593_111));
        // D s_593_116: cast reint s_593_115 -> u64
        let s_593_116: u64 = (s_593_115.value() as u64);
        // D s_593_117: call Mk_MPAM1_EL1_Type(s_593_116)
        let s_593_117: ProductType5c790c8ef59cc8b2 = Mk_MPAM1_EL1_Type(
            state,
            tracer,
            s_593_116,
        );
        // D s_593_118: call MPAM1_EL1_write(s_593_117)
        let s_593_118: () = MPAM1_EL1_write(state, tracer, s_593_117);
        // C s_593_119: const #() : ()
        let s_593_119: () = ();
        // S s_593_120: call MPAM1_EL1_read(s_593_119)
        let s_593_120: ProductType5c790c8ef59cc8b2 = MPAM1_EL1_read(
            state,
            tracer,
            s_593_119,
        );
        // D s_593_121: write-var ga#33895 <= s_593_120
        fn_state.ga_33895 = s_593_120;
        // D s_593_122: read-var ga#33895.0:struct
        let s_593_122: u64 = fn_state.ga_33895._0;
        // C s_593_123: const #5s : i
        let s_593_123: i128 = 5;
        // C s_593_124: const #55s : i
        let s_593_124: i128 = 55;
        // D s_593_125: cast zx s_593_122 -> bv
        let s_593_125: Bits = Bits::new(s_593_122 as u128, 64u16);
        // C s_593_126: const #0u : u8
        let s_593_126: u8 = 0;
        // C s_593_127: cast zx s_593_126 -> bv
        let s_593_127: Bits = Bits::new(s_593_126 as u128, 5u16);
        // C s_593_128: const #1u : u64
        let s_593_128: u64 = 1;
        // C s_593_129: cast zx s_593_128 -> bv
        let s_593_129: Bits = Bits::new(s_593_128 as u128, 64u16);
        // C s_593_130: lsl s_593_129 s_593_123
        let s_593_130: Bits = s_593_129 << s_593_123;
        // C s_593_131: sub s_593_130 s_593_129
        let s_593_131: Bits = ((s_593_130) - (s_593_129));
        // C s_593_132: and s_593_127 s_593_131
        let s_593_132: Bits = ((s_593_127) & (s_593_131));
        // C s_593_133: lsl s_593_132 s_593_124
        let s_593_133: Bits = s_593_132 << s_593_124;
        // C s_593_134: lsl s_593_131 s_593_124
        let s_593_134: Bits = s_593_131 << s_593_124;
        // C s_593_135: cmpl s_593_134
        let s_593_135: Bits = !s_593_134;
        // D s_593_136: and s_593_125 s_593_135
        let s_593_136: Bits = ((s_593_125) & (s_593_135));
        // D s_593_137: or s_593_136 s_593_133
        let s_593_137: Bits = ((s_593_136) | (s_593_133));
        // D s_593_138: cast reint s_593_137 -> u64
        let s_593_138: u64 = (s_593_137.value() as u64);
        // D s_593_139: call Mk_MPAM1_EL1_Type(s_593_138)
        let s_593_139: ProductType5c790c8ef59cc8b2 = Mk_MPAM1_EL1_Type(
            state,
            tracer,
            s_593_138,
        );
        // D s_593_140: call MPAM1_EL1_write(s_593_139)
        let s_593_140: () = MPAM1_EL1_write(state, tracer, s_593_139);
        // C s_593_141: const #() : ()
        let s_593_141: () = ();
        // S s_593_142: call MPAM1_EL1_read(s_593_141)
        let s_593_142: ProductType5c790c8ef59cc8b2 = MPAM1_EL1_read(
            state,
            tracer,
            s_593_141,
        );
        // D s_593_143: write-var ga#33899 <= s_593_142
        fn_state.ga_33899 = s_593_142;
        // D s_593_144: read-var ga#33899.0:struct
        let s_593_144: u64 = fn_state.ga_33899._0;
        // C s_593_145: const #6s : i
        let s_593_145: i128 = 6;
        // C s_593_146: const #48s : i
        let s_593_146: i128 = 48;
        // D s_593_147: cast zx s_593_144 -> bv
        let s_593_147: Bits = Bits::new(s_593_144 as u128, 64u16);
        // C s_593_148: const #0u : u8
        let s_593_148: u8 = 0;
        // C s_593_149: cast zx s_593_148 -> bv
        let s_593_149: Bits = Bits::new(s_593_148 as u128, 6u16);
        // C s_593_150: const #1u : u64
        let s_593_150: u64 = 1;
        // C s_593_151: cast zx s_593_150 -> bv
        let s_593_151: Bits = Bits::new(s_593_150 as u128, 64u16);
        // C s_593_152: lsl s_593_151 s_593_145
        let s_593_152: Bits = s_593_151 << s_593_145;
        // C s_593_153: sub s_593_152 s_593_151
        let s_593_153: Bits = ((s_593_152) - (s_593_151));
        // C s_593_154: and s_593_149 s_593_153
        let s_593_154: Bits = ((s_593_149) & (s_593_153));
        // C s_593_155: lsl s_593_154 s_593_146
        let s_593_155: Bits = s_593_154 << s_593_146;
        // C s_593_156: lsl s_593_153 s_593_146
        let s_593_156: Bits = s_593_153 << s_593_146;
        // C s_593_157: cmpl s_593_156
        let s_593_157: Bits = !s_593_156;
        // D s_593_158: and s_593_147 s_593_157
        let s_593_158: Bits = ((s_593_147) & (s_593_157));
        // D s_593_159: or s_593_158 s_593_155
        let s_593_159: Bits = ((s_593_158) | (s_593_155));
        // D s_593_160: cast reint s_593_159 -> u64
        let s_593_160: u64 = (s_593_159.value() as u64);
        // D s_593_161: call Mk_MPAM1_EL1_Type(s_593_160)
        let s_593_161: ProductType5c790c8ef59cc8b2 = Mk_MPAM1_EL1_Type(
            state,
            tracer,
            s_593_160,
        );
        // D s_593_162: call MPAM1_EL1_write(s_593_161)
        let s_593_162: () = MPAM1_EL1_write(state, tracer, s_593_161);
        // C s_593_163: const #17312u : u32
        let s_593_163: u32 = 17312;
        // D s_593_164: read-reg s_593_163:struct
        let s_593_164: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_163 as isize);
            tracer.read_register(s_593_163 as isize, value);
            value
        };
        // C s_593_165: const #17312u : u32
        let s_593_165: u32 = 17312;
        // N s_593_166: write-reg s_593_165 <= s_593_164
        let s_593_166: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_165 as isize, s_593_164);
            tracer.write_register(s_593_165 as isize, s_593_164);
        };
        // C s_593_167: const #100816u : u32
        let s_593_167: u32 = 100816;
        // D s_593_168: read-reg s_593_167:struct
        let s_593_168: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_167 as isize);
            tracer.read_register(s_593_167 as isize, value);
            value
        };
        // C s_593_169: const #100816u : u32
        let s_593_169: u32 = 100816;
        // N s_593_170: write-reg s_593_169 <= s_593_168
        let s_593_170: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_169 as isize, s_593_168);
            tracer.write_register(s_593_169 as isize, s_593_168);
        };
        // C s_593_171: const #104768u : u32
        let s_593_171: u32 = 104768;
        // D s_593_172: read-reg s_593_171:struct
        let s_593_172: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_171 as isize);
            tracer.read_register(s_593_171 as isize, value);
            value
        };
        // C s_593_173: const #104768u : u32
        let s_593_173: u32 = 104768;
        // N s_593_174: write-reg s_593_173 <= s_593_172
        let s_593_174: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_173 as isize, s_593_172);
            tracer.write_register(s_593_173 as isize, s_593_172);
        };
        // C s_593_175: const #14952u : u32
        let s_593_175: u32 = 14952;
        // D s_593_176: read-reg s_593_175:struct
        let s_593_176: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_175 as isize);
            tracer.read_register(s_593_175 as isize, value);
            value
        };
        // C s_593_177: const #14952u : u32
        let s_593_177: u32 = 14952;
        // N s_593_178: write-reg s_593_177 <= s_593_176
        let s_593_178: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_177 as isize, s_593_176);
            tracer.write_register(s_593_177 as isize, s_593_176);
        };
        // C s_593_179: const #104760u : u32
        let s_593_179: u32 = 104760;
        // D s_593_180: read-reg s_593_179:struct
        let s_593_180: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_179 as isize);
            tracer.read_register(s_593_179 as isize, value);
            value
        };
        // C s_593_181: const #104760u : u32
        let s_593_181: u32 = 104760;
        // N s_593_182: write-reg s_593_181 <= s_593_180
        let s_593_182: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_181 as isize, s_593_180);
            tracer.write_register(s_593_181 as isize, s_593_180);
        };
        // C s_593_183: const #12880u : u32
        let s_593_183: u32 = 12880;
        // D s_593_184: read-reg s_593_183:struct
        let s_593_184: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_183 as isize);
            tracer.read_register(s_593_183 as isize, value);
            value
        };
        // C s_593_185: const #12880u : u32
        let s_593_185: u32 = 12880;
        // N s_593_186: write-reg s_593_185 <= s_593_184
        let s_593_186: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_185 as isize, s_593_184);
            tracer.write_register(s_593_185 as isize, s_593_184);
        };
        // C s_593_187: const #20096u : u32
        let s_593_187: u32 = 20096;
        // D s_593_188: read-reg s_593_187:struct
        let s_593_188: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_187 as isize);
            tracer.read_register(s_593_187 as isize, value);
            value
        };
        // C s_593_189: const #20096u : u32
        let s_593_189: u32 = 20096;
        // N s_593_190: write-reg s_593_189 <= s_593_188
        let s_593_190: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_189 as isize, s_593_188);
            tracer.write_register(s_593_189 as isize, s_593_188);
        };
        // C s_593_191: const #20096u : u32
        let s_593_191: u32 = 20096;
        // D s_593_192: read-reg s_593_191:struct
        let s_593_192: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_191 as isize);
            tracer.read_register(s_593_191 as isize, value);
            value
        };
        // C s_593_193: const #20096u : u32
        let s_593_193: u32 = 20096;
        // N s_593_194: write-reg s_593_193 <= s_593_192
        let s_593_194: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_193 as isize, s_593_192);
            tracer.write_register(s_593_193 as isize, s_593_192);
        };
        // C s_593_195: const #20096u : u32
        let s_593_195: u32 = 20096;
        // D s_593_196: read-reg s_593_195:struct
        let s_593_196: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_195 as isize);
            tracer.read_register(s_593_195 as isize, value);
            value
        };
        // C s_593_197: const #20096u : u32
        let s_593_197: u32 = 20096;
        // N s_593_198: write-reg s_593_197 <= s_593_196
        let s_593_198: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_197 as isize, s_593_196);
            tracer.write_register(s_593_197 as isize, s_593_196);
        };
        // C s_593_199: const #20096u : u32
        let s_593_199: u32 = 20096;
        // D s_593_200: read-reg s_593_199:struct
        let s_593_200: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_199 as isize);
            tracer.read_register(s_593_199 as isize, value);
            value
        };
        // C s_593_201: const #20096u : u32
        let s_593_201: u32 = 20096;
        // N s_593_202: write-reg s_593_201 <= s_593_200
        let s_593_202: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_201 as isize, s_593_200);
            tracer.write_register(s_593_201 as isize, s_593_200);
        };
        // C s_593_203: const #11480u : u32
        let s_593_203: u32 = 11480;
        // D s_593_204: read-reg s_593_203:struct
        let s_593_204: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_203 as isize);
            tracer.read_register(s_593_203 as isize, value);
            value
        };
        // C s_593_205: const #11480u : u32
        let s_593_205: u32 = 11480;
        // N s_593_206: write-reg s_593_205 <= s_593_204
        let s_593_206: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_205 as isize, s_593_204);
            tracer.write_register(s_593_205 as isize, s_593_204);
        };
        // C s_593_207: const #15544u : u32
        let s_593_207: u32 = 15544;
        // D s_593_208: read-reg s_593_207:struct
        let s_593_208: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_207 as isize);
            tracer.read_register(s_593_207 as isize, value);
            value
        };
        // C s_593_209: const #15544u : u32
        let s_593_209: u32 = 15544;
        // N s_593_210: write-reg s_593_209 <= s_593_208
        let s_593_210: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_209 as isize, s_593_208);
            tracer.write_register(s_593_209 as isize, s_593_208);
        };
        // C s_593_211: const #15544u : u32
        let s_593_211: u32 = 15544;
        // D s_593_212: read-reg s_593_211:struct
        let s_593_212: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_211 as isize);
            tracer.read_register(s_593_211 as isize, value);
            value
        };
        // C s_593_213: const #15544u : u32
        let s_593_213: u32 = 15544;
        // N s_593_214: write-reg s_593_213 <= s_593_212
        let s_593_214: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_213 as isize, s_593_212);
            tracer.write_register(s_593_213 as isize, s_593_212);
        };
        // C s_593_215: const #15544u : u32
        let s_593_215: u32 = 15544;
        // D s_593_216: read-reg s_593_215:struct
        let s_593_216: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_215 as isize);
            tracer.read_register(s_593_215 as isize, value);
            value
        };
        // C s_593_217: const #15544u : u32
        let s_593_217: u32 = 15544;
        // N s_593_218: write-reg s_593_217 <= s_593_216
        let s_593_218: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_217 as isize, s_593_216);
            tracer.write_register(s_593_217 as isize, s_593_216);
        };
        // C s_593_219: const #104808u : u32
        let s_593_219: u32 = 104808;
        // D s_593_220: read-reg s_593_219:struct
        let s_593_220: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_219 as isize);
            tracer.read_register(s_593_219 as isize, value);
            value
        };
        // C s_593_221: const #104808u : u32
        let s_593_221: u32 = 104808;
        // N s_593_222: write-reg s_593_221 <= s_593_220
        let s_593_222: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_221 as isize, s_593_220);
            tracer.write_register(s_593_221 as isize, s_593_220);
        };
        // C s_593_223: const #104808u : u32
        let s_593_223: u32 = 104808;
        // D s_593_224: read-reg s_593_223:struct
        let s_593_224: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_593_223 as isize);
            tracer.read_register(s_593_223 as isize, value);
            value
        };
        // C s_593_225: const #104808u : u32
        let s_593_225: u32 = 104808;
        // N s_593_226: write-reg s_593_225 <= s_593_224
        let s_593_226: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_593_225 as isize, s_593_224);
            tracer.write_register(s_593_225 as isize, s_593_224);
        };
        // D s_593_227: read-var cold:u8
        let s_593_227: bool = fn_state.cold;
        // N s_593_228: branch s_593_227 b857 b594
        if s_593_227 {
            return block_857(state, tracer, fn_state);
        } else {
            return block_594(state, tracer, fn_state);
        };
    }
    fn block_594<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_594_0: jump b595
        return block_595(state, tracer, fn_state);
    }
    fn block_595<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_595_0: const #22792u : u32
        let s_595_0: u32 = 22792;
        // D s_595_1: read-reg s_595_0:struct
        let s_595_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_595_0 as isize);
            tracer.read_register(s_595_0 as isize, value);
            value
        };
        // C s_595_2: const #22792u : u32
        let s_595_2: u32 = 22792;
        // N s_595_3: write-reg s_595_2 <= s_595_1
        let s_595_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_595_2 as isize, s_595_1);
            tracer.write_register(s_595_2 as isize, s_595_1);
        };
        // C s_595_4: const #22792u : u32
        let s_595_4: u32 = 22792;
        // D s_595_5: read-reg s_595_4:struct
        let s_595_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_595_4 as isize);
            tracer.read_register(s_595_4 as isize, value);
            value
        };
        // C s_595_6: const #22792u : u32
        let s_595_6: u32 = 22792;
        // N s_595_7: write-reg s_595_6 <= s_595_5
        let s_595_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_595_6 as isize, s_595_5);
            tracer.write_register(s_595_6 as isize, s_595_5);
        };
        // D s_595_8: read-var cold:u8
        let s_595_8: bool = fn_state.cold;
        // N s_595_9: branch s_595_8 b856 b596
        if s_595_8 {
            return block_856(state, tracer, fn_state);
        } else {
            return block_596(state, tracer, fn_state);
        };
    }
    fn block_596<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_596_0: jump b597
        return block_597(state, tracer, fn_state);
    }
    fn block_597<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_597_0: const #13440u : u32
        let s_597_0: u32 = 13440;
        // D s_597_1: read-reg s_597_0:struct
        let s_597_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_597_0 as isize);
            tracer.read_register(s_597_0 as isize, value);
            value
        };
        // C s_597_2: const #13440u : u32
        let s_597_2: u32 = 13440;
        // N s_597_3: write-reg s_597_2 <= s_597_1
        let s_597_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_597_2 as isize, s_597_1);
            tracer.write_register(s_597_2 as isize, s_597_1);
        };
        // D s_597_4: read-var cold:u8
        let s_597_4: bool = fn_state.cold;
        // N s_597_5: branch s_597_4 b855 b598
        if s_597_4 {
            return block_855(state, tracer, fn_state);
        } else {
            return block_598(state, tracer, fn_state);
        };
    }
    fn block_598<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_598_0: jump b599
        return block_599(state, tracer, fn_state);
    }
    fn block_599<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_599_0: const #101920u : u32
        let s_599_0: u32 = 101920;
        // D s_599_1: read-reg s_599_0:struct
        let s_599_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_599_0 as isize);
            tracer.read_register(s_599_0 as isize, value);
            value
        };
        // C s_599_2: const #101920u : u32
        let s_599_2: u32 = 101920;
        // N s_599_3: write-reg s_599_2 <= s_599_1
        let s_599_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_599_2 as isize, s_599_1);
            tracer.write_register(s_599_2 as isize, s_599_1);
        };
        // D s_599_4: read-var cold:u8
        let s_599_4: bool = fn_state.cold;
        // N s_599_5: branch s_599_4 b854 b600
        if s_599_4 {
            return block_854(state, tracer, fn_state);
        } else {
            return block_600(state, tracer, fn_state);
        };
    }
    fn block_600<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_600_0: jump b601
        return block_601(state, tracer, fn_state);
    }
    fn block_601<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_601_0: const #10512u : u32
        let s_601_0: u32 = 10512;
        // D s_601_1: read-reg s_601_0:struct
        let s_601_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_0 as isize);
            tracer.read_register(s_601_0 as isize, value);
            value
        };
        // C s_601_2: const #10512u : u32
        let s_601_2: u32 = 10512;
        // N s_601_3: write-reg s_601_2 <= s_601_1
        let s_601_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_2 as isize, s_601_1);
            tracer.write_register(s_601_2 as isize, s_601_1);
        };
        // C s_601_4: const #10512u : u32
        let s_601_4: u32 = 10512;
        // D s_601_5: read-reg s_601_4:struct
        let s_601_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_4 as isize);
            tracer.read_register(s_601_4 as isize, value);
            value
        };
        // C s_601_6: const #10512u : u32
        let s_601_6: u32 = 10512;
        // N s_601_7: write-reg s_601_6 <= s_601_5
        let s_601_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_6 as isize, s_601_5);
            tracer.write_register(s_601_6 as isize, s_601_5);
        };
        // C s_601_8: const #10512u : u32
        let s_601_8: u32 = 10512;
        // D s_601_9: read-reg s_601_8:struct
        let s_601_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_8 as isize);
            tracer.read_register(s_601_8 as isize, value);
            value
        };
        // C s_601_10: const #10512u : u32
        let s_601_10: u32 = 10512;
        // N s_601_11: write-reg s_601_10 <= s_601_9
        let s_601_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_10 as isize, s_601_9);
            tracer.write_register(s_601_10 as isize, s_601_9);
        };
        // C s_601_12: const #90496u : u32
        let s_601_12: u32 = 90496;
        // D s_601_13: read-reg s_601_12:struct
        let s_601_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_12 as isize);
            tracer.read_register(s_601_12 as isize, value);
            value
        };
        // C s_601_14: const #90496u : u32
        let s_601_14: u32 = 90496;
        // N s_601_15: write-reg s_601_14 <= s_601_13
        let s_601_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_14 as isize, s_601_13);
            tracer.write_register(s_601_14 as isize, s_601_13);
        };
        // C s_601_16: const #104848u : u32
        let s_601_16: u32 = 104848;
        // D s_601_17: read-reg s_601_16:struct
        let s_601_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_16 as isize);
            tracer.read_register(s_601_16 as isize, value);
            value
        };
        // C s_601_18: const #104848u : u32
        let s_601_18: u32 = 104848;
        // N s_601_19: write-reg s_601_18 <= s_601_17
        let s_601_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_18 as isize, s_601_17);
            tracer.write_register(s_601_18 as isize, s_601_17);
        };
        // C s_601_20: const #14656u : u32
        let s_601_20: u32 = 14656;
        // D s_601_21: read-reg s_601_20:struct
        let s_601_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_20 as isize);
            tracer.read_register(s_601_20 as isize, value);
            value
        };
        // C s_601_22: const #14656u : u32
        let s_601_22: u32 = 14656;
        // N s_601_23: write-reg s_601_22 <= s_601_21
        let s_601_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_22 as isize, s_601_21);
            tracer.write_register(s_601_22 as isize, s_601_21);
        };
        // C s_601_24: const #101208u : u32
        let s_601_24: u32 = 101208;
        // D s_601_25: read-reg s_601_24:struct
        let s_601_25: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_24 as isize);
            tracer.read_register(s_601_24 as isize, value);
            value
        };
        // C s_601_26: const #101208u : u32
        let s_601_26: u32 = 101208;
        // N s_601_27: write-reg s_601_26 <= s_601_25
        let s_601_27: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_26 as isize, s_601_25);
            tracer.write_register(s_601_26 as isize, s_601_25);
        };
        // C s_601_28: const #101208u : u32
        let s_601_28: u32 = 101208;
        // D s_601_29: read-reg s_601_28:struct
        let s_601_29: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_28 as isize);
            tracer.read_register(s_601_28 as isize, value);
            value
        };
        // C s_601_30: const #101208u : u32
        let s_601_30: u32 = 101208;
        // N s_601_31: write-reg s_601_30 <= s_601_29
        let s_601_31: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_30 as isize, s_601_29);
            tracer.write_register(s_601_30 as isize, s_601_29);
        };
        // C s_601_32: const #12736u : u32
        let s_601_32: u32 = 12736;
        // D s_601_33: read-reg s_601_32:struct
        let s_601_33: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_32 as isize);
            tracer.read_register(s_601_32 as isize, value);
            value
        };
        // C s_601_34: const #12736u : u32
        let s_601_34: u32 = 12736;
        // N s_601_35: write-reg s_601_34 <= s_601_33
        let s_601_35: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_34 as isize, s_601_33);
            tracer.write_register(s_601_34 as isize, s_601_33);
        };
        // C s_601_36: const #12736u : u32
        let s_601_36: u32 = 12736;
        // D s_601_37: read-reg s_601_36:struct
        let s_601_37: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_36 as isize);
            tracer.read_register(s_601_36 as isize, value);
            value
        };
        // C s_601_38: const #12736u : u32
        let s_601_38: u32 = 12736;
        // N s_601_39: write-reg s_601_38 <= s_601_37
        let s_601_39: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_38 as isize, s_601_37);
            tracer.write_register(s_601_38 as isize, s_601_37);
        };
        // C s_601_40: const #101816u : u32
        let s_601_40: u32 = 101816;
        // D s_601_41: read-reg s_601_40:struct
        let s_601_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_40 as isize);
            tracer.read_register(s_601_40 as isize, value);
            value
        };
        // C s_601_42: const #101816u : u32
        let s_601_42: u32 = 101816;
        // N s_601_43: write-reg s_601_42 <= s_601_41
        let s_601_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_42 as isize, s_601_41);
            tracer.write_register(s_601_42 as isize, s_601_41);
        };
        // C s_601_44: const #22744u : u32
        let s_601_44: u32 = 22744;
        // D s_601_45: read-reg s_601_44:struct
        let s_601_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_44 as isize);
            tracer.read_register(s_601_44 as isize, value);
            value
        };
        // C s_601_46: const #22744u : u32
        let s_601_46: u32 = 22744;
        // N s_601_47: write-reg s_601_46 <= s_601_45
        let s_601_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_46 as isize, s_601_45);
            tracer.write_register(s_601_46 as isize, s_601_45);
        };
        // C s_601_48: const #0u : u8
        let s_601_48: bool = false;
        // S s_601_49: call Bit(s_601_48)
        let s_601_49: bool = Bit(state, tracer, s_601_48);
        // C s_601_50: const #22744u : u32
        let s_601_50: u32 = 22744;
        // D s_601_51: read-reg s_601_50:struct
        let s_601_51: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_50 as isize);
            tracer.read_register(s_601_50 as isize, value);
            value
        };
        // C s_601_52: const #22744u : u32
        let s_601_52: u32 = 22744;
        // N s_601_53: write-reg s_601_52 <= s_601_51
        let s_601_53: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_52 as isize, s_601_51);
            tracer.write_register(s_601_52 as isize, s_601_51);
        };
        // C s_601_54: const #20480u : u32
        let s_601_54: u32 = 20480;
        // D s_601_55: read-reg s_601_54:struct
        let s_601_55: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_54 as isize);
            tracer.read_register(s_601_54 as isize, value);
            value
        };
        // C s_601_56: const #20480u : u32
        let s_601_56: u32 = 20480;
        // N s_601_57: write-reg s_601_56 <= s_601_55
        let s_601_57: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_56 as isize, s_601_55);
            tracer.write_register(s_601_56 as isize, s_601_55);
        };
        // C s_601_58: const #20480u : u32
        let s_601_58: u32 = 20480;
        // D s_601_59: read-reg s_601_58:struct
        let s_601_59: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_58 as isize);
            tracer.read_register(s_601_58 as isize, value);
            value
        };
        // C s_601_60: const #20480u : u32
        let s_601_60: u32 = 20480;
        // N s_601_61: write-reg s_601_60 <= s_601_59
        let s_601_61: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_60 as isize, s_601_59);
            tracer.write_register(s_601_60 as isize, s_601_59);
        };
        // C s_601_62: const #20480u : u32
        let s_601_62: u32 = 20480;
        // D s_601_63: read-reg s_601_62:struct
        let s_601_63: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_62 as isize);
            tracer.read_register(s_601_62 as isize, value);
            value
        };
        // C s_601_64: const #20480u : u32
        let s_601_64: u32 = 20480;
        // N s_601_65: write-reg s_601_64 <= s_601_63
        let s_601_65: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_64 as isize, s_601_63);
            tracer.write_register(s_601_64 as isize, s_601_63);
        };
        // C s_601_66: const #13704u : u32
        let s_601_66: u32 = 13704;
        // D s_601_67: read-reg s_601_66:struct
        let s_601_67: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_66 as isize);
            tracer.read_register(s_601_66 as isize, value);
            value
        };
        // C s_601_68: const #13704u : u32
        let s_601_68: u32 = 13704;
        // N s_601_69: write-reg s_601_68 <= s_601_67
        let s_601_69: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_68 as isize, s_601_67);
            tracer.write_register(s_601_68 as isize, s_601_67);
        };
        // C s_601_70: const #13704u : u32
        let s_601_70: u32 = 13704;
        // D s_601_71: read-reg s_601_70:struct
        let s_601_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_70 as isize);
            tracer.read_register(s_601_70 as isize, value);
            value
        };
        // C s_601_72: const #13704u : u32
        let s_601_72: u32 = 13704;
        // N s_601_73: write-reg s_601_72 <= s_601_71
        let s_601_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_72 as isize, s_601_71);
            tracer.write_register(s_601_72 as isize, s_601_71);
        };
        // C s_601_74: const #13704u : u32
        let s_601_74: u32 = 13704;
        // D s_601_75: read-reg s_601_74:struct
        let s_601_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_74 as isize);
            tracer.read_register(s_601_74 as isize, value);
            value
        };
        // C s_601_76: const #13704u : u32
        let s_601_76: u32 = 13704;
        // N s_601_77: write-reg s_601_76 <= s_601_75
        let s_601_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_76 as isize, s_601_75);
            tracer.write_register(s_601_76 as isize, s_601_75);
        };
        // C s_601_78: const #104928u : u32
        let s_601_78: u32 = 104928;
        // D s_601_79: read-reg s_601_78:struct
        let s_601_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_78 as isize);
            tracer.read_register(s_601_78 as isize, value);
            value
        };
        // C s_601_80: const #104928u : u32
        let s_601_80: u32 = 104928;
        // N s_601_81: write-reg s_601_80 <= s_601_79
        let s_601_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_80 as isize, s_601_79);
            tracer.write_register(s_601_80 as isize, s_601_79);
        };
        // C s_601_82: const #0u : u8
        let s_601_82: bool = false;
        // S s_601_83: call Bit(s_601_82)
        let s_601_83: bool = Bit(state, tracer, s_601_82);
        // C s_601_84: const #104928u : u32
        let s_601_84: u32 = 104928;
        // D s_601_85: read-reg s_601_84:struct
        let s_601_85: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_84 as isize);
            tracer.read_register(s_601_84 as isize, value);
            value
        };
        // C s_601_86: const #104928u : u32
        let s_601_86: u32 = 104928;
        // N s_601_87: write-reg s_601_86 <= s_601_85
        let s_601_87: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_86 as isize, s_601_85);
            tracer.write_register(s_601_86 as isize, s_601_85);
        };
        // C s_601_88: const #21072u : u32
        let s_601_88: u32 = 21072;
        // D s_601_89: read-reg s_601_88:struct
        let s_601_89: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_88 as isize);
            tracer.read_register(s_601_88 as isize, value);
            value
        };
        // C s_601_90: const #21072u : u32
        let s_601_90: u32 = 21072;
        // N s_601_91: write-reg s_601_90 <= s_601_89
        let s_601_91: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_90 as isize, s_601_89);
            tracer.write_register(s_601_90 as isize, s_601_89);
        };
        // C s_601_92: const #0u : u8
        let s_601_92: bool = false;
        // S s_601_93: call Bit(s_601_92)
        let s_601_93: bool = Bit(state, tracer, s_601_92);
        // C s_601_94: const #21072u : u32
        let s_601_94: u32 = 21072;
        // D s_601_95: read-reg s_601_94:struct
        let s_601_95: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_94 as isize);
            tracer.read_register(s_601_94 as isize, value);
            value
        };
        // C s_601_96: const #21072u : u32
        let s_601_96: u32 = 21072;
        // N s_601_97: write-reg s_601_96 <= s_601_95
        let s_601_97: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_96 as isize, s_601_95);
            tracer.write_register(s_601_96 as isize, s_601_95);
        };
        // C s_601_98: const #14736u : u32
        let s_601_98: u32 = 14736;
        // D s_601_99: read-reg s_601_98:struct
        let s_601_99: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_98 as isize);
            tracer.read_register(s_601_98 as isize, value);
            value
        };
        // C s_601_100: const #14736u : u32
        let s_601_100: u32 = 14736;
        // N s_601_101: write-reg s_601_100 <= s_601_99
        let s_601_101: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_100 as isize, s_601_99);
            tracer.write_register(s_601_100 as isize, s_601_99);
        };
        // C s_601_102: const #12904u : u32
        let s_601_102: u32 = 12904;
        // D s_601_103: read-reg s_601_102:struct
        let s_601_103: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_102 as isize);
            tracer.read_register(s_601_102 as isize, value);
            value
        };
        // C s_601_104: const #12904u : u32
        let s_601_104: u32 = 12904;
        // N s_601_105: write-reg s_601_104 <= s_601_103
        let s_601_105: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_104 as isize, s_601_103);
            tracer.write_register(s_601_104 as isize, s_601_103);
        };
        // C s_601_106: const #0u : u8
        let s_601_106: bool = false;
        // S s_601_107: call Bit(s_601_106)
        let s_601_107: bool = Bit(state, tracer, s_601_106);
        // C s_601_108: const #12904u : u32
        let s_601_108: u32 = 12904;
        // D s_601_109: read-reg s_601_108:struct
        let s_601_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_108 as isize);
            tracer.read_register(s_601_108 as isize, value);
            value
        };
        // C s_601_110: const #12904u : u32
        let s_601_110: u32 = 12904;
        // N s_601_111: write-reg s_601_110 <= s_601_109
        let s_601_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_110 as isize, s_601_109);
            tracer.write_register(s_601_110 as isize, s_601_109);
        };
        // C s_601_112: const #15704u : u32
        let s_601_112: u32 = 15704;
        // D s_601_113: read-reg s_601_112:struct
        let s_601_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_112 as isize);
            tracer.read_register(s_601_112 as isize, value);
            value
        };
        // C s_601_114: const #15704u : u32
        let s_601_114: u32 = 15704;
        // N s_601_115: write-reg s_601_114 <= s_601_113
        let s_601_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_114 as isize, s_601_113);
            tracer.write_register(s_601_114 as isize, s_601_113);
        };
        // C s_601_116: const #15704u : u32
        let s_601_116: u32 = 15704;
        // D s_601_117: read-reg s_601_116:struct
        let s_601_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_116 as isize);
            tracer.read_register(s_601_116 as isize, value);
            value
        };
        // C s_601_118: const #15704u : u32
        let s_601_118: u32 = 15704;
        // N s_601_119: write-reg s_601_118 <= s_601_117
        let s_601_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_118 as isize, s_601_117);
            tracer.write_register(s_601_118 as isize, s_601_117);
        };
        // C s_601_120: const #10144u : u32
        let s_601_120: u32 = 10144;
        // D s_601_121: read-reg s_601_120:struct
        let s_601_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_120 as isize);
            tracer.read_register(s_601_120 as isize, value);
            value
        };
        // C s_601_122: const #10144u : u32
        let s_601_122: u32 = 10144;
        // N s_601_123: write-reg s_601_122 <= s_601_121
        let s_601_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_122 as isize, s_601_121);
            tracer.write_register(s_601_122 as isize, s_601_121);
        };
        // C s_601_124: const #19328u : u32
        let s_601_124: u32 = 19328;
        // D s_601_125: read-reg s_601_124:struct
        let s_601_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_124 as isize);
            tracer.read_register(s_601_124 as isize, value);
            value
        };
        // C s_601_126: const #19328u : u32
        let s_601_126: u32 = 19328;
        // N s_601_127: write-reg s_601_126 <= s_601_125
        let s_601_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_126 as isize, s_601_125);
            tracer.write_register(s_601_126 as isize, s_601_125);
        };
        // C s_601_128: const #19328u : u32
        let s_601_128: u32 = 19328;
        // D s_601_129: read-reg s_601_128:struct
        let s_601_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_128 as isize);
            tracer.read_register(s_601_128 as isize, value);
            value
        };
        // C s_601_130: const #19328u : u32
        let s_601_130: u32 = 19328;
        // N s_601_131: write-reg s_601_130 <= s_601_129
        let s_601_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_130 as isize, s_601_129);
            tracer.write_register(s_601_130 as isize, s_601_129);
        };
        // C s_601_132: const #19328u : u32
        let s_601_132: u32 = 19328;
        // D s_601_133: read-reg s_601_132:struct
        let s_601_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_132 as isize);
            tracer.read_register(s_601_132 as isize, value);
            value
        };
        // C s_601_134: const #19328u : u32
        let s_601_134: u32 = 19328;
        // N s_601_135: write-reg s_601_134 <= s_601_133
        let s_601_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_134 as isize, s_601_133);
            tracer.write_register(s_601_134 as isize, s_601_133);
        };
        // C s_601_136: const #19328u : u32
        let s_601_136: u32 = 19328;
        // D s_601_137: read-reg s_601_136:struct
        let s_601_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_136 as isize);
            tracer.read_register(s_601_136 as isize, value);
            value
        };
        // C s_601_138: const #19328u : u32
        let s_601_138: u32 = 19328;
        // N s_601_139: write-reg s_601_138 <= s_601_137
        let s_601_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_138 as isize, s_601_137);
            tracer.write_register(s_601_138 as isize, s_601_137);
        };
        // C s_601_140: const #0u : u8
        let s_601_140: bool = false;
        // S s_601_141: call Bit(s_601_140)
        let s_601_141: bool = Bit(state, tracer, s_601_140);
        // C s_601_142: const #19328u : u32
        let s_601_142: u32 = 19328;
        // D s_601_143: read-reg s_601_142:struct
        let s_601_143: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_142 as isize);
            tracer.read_register(s_601_142 as isize, value);
            value
        };
        // C s_601_144: const #19328u : u32
        let s_601_144: u32 = 19328;
        // N s_601_145: write-reg s_601_144 <= s_601_143
        let s_601_145: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_144 as isize, s_601_143);
            tracer.write_register(s_601_144 as isize, s_601_143);
        };
        // C s_601_146: const #0u : u8
        let s_601_146: bool = false;
        // S s_601_147: call Bit(s_601_146)
        let s_601_147: bool = Bit(state, tracer, s_601_146);
        // C s_601_148: const #19328u : u32
        let s_601_148: u32 = 19328;
        // D s_601_149: read-reg s_601_148:struct
        let s_601_149: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_148 as isize);
            tracer.read_register(s_601_148 as isize, value);
            value
        };
        // C s_601_150: const #19328u : u32
        let s_601_150: u32 = 19328;
        // N s_601_151: write-reg s_601_150 <= s_601_149
        let s_601_151: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_150 as isize, s_601_149);
            tracer.write_register(s_601_150 as isize, s_601_149);
        };
        // C s_601_152: const #19328u : u32
        let s_601_152: u32 = 19328;
        // D s_601_153: read-reg s_601_152:struct
        let s_601_153: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_152 as isize);
            tracer.read_register(s_601_152 as isize, value);
            value
        };
        // C s_601_154: const #19328u : u32
        let s_601_154: u32 = 19328;
        // N s_601_155: write-reg s_601_154 <= s_601_153
        let s_601_155: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_154 as isize, s_601_153);
            tracer.write_register(s_601_154 as isize, s_601_153);
        };
        // C s_601_156: const #19328u : u32
        let s_601_156: u32 = 19328;
        // D s_601_157: read-reg s_601_156:struct
        let s_601_157: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_156 as isize);
            tracer.read_register(s_601_156 as isize, value);
            value
        };
        // C s_601_158: const #19328u : u32
        let s_601_158: u32 = 19328;
        // N s_601_159: write-reg s_601_158 <= s_601_157
        let s_601_159: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_158 as isize, s_601_157);
            tracer.write_register(s_601_158 as isize, s_601_157);
        };
        // C s_601_160: const #19328u : u32
        let s_601_160: u32 = 19328;
        // D s_601_161: read-reg s_601_160:struct
        let s_601_161: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_160 as isize);
            tracer.read_register(s_601_160 as isize, value);
            value
        };
        // C s_601_162: const #19328u : u32
        let s_601_162: u32 = 19328;
        // N s_601_163: write-reg s_601_162 <= s_601_161
        let s_601_163: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_162 as isize, s_601_161);
            tracer.write_register(s_601_162 as isize, s_601_161);
        };
        // C s_601_164: const #0u : u8
        let s_601_164: bool = false;
        // S s_601_165: call Bit(s_601_164)
        let s_601_165: bool = Bit(state, tracer, s_601_164);
        // C s_601_166: const #19328u : u32
        let s_601_166: u32 = 19328;
        // D s_601_167: read-reg s_601_166:struct
        let s_601_167: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_166 as isize);
            tracer.read_register(s_601_166 as isize, value);
            value
        };
        // C s_601_168: const #19328u : u32
        let s_601_168: u32 = 19328;
        // N s_601_169: write-reg s_601_168 <= s_601_167
        let s_601_169: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_168 as isize, s_601_167);
            tracer.write_register(s_601_168 as isize, s_601_167);
        };
        // C s_601_170: const #19328u : u32
        let s_601_170: u32 = 19328;
        // D s_601_171: read-reg s_601_170:struct
        let s_601_171: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_170 as isize);
            tracer.read_register(s_601_170 as isize, value);
            value
        };
        // C s_601_172: const #19328u : u32
        let s_601_172: u32 = 19328;
        // N s_601_173: write-reg s_601_172 <= s_601_171
        let s_601_173: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_172 as isize, s_601_171);
            tracer.write_register(s_601_172 as isize, s_601_171);
        };
        // C s_601_174: const #19328u : u32
        let s_601_174: u32 = 19328;
        // D s_601_175: read-reg s_601_174:struct
        let s_601_175: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_174 as isize);
            tracer.read_register(s_601_174 as isize, value);
            value
        };
        // C s_601_176: const #19328u : u32
        let s_601_176: u32 = 19328;
        // N s_601_177: write-reg s_601_176 <= s_601_175
        let s_601_177: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_176 as isize, s_601_175);
            tracer.write_register(s_601_176 as isize, s_601_175);
        };
        // C s_601_178: const #15272u : u32
        let s_601_178: u32 = 15272;
        // D s_601_179: read-reg s_601_178:struct
        let s_601_179: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_178 as isize);
            tracer.read_register(s_601_178 as isize, value);
            value
        };
        // C s_601_180: const #15272u : u32
        let s_601_180: u32 = 15272;
        // N s_601_181: write-reg s_601_180 <= s_601_179
        let s_601_181: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_180 as isize, s_601_179);
            tracer.write_register(s_601_180 as isize, s_601_179);
        };
        // C s_601_182: const #13632u : u32
        let s_601_182: u32 = 13632;
        // D s_601_183: read-reg s_601_182:struct
        let s_601_183: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_182 as isize);
            tracer.read_register(s_601_182 as isize, value);
            value
        };
        // C s_601_184: const #13632u : u32
        let s_601_184: u32 = 13632;
        // N s_601_185: write-reg s_601_184 <= s_601_183
        let s_601_185: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_184 as isize, s_601_183);
            tracer.write_register(s_601_184 as isize, s_601_183);
        };
        // C s_601_186: const #13632u : u32
        let s_601_186: u32 = 13632;
        // D s_601_187: read-reg s_601_186:struct
        let s_601_187: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_186 as isize);
            tracer.read_register(s_601_186 as isize, value);
            value
        };
        // C s_601_188: const #13632u : u32
        let s_601_188: u32 = 13632;
        // N s_601_189: write-reg s_601_188 <= s_601_187
        let s_601_189: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_188 as isize, s_601_187);
            tracer.write_register(s_601_188 as isize, s_601_187);
        };
        // C s_601_190: const #13632u : u32
        let s_601_190: u32 = 13632;
        // D s_601_191: read-reg s_601_190:struct
        let s_601_191: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_190 as isize);
            tracer.read_register(s_601_190 as isize, value);
            value
        };
        // C s_601_192: const #13632u : u32
        let s_601_192: u32 = 13632;
        // N s_601_193: write-reg s_601_192 <= s_601_191
        let s_601_193: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_192 as isize, s_601_191);
            tracer.write_register(s_601_192 as isize, s_601_191);
        };
        // C s_601_194: const #13632u : u32
        let s_601_194: u32 = 13632;
        // D s_601_195: read-reg s_601_194:struct
        let s_601_195: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_194 as isize);
            tracer.read_register(s_601_194 as isize, value);
            value
        };
        // C s_601_196: const #13632u : u32
        let s_601_196: u32 = 13632;
        // N s_601_197: write-reg s_601_196 <= s_601_195
        let s_601_197: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_196 as isize, s_601_195);
            tracer.write_register(s_601_196 as isize, s_601_195);
        };
        // C s_601_198: const #13632u : u32
        let s_601_198: u32 = 13632;
        // D s_601_199: read-reg s_601_198:struct
        let s_601_199: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_198 as isize);
            tracer.read_register(s_601_198 as isize, value);
            value
        };
        // C s_601_200: const #13632u : u32
        let s_601_200: u32 = 13632;
        // N s_601_201: write-reg s_601_200 <= s_601_199
        let s_601_201: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_200 as isize, s_601_199);
            tracer.write_register(s_601_200 as isize, s_601_199);
        };
        // C s_601_202: const #13632u : u32
        let s_601_202: u32 = 13632;
        // D s_601_203: read-reg s_601_202:struct
        let s_601_203: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_202 as isize);
            tracer.read_register(s_601_202 as isize, value);
            value
        };
        // C s_601_204: const #13632u : u32
        let s_601_204: u32 = 13632;
        // N s_601_205: write-reg s_601_204 <= s_601_203
        let s_601_205: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_204 as isize, s_601_203);
            tracer.write_register(s_601_204 as isize, s_601_203);
        };
        // C s_601_206: const #21792u : u32
        let s_601_206: u32 = 21792;
        // D s_601_207: read-reg s_601_206:struct
        let s_601_207: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_206 as isize);
            tracer.read_register(s_601_206 as isize, value);
            value
        };
        // C s_601_208: const #21792u : u32
        let s_601_208: u32 = 21792;
        // N s_601_209: write-reg s_601_208 <= s_601_207
        let s_601_209: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_208 as isize, s_601_207);
            tracer.write_register(s_601_208 as isize, s_601_207);
        };
        // C s_601_210: const #100824u : u32
        let s_601_210: u32 = 100824;
        // D s_601_211: read-reg s_601_210:struct
        let s_601_211: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_210 as isize);
            tracer.read_register(s_601_210 as isize, value);
            value
        };
        // C s_601_212: const #100824u : u32
        let s_601_212: u32 = 100824;
        // N s_601_213: write-reg s_601_212 <= s_601_211
        let s_601_213: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_212 as isize, s_601_211);
            tracer.write_register(s_601_212 as isize, s_601_211);
        };
        // C s_601_214: const #0u : u8
        let s_601_214: bool = false;
        // S s_601_215: call Bit(s_601_214)
        let s_601_215: bool = Bit(state, tracer, s_601_214);
        // C s_601_216: const #100824u : u32
        let s_601_216: u32 = 100824;
        // D s_601_217: read-reg s_601_216:struct
        let s_601_217: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_216 as isize);
            tracer.read_register(s_601_216 as isize, value);
            value
        };
        // C s_601_218: const #100824u : u32
        let s_601_218: u32 = 100824;
        // N s_601_219: write-reg s_601_218 <= s_601_217
        let s_601_219: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_218 as isize, s_601_217);
            tracer.write_register(s_601_218 as isize, s_601_217);
        };
        // C s_601_220: const #100824u : u32
        let s_601_220: u32 = 100824;
        // D s_601_221: read-reg s_601_220:struct
        let s_601_221: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_220 as isize);
            tracer.read_register(s_601_220 as isize, value);
            value
        };
        // C s_601_222: const #100824u : u32
        let s_601_222: u32 = 100824;
        // N s_601_223: write-reg s_601_222 <= s_601_221
        let s_601_223: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_222 as isize, s_601_221);
            tracer.write_register(s_601_222 as isize, s_601_221);
        };
        // C s_601_224: const #100824u : u32
        let s_601_224: u32 = 100824;
        // D s_601_225: read-reg s_601_224:struct
        let s_601_225: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_224 as isize);
            tracer.read_register(s_601_224 as isize, value);
            value
        };
        // C s_601_226: const #100824u : u32
        let s_601_226: u32 = 100824;
        // N s_601_227: write-reg s_601_226 <= s_601_225
        let s_601_227: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_226 as isize, s_601_225);
            tracer.write_register(s_601_226 as isize, s_601_225);
        };
        // C s_601_228: const #18272u : u32
        let s_601_228: u32 = 18272;
        // D s_601_229: read-reg s_601_228:struct
        let s_601_229: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_601_228 as isize);
            tracer.read_register(s_601_228 as isize, value);
            value
        };
        // C s_601_230: const #18272u : u32
        let s_601_230: u32 = 18272;
        // N s_601_231: write-reg s_601_230 <= s_601_229
        let s_601_231: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_601_230 as isize, s_601_229);
            tracer.write_register(s_601_230 as isize, s_601_229);
        };
        // D s_601_232: read-var cold:u8
        let s_601_232: bool = fn_state.cold;
        // N s_601_233: branch s_601_232 b853 b602
        if s_601_232 {
            return block_853(state, tracer, fn_state);
        } else {
            return block_602(state, tracer, fn_state);
        };
    }
    fn block_602<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_602_0: const #0u : u8
        let s_602_0: bool = false;
        // D s_602_1: write-var gs#40963 <= s_602_0
        fn_state.gs_40963 = s_602_0;
        // N s_602_2: jump b603
        return block_603(state, tracer, fn_state);
    }
    fn block_603<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_603_0: read-var gs#40963:u8
        let s_603_0: bool = fn_state.gs_40963;
        // N s_603_1: branch s_603_0 b852 b604
        if s_603_0 {
            return block_852(state, tracer, fn_state);
        } else {
            return block_604(state, tracer, fn_state);
        };
    }
    fn block_604<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_604_0: jump b605
        return block_605(state, tracer, fn_state);
    }
    fn block_605<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_605_0: read-var cold:u8
        let s_605_0: bool = fn_state.cold;
        // D s_605_1: not s_605_0
        let s_605_1: bool = !s_605_0;
        // N s_605_2: branch s_605_1 b851 b606
        if s_605_1 {
            return block_851(state, tracer, fn_state);
        } else {
            return block_606(state, tracer, fn_state);
        };
    }
    fn block_606<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_606_0: const #0u : u8
        let s_606_0: bool = false;
        // D s_606_1: write-var gs#40964 <= s_606_0
        fn_state.gs_40964 = s_606_0;
        // N s_606_2: jump b607
        return block_607(state, tracer, fn_state);
    }
    fn block_607<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_607_0: read-var gs#40964:u8
        let s_607_0: bool = fn_state.gs_40964;
        // N s_607_1: branch s_607_0 b850 b608
        if s_607_0 {
            return block_850(state, tracer, fn_state);
        } else {
            return block_608(state, tracer, fn_state);
        };
    }
    fn block_608<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_608_0: jump b609
        return block_609(state, tracer, fn_state);
    }
    fn block_609<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_609_0: read-var cold:u8
        let s_609_0: bool = fn_state.cold;
        // N s_609_1: branch s_609_0 b849 b610
        if s_609_0 {
            return block_849(state, tracer, fn_state);
        } else {
            return block_610(state, tracer, fn_state);
        };
    }
    fn block_610<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_610_0: const #0u : u8
        let s_610_0: bool = false;
        // D s_610_1: write-var gs#40965 <= s_610_0
        fn_state.gs_40965 = s_610_0;
        // N s_610_2: jump b611
        return block_611(state, tracer, fn_state);
    }
    fn block_611<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_611_0: read-var gs#40965:u8
        let s_611_0: bool = fn_state.gs_40965;
        // N s_611_1: branch s_611_0 b848 b612
        if s_611_0 {
            return block_848(state, tracer, fn_state);
        } else {
            return block_612(state, tracer, fn_state);
        };
    }
    fn block_612<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_612_0: jump b613
        return block_613(state, tracer, fn_state);
    }
    fn block_613<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_613_0: read-var cold:u8
        let s_613_0: bool = fn_state.cold;
        // D s_613_1: not s_613_0
        let s_613_1: bool = !s_613_0;
        // N s_613_2: branch s_613_1 b847 b614
        if s_613_1 {
            return block_847(state, tracer, fn_state);
        } else {
            return block_614(state, tracer, fn_state);
        };
    }
    fn block_614<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_614_0: const #0u : u8
        let s_614_0: bool = false;
        // D s_614_1: write-var gs#40966 <= s_614_0
        fn_state.gs_40966 = s_614_0;
        // N s_614_2: jump b615
        return block_615(state, tracer, fn_state);
    }
    fn block_615<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_615_0: read-var gs#40966:u8
        let s_615_0: bool = fn_state.gs_40966;
        // N s_615_1: branch s_615_0 b846 b616
        if s_615_0 {
            return block_846(state, tracer, fn_state);
        } else {
            return block_616(state, tracer, fn_state);
        };
    }
    fn block_616<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_616_0: jump b617
        return block_617(state, tracer, fn_state);
    }
    fn block_617<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_617_0: const #18272u : u32
        let s_617_0: u32 = 18272;
        // D s_617_1: read-reg s_617_0:struct
        let s_617_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_617_0 as isize);
            tracer.read_register(s_617_0 as isize, value);
            value
        };
        // C s_617_2: const #18272u : u32
        let s_617_2: u32 = 18272;
        // N s_617_3: write-reg s_617_2 <= s_617_1
        let s_617_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_617_2 as isize, s_617_1);
            tracer.write_register(s_617_2 as isize, s_617_1);
        };
        // D s_617_4: read-var cold:u8
        let s_617_4: bool = fn_state.cold;
        // N s_617_5: branch s_617_4 b845 b618
        if s_617_4 {
            return block_845(state, tracer, fn_state);
        } else {
            return block_618(state, tracer, fn_state);
        };
    }
    fn block_618<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_618_0: const #0u : u8
        let s_618_0: bool = false;
        // D s_618_1: write-var gs#40970 <= s_618_0
        fn_state.gs_40970 = s_618_0;
        // N s_618_2: jump b619
        return block_619(state, tracer, fn_state);
    }
    fn block_619<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_619_0: read-var gs#40970:u8
        let s_619_0: bool = fn_state.gs_40970;
        // N s_619_1: branch s_619_0 b844 b620
        if s_619_0 {
            return block_844(state, tracer, fn_state);
        } else {
            return block_620(state, tracer, fn_state);
        };
    }
    fn block_620<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_620_0: jump b621
        return block_621(state, tracer, fn_state);
    }
    fn block_621<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_621_0: read-var cold:u8
        let s_621_0: bool = fn_state.cold;
        // D s_621_1: not s_621_0
        let s_621_1: bool = !s_621_0;
        // N s_621_2: branch s_621_1 b843 b622
        if s_621_1 {
            return block_843(state, tracer, fn_state);
        } else {
            return block_622(state, tracer, fn_state);
        };
    }
    fn block_622<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_622_0: const #0u : u8
        let s_622_0: bool = false;
        // D s_622_1: write-var gs#40971 <= s_622_0
        fn_state.gs_40971 = s_622_0;
        // N s_622_2: jump b623
        return block_623(state, tracer, fn_state);
    }
    fn block_623<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_623_0: read-var gs#40971:u8
        let s_623_0: bool = fn_state.gs_40971;
        // N s_623_1: branch s_623_0 b842 b624
        if s_623_0 {
            return block_842(state, tracer, fn_state);
        } else {
            return block_624(state, tracer, fn_state);
        };
    }
    fn block_624<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_624_0: jump b625
        return block_625(state, tracer, fn_state);
    }
    fn block_625<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_625_0: const #0u : u8
        let s_625_0: bool = false;
        // S s_625_1: call Bit(s_625_0)
        let s_625_1: bool = Bit(state, tracer, s_625_0);
        // C s_625_2: const #18272u : u32
        let s_625_2: u32 = 18272;
        // D s_625_3: read-reg s_625_2:struct
        let s_625_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_625_2 as isize);
            tracer.read_register(s_625_2 as isize, value);
            value
        };
        // C s_625_4: const #18272u : u32
        let s_625_4: u32 = 18272;
        // N s_625_5: write-reg s_625_4 <= s_625_3
        let s_625_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_625_4 as isize, s_625_3);
            tracer.write_register(s_625_4 as isize, s_625_3);
        };
        // D s_625_6: read-var cold:u8
        let s_625_6: bool = fn_state.cold;
        // N s_625_7: branch s_625_6 b841 b626
        if s_625_6 {
            return block_841(state, tracer, fn_state);
        } else {
            return block_626(state, tracer, fn_state);
        };
    }
    fn block_626<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_626_0: const #0u : u8
        let s_626_0: bool = false;
        // D s_626_1: write-var gs#40974 <= s_626_0
        fn_state.gs_40974 = s_626_0;
        // N s_626_2: jump b627
        return block_627(state, tracer, fn_state);
    }
    fn block_627<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_627_0: read-var gs#40974:u8
        let s_627_0: bool = fn_state.gs_40974;
        // N s_627_1: branch s_627_0 b840 b628
        if s_627_0 {
            return block_840(state, tracer, fn_state);
        } else {
            return block_628(state, tracer, fn_state);
        };
    }
    fn block_628<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_628_0: jump b629
        return block_629(state, tracer, fn_state);
    }
    fn block_629<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_629_0: read-var cold:u8
        let s_629_0: bool = fn_state.cold;
        // D s_629_1: not s_629_0
        let s_629_1: bool = !s_629_0;
        // N s_629_2: branch s_629_1 b839 b630
        if s_629_1 {
            return block_839(state, tracer, fn_state);
        } else {
            return block_630(state, tracer, fn_state);
        };
    }
    fn block_630<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_630_0: const #0u : u8
        let s_630_0: bool = false;
        // D s_630_1: write-var gs#40975 <= s_630_0
        fn_state.gs_40975 = s_630_0;
        // N s_630_2: jump b631
        return block_631(state, tracer, fn_state);
    }
    fn block_631<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_631_0: read-var gs#40975:u8
        let s_631_0: bool = fn_state.gs_40975;
        // N s_631_1: branch s_631_0 b838 b632
        if s_631_0 {
            return block_838(state, tracer, fn_state);
        } else {
            return block_632(state, tracer, fn_state);
        };
    }
    fn block_632<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_632_0: jump b633
        return block_633(state, tracer, fn_state);
    }
    fn block_633<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_633_0: read-var cold:u8
        let s_633_0: bool = fn_state.cold;
        // N s_633_1: branch s_633_0 b837 b634
        if s_633_0 {
            return block_837(state, tracer, fn_state);
        } else {
            return block_634(state, tracer, fn_state);
        };
    }
    fn block_634<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_634_0: const #0u : u8
        let s_634_0: bool = false;
        // D s_634_1: write-var gs#40976 <= s_634_0
        fn_state.gs_40976 = s_634_0;
        // N s_634_2: jump b635
        return block_635(state, tracer, fn_state);
    }
    fn block_635<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_635_0: read-var gs#40976:u8
        let s_635_0: bool = fn_state.gs_40976;
        // N s_635_1: branch s_635_0 b836 b636
        if s_635_0 {
            return block_836(state, tracer, fn_state);
        } else {
            return block_636(state, tracer, fn_state);
        };
    }
    fn block_636<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_636_0: jump b637
        return block_637(state, tracer, fn_state);
    }
    fn block_637<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_637_0: read-var cold:u8
        let s_637_0: bool = fn_state.cold;
        // D s_637_1: not s_637_0
        let s_637_1: bool = !s_637_0;
        // N s_637_2: branch s_637_1 b835 b638
        if s_637_1 {
            return block_835(state, tracer, fn_state);
        } else {
            return block_638(state, tracer, fn_state);
        };
    }
    fn block_638<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_638_0: const #0u : u8
        let s_638_0: bool = false;
        // D s_638_1: write-var gs#40977 <= s_638_0
        fn_state.gs_40977 = s_638_0;
        // N s_638_2: jump b639
        return block_639(state, tracer, fn_state);
    }
    fn block_639<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_639_0: read-var gs#40977:u8
        let s_639_0: bool = fn_state.gs_40977;
        // N s_639_1: branch s_639_0 b834 b640
        if s_639_0 {
            return block_834(state, tracer, fn_state);
        } else {
            return block_640(state, tracer, fn_state);
        };
    }
    fn block_640<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_640_0: jump b641
        return block_641(state, tracer, fn_state);
    }
    fn block_641<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_641_0: read-var cold:u8
        let s_641_0: bool = fn_state.cold;
        // N s_641_1: branch s_641_0 b833 b642
        if s_641_0 {
            return block_833(state, tracer, fn_state);
        } else {
            return block_642(state, tracer, fn_state);
        };
    }
    fn block_642<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_642_0: const #0u : u8
        let s_642_0: bool = false;
        // D s_642_1: write-var gs#40978 <= s_642_0
        fn_state.gs_40978 = s_642_0;
        // N s_642_2: jump b643
        return block_643(state, tracer, fn_state);
    }
    fn block_643<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_643_0: read-var gs#40978:u8
        let s_643_0: bool = fn_state.gs_40978;
        // N s_643_1: branch s_643_0 b832 b644
        if s_643_0 {
            return block_832(state, tracer, fn_state);
        } else {
            return block_644(state, tracer, fn_state);
        };
    }
    fn block_644<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_644_0: jump b645
        return block_645(state, tracer, fn_state);
    }
    fn block_645<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_645_0: read-var cold:u8
        let s_645_0: bool = fn_state.cold;
        // D s_645_1: not s_645_0
        let s_645_1: bool = !s_645_0;
        // N s_645_2: branch s_645_1 b831 b646
        if s_645_1 {
            return block_831(state, tracer, fn_state);
        } else {
            return block_646(state, tracer, fn_state);
        };
    }
    fn block_646<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_646_0: const #0u : u8
        let s_646_0: bool = false;
        // D s_646_1: write-var gs#40979 <= s_646_0
        fn_state.gs_40979 = s_646_0;
        // N s_646_2: jump b647
        return block_647(state, tracer, fn_state);
    }
    fn block_647<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_647_0: read-var gs#40979:u8
        let s_647_0: bool = fn_state.gs_40979;
        // N s_647_1: branch s_647_0 b830 b648
        if s_647_0 {
            return block_830(state, tracer, fn_state);
        } else {
            return block_648(state, tracer, fn_state);
        };
    }
    fn block_648<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_648_0: jump b649
        return block_649(state, tracer, fn_state);
    }
    fn block_649<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_649_0: const #0u : u8
        let s_649_0: bool = false;
        // S s_649_1: call Bit(s_649_0)
        let s_649_1: bool = Bit(state, tracer, s_649_0);
        // C s_649_2: const #18272u : u32
        let s_649_2: u32 = 18272;
        // D s_649_3: read-reg s_649_2:struct
        let s_649_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_649_2 as isize);
            tracer.read_register(s_649_2 as isize, value);
            value
        };
        // C s_649_4: const #18272u : u32
        let s_649_4: u32 = 18272;
        // N s_649_5: write-reg s_649_4 <= s_649_3
        let s_649_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_649_4 as isize, s_649_3);
            tracer.write_register(s_649_4 as isize, s_649_3);
        };
        // C s_649_6: const #18272u : u32
        let s_649_6: u32 = 18272;
        // D s_649_7: read-reg s_649_6:struct
        let s_649_7: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_649_6 as isize);
            tracer.read_register(s_649_6 as isize, value);
            value
        };
        // C s_649_8: const #18272u : u32
        let s_649_8: u32 = 18272;
        // N s_649_9: write-reg s_649_8 <= s_649_7
        let s_649_9: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_649_8 as isize, s_649_7);
            tracer.write_register(s_649_8 as isize, s_649_7);
        };
        // C s_649_10: const #18272u : u32
        let s_649_10: u32 = 18272;
        // D s_649_11: read-reg s_649_10:struct
        let s_649_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_649_10 as isize);
            tracer.read_register(s_649_10 as isize, value);
            value
        };
        // C s_649_12: const #18272u : u32
        let s_649_12: u32 = 18272;
        // N s_649_13: write-reg s_649_12 <= s_649_11
        let s_649_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_649_12 as isize, s_649_11);
            tracer.write_register(s_649_12 as isize, s_649_11);
        };
        // C s_649_14: const #23008u : u32
        let s_649_14: u32 = 23008;
        // D s_649_15: read-reg s_649_14:struct
        let s_649_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_649_14 as isize);
            tracer.read_register(s_649_14 as isize, value);
            value
        };
        // C s_649_16: const #23008u : u32
        let s_649_16: u32 = 23008;
        // N s_649_17: write-reg s_649_16 <= s_649_15
        let s_649_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_649_16 as isize, s_649_15);
            tracer.write_register(s_649_16 as isize, s_649_15);
        };
        // C s_649_18: const #16536u : u32
        let s_649_18: u32 = 16536;
        // D s_649_19: read-reg s_649_18:struct
        let s_649_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_649_18 as isize);
            tracer.read_register(s_649_18 as isize, value);
            value
        };
        // C s_649_20: const #16536u : u32
        let s_649_20: u32 = 16536;
        // N s_649_21: write-reg s_649_20 <= s_649_19
        let s_649_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_649_20 as isize, s_649_19);
            tracer.write_register(s_649_20 as isize, s_649_19);
        };
        // C s_649_22: const #16536u : u32
        let s_649_22: u32 = 16536;
        // D s_649_23: read-reg s_649_22:struct
        let s_649_23: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_649_22 as isize);
            tracer.read_register(s_649_22 as isize, value);
            value
        };
        // C s_649_24: const #16536u : u32
        let s_649_24: u32 = 16536;
        // N s_649_25: write-reg s_649_24 <= s_649_23
        let s_649_25: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_649_24 as isize, s_649_23);
            tracer.write_register(s_649_24 as isize, s_649_23);
        };
        // D s_649_26: read-var cold:u8
        let s_649_26: bool = fn_state.cold;
        // N s_649_27: branch s_649_26 b829 b650
        if s_649_26 {
            return block_829(state, tracer, fn_state);
        } else {
            return block_650(state, tracer, fn_state);
        };
    }
    fn block_650<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_650_0: const #0u : u8
        let s_650_0: bool = false;
        // D s_650_1: write-var gs#40997 <= s_650_0
        fn_state.gs_40997 = s_650_0;
        // N s_650_2: jump b651
        return block_651(state, tracer, fn_state);
    }
    fn block_651<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_651_0: read-var gs#40997:u8
        let s_651_0: bool = fn_state.gs_40997;
        // N s_651_1: branch s_651_0 b828 b652
        if s_651_0 {
            return block_828(state, tracer, fn_state);
        } else {
            return block_652(state, tracer, fn_state);
        };
    }
    fn block_652<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_652_0: jump b653
        return block_653(state, tracer, fn_state);
    }
    fn block_653<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_653_0: read-var cold:u8
        let s_653_0: bool = fn_state.cold;
        // D s_653_1: not s_653_0
        let s_653_1: bool = !s_653_0;
        // N s_653_2: branch s_653_1 b827 b654
        if s_653_1 {
            return block_827(state, tracer, fn_state);
        } else {
            return block_654(state, tracer, fn_state);
        };
    }
    fn block_654<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_654_0: const #0u : u8
        let s_654_0: bool = false;
        // D s_654_1: write-var gs#40998 <= s_654_0
        fn_state.gs_40998 = s_654_0;
        // N s_654_2: jump b655
        return block_655(state, tracer, fn_state);
    }
    fn block_655<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_655_0: read-var gs#40998:u8
        let s_655_0: bool = fn_state.gs_40998;
        // N s_655_1: branch s_655_0 b826 b656
        if s_655_0 {
            return block_826(state, tracer, fn_state);
        } else {
            return block_656(state, tracer, fn_state);
        };
    }
    fn block_656<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_656_0: jump b657
        return block_657(state, tracer, fn_state);
    }
    fn block_657<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_657_0: read-var cold:u8
        let s_657_0: bool = fn_state.cold;
        // N s_657_1: branch s_657_0 b825 b658
        if s_657_0 {
            return block_825(state, tracer, fn_state);
        } else {
            return block_658(state, tracer, fn_state);
        };
    }
    fn block_658<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_658_0: const #0u : u8
        let s_658_0: bool = false;
        // D s_658_1: write-var gs#40999 <= s_658_0
        fn_state.gs_40999 = s_658_0;
        // N s_658_2: jump b659
        return block_659(state, tracer, fn_state);
    }
    fn block_659<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_659_0: read-var gs#40999:u8
        let s_659_0: bool = fn_state.gs_40999;
        // N s_659_1: branch s_659_0 b824 b660
        if s_659_0 {
            return block_824(state, tracer, fn_state);
        } else {
            return block_660(state, tracer, fn_state);
        };
    }
    fn block_660<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_660_0: jump b661
        return block_661(state, tracer, fn_state);
    }
    fn block_661<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_661_0: read-var cold:u8
        let s_661_0: bool = fn_state.cold;
        // D s_661_1: not s_661_0
        let s_661_1: bool = !s_661_0;
        // N s_661_2: branch s_661_1 b823 b662
        if s_661_1 {
            return block_823(state, tracer, fn_state);
        } else {
            return block_662(state, tracer, fn_state);
        };
    }
    fn block_662<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_662_0: const #0u : u8
        let s_662_0: bool = false;
        // D s_662_1: write-var gs#41000 <= s_662_0
        fn_state.gs_41000 = s_662_0;
        // N s_662_2: jump b663
        return block_663(state, tracer, fn_state);
    }
    fn block_663<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_663_0: read-var gs#41000:u8
        let s_663_0: bool = fn_state.gs_41000;
        // N s_663_1: branch s_663_0 b822 b664
        if s_663_0 {
            return block_822(state, tracer, fn_state);
        } else {
            return block_664(state, tracer, fn_state);
        };
    }
    fn block_664<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_664_0: jump b665
        return block_665(state, tracer, fn_state);
    }
    fn block_665<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_665_0: read-var cold:u8
        let s_665_0: bool = fn_state.cold;
        // N s_665_1: branch s_665_0 b821 b666
        if s_665_0 {
            return block_821(state, tracer, fn_state);
        } else {
            return block_666(state, tracer, fn_state);
        };
    }
    fn block_666<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_666_0: const #0u : u8
        let s_666_0: bool = false;
        // D s_666_1: write-var gs#41001 <= s_666_0
        fn_state.gs_41001 = s_666_0;
        // N s_666_2: jump b667
        return block_667(state, tracer, fn_state);
    }
    fn block_667<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_667_0: read-var gs#41001:u8
        let s_667_0: bool = fn_state.gs_41001;
        // N s_667_1: branch s_667_0 b820 b668
        if s_667_0 {
            return block_820(state, tracer, fn_state);
        } else {
            return block_668(state, tracer, fn_state);
        };
    }
    fn block_668<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_668_0: jump b669
        return block_669(state, tracer, fn_state);
    }
    fn block_669<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_669_0: read-var cold:u8
        let s_669_0: bool = fn_state.cold;
        // D s_669_1: not s_669_0
        let s_669_1: bool = !s_669_0;
        // N s_669_2: branch s_669_1 b819 b670
        if s_669_1 {
            return block_819(state, tracer, fn_state);
        } else {
            return block_670(state, tracer, fn_state);
        };
    }
    fn block_670<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_670_0: const #0u : u8
        let s_670_0: bool = false;
        // D s_670_1: write-var gs#41002 <= s_670_0
        fn_state.gs_41002 = s_670_0;
        // N s_670_2: jump b671
        return block_671(state, tracer, fn_state);
    }
    fn block_671<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_671_0: read-var gs#41002:u8
        let s_671_0: bool = fn_state.gs_41002;
        // N s_671_1: branch s_671_0 b818 b672
        if s_671_0 {
            return block_818(state, tracer, fn_state);
        } else {
            return block_672(state, tracer, fn_state);
        };
    }
    fn block_672<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_672_0: jump b673
        return block_673(state, tracer, fn_state);
    }
    fn block_673<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_673_0: read-var cold:u8
        let s_673_0: bool = fn_state.cold;
        // N s_673_1: branch s_673_0 b817 b674
        if s_673_0 {
            return block_817(state, tracer, fn_state);
        } else {
            return block_674(state, tracer, fn_state);
        };
    }
    fn block_674<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_674_0: const #0u : u8
        let s_674_0: bool = false;
        // D s_674_1: write-var gs#41003 <= s_674_0
        fn_state.gs_41003 = s_674_0;
        // N s_674_2: jump b675
        return block_675(state, tracer, fn_state);
    }
    fn block_675<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_675_0: read-var gs#41003:u8
        let s_675_0: bool = fn_state.gs_41003;
        // N s_675_1: branch s_675_0 b816 b676
        if s_675_0 {
            return block_816(state, tracer, fn_state);
        } else {
            return block_676(state, tracer, fn_state);
        };
    }
    fn block_676<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_676_0: jump b677
        return block_677(state, tracer, fn_state);
    }
    fn block_677<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_677_0: read-var cold:u8
        let s_677_0: bool = fn_state.cold;
        // D s_677_1: not s_677_0
        let s_677_1: bool = !s_677_0;
        // N s_677_2: branch s_677_1 b815 b678
        if s_677_1 {
            return block_815(state, tracer, fn_state);
        } else {
            return block_678(state, tracer, fn_state);
        };
    }
    fn block_678<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_678_0: const #0u : u8
        let s_678_0: bool = false;
        // D s_678_1: write-var gs#41004 <= s_678_0
        fn_state.gs_41004 = s_678_0;
        // N s_678_2: jump b679
        return block_679(state, tracer, fn_state);
    }
    fn block_679<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_679_0: read-var gs#41004:u8
        let s_679_0: bool = fn_state.gs_41004;
        // N s_679_1: branch s_679_0 b814 b680
        if s_679_0 {
            return block_814(state, tracer, fn_state);
        } else {
            return block_680(state, tracer, fn_state);
        };
    }
    fn block_680<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_680_0: jump b681
        return block_681(state, tracer, fn_state);
    }
    fn block_681<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_681_0: read-var cold:u8
        let s_681_0: bool = fn_state.cold;
        // N s_681_1: branch s_681_0 b813 b682
        if s_681_0 {
            return block_813(state, tracer, fn_state);
        } else {
            return block_682(state, tracer, fn_state);
        };
    }
    fn block_682<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_682_0: const #0u : u8
        let s_682_0: bool = false;
        // D s_682_1: write-var gs#41005 <= s_682_0
        fn_state.gs_41005 = s_682_0;
        // N s_682_2: jump b683
        return block_683(state, tracer, fn_state);
    }
    fn block_683<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_683_0: read-var gs#41005:u8
        let s_683_0: bool = fn_state.gs_41005;
        // N s_683_1: branch s_683_0 b812 b684
        if s_683_0 {
            return block_812(state, tracer, fn_state);
        } else {
            return block_684(state, tracer, fn_state);
        };
    }
    fn block_684<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_684_0: jump b685
        return block_685(state, tracer, fn_state);
    }
    fn block_685<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_685_0: read-var cold:u8
        let s_685_0: bool = fn_state.cold;
        // D s_685_1: not s_685_0
        let s_685_1: bool = !s_685_0;
        // N s_685_2: branch s_685_1 b811 b686
        if s_685_1 {
            return block_811(state, tracer, fn_state);
        } else {
            return block_686(state, tracer, fn_state);
        };
    }
    fn block_686<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_686_0: const #0u : u8
        let s_686_0: bool = false;
        // D s_686_1: write-var gs#41006 <= s_686_0
        fn_state.gs_41006 = s_686_0;
        // N s_686_2: jump b687
        return block_687(state, tracer, fn_state);
    }
    fn block_687<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_687_0: read-var gs#41006:u8
        let s_687_0: bool = fn_state.gs_41006;
        // N s_687_1: branch s_687_0 b810 b688
        if s_687_0 {
            return block_810(state, tracer, fn_state);
        } else {
            return block_688(state, tracer, fn_state);
        };
    }
    fn block_688<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_688_0: jump b689
        return block_689(state, tracer, fn_state);
    }
    fn block_689<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_689_0: read-var cold:u8
        let s_689_0: bool = fn_state.cold;
        // N s_689_1: branch s_689_0 b809 b690
        if s_689_0 {
            return block_809(state, tracer, fn_state);
        } else {
            return block_690(state, tracer, fn_state);
        };
    }
    fn block_690<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_690_0: const #0u : u8
        let s_690_0: bool = false;
        // D s_690_1: write-var gs#41007 <= s_690_0
        fn_state.gs_41007 = s_690_0;
        // N s_690_2: jump b691
        return block_691(state, tracer, fn_state);
    }
    fn block_691<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_691_0: read-var gs#41007:u8
        let s_691_0: bool = fn_state.gs_41007;
        // N s_691_1: branch s_691_0 b808 b692
        if s_691_0 {
            return block_808(state, tracer, fn_state);
        } else {
            return block_692(state, tracer, fn_state);
        };
    }
    fn block_692<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_692_0: jump b693
        return block_693(state, tracer, fn_state);
    }
    fn block_693<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_693_0: read-var cold:u8
        let s_693_0: bool = fn_state.cold;
        // D s_693_1: not s_693_0
        let s_693_1: bool = !s_693_0;
        // N s_693_2: branch s_693_1 b807 b694
        if s_693_1 {
            return block_807(state, tracer, fn_state);
        } else {
            return block_694(state, tracer, fn_state);
        };
    }
    fn block_694<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_694_0: const #0u : u8
        let s_694_0: bool = false;
        // D s_694_1: write-var gs#41008 <= s_694_0
        fn_state.gs_41008 = s_694_0;
        // N s_694_2: jump b695
        return block_695(state, tracer, fn_state);
    }
    fn block_695<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_695_0: read-var gs#41008:u8
        let s_695_0: bool = fn_state.gs_41008;
        // N s_695_1: branch s_695_0 b806 b696
        if s_695_0 {
            return block_806(state, tracer, fn_state);
        } else {
            return block_696(state, tracer, fn_state);
        };
    }
    fn block_696<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_696_0: jump b697
        return block_697(state, tracer, fn_state);
    }
    fn block_697<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_697_0: read-var cold:u8
        let s_697_0: bool = fn_state.cold;
        // N s_697_1: branch s_697_0 b805 b698
        if s_697_0 {
            return block_805(state, tracer, fn_state);
        } else {
            return block_698(state, tracer, fn_state);
        };
    }
    fn block_698<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_698_0: const #0u : u8
        let s_698_0: bool = false;
        // D s_698_1: write-var gs#41009 <= s_698_0
        fn_state.gs_41009 = s_698_0;
        // N s_698_2: jump b699
        return block_699(state, tracer, fn_state);
    }
    fn block_699<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_699_0: read-var gs#41009:u8
        let s_699_0: bool = fn_state.gs_41009;
        // N s_699_1: branch s_699_0 b804 b700
        if s_699_0 {
            return block_804(state, tracer, fn_state);
        } else {
            return block_700(state, tracer, fn_state);
        };
    }
    fn block_700<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_700_0: jump b701
        return block_701(state, tracer, fn_state);
    }
    fn block_701<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_701_0: read-var cold:u8
        let s_701_0: bool = fn_state.cold;
        // D s_701_1: not s_701_0
        let s_701_1: bool = !s_701_0;
        // N s_701_2: branch s_701_1 b803 b702
        if s_701_1 {
            return block_803(state, tracer, fn_state);
        } else {
            return block_702(state, tracer, fn_state);
        };
    }
    fn block_702<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_702_0: const #0u : u8
        let s_702_0: bool = false;
        // D s_702_1: write-var gs#41010 <= s_702_0
        fn_state.gs_41010 = s_702_0;
        // N s_702_2: jump b703
        return block_703(state, tracer, fn_state);
    }
    fn block_703<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_703_0: read-var gs#41010:u8
        let s_703_0: bool = fn_state.gs_41010;
        // N s_703_1: branch s_703_0 b802 b704
        if s_703_0 {
            return block_802(state, tracer, fn_state);
        } else {
            return block_704(state, tracer, fn_state);
        };
    }
    fn block_704<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_704_0: jump b705
        return block_705(state, tracer, fn_state);
    }
    fn block_705<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_705_0: const #16536u : u32
        let s_705_0: u32 = 16536;
        // D s_705_1: read-reg s_705_0:struct
        let s_705_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_705_0 as isize);
            tracer.read_register(s_705_0 as isize, value);
            value
        };
        // C s_705_2: const #16536u : u32
        let s_705_2: u32 = 16536;
        // N s_705_3: write-reg s_705_2 <= s_705_1
        let s_705_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_705_2 as isize, s_705_1);
            tracer.write_register(s_705_2 as isize, s_705_1);
        };
        // D s_705_4: read-var cold:u8
        let s_705_4: bool = fn_state.cold;
        // N s_705_5: branch s_705_4 b801 b706
        if s_705_4 {
            return block_801(state, tracer, fn_state);
        } else {
            return block_706(state, tracer, fn_state);
        };
    }
    fn block_706<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_706_0: const #0u : u8
        let s_706_0: bool = false;
        // D s_706_1: write-var gs#41014 <= s_706_0
        fn_state.gs_41014 = s_706_0;
        // N s_706_2: jump b707
        return block_707(state, tracer, fn_state);
    }
    fn block_707<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_707_0: read-var gs#41014:u8
        let s_707_0: bool = fn_state.gs_41014;
        // N s_707_1: branch s_707_0 b800 b708
        if s_707_0 {
            return block_800(state, tracer, fn_state);
        } else {
            return block_708(state, tracer, fn_state);
        };
    }
    fn block_708<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_708_0: jump b709
        return block_709(state, tracer, fn_state);
    }
    fn block_709<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_709_0: read-var cold:u8
        let s_709_0: bool = fn_state.cold;
        // D s_709_1: not s_709_0
        let s_709_1: bool = !s_709_0;
        // N s_709_2: branch s_709_1 b799 b710
        if s_709_1 {
            return block_799(state, tracer, fn_state);
        } else {
            return block_710(state, tracer, fn_state);
        };
    }
    fn block_710<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_710_0: const #0u : u8
        let s_710_0: bool = false;
        // D s_710_1: write-var gs#41015 <= s_710_0
        fn_state.gs_41015 = s_710_0;
        // N s_710_2: jump b711
        return block_711(state, tracer, fn_state);
    }
    fn block_711<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_711_0: read-var gs#41015:u8
        let s_711_0: bool = fn_state.gs_41015;
        // N s_711_1: branch s_711_0 b798 b712
        if s_711_0 {
            return block_798(state, tracer, fn_state);
        } else {
            return block_712(state, tracer, fn_state);
        };
    }
    fn block_712<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_712_0: jump b713
        return block_713(state, tracer, fn_state);
    }
    fn block_713<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_713_0: read-var cold:u8
        let s_713_0: bool = fn_state.cold;
        // N s_713_1: branch s_713_0 b797 b714
        if s_713_0 {
            return block_797(state, tracer, fn_state);
        } else {
            return block_714(state, tracer, fn_state);
        };
    }
    fn block_714<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_714_0: const #0u : u8
        let s_714_0: bool = false;
        // D s_714_1: write-var gs#41016 <= s_714_0
        fn_state.gs_41016 = s_714_0;
        // N s_714_2: jump b715
        return block_715(state, tracer, fn_state);
    }
    fn block_715<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_715_0: read-var gs#41016:u8
        let s_715_0: bool = fn_state.gs_41016;
        // N s_715_1: branch s_715_0 b796 b716
        if s_715_0 {
            return block_796(state, tracer, fn_state);
        } else {
            return block_716(state, tracer, fn_state);
        };
    }
    fn block_716<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_716_0: jump b717
        return block_717(state, tracer, fn_state);
    }
    fn block_717<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_717_0: read-var cold:u8
        let s_717_0: bool = fn_state.cold;
        // D s_717_1: not s_717_0
        let s_717_1: bool = !s_717_0;
        // N s_717_2: branch s_717_1 b795 b718
        if s_717_1 {
            return block_795(state, tracer, fn_state);
        } else {
            return block_718(state, tracer, fn_state);
        };
    }
    fn block_718<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_718_0: const #0u : u8
        let s_718_0: bool = false;
        // D s_718_1: write-var gs#41017 <= s_718_0
        fn_state.gs_41017 = s_718_0;
        // N s_718_2: jump b719
        return block_719(state, tracer, fn_state);
    }
    fn block_719<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_719_0: read-var gs#41017:u8
        let s_719_0: bool = fn_state.gs_41017;
        // N s_719_1: branch s_719_0 b794 b720
        if s_719_0 {
            return block_794(state, tracer, fn_state);
        } else {
            return block_720(state, tracer, fn_state);
        };
    }
    fn block_720<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_720_0: jump b721
        return block_721(state, tracer, fn_state);
    }
    fn block_721<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_721_0: const #16536u : u32
        let s_721_0: u32 = 16536;
        // D s_721_1: read-reg s_721_0:struct
        let s_721_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_721_0 as isize);
            tracer.read_register(s_721_0 as isize, value);
            value
        };
        // C s_721_2: const #16536u : u32
        let s_721_2: u32 = 16536;
        // N s_721_3: write-reg s_721_2 <= s_721_1
        let s_721_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_721_2 as isize, s_721_1);
            tracer.write_register(s_721_2 as isize, s_721_1);
        };
        // C s_721_4: const #10168u : u32
        let s_721_4: u32 = 10168;
        // D s_721_5: read-reg s_721_4:struct
        let s_721_5: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_721_4 as isize);
            tracer.read_register(s_721_4 as isize, value);
            value
        };
        // C s_721_6: const #10168u : u32
        let s_721_6: u32 = 10168;
        // N s_721_7: write-reg s_721_6 <= s_721_5
        let s_721_7: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_721_6 as isize, s_721_5);
            tracer.write_register(s_721_6 as isize, s_721_5);
        };
        // C s_721_8: const #10168u : u32
        let s_721_8: u32 = 10168;
        // D s_721_9: read-reg s_721_8:struct
        let s_721_9: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_721_8 as isize);
            tracer.read_register(s_721_8 as isize, value);
            value
        };
        // C s_721_10: const #10168u : u32
        let s_721_10: u32 = 10168;
        // N s_721_11: write-reg s_721_10 <= s_721_9
        let s_721_11: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_721_10 as isize, s_721_9);
            tracer.write_register(s_721_10 as isize, s_721_9);
        };
        // C s_721_12: const #10168u : u32
        let s_721_12: u32 = 10168;
        // D s_721_13: read-reg s_721_12:struct
        let s_721_13: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_721_12 as isize);
            tracer.read_register(s_721_12 as isize, value);
            value
        };
        // C s_721_14: const #10168u : u32
        let s_721_14: u32 = 10168;
        // N s_721_15: write-reg s_721_14 <= s_721_13
        let s_721_15: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_721_14 as isize, s_721_13);
            tracer.write_register(s_721_14 as isize, s_721_13);
        };
        // C s_721_16: const #10168u : u32
        let s_721_16: u32 = 10168;
        // D s_721_17: read-reg s_721_16:struct
        let s_721_17: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_721_16 as isize);
            tracer.read_register(s_721_16 as isize, value);
            value
        };
        // C s_721_18: const #10168u : u32
        let s_721_18: u32 = 10168;
        // N s_721_19: write-reg s_721_18 <= s_721_17
        let s_721_19: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_721_18 as isize, s_721_17);
            tracer.write_register(s_721_18 as isize, s_721_17);
        };
        // C s_721_20: const #90640u : u32
        let s_721_20: u32 = 90640;
        // D s_721_21: read-reg s_721_20:struct
        let s_721_21: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_721_20 as isize);
            tracer.read_register(s_721_20 as isize, value);
            value
        };
        // C s_721_22: const #90640u : u32
        let s_721_22: u32 = 90640;
        // N s_721_23: write-reg s_721_22 <= s_721_21
        let s_721_23: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_721_22 as isize, s_721_21);
            tracer.write_register(s_721_22 as isize, s_721_21);
        };
        // D s_721_24: read-var cold:u8
        let s_721_24: bool = fn_state.cold;
        // N s_721_25: branch s_721_24 b793 b722
        if s_721_24 {
            return block_793(state, tracer, fn_state);
        } else {
            return block_722(state, tracer, fn_state);
        };
    }
    fn block_722<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_722_0: const #0u : u8
        let s_722_0: bool = false;
        // D s_722_1: write-var gs#41036 <= s_722_0
        fn_state.gs_41036 = s_722_0;
        // N s_722_2: jump b723
        return block_723(state, tracer, fn_state);
    }
    fn block_723<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_723_0: read-var gs#41036:u8
        let s_723_0: bool = fn_state.gs_41036;
        // N s_723_1: branch s_723_0 b792 b724
        if s_723_0 {
            return block_792(state, tracer, fn_state);
        } else {
            return block_724(state, tracer, fn_state);
        };
    }
    fn block_724<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_724_0: jump b725
        return block_725(state, tracer, fn_state);
    }
    fn block_725<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_725_0: read-var cold:u8
        let s_725_0: bool = fn_state.cold;
        // D s_725_1: not s_725_0
        let s_725_1: bool = !s_725_0;
        // N s_725_2: branch s_725_1 b791 b726
        if s_725_1 {
            return block_791(state, tracer, fn_state);
        } else {
            return block_726(state, tracer, fn_state);
        };
    }
    fn block_726<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_726_0: const #0u : u8
        let s_726_0: bool = false;
        // D s_726_1: write-var gs#41037 <= s_726_0
        fn_state.gs_41037 = s_726_0;
        // N s_726_2: jump b727
        return block_727(state, tracer, fn_state);
    }
    fn block_727<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_727_0: read-var gs#41037:u8
        let s_727_0: bool = fn_state.gs_41037;
        // N s_727_1: branch s_727_0 b790 b728
        if s_727_0 {
            return block_790(state, tracer, fn_state);
        } else {
            return block_728(state, tracer, fn_state);
        };
    }
    fn block_728<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_728_0: jump b729
        return block_729(state, tracer, fn_state);
    }
    fn block_729<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_729_0: read-var cold:u8
        let s_729_0: bool = fn_state.cold;
        // N s_729_1: branch s_729_0 b789 b730
        if s_729_0 {
            return block_789(state, tracer, fn_state);
        } else {
            return block_730(state, tracer, fn_state);
        };
    }
    fn block_730<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_730_0: const #0u : u8
        let s_730_0: bool = false;
        // D s_730_1: write-var gs#41038 <= s_730_0
        fn_state.gs_41038 = s_730_0;
        // N s_730_2: jump b731
        return block_731(state, tracer, fn_state);
    }
    fn block_731<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_731_0: read-var gs#41038:u8
        let s_731_0: bool = fn_state.gs_41038;
        // N s_731_1: branch s_731_0 b788 b732
        if s_731_0 {
            return block_788(state, tracer, fn_state);
        } else {
            return block_732(state, tracer, fn_state);
        };
    }
    fn block_732<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_732_0: jump b733
        return block_733(state, tracer, fn_state);
    }
    fn block_733<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_733_0: read-var cold:u8
        let s_733_0: bool = fn_state.cold;
        // D s_733_1: not s_733_0
        let s_733_1: bool = !s_733_0;
        // N s_733_2: branch s_733_1 b787 b734
        if s_733_1 {
            return block_787(state, tracer, fn_state);
        } else {
            return block_734(state, tracer, fn_state);
        };
    }
    fn block_734<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_734_0: const #0u : u8
        let s_734_0: bool = false;
        // D s_734_1: write-var gs#41039 <= s_734_0
        fn_state.gs_41039 = s_734_0;
        // N s_734_2: jump b735
        return block_735(state, tracer, fn_state);
    }
    fn block_735<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_735_0: read-var gs#41039:u8
        let s_735_0: bool = fn_state.gs_41039;
        // N s_735_1: branch s_735_0 b786 b736
        if s_735_0 {
            return block_786(state, tracer, fn_state);
        } else {
            return block_736(state, tracer, fn_state);
        };
    }
    fn block_736<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_736_0: jump b737
        return block_737(state, tracer, fn_state);
    }
    fn block_737<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_737_0: const #90640u : u32
        let s_737_0: u32 = 90640;
        // D s_737_1: read-reg s_737_0:struct
        let s_737_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_737_0 as isize);
            tracer.read_register(s_737_0 as isize, value);
            value
        };
        // C s_737_2: const #90640u : u32
        let s_737_2: u32 = 90640;
        // N s_737_3: write-reg s_737_2 <= s_737_1
        let s_737_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_737_2 as isize, s_737_1);
            tracer.write_register(s_737_2 as isize, s_737_1);
        };
        // D s_737_4: read-var cold:u8
        let s_737_4: bool = fn_state.cold;
        // N s_737_5: branch s_737_4 b785 b738
        if s_737_4 {
            return block_785(state, tracer, fn_state);
        } else {
            return block_738(state, tracer, fn_state);
        };
    }
    fn block_738<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_738_0: const #0u : u8
        let s_738_0: bool = false;
        // D s_738_1: write-var gs#41043 <= s_738_0
        fn_state.gs_41043 = s_738_0;
        // N s_738_2: jump b739
        return block_739(state, tracer, fn_state);
    }
    fn block_739<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_739_0: read-var gs#41043:u8
        let s_739_0: bool = fn_state.gs_41043;
        // N s_739_1: branch s_739_0 b784 b740
        if s_739_0 {
            return block_784(state, tracer, fn_state);
        } else {
            return block_740(state, tracer, fn_state);
        };
    }
    fn block_740<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_740_0: jump b741
        return block_741(state, tracer, fn_state);
    }
    fn block_741<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_741_0: read-var cold:u8
        let s_741_0: bool = fn_state.cold;
        // D s_741_1: not s_741_0
        let s_741_1: bool = !s_741_0;
        // N s_741_2: branch s_741_1 b783 b742
        if s_741_1 {
            return block_783(state, tracer, fn_state);
        } else {
            return block_742(state, tracer, fn_state);
        };
    }
    fn block_742<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_742_0: const #0u : u8
        let s_742_0: bool = false;
        // D s_742_1: write-var gs#41044 <= s_742_0
        fn_state.gs_41044 = s_742_0;
        // N s_742_2: jump b743
        return block_743(state, tracer, fn_state);
    }
    fn block_743<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_743_0: read-var gs#41044:u8
        let s_743_0: bool = fn_state.gs_41044;
        // N s_743_1: branch s_743_0 b782 b744
        if s_743_0 {
            return block_782(state, tracer, fn_state);
        } else {
            return block_744(state, tracer, fn_state);
        };
    }
    fn block_744<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_744_0: jump b745
        return block_745(state, tracer, fn_state);
    }
    fn block_745<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_745_0: const #0u : u8
        let s_745_0: bool = false;
        // S s_745_1: call Bit(s_745_0)
        let s_745_1: bool = Bit(state, tracer, s_745_0);
        // C s_745_2: const #90640u : u32
        let s_745_2: u32 = 90640;
        // D s_745_3: read-reg s_745_2:struct
        let s_745_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_745_2 as isize);
            tracer.read_register(s_745_2 as isize, value);
            value
        };
        // C s_745_4: const #90640u : u32
        let s_745_4: u32 = 90640;
        // N s_745_5: write-reg s_745_4 <= s_745_3
        let s_745_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_745_4 as isize, s_745_3);
            tracer.write_register(s_745_4 as isize, s_745_3);
        };
        // D s_745_6: read-var cold:u8
        let s_745_6: bool = fn_state.cold;
        // N s_745_7: branch s_745_6 b781 b746
        if s_745_6 {
            return block_781(state, tracer, fn_state);
        } else {
            return block_746(state, tracer, fn_state);
        };
    }
    fn block_746<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_746_0: const #0u : u8
        let s_746_0: bool = false;
        // D s_746_1: write-var gs#41047 <= s_746_0
        fn_state.gs_41047 = s_746_0;
        // N s_746_2: jump b747
        return block_747(state, tracer, fn_state);
    }
    fn block_747<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_747_0: read-var gs#41047:u8
        let s_747_0: bool = fn_state.gs_41047;
        // N s_747_1: branch s_747_0 b780 b748
        if s_747_0 {
            return block_780(state, tracer, fn_state);
        } else {
            return block_748(state, tracer, fn_state);
        };
    }
    fn block_748<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_748_0: jump b749
        return block_749(state, tracer, fn_state);
    }
    fn block_749<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_749_0: read-var cold:u8
        let s_749_0: bool = fn_state.cold;
        // D s_749_1: not s_749_0
        let s_749_1: bool = !s_749_0;
        // N s_749_2: branch s_749_1 b779 b750
        if s_749_1 {
            return block_779(state, tracer, fn_state);
        } else {
            return block_750(state, tracer, fn_state);
        };
    }
    fn block_750<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_750_0: const #0u : u8
        let s_750_0: bool = false;
        // D s_750_1: write-var gs#41048 <= s_750_0
        fn_state.gs_41048 = s_750_0;
        // N s_750_2: jump b751
        return block_751(state, tracer, fn_state);
    }
    fn block_751<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_751_0: read-var gs#41048:u8
        let s_751_0: bool = fn_state.gs_41048;
        // N s_751_1: branch s_751_0 b778 b752
        if s_751_0 {
            return block_778(state, tracer, fn_state);
        } else {
            return block_752(state, tracer, fn_state);
        };
    }
    fn block_752<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_752_0: jump b753
        return block_753(state, tracer, fn_state);
    }
    fn block_753<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_753_0: read-var cold:u8
        let s_753_0: bool = fn_state.cold;
        // N s_753_1: branch s_753_0 b777 b754
        if s_753_0 {
            return block_777(state, tracer, fn_state);
        } else {
            return block_754(state, tracer, fn_state);
        };
    }
    fn block_754<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_754_0: const #0u : u8
        let s_754_0: bool = false;
        // D s_754_1: write-var gs#41049 <= s_754_0
        fn_state.gs_41049 = s_754_0;
        // N s_754_2: jump b755
        return block_755(state, tracer, fn_state);
    }
    fn block_755<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_755_0: read-var gs#41049:u8
        let s_755_0: bool = fn_state.gs_41049;
        // N s_755_1: branch s_755_0 b776 b756
        if s_755_0 {
            return block_776(state, tracer, fn_state);
        } else {
            return block_756(state, tracer, fn_state);
        };
    }
    fn block_756<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_756_0: jump b757
        return block_757(state, tracer, fn_state);
    }
    fn block_757<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_757_0: read-var cold:u8
        let s_757_0: bool = fn_state.cold;
        // D s_757_1: not s_757_0
        let s_757_1: bool = !s_757_0;
        // N s_757_2: branch s_757_1 b775 b758
        if s_757_1 {
            return block_775(state, tracer, fn_state);
        } else {
            return block_758(state, tracer, fn_state);
        };
    }
    fn block_758<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_758_0: const #0u : u8
        let s_758_0: bool = false;
        // D s_758_1: write-var gs#41050 <= s_758_0
        fn_state.gs_41050 = s_758_0;
        // N s_758_2: jump b759
        return block_759(state, tracer, fn_state);
    }
    fn block_759<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_759_0: read-var gs#41050:u8
        let s_759_0: bool = fn_state.gs_41050;
        // N s_759_1: branch s_759_0 b774 b760
        if s_759_0 {
            return block_774(state, tracer, fn_state);
        } else {
            return block_760(state, tracer, fn_state);
        };
    }
    fn block_760<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_760_0: jump b761
        return block_761(state, tracer, fn_state);
    }
    fn block_761<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_761_0: read-var cold:u8
        let s_761_0: bool = fn_state.cold;
        // N s_761_1: branch s_761_0 b773 b762
        if s_761_0 {
            return block_773(state, tracer, fn_state);
        } else {
            return block_762(state, tracer, fn_state);
        };
    }
    fn block_762<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_762_0: const #0u : u8
        let s_762_0: bool = false;
        // D s_762_1: write-var gs#41051 <= s_762_0
        fn_state.gs_41051 = s_762_0;
        // N s_762_2: jump b763
        return block_763(state, tracer, fn_state);
    }
    fn block_763<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_763_0: read-var gs#41051:u8
        let s_763_0: bool = fn_state.gs_41051;
        // N s_763_1: branch s_763_0 b772 b764
        if s_763_0 {
            return block_772(state, tracer, fn_state);
        } else {
            return block_764(state, tracer, fn_state);
        };
    }
    fn block_764<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_764_0: jump b765
        return block_765(state, tracer, fn_state);
    }
    fn block_765<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_765_0: read-var cold:u8
        let s_765_0: bool = fn_state.cold;
        // D s_765_1: not s_765_0
        let s_765_1: bool = !s_765_0;
        // N s_765_2: branch s_765_1 b771 b766
        if s_765_1 {
            return block_771(state, tracer, fn_state);
        } else {
            return block_766(state, tracer, fn_state);
        };
    }
    fn block_766<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_766_0: const #0u : u8
        let s_766_0: bool = false;
        // D s_766_1: write-var gs#41052 <= s_766_0
        fn_state.gs_41052 = s_766_0;
        // N s_766_2: jump b767
        return block_767(state, tracer, fn_state);
    }
    fn block_767<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // D s_767_0: read-var gs#41052:u8
        let s_767_0: bool = fn_state.gs_41052;
        // N s_767_1: branch s_767_0 b770 b768
        if s_767_0 {
            return block_770(state, tracer, fn_state);
        } else {
            return block_768(state, tracer, fn_state);
        };
    }
    fn block_768<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_768_0: jump b769
        return block_769(state, tracer, fn_state);
    }
    fn block_769<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_769_0: const #0u : u8
        let s_769_0: bool = false;
        // S s_769_1: call Bit(s_769_0)
        let s_769_1: bool = Bit(state, tracer, s_769_0);
        // C s_769_2: const #90640u : u32
        let s_769_2: u32 = 90640;
        // D s_769_3: read-reg s_769_2:struct
        let s_769_3: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_2 as isize);
            tracer.read_register(s_769_2 as isize, value);
            value
        };
        // C s_769_4: const #90640u : u32
        let s_769_4: u32 = 90640;
        // N s_769_5: write-reg s_769_4 <= s_769_3
        let s_769_5: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_4 as isize, s_769_3);
            tracer.write_register(s_769_4 as isize, s_769_3);
        };
        // C s_769_6: const #90640u : u32
        let s_769_6: u32 = 90640;
        // D s_769_7: read-reg s_769_6:struct
        let s_769_7: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_6 as isize);
            tracer.read_register(s_769_6 as isize, value);
            value
        };
        // C s_769_8: const #90640u : u32
        let s_769_8: u32 = 90640;
        // N s_769_9: write-reg s_769_8 <= s_769_7
        let s_769_9: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_8 as isize, s_769_7);
            tracer.write_register(s_769_8 as isize, s_769_7);
        };
        // C s_769_10: const #90640u : u32
        let s_769_10: u32 = 90640;
        // D s_769_11: read-reg s_769_10:struct
        let s_769_11: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_10 as isize);
            tracer.read_register(s_769_10 as isize, value);
            value
        };
        // C s_769_12: const #90640u : u32
        let s_769_12: u32 = 90640;
        // N s_769_13: write-reg s_769_12 <= s_769_11
        let s_769_13: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_12 as isize, s_769_11);
            tracer.write_register(s_769_12 as isize, s_769_11);
        };
        // C s_769_14: const #13496u : u32
        let s_769_14: u32 = 13496;
        // D s_769_15: read-reg s_769_14:struct
        let s_769_15: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_14 as isize);
            tracer.read_register(s_769_14 as isize, value);
            value
        };
        // C s_769_16: const #13496u : u32
        let s_769_16: u32 = 13496;
        // N s_769_17: write-reg s_769_16 <= s_769_15
        let s_769_17: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_16 as isize, s_769_15);
            tracer.write_register(s_769_16 as isize, s_769_15);
        };
        // C s_769_18: const #18248u : u32
        let s_769_18: u32 = 18248;
        // D s_769_19: read-reg s_769_18:struct
        let s_769_19: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_18 as isize);
            tracer.read_register(s_769_18 as isize, value);
            value
        };
        // C s_769_20: const #18248u : u32
        let s_769_20: u32 = 18248;
        // N s_769_21: write-reg s_769_20 <= s_769_19
        let s_769_21: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_20 as isize, s_769_19);
            tracer.write_register(s_769_20 as isize, s_769_19);
        };
        // C s_769_22: const #21912u : u32
        let s_769_22: u32 = 21912;
        // D s_769_23: read-reg s_769_22:struct
        let s_769_23: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_22 as isize);
            tracer.read_register(s_769_22 as isize, value);
            value
        };
        // C s_769_24: const #21912u : u32
        let s_769_24: u32 = 21912;
        // N s_769_25: write-reg s_769_24 <= s_769_23
        let s_769_25: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_24 as isize, s_769_23);
            tracer.write_register(s_769_24 as isize, s_769_23);
        };
        // C s_769_26: const #11704u : u32
        let s_769_26: u32 = 11704;
        // D s_769_27: read-reg s_769_26:struct
        let s_769_27: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_26 as isize);
            tracer.read_register(s_769_26 as isize, value);
            value
        };
        // C s_769_28: const #11704u : u32
        let s_769_28: u32 = 11704;
        // N s_769_29: write-reg s_769_28 <= s_769_27
        let s_769_29: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_28 as isize, s_769_27);
            tracer.write_register(s_769_28 as isize, s_769_27);
        };
        // C s_769_30: const #11704u : u32
        let s_769_30: u32 = 11704;
        // D s_769_31: read-reg s_769_30:struct
        let s_769_31: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_30 as isize);
            tracer.read_register(s_769_30 as isize, value);
            value
        };
        // C s_769_32: const #11704u : u32
        let s_769_32: u32 = 11704;
        // N s_769_33: write-reg s_769_32 <= s_769_31
        let s_769_33: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_32 as isize, s_769_31);
            tracer.write_register(s_769_32 as isize, s_769_31);
        };
        // C s_769_34: const #11704u : u32
        let s_769_34: u32 = 11704;
        // D s_769_35: read-reg s_769_34:struct
        let s_769_35: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_34 as isize);
            tracer.read_register(s_769_34 as isize, value);
            value
        };
        // C s_769_36: const #11704u : u32
        let s_769_36: u32 = 11704;
        // N s_769_37: write-reg s_769_36 <= s_769_35
        let s_769_37: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_36 as isize, s_769_35);
            tracer.write_register(s_769_36 as isize, s_769_35);
        };
        // C s_769_38: const #0u : u8
        let s_769_38: bool = false;
        // S s_769_39: call Bit(s_769_38)
        let s_769_39: bool = Bit(state, tracer, s_769_38);
        // C s_769_40: const #11704u : u32
        let s_769_40: u32 = 11704;
        // D s_769_41: read-reg s_769_40:struct
        let s_769_41: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_40 as isize);
            tracer.read_register(s_769_40 as isize, value);
            value
        };
        // C s_769_42: const #11704u : u32
        let s_769_42: u32 = 11704;
        // N s_769_43: write-reg s_769_42 <= s_769_41
        let s_769_43: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_42 as isize, s_769_41);
            tracer.write_register(s_769_42 as isize, s_769_41);
        };
        // C s_769_44: const #11704u : u32
        let s_769_44: u32 = 11704;
        // D s_769_45: read-reg s_769_44:struct
        let s_769_45: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_44 as isize);
            tracer.read_register(s_769_44 as isize, value);
            value
        };
        // C s_769_46: const #11704u : u32
        let s_769_46: u32 = 11704;
        // N s_769_47: write-reg s_769_46 <= s_769_45
        let s_769_47: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_46 as isize, s_769_45);
            tracer.write_register(s_769_46 as isize, s_769_45);
        };
        // C s_769_48: const #11704u : u32
        let s_769_48: u32 = 11704;
        // D s_769_49: read-reg s_769_48:struct
        let s_769_49: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_48 as isize);
            tracer.read_register(s_769_48 as isize, value);
            value
        };
        // C s_769_50: const #11704u : u32
        let s_769_50: u32 = 11704;
        // N s_769_51: write-reg s_769_50 <= s_769_49
        let s_769_51: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_50 as isize, s_769_49);
            tracer.write_register(s_769_50 as isize, s_769_49);
        };
        // C s_769_52: const #11704u : u32
        let s_769_52: u32 = 11704;
        // D s_769_53: read-reg s_769_52:struct
        let s_769_53: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_52 as isize);
            tracer.read_register(s_769_52 as isize, value);
            value
        };
        // C s_769_54: const #11704u : u32
        let s_769_54: u32 = 11704;
        // N s_769_55: write-reg s_769_54 <= s_769_53
        let s_769_55: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_54 as isize, s_769_53);
            tracer.write_register(s_769_54 as isize, s_769_53);
        };
        // C s_769_56: const #101056u : u32
        let s_769_56: u32 = 101056;
        // D s_769_57: read-reg s_769_56:struct
        let s_769_57: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_56 as isize);
            tracer.read_register(s_769_56 as isize, value);
            value
        };
        // C s_769_58: const #101056u : u32
        let s_769_58: u32 = 101056;
        // N s_769_59: write-reg s_769_58 <= s_769_57
        let s_769_59: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_58 as isize, s_769_57);
            tracer.write_register(s_769_58 as isize, s_769_57);
        };
        // C s_769_60: const #101056u : u32
        let s_769_60: u32 = 101056;
        // D s_769_61: read-reg s_769_60:struct
        let s_769_61: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_60 as isize);
            tracer.read_register(s_769_60 as isize, value);
            value
        };
        // C s_769_62: const #101056u : u32
        let s_769_62: u32 = 101056;
        // N s_769_63: write-reg s_769_62 <= s_769_61
        let s_769_63: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_62 as isize, s_769_61);
            tracer.write_register(s_769_62 as isize, s_769_61);
        };
        // C s_769_64: const #101056u : u32
        let s_769_64: u32 = 101056;
        // D s_769_65: read-reg s_769_64:struct
        let s_769_65: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_64 as isize);
            tracer.read_register(s_769_64 as isize, value);
            value
        };
        // C s_769_66: const #101056u : u32
        let s_769_66: u32 = 101056;
        // N s_769_67: write-reg s_769_66 <= s_769_65
        let s_769_67: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_66 as isize, s_769_65);
            tracer.write_register(s_769_66 as isize, s_769_65);
        };
        // C s_769_68: const #0u : u8
        let s_769_68: bool = false;
        // S s_769_69: call Bit(s_769_68)
        let s_769_69: bool = Bit(state, tracer, s_769_68);
        // C s_769_70: const #101056u : u32
        let s_769_70: u32 = 101056;
        // D s_769_71: read-reg s_769_70:struct
        let s_769_71: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_70 as isize);
            tracer.read_register(s_769_70 as isize, value);
            value
        };
        // C s_769_72: const #101056u : u32
        let s_769_72: u32 = 101056;
        // N s_769_73: write-reg s_769_72 <= s_769_71
        let s_769_73: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_72 as isize, s_769_71);
            tracer.write_register(s_769_72 as isize, s_769_71);
        };
        // C s_769_74: const #101056u : u32
        let s_769_74: u32 = 101056;
        // D s_769_75: read-reg s_769_74:struct
        let s_769_75: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_74 as isize);
            tracer.read_register(s_769_74 as isize, value);
            value
        };
        // C s_769_76: const #101056u : u32
        let s_769_76: u32 = 101056;
        // N s_769_77: write-reg s_769_76 <= s_769_75
        let s_769_77: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_76 as isize, s_769_75);
            tracer.write_register(s_769_76 as isize, s_769_75);
        };
        // C s_769_78: const #101056u : u32
        let s_769_78: u32 = 101056;
        // D s_769_79: read-reg s_769_78:struct
        let s_769_79: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_78 as isize);
            tracer.read_register(s_769_78 as isize, value);
            value
        };
        // C s_769_80: const #101056u : u32
        let s_769_80: u32 = 101056;
        // N s_769_81: write-reg s_769_80 <= s_769_79
        let s_769_81: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_80 as isize, s_769_79);
            tracer.write_register(s_769_80 as isize, s_769_79);
        };
        // C s_769_82: const #101056u : u32
        let s_769_82: u32 = 101056;
        // D s_769_83: read-reg s_769_82:struct
        let s_769_83: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_82 as isize);
            tracer.read_register(s_769_82 as isize, value);
            value
        };
        // C s_769_84: const #101056u : u32
        let s_769_84: u32 = 101056;
        // N s_769_85: write-reg s_769_84 <= s_769_83
        let s_769_85: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_84 as isize, s_769_83);
            tracer.write_register(s_769_84 as isize, s_769_83);
        };
        // C s_769_86: const #10216u : u32
        let s_769_86: u32 = 10216;
        // D s_769_87: read-reg s_769_86:struct
        let s_769_87: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_86 as isize);
            tracer.read_register(s_769_86 as isize, value);
            value
        };
        // C s_769_88: const #10216u : u32
        let s_769_88: u32 = 10216;
        // N s_769_89: write-reg s_769_88 <= s_769_87
        let s_769_89: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_88 as isize, s_769_87);
            tracer.write_register(s_769_88 as isize, s_769_87);
        };
        // C s_769_90: const #19304u : u32
        let s_769_90: u32 = 19304;
        // D s_769_91: read-reg s_769_90:struct
        let s_769_91: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_90 as isize);
            tracer.read_register(s_769_90 as isize, value);
            value
        };
        // C s_769_92: const #19304u : u32
        let s_769_92: u32 = 19304;
        // N s_769_93: write-reg s_769_92 <= s_769_91
        let s_769_93: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_92 as isize, s_769_91);
            tracer.write_register(s_769_92 as isize, s_769_91);
        };
        // C s_769_94: const #19304u : u32
        let s_769_94: u32 = 19304;
        // D s_769_95: read-reg s_769_94:struct
        let s_769_95: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_94 as isize);
            tracer.read_register(s_769_94 as isize, value);
            value
        };
        // C s_769_96: const #19304u : u32
        let s_769_96: u32 = 19304;
        // N s_769_97: write-reg s_769_96 <= s_769_95
        let s_769_97: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_96 as isize, s_769_95);
            tracer.write_register(s_769_96 as isize, s_769_95);
        };
        // C s_769_98: const #19304u : u32
        let s_769_98: u32 = 19304;
        // D s_769_99: read-reg s_769_98:struct
        let s_769_99: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_98 as isize);
            tracer.read_register(s_769_98 as isize, value);
            value
        };
        // C s_769_100: const #19304u : u32
        let s_769_100: u32 = 19304;
        // N s_769_101: write-reg s_769_100 <= s_769_99
        let s_769_101: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_100 as isize, s_769_99);
            tracer.write_register(s_769_100 as isize, s_769_99);
        };
        // C s_769_102: const #0u : u8
        let s_769_102: bool = false;
        // S s_769_103: call Bit(s_769_102)
        let s_769_103: bool = Bit(state, tracer, s_769_102);
        // C s_769_104: const #19304u : u32
        let s_769_104: u32 = 19304;
        // D s_769_105: read-reg s_769_104:struct
        let s_769_105: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_104 as isize);
            tracer.read_register(s_769_104 as isize, value);
            value
        };
        // C s_769_106: const #19304u : u32
        let s_769_106: u32 = 19304;
        // N s_769_107: write-reg s_769_106 <= s_769_105
        let s_769_107: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_106 as isize, s_769_105);
            tracer.write_register(s_769_106 as isize, s_769_105);
        };
        // C s_769_108: const #19304u : u32
        let s_769_108: u32 = 19304;
        // D s_769_109: read-reg s_769_108:struct
        let s_769_109: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_108 as isize);
            tracer.read_register(s_769_108 as isize, value);
            value
        };
        // C s_769_110: const #19304u : u32
        let s_769_110: u32 = 19304;
        // N s_769_111: write-reg s_769_110 <= s_769_109
        let s_769_111: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_110 as isize, s_769_109);
            tracer.write_register(s_769_110 as isize, s_769_109);
        };
        // C s_769_112: const #19304u : u32
        let s_769_112: u32 = 19304;
        // D s_769_113: read-reg s_769_112:struct
        let s_769_113: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_112 as isize);
            tracer.read_register(s_769_112 as isize, value);
            value
        };
        // C s_769_114: const #19304u : u32
        let s_769_114: u32 = 19304;
        // N s_769_115: write-reg s_769_114 <= s_769_113
        let s_769_115: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_114 as isize, s_769_113);
            tracer.write_register(s_769_114 as isize, s_769_113);
        };
        // C s_769_116: const #19304u : u32
        let s_769_116: u32 = 19304;
        // D s_769_117: read-reg s_769_116:struct
        let s_769_117: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_116 as isize);
            tracer.read_register(s_769_116 as isize, value);
            value
        };
        // C s_769_118: const #19304u : u32
        let s_769_118: u32 = 19304;
        // N s_769_119: write-reg s_769_118 <= s_769_117
        let s_769_119: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_118 as isize, s_769_117);
            tracer.write_register(s_769_118 as isize, s_769_117);
        };
        // C s_769_120: const #15608u : u32
        let s_769_120: u32 = 15608;
        // D s_769_121: read-reg s_769_120:struct
        let s_769_121: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_120 as isize);
            tracer.read_register(s_769_120 as isize, value);
            value
        };
        // C s_769_122: const #15608u : u32
        let s_769_122: u32 = 15608;
        // N s_769_123: write-reg s_769_122 <= s_769_121
        let s_769_123: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_122 as isize, s_769_121);
            tracer.write_register(s_769_122 as isize, s_769_121);
        };
        // C s_769_124: const #15608u : u32
        let s_769_124: u32 = 15608;
        // D s_769_125: read-reg s_769_124:struct
        let s_769_125: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_124 as isize);
            tracer.read_register(s_769_124 as isize, value);
            value
        };
        // C s_769_126: const #15608u : u32
        let s_769_126: u32 = 15608;
        // N s_769_127: write-reg s_769_126 <= s_769_125
        let s_769_127: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_126 as isize, s_769_125);
            tracer.write_register(s_769_126 as isize, s_769_125);
        };
        // C s_769_128: const #15608u : u32
        let s_769_128: u32 = 15608;
        // D s_769_129: read-reg s_769_128:struct
        let s_769_129: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_128 as isize);
            tracer.read_register(s_769_128 as isize, value);
            value
        };
        // C s_769_130: const #15608u : u32
        let s_769_130: u32 = 15608;
        // N s_769_131: write-reg s_769_130 <= s_769_129
        let s_769_131: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_130 as isize, s_769_129);
            tracer.write_register(s_769_130 as isize, s_769_129);
        };
        // C s_769_132: const #15608u : u32
        let s_769_132: u32 = 15608;
        // D s_769_133: read-reg s_769_132:struct
        let s_769_133: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_132 as isize);
            tracer.read_register(s_769_132 as isize, value);
            value
        };
        // C s_769_134: const #15608u : u32
        let s_769_134: u32 = 15608;
        // N s_769_135: write-reg s_769_134 <= s_769_133
        let s_769_135: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_134 as isize, s_769_133);
            tracer.write_register(s_769_134 as isize, s_769_133);
        };
        // C s_769_136: const #15608u : u32
        let s_769_136: u32 = 15608;
        // D s_769_137: read-reg s_769_136:struct
        let s_769_137: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_136 as isize);
            tracer.read_register(s_769_136 as isize, value);
            value
        };
        // C s_769_138: const #15608u : u32
        let s_769_138: u32 = 15608;
        // N s_769_139: write-reg s_769_138 <= s_769_137
        let s_769_139: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_138 as isize, s_769_137);
            tracer.write_register(s_769_138 as isize, s_769_137);
        };
        // C s_769_140: const #15608u : u32
        let s_769_140: u32 = 15608;
        // D s_769_141: read-reg s_769_140:struct
        let s_769_141: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_140 as isize);
            tracer.read_register(s_769_140 as isize, value);
            value
        };
        // C s_769_142: const #15608u : u32
        let s_769_142: u32 = 15608;
        // N s_769_143: write-reg s_769_142 <= s_769_141
        let s_769_143: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_142 as isize, s_769_141);
            tracer.write_register(s_769_142 as isize, s_769_141);
        };
        // C s_769_144: const #15608u : u32
        let s_769_144: u32 = 15608;
        // D s_769_145: read-reg s_769_144:struct
        let s_769_145: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_144 as isize);
            tracer.read_register(s_769_144 as isize, value);
            value
        };
        // C s_769_146: const #15608u : u32
        let s_769_146: u32 = 15608;
        // N s_769_147: write-reg s_769_146 <= s_769_145
        let s_769_147: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_146 as isize, s_769_145);
            tracer.write_register(s_769_146 as isize, s_769_145);
        };
        // C s_769_148: const #20840u : u32
        let s_769_148: u32 = 20840;
        // D s_769_149: read-reg s_769_148:struct
        let s_769_149: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_769_148 as isize);
            tracer.read_register(s_769_148 as isize, value);
            value
        };
        // C s_769_150: const #20840u : u32
        let s_769_150: u32 = 20840;
        // N s_769_151: write-reg s_769_150 <= s_769_149
        let s_769_151: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_769_150 as isize, s_769_149);
            tracer.write_register(s_769_150 as isize, s_769_149);
        };
        // C s_769_152: const #() : ()
        let s_769_152: () = ();
        // S s_769_153: call PAR_EL1_read(s_769_152)
        let s_769_153: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_152,
        );
        // D s_769_154: write-var ga#34432 <= s_769_153
        fn_state.ga_34432 = s_769_153;
        // D s_769_155: read-var ga#34432.0:struct
        let s_769_155: u128 = fn_state.ga_34432._0;
        // C s_769_156: const #8s : i
        let s_769_156: i128 = 8;
        // C s_769_157: const #120s : i
        let s_769_157: i128 = 120;
        // D s_769_158: cast zx s_769_155 -> bv
        let s_769_158: Bits = Bits::new(s_769_155 as u128, 128u16);
        // C s_769_159: const #0u : u8
        let s_769_159: u8 = 0;
        // C s_769_160: cast zx s_769_159 -> bv
        let s_769_160: Bits = Bits::new(s_769_159 as u128, 8u16);
        // C s_769_161: const #1u : u64
        let s_769_161: u64 = 1;
        // C s_769_162: cast zx s_769_161 -> bv
        let s_769_162: Bits = Bits::new(s_769_161 as u128, 64u16);
        // C s_769_163: lsl s_769_162 s_769_156
        let s_769_163: Bits = s_769_162 << s_769_156;
        // C s_769_164: sub s_769_163 s_769_162
        let s_769_164: Bits = ((s_769_163) - (s_769_162));
        // C s_769_165: and s_769_160 s_769_164
        let s_769_165: Bits = ((s_769_160) & (s_769_164));
        // C s_769_166: lsl s_769_165 s_769_157
        let s_769_166: Bits = s_769_165 << s_769_157;
        // C s_769_167: lsl s_769_164 s_769_157
        let s_769_167: Bits = s_769_164 << s_769_157;
        // C s_769_168: cmpl s_769_167
        let s_769_168: Bits = !s_769_167;
        // D s_769_169: and s_769_158 s_769_168
        let s_769_169: Bits = ((s_769_158) & (s_769_168));
        // D s_769_170: or s_769_169 s_769_166
        let s_769_170: Bits = ((s_769_169) | (s_769_166));
        // D s_769_171: cast reint s_769_170 -> u128
        let s_769_171: u128 = (s_769_170.value() as u128);
        // D s_769_172: call Mk_PAR_EL1_Type(s_769_171)
        let s_769_172: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_171,
        );
        // D s_769_173: call PAR_EL1_write(s_769_172)
        let s_769_173: () = PAR_EL1_write(state, tracer, s_769_172);
        // C s_769_174: const #() : ()
        let s_769_174: () = ();
        // S s_769_175: call PAR_EL1_read(s_769_174)
        let s_769_175: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_174,
        );
        // D s_769_176: write-var ga#34436 <= s_769_175
        fn_state.ga_34436 = s_769_175;
        // D s_769_177: read-var ga#34436.0:struct
        let s_769_177: u128 = fn_state.ga_34436._0;
        // C s_769_178: const #11s : i
        let s_769_178: i128 = 11;
        // C s_769_179: const #65s : i
        let s_769_179: i128 = 65;
        // D s_769_180: cast zx s_769_177 -> bv
        let s_769_180: Bits = Bits::new(s_769_177 as u128, 128u16);
        // C s_769_181: const #0u : u11
        let s_769_181: u16 = 0;
        // C s_769_182: cast zx s_769_181 -> bv
        let s_769_182: Bits = Bits::new(s_769_181 as u128, 11u16);
        // C s_769_183: const #1u : u64
        let s_769_183: u64 = 1;
        // C s_769_184: cast zx s_769_183 -> bv
        let s_769_184: Bits = Bits::new(s_769_183 as u128, 64u16);
        // C s_769_185: lsl s_769_184 s_769_178
        let s_769_185: Bits = s_769_184 << s_769_178;
        // C s_769_186: sub s_769_185 s_769_184
        let s_769_186: Bits = ((s_769_185) - (s_769_184));
        // C s_769_187: and s_769_182 s_769_186
        let s_769_187: Bits = ((s_769_182) & (s_769_186));
        // C s_769_188: lsl s_769_187 s_769_179
        let s_769_188: Bits = s_769_187 << s_769_179;
        // C s_769_189: lsl s_769_186 s_769_179
        let s_769_189: Bits = s_769_186 << s_769_179;
        // C s_769_190: cmpl s_769_189
        let s_769_190: Bits = !s_769_189;
        // D s_769_191: and s_769_180 s_769_190
        let s_769_191: Bits = ((s_769_180) & (s_769_190));
        // D s_769_192: or s_769_191 s_769_188
        let s_769_192: Bits = ((s_769_191) | (s_769_188));
        // D s_769_193: cast reint s_769_192 -> u128
        let s_769_193: u128 = (s_769_192.value() as u128);
        // D s_769_194: call Mk_PAR_EL1_Type(s_769_193)
        let s_769_194: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_193,
        );
        // D s_769_195: call PAR_EL1_write(s_769_194)
        let s_769_195: () = PAR_EL1_write(state, tracer, s_769_194);
        // C s_769_196: const #() : ()
        let s_769_196: () = ();
        // S s_769_197: call PAR_EL1_read(s_769_196)
        let s_769_197: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_196,
        );
        // D s_769_198: write-var ga#34440 <= s_769_197
        fn_state.ga_34440 = s_769_197;
        // D s_769_199: read-var ga#34440.0:struct
        let s_769_199: u128 = fn_state.ga_34440._0;
        // C s_769_200: const #44s : i
        let s_769_200: i128 = 44;
        // C s_769_201: const #12s : i
        let s_769_201: i128 = 12;
        // D s_769_202: cast zx s_769_199 -> bv
        let s_769_202: Bits = Bits::new(s_769_199 as u128, 128u16);
        // C s_769_203: const #0u : u44
        let s_769_203: u64 = 0;
        // C s_769_204: cast zx s_769_203 -> bv
        let s_769_204: Bits = Bits::new(s_769_203 as u128, 44u16);
        // C s_769_205: const #1u : u64
        let s_769_205: u64 = 1;
        // C s_769_206: cast zx s_769_205 -> bv
        let s_769_206: Bits = Bits::new(s_769_205 as u128, 64u16);
        // C s_769_207: lsl s_769_206 s_769_200
        let s_769_207: Bits = s_769_206 << s_769_200;
        // C s_769_208: sub s_769_207 s_769_206
        let s_769_208: Bits = ((s_769_207) - (s_769_206));
        // C s_769_209: and s_769_204 s_769_208
        let s_769_209: Bits = ((s_769_204) & (s_769_208));
        // C s_769_210: lsl s_769_209 s_769_201
        let s_769_210: Bits = s_769_209 << s_769_201;
        // C s_769_211: lsl s_769_208 s_769_201
        let s_769_211: Bits = s_769_208 << s_769_201;
        // C s_769_212: cmpl s_769_211
        let s_769_212: Bits = !s_769_211;
        // D s_769_213: and s_769_202 s_769_212
        let s_769_213: Bits = ((s_769_202) & (s_769_212));
        // D s_769_214: or s_769_213 s_769_210
        let s_769_214: Bits = ((s_769_213) | (s_769_210));
        // D s_769_215: cast reint s_769_214 -> u128
        let s_769_215: u128 = (s_769_214.value() as u128);
        // D s_769_216: call Mk_PAR_EL1_Type(s_769_215)
        let s_769_216: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_215,
        );
        // D s_769_217: call PAR_EL1_write(s_769_216)
        let s_769_217: () = PAR_EL1_write(state, tracer, s_769_216);
        // C s_769_218: const #() : ()
        let s_769_218: () = ();
        // S s_769_219: call PAR_EL1_read(s_769_218)
        let s_769_219: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_218,
        );
        // D s_769_220: write-var ga#34444 <= s_769_219
        fn_state.ga_34444 = s_769_219;
        // D s_769_221: read-var ga#34444.0:struct
        let s_769_221: u128 = fn_state.ga_34444._0;
        // C s_769_222: const #6s : i
        let s_769_222: i128 = 6;
        // C s_769_223: const #1s : i
        let s_769_223: i128 = 1;
        // D s_769_224: cast zx s_769_221 -> bv
        let s_769_224: Bits = Bits::new(s_769_221 as u128, 128u16);
        // C s_769_225: const #0u : u8
        let s_769_225: u8 = 0;
        // C s_769_226: cast zx s_769_225 -> bv
        let s_769_226: Bits = Bits::new(s_769_225 as u128, 6u16);
        // C s_769_227: const #1u : u64
        let s_769_227: u64 = 1;
        // C s_769_228: cast zx s_769_227 -> bv
        let s_769_228: Bits = Bits::new(s_769_227 as u128, 64u16);
        // C s_769_229: lsl s_769_228 s_769_222
        let s_769_229: Bits = s_769_228 << s_769_222;
        // C s_769_230: sub s_769_229 s_769_228
        let s_769_230: Bits = ((s_769_229) - (s_769_228));
        // C s_769_231: and s_769_226 s_769_230
        let s_769_231: Bits = ((s_769_226) & (s_769_230));
        // C s_769_232: lsl s_769_231 s_769_223
        let s_769_232: Bits = s_769_231 << s_769_223;
        // C s_769_233: lsl s_769_230 s_769_223
        let s_769_233: Bits = s_769_230 << s_769_223;
        // C s_769_234: cmpl s_769_233
        let s_769_234: Bits = !s_769_233;
        // D s_769_235: and s_769_224 s_769_234
        let s_769_235: Bits = ((s_769_224) & (s_769_234));
        // D s_769_236: or s_769_235 s_769_232
        let s_769_236: Bits = ((s_769_235) | (s_769_232));
        // D s_769_237: cast reint s_769_236 -> u128
        let s_769_237: u128 = (s_769_236.value() as u128);
        // D s_769_238: call Mk_PAR_EL1_Type(s_769_237)
        let s_769_238: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_237,
        );
        // D s_769_239: call PAR_EL1_write(s_769_238)
        let s_769_239: () = PAR_EL1_write(state, tracer, s_769_238);
        // C s_769_240: const #() : ()
        let s_769_240: () = ();
        // S s_769_241: call PAR_EL1_read(s_769_240)
        let s_769_241: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_240,
        );
        // D s_769_242: write-var ga#34448 <= s_769_241
        fn_state.ga_34448 = s_769_241;
        // D s_769_243: read-var ga#34448.0:struct
        let s_769_243: u128 = fn_state.ga_34448._0;
        // C s_769_244: const #63s : i
        let s_769_244: i128 = 63;
        // C s_769_245: const #65s : i
        let s_769_245: i128 = 65;
        // D s_769_246: cast zx s_769_243 -> bv
        let s_769_246: Bits = Bits::new(s_769_243 as u128, 128u16);
        // C s_769_247: const #0u : u63
        let s_769_247: u64 = 0;
        // C s_769_248: cast zx s_769_247 -> bv
        let s_769_248: Bits = Bits::new(s_769_247 as u128, 63u16);
        // C s_769_249: const #1u : u64
        let s_769_249: u64 = 1;
        // C s_769_250: cast zx s_769_249 -> bv
        let s_769_250: Bits = Bits::new(s_769_249 as u128, 64u16);
        // C s_769_251: lsl s_769_250 s_769_244
        let s_769_251: Bits = s_769_250 << s_769_244;
        // C s_769_252: sub s_769_251 s_769_250
        let s_769_252: Bits = ((s_769_251) - (s_769_250));
        // C s_769_253: and s_769_248 s_769_252
        let s_769_253: Bits = ((s_769_248) & (s_769_252));
        // C s_769_254: lsl s_769_253 s_769_245
        let s_769_254: Bits = s_769_253 << s_769_245;
        // C s_769_255: lsl s_769_252 s_769_245
        let s_769_255: Bits = s_769_252 << s_769_245;
        // C s_769_256: cmpl s_769_255
        let s_769_256: Bits = !s_769_255;
        // D s_769_257: and s_769_246 s_769_256
        let s_769_257: Bits = ((s_769_246) & (s_769_256));
        // D s_769_258: or s_769_257 s_769_254
        let s_769_258: Bits = ((s_769_257) | (s_769_254));
        // D s_769_259: cast reint s_769_258 -> u128
        let s_769_259: u128 = (s_769_258.value() as u128);
        // D s_769_260: call Mk_PAR_EL1_Type(s_769_259)
        let s_769_260: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_259,
        );
        // D s_769_261: call PAR_EL1_write(s_769_260)
        let s_769_261: () = PAR_EL1_write(state, tracer, s_769_260);
        // C s_769_262: const #() : ()
        let s_769_262: () = ();
        // S s_769_263: call PAR_EL1_read(s_769_262)
        let s_769_263: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_262,
        );
        // D s_769_264: write-var ga#34452 <= s_769_263
        fn_state.ga_34452 = s_769_263;
        // D s_769_265: read-var ga#34452.0:struct
        let s_769_265: u128 = fn_state.ga_34452._0;
        // C s_769_266: const #32s : i
        let s_769_266: i128 = 32;
        // C s_769_267: const #16s : i
        let s_769_267: i128 = 16;
        // D s_769_268: cast zx s_769_265 -> bv
        let s_769_268: Bits = Bits::new(s_769_265 as u128, 128u16);
        // C s_769_269: const #0u : u32
        let s_769_269: u32 = 0;
        // C s_769_270: cast zx s_769_269 -> bv
        let s_769_270: Bits = Bits::new(s_769_269 as u128, 32u16);
        // C s_769_271: const #1u : u64
        let s_769_271: u64 = 1;
        // C s_769_272: cast zx s_769_271 -> bv
        let s_769_272: Bits = Bits::new(s_769_271 as u128, 64u16);
        // C s_769_273: lsl s_769_272 s_769_266
        let s_769_273: Bits = s_769_272 << s_769_266;
        // C s_769_274: sub s_769_273 s_769_272
        let s_769_274: Bits = ((s_769_273) - (s_769_272));
        // C s_769_275: and s_769_270 s_769_274
        let s_769_275: Bits = ((s_769_270) & (s_769_274));
        // C s_769_276: lsl s_769_275 s_769_267
        let s_769_276: Bits = s_769_275 << s_769_267;
        // C s_769_277: lsl s_769_274 s_769_267
        let s_769_277: Bits = s_769_274 << s_769_267;
        // C s_769_278: cmpl s_769_277
        let s_769_278: Bits = !s_769_277;
        // D s_769_279: and s_769_268 s_769_278
        let s_769_279: Bits = ((s_769_268) & (s_769_278));
        // D s_769_280: or s_769_279 s_769_276
        let s_769_280: Bits = ((s_769_279) | (s_769_276));
        // D s_769_281: cast reint s_769_280 -> u128
        let s_769_281: u128 = (s_769_280.value() as u128);
        // D s_769_282: call Mk_PAR_EL1_Type(s_769_281)
        let s_769_282: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_281,
        );
        // D s_769_283: call PAR_EL1_write(s_769_282)
        let s_769_283: () = PAR_EL1_write(state, tracer, s_769_282);
        // C s_769_284: const #() : ()
        let s_769_284: () = ();
        // S s_769_285: call PAR_EL1_read(s_769_284)
        let s_769_285: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_284,
        );
        // D s_769_286: write-var ga#34456 <= s_769_285
        fn_state.ga_34456 = s_769_285;
        // D s_769_287: read-var ga#34456.0:struct
        let s_769_287: u128 = fn_state.ga_34456._0;
        // C s_769_288: const #1s : i
        let s_769_288: i128 = 1;
        // C s_769_289: const #11s : i
        let s_769_289: i128 = 11;
        // D s_769_290: cast zx s_769_287 -> bv
        let s_769_290: Bits = Bits::new(s_769_287 as u128, 128u16);
        // C s_769_291: const #1u : u8
        let s_769_291: bool = true;
        // C s_769_292: cast zx s_769_291 -> bv
        let s_769_292: Bits = Bits::new(s_769_291 as u128, 1u16);
        // C s_769_293: const #1u : u64
        let s_769_293: u64 = 1;
        // C s_769_294: cast zx s_769_293 -> bv
        let s_769_294: Bits = Bits::new(s_769_293 as u128, 64u16);
        // C s_769_295: lsl s_769_294 s_769_288
        let s_769_295: Bits = s_769_294 << s_769_288;
        // C s_769_296: sub s_769_295 s_769_294
        let s_769_296: Bits = ((s_769_295) - (s_769_294));
        // C s_769_297: and s_769_292 s_769_296
        let s_769_297: Bits = ((s_769_292) & (s_769_296));
        // C s_769_298: lsl s_769_297 s_769_289
        let s_769_298: Bits = s_769_297 << s_769_289;
        // C s_769_299: lsl s_769_296 s_769_289
        let s_769_299: Bits = s_769_296 << s_769_289;
        // C s_769_300: cmpl s_769_299
        let s_769_300: Bits = !s_769_299;
        // D s_769_301: and s_769_290 s_769_300
        let s_769_301: Bits = ((s_769_290) & (s_769_300));
        // D s_769_302: or s_769_301 s_769_298
        let s_769_302: Bits = ((s_769_301) | (s_769_298));
        // D s_769_303: cast reint s_769_302 -> u128
        let s_769_303: u128 = (s_769_302.value() as u128);
        // D s_769_304: call Mk_PAR_EL1_Type(s_769_303)
        let s_769_304: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_303,
        );
        // D s_769_305: call PAR_EL1_write(s_769_304)
        let s_769_305: () = PAR_EL1_write(state, tracer, s_769_304);
        // C s_769_306: const #() : ()
        let s_769_306: () = ();
        // S s_769_307: call PAR_EL1_read(s_769_306)
        let s_769_307: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_306,
        );
        // D s_769_308: write-var ga#34460 <= s_769_307
        fn_state.ga_34460 = s_769_307;
        // D s_769_309: read-var ga#34460.0:struct
        let s_769_309: u128 = fn_state.ga_34460._0;
        // C s_769_310: const #1s : i
        let s_769_310: i128 = 1;
        // C s_769_311: const #10s : i
        let s_769_311: i128 = 10;
        // D s_769_312: cast zx s_769_309 -> bv
        let s_769_312: Bits = Bits::new(s_769_309 as u128, 128u16);
        // C s_769_313: const #0u : u8
        let s_769_313: bool = false;
        // C s_769_314: cast zx s_769_313 -> bv
        let s_769_314: Bits = Bits::new(s_769_313 as u128, 1u16);
        // C s_769_315: const #1u : u64
        let s_769_315: u64 = 1;
        // C s_769_316: cast zx s_769_315 -> bv
        let s_769_316: Bits = Bits::new(s_769_315 as u128, 64u16);
        // C s_769_317: lsl s_769_316 s_769_310
        let s_769_317: Bits = s_769_316 << s_769_310;
        // C s_769_318: sub s_769_317 s_769_316
        let s_769_318: Bits = ((s_769_317) - (s_769_316));
        // C s_769_319: and s_769_314 s_769_318
        let s_769_319: Bits = ((s_769_314) & (s_769_318));
        // C s_769_320: lsl s_769_319 s_769_311
        let s_769_320: Bits = s_769_319 << s_769_311;
        // C s_769_321: lsl s_769_318 s_769_311
        let s_769_321: Bits = s_769_318 << s_769_311;
        // C s_769_322: cmpl s_769_321
        let s_769_322: Bits = !s_769_321;
        // D s_769_323: and s_769_312 s_769_322
        let s_769_323: Bits = ((s_769_312) & (s_769_322));
        // D s_769_324: or s_769_323 s_769_320
        let s_769_324: Bits = ((s_769_323) | (s_769_320));
        // D s_769_325: cast reint s_769_324 -> u128
        let s_769_325: u128 = (s_769_324.value() as u128);
        // D s_769_326: call Mk_PAR_EL1_Type(s_769_325)
        let s_769_326: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_325,
        );
        // D s_769_327: call PAR_EL1_write(s_769_326)
        let s_769_327: () = PAR_EL1_write(state, tracer, s_769_326);
        // C s_769_328: const #() : ()
        let s_769_328: () = ();
        // S s_769_329: call PAR_EL1_read(s_769_328)
        let s_769_329: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_328,
        );
        // D s_769_330: write-var ga#34464 <= s_769_329
        fn_state.ga_34464 = s_769_329;
        // D s_769_331: read-var ga#34464.0:struct
        let s_769_331: u128 = fn_state.ga_34464._0;
        // C s_769_332: const #1s : i
        let s_769_332: i128 = 1;
        // C s_769_333: const #7s : i
        let s_769_333: i128 = 7;
        // D s_769_334: cast zx s_769_331 -> bv
        let s_769_334: Bits = Bits::new(s_769_331 as u128, 128u16);
        // C s_769_335: const #0u : u8
        let s_769_335: bool = false;
        // C s_769_336: cast zx s_769_335 -> bv
        let s_769_336: Bits = Bits::new(s_769_335 as u128, 1u16);
        // C s_769_337: const #1u : u64
        let s_769_337: u64 = 1;
        // C s_769_338: cast zx s_769_337 -> bv
        let s_769_338: Bits = Bits::new(s_769_337 as u128, 64u16);
        // C s_769_339: lsl s_769_338 s_769_332
        let s_769_339: Bits = s_769_338 << s_769_332;
        // C s_769_340: sub s_769_339 s_769_338
        let s_769_340: Bits = ((s_769_339) - (s_769_338));
        // C s_769_341: and s_769_336 s_769_340
        let s_769_341: Bits = ((s_769_336) & (s_769_340));
        // C s_769_342: lsl s_769_341 s_769_333
        let s_769_342: Bits = s_769_341 << s_769_333;
        // C s_769_343: lsl s_769_340 s_769_333
        let s_769_343: Bits = s_769_340 << s_769_333;
        // C s_769_344: cmpl s_769_343
        let s_769_344: Bits = !s_769_343;
        // D s_769_345: and s_769_334 s_769_344
        let s_769_345: Bits = ((s_769_334) & (s_769_344));
        // D s_769_346: or s_769_345 s_769_342
        let s_769_346: Bits = ((s_769_345) | (s_769_342));
        // D s_769_347: cast reint s_769_346 -> u128
        let s_769_347: u128 = (s_769_346.value() as u128);
        // D s_769_348: call Mk_PAR_EL1_Type(s_769_347)
        let s_769_348: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_347,
        );
        // D s_769_349: call PAR_EL1_write(s_769_348)
        let s_769_349: () = PAR_EL1_write(state, tracer, s_769_348);
        // C s_769_350: const #() : ()
        let s_769_350: () = ();
        // S s_769_351: call PAR_EL1_read(s_769_350)
        let s_769_351: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_350,
        );
        // D s_769_352: write-var ga#34468 <= s_769_351
        fn_state.ga_34468 = s_769_351;
        // D s_769_353: read-var ga#34468.0:struct
        let s_769_353: u128 = fn_state.ga_34468._0;
        // C s_769_354: const #63s : i
        let s_769_354: i128 = 63;
        // C s_769_355: const #65s : i
        let s_769_355: i128 = 65;
        // D s_769_356: cast zx s_769_353 -> bv
        let s_769_356: Bits = Bits::new(s_769_353 as u128, 128u16);
        // C s_769_357: const #0u : u63
        let s_769_357: u64 = 0;
        // C s_769_358: cast zx s_769_357 -> bv
        let s_769_358: Bits = Bits::new(s_769_357 as u128, 63u16);
        // C s_769_359: const #1u : u64
        let s_769_359: u64 = 1;
        // C s_769_360: cast zx s_769_359 -> bv
        let s_769_360: Bits = Bits::new(s_769_359 as u128, 64u16);
        // C s_769_361: lsl s_769_360 s_769_354
        let s_769_361: Bits = s_769_360 << s_769_354;
        // C s_769_362: sub s_769_361 s_769_360
        let s_769_362: Bits = ((s_769_361) - (s_769_360));
        // C s_769_363: and s_769_358 s_769_362
        let s_769_363: Bits = ((s_769_358) & (s_769_362));
        // C s_769_364: lsl s_769_363 s_769_355
        let s_769_364: Bits = s_769_363 << s_769_355;
        // C s_769_365: lsl s_769_362 s_769_355
        let s_769_365: Bits = s_769_362 << s_769_355;
        // C s_769_366: cmpl s_769_365
        let s_769_366: Bits = !s_769_365;
        // D s_769_367: and s_769_356 s_769_366
        let s_769_367: Bits = ((s_769_356) & (s_769_366));
        // D s_769_368: or s_769_367 s_769_364
        let s_769_368: Bits = ((s_769_367) | (s_769_364));
        // D s_769_369: cast reint s_769_368 -> u128
        let s_769_369: u128 = (s_769_368.value() as u128);
        // D s_769_370: call Mk_PAR_EL1_Type(s_769_369)
        let s_769_370: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_369,
        );
        // D s_769_371: call PAR_EL1_write(s_769_370)
        let s_769_371: () = PAR_EL1_write(state, tracer, s_769_370);
        // C s_769_372: const #() : ()
        let s_769_372: () = ();
        // S s_769_373: call PAR_EL1_read(s_769_372)
        let s_769_373: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_372,
        );
        // D s_769_374: write-var ga#34472 <= s_769_373
        fn_state.ga_34472 = s_769_373;
        // D s_769_375: read-var ga#34472.0:struct
        let s_769_375: u128 = fn_state.ga_34472._0;
        // C s_769_376: const #4s : i
        let s_769_376: i128 = 4;
        // C s_769_377: const #52s : i
        let s_769_377: i128 = 52;
        // D s_769_378: cast zx s_769_375 -> bv
        let s_769_378: Bits = Bits::new(s_769_375 as u128, 128u16);
        // C s_769_379: const #0u : u8
        let s_769_379: u8 = 0;
        // C s_769_380: cast zx s_769_379 -> bv
        let s_769_380: Bits = Bits::new(s_769_379 as u128, 4u16);
        // C s_769_381: const #1u : u64
        let s_769_381: u64 = 1;
        // C s_769_382: cast zx s_769_381 -> bv
        let s_769_382: Bits = Bits::new(s_769_381 as u128, 64u16);
        // C s_769_383: lsl s_769_382 s_769_376
        let s_769_383: Bits = s_769_382 << s_769_376;
        // C s_769_384: sub s_769_383 s_769_382
        let s_769_384: Bits = ((s_769_383) - (s_769_382));
        // C s_769_385: and s_769_380 s_769_384
        let s_769_385: Bits = ((s_769_380) & (s_769_384));
        // C s_769_386: lsl s_769_385 s_769_377
        let s_769_386: Bits = s_769_385 << s_769_377;
        // C s_769_387: lsl s_769_384 s_769_377
        let s_769_387: Bits = s_769_384 << s_769_377;
        // C s_769_388: cmpl s_769_387
        let s_769_388: Bits = !s_769_387;
        // D s_769_389: and s_769_378 s_769_388
        let s_769_389: Bits = ((s_769_378) & (s_769_388));
        // D s_769_390: or s_769_389 s_769_386
        let s_769_390: Bits = ((s_769_389) | (s_769_386));
        // D s_769_391: cast reint s_769_390 -> u128
        let s_769_391: u128 = (s_769_390.value() as u128);
        // D s_769_392: call Mk_PAR_EL1_Type(s_769_391)
        let s_769_392: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_391,
        );
        // D s_769_393: call PAR_EL1_write(s_769_392)
        let s_769_393: () = PAR_EL1_write(state, tracer, s_769_392);
        // C s_769_394: const #() : ()
        let s_769_394: () = ();
        // S s_769_395: call PAR_EL1_read(s_769_394)
        let s_769_395: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_394,
        );
        // D s_769_396: write-var ga#34476 <= s_769_395
        fn_state.ga_34476 = s_769_395;
        // D s_769_397: read-var ga#34476.0:struct
        let s_769_397: u128 = fn_state.ga_34476._0;
        // C s_769_398: const #6s : i
        let s_769_398: i128 = 6;
        // C s_769_399: const #1s : i
        let s_769_399: i128 = 1;
        // D s_769_400: cast zx s_769_397 -> bv
        let s_769_400: Bits = Bits::new(s_769_397 as u128, 128u16);
        // C s_769_401: const #0u : u8
        let s_769_401: u8 = 0;
        // C s_769_402: cast zx s_769_401 -> bv
        let s_769_402: Bits = Bits::new(s_769_401 as u128, 6u16);
        // C s_769_403: const #1u : u64
        let s_769_403: u64 = 1;
        // C s_769_404: cast zx s_769_403 -> bv
        let s_769_404: Bits = Bits::new(s_769_403 as u128, 64u16);
        // C s_769_405: lsl s_769_404 s_769_398
        let s_769_405: Bits = s_769_404 << s_769_398;
        // C s_769_406: sub s_769_405 s_769_404
        let s_769_406: Bits = ((s_769_405) - (s_769_404));
        // C s_769_407: and s_769_402 s_769_406
        let s_769_407: Bits = ((s_769_402) & (s_769_406));
        // C s_769_408: lsl s_769_407 s_769_399
        let s_769_408: Bits = s_769_407 << s_769_399;
        // C s_769_409: lsl s_769_406 s_769_399
        let s_769_409: Bits = s_769_406 << s_769_399;
        // C s_769_410: cmpl s_769_409
        let s_769_410: Bits = !s_769_409;
        // D s_769_411: and s_769_400 s_769_410
        let s_769_411: Bits = ((s_769_400) & (s_769_410));
        // D s_769_412: or s_769_411 s_769_408
        let s_769_412: Bits = ((s_769_411) | (s_769_408));
        // D s_769_413: cast reint s_769_412 -> u128
        let s_769_413: u128 = (s_769_412.value() as u128);
        // D s_769_414: call Mk_PAR_EL1_Type(s_769_413)
        let s_769_414: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_413,
        );
        // D s_769_415: call PAR_EL1_write(s_769_414)
        let s_769_415: () = PAR_EL1_write(state, tracer, s_769_414);
        // C s_769_416: const #() : ()
        let s_769_416: () = ();
        // S s_769_417: call PAR_EL1_read(s_769_416)
        let s_769_417: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_416,
        );
        // D s_769_418: write-var ga#34480 <= s_769_417
        fn_state.ga_34480 = s_769_417;
        // D s_769_419: read-var ga#34480.0:struct
        let s_769_419: u128 = fn_state.ga_34480._0;
        // C s_769_420: const #63s : i
        let s_769_420: i128 = 63;
        // C s_769_421: const #65s : i
        let s_769_421: i128 = 65;
        // D s_769_422: cast zx s_769_419 -> bv
        let s_769_422: Bits = Bits::new(s_769_419 as u128, 128u16);
        // C s_769_423: const #0u : u63
        let s_769_423: u64 = 0;
        // C s_769_424: cast zx s_769_423 -> bv
        let s_769_424: Bits = Bits::new(s_769_423 as u128, 63u16);
        // C s_769_425: const #1u : u64
        let s_769_425: u64 = 1;
        // C s_769_426: cast zx s_769_425 -> bv
        let s_769_426: Bits = Bits::new(s_769_425 as u128, 64u16);
        // C s_769_427: lsl s_769_426 s_769_420
        let s_769_427: Bits = s_769_426 << s_769_420;
        // C s_769_428: sub s_769_427 s_769_426
        let s_769_428: Bits = ((s_769_427) - (s_769_426));
        // C s_769_429: and s_769_424 s_769_428
        let s_769_429: Bits = ((s_769_424) & (s_769_428));
        // C s_769_430: lsl s_769_429 s_769_421
        let s_769_430: Bits = s_769_429 << s_769_421;
        // C s_769_431: lsl s_769_428 s_769_421
        let s_769_431: Bits = s_769_428 << s_769_421;
        // C s_769_432: cmpl s_769_431
        let s_769_432: Bits = !s_769_431;
        // D s_769_433: and s_769_422 s_769_432
        let s_769_433: Bits = ((s_769_422) & (s_769_432));
        // D s_769_434: or s_769_433 s_769_430
        let s_769_434: Bits = ((s_769_433) | (s_769_430));
        // D s_769_435: cast reint s_769_434 -> u128
        let s_769_435: u128 = (s_769_434.value() as u128);
        // D s_769_436: call Mk_PAR_EL1_Type(s_769_435)
        let s_769_436: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_435,
        );
        // D s_769_437: call PAR_EL1_write(s_769_436)
        let s_769_437: () = PAR_EL1_write(state, tracer, s_769_436);
        // C s_769_438: const #() : ()
        let s_769_438: () = ();
        // S s_769_439: call PAR_EL1_read(s_769_438)
        let s_769_439: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_438,
        );
        // D s_769_440: write-var ga#34484 <= s_769_439
        fn_state.ga_34484 = s_769_439;
        // D s_769_441: read-var ga#34484.0:struct
        let s_769_441: u128 = fn_state.ga_34484._0;
        // C s_769_442: const #32s : i
        let s_769_442: i128 = 32;
        // C s_769_443: const #16s : i
        let s_769_443: i128 = 16;
        // D s_769_444: cast zx s_769_441 -> bv
        let s_769_444: Bits = Bits::new(s_769_441 as u128, 128u16);
        // C s_769_445: const #0u : u32
        let s_769_445: u32 = 0;
        // C s_769_446: cast zx s_769_445 -> bv
        let s_769_446: Bits = Bits::new(s_769_445 as u128, 32u16);
        // C s_769_447: const #1u : u64
        let s_769_447: u64 = 1;
        // C s_769_448: cast zx s_769_447 -> bv
        let s_769_448: Bits = Bits::new(s_769_447 as u128, 64u16);
        // C s_769_449: lsl s_769_448 s_769_442
        let s_769_449: Bits = s_769_448 << s_769_442;
        // C s_769_450: sub s_769_449 s_769_448
        let s_769_450: Bits = ((s_769_449) - (s_769_448));
        // C s_769_451: and s_769_446 s_769_450
        let s_769_451: Bits = ((s_769_446) & (s_769_450));
        // C s_769_452: lsl s_769_451 s_769_443
        let s_769_452: Bits = s_769_451 << s_769_443;
        // C s_769_453: lsl s_769_450 s_769_443
        let s_769_453: Bits = s_769_450 << s_769_443;
        // C s_769_454: cmpl s_769_453
        let s_769_454: Bits = !s_769_453;
        // D s_769_455: and s_769_444 s_769_454
        let s_769_455: Bits = ((s_769_444) & (s_769_454));
        // D s_769_456: or s_769_455 s_769_452
        let s_769_456: Bits = ((s_769_455) | (s_769_452));
        // D s_769_457: cast reint s_769_456 -> u128
        let s_769_457: u128 = (s_769_456.value() as u128);
        // D s_769_458: call Mk_PAR_EL1_Type(s_769_457)
        let s_769_458: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_457,
        );
        // D s_769_459: call PAR_EL1_write(s_769_458)
        let s_769_459: () = PAR_EL1_write(state, tracer, s_769_458);
        // C s_769_460: const #() : ()
        let s_769_460: () = ();
        // S s_769_461: call PAR_EL1_read(s_769_460)
        let s_769_461: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_460,
        );
        // D s_769_462: write-var ga#34488 <= s_769_461
        fn_state.ga_34488 = s_769_461;
        // D s_769_463: read-var ga#34488.0:struct
        let s_769_463: u128 = fn_state.ga_34488._0;
        // C s_769_464: const #1s : i
        let s_769_464: i128 = 1;
        // C s_769_465: const #11s : i
        let s_769_465: i128 = 11;
        // D s_769_466: cast zx s_769_463 -> bv
        let s_769_466: Bits = Bits::new(s_769_463 as u128, 128u16);
        // C s_769_467: const #1u : u8
        let s_769_467: bool = true;
        // C s_769_468: cast zx s_769_467 -> bv
        let s_769_468: Bits = Bits::new(s_769_467 as u128, 1u16);
        // C s_769_469: const #1u : u64
        let s_769_469: u64 = 1;
        // C s_769_470: cast zx s_769_469 -> bv
        let s_769_470: Bits = Bits::new(s_769_469 as u128, 64u16);
        // C s_769_471: lsl s_769_470 s_769_464
        let s_769_471: Bits = s_769_470 << s_769_464;
        // C s_769_472: sub s_769_471 s_769_470
        let s_769_472: Bits = ((s_769_471) - (s_769_470));
        // C s_769_473: and s_769_468 s_769_472
        let s_769_473: Bits = ((s_769_468) & (s_769_472));
        // C s_769_474: lsl s_769_473 s_769_465
        let s_769_474: Bits = s_769_473 << s_769_465;
        // C s_769_475: lsl s_769_472 s_769_465
        let s_769_475: Bits = s_769_472 << s_769_465;
        // C s_769_476: cmpl s_769_475
        let s_769_476: Bits = !s_769_475;
        // D s_769_477: and s_769_466 s_769_476
        let s_769_477: Bits = ((s_769_466) & (s_769_476));
        // D s_769_478: or s_769_477 s_769_474
        let s_769_478: Bits = ((s_769_477) | (s_769_474));
        // D s_769_479: cast reint s_769_478 -> u128
        let s_769_479: u128 = (s_769_478.value() as u128);
        // D s_769_480: call Mk_PAR_EL1_Type(s_769_479)
        let s_769_480: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_479,
        );
        // D s_769_481: call PAR_EL1_write(s_769_480)
        let s_769_481: () = PAR_EL1_write(state, tracer, s_769_480);
        // C s_769_482: const #() : ()
        let s_769_482: () = ();
        // S s_769_483: call PAR_EL1_read(s_769_482)
        let s_769_483: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_482,
        );
        // D s_769_484: write-var ga#34492 <= s_769_483
        fn_state.ga_34492 = s_769_483;
        // D s_769_485: read-var ga#34492.0:struct
        let s_769_485: u128 = fn_state.ga_34492._0;
        // C s_769_486: const #1s : i
        let s_769_486: i128 = 1;
        // C s_769_487: const #10s : i
        let s_769_487: i128 = 10;
        // D s_769_488: cast zx s_769_485 -> bv
        let s_769_488: Bits = Bits::new(s_769_485 as u128, 128u16);
        // C s_769_489: const #0u : u8
        let s_769_489: bool = false;
        // C s_769_490: cast zx s_769_489 -> bv
        let s_769_490: Bits = Bits::new(s_769_489 as u128, 1u16);
        // C s_769_491: const #1u : u64
        let s_769_491: u64 = 1;
        // C s_769_492: cast zx s_769_491 -> bv
        let s_769_492: Bits = Bits::new(s_769_491 as u128, 64u16);
        // C s_769_493: lsl s_769_492 s_769_486
        let s_769_493: Bits = s_769_492 << s_769_486;
        // C s_769_494: sub s_769_493 s_769_492
        let s_769_494: Bits = ((s_769_493) - (s_769_492));
        // C s_769_495: and s_769_490 s_769_494
        let s_769_495: Bits = ((s_769_490) & (s_769_494));
        // C s_769_496: lsl s_769_495 s_769_487
        let s_769_496: Bits = s_769_495 << s_769_487;
        // C s_769_497: lsl s_769_494 s_769_487
        let s_769_497: Bits = s_769_494 << s_769_487;
        // C s_769_498: cmpl s_769_497
        let s_769_498: Bits = !s_769_497;
        // D s_769_499: and s_769_488 s_769_498
        let s_769_499: Bits = ((s_769_488) & (s_769_498));
        // D s_769_500: or s_769_499 s_769_496
        let s_769_500: Bits = ((s_769_499) | (s_769_496));
        // D s_769_501: cast reint s_769_500 -> u128
        let s_769_501: u128 = (s_769_500.value() as u128);
        // D s_769_502: call Mk_PAR_EL1_Type(s_769_501)
        let s_769_502: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_501,
        );
        // D s_769_503: call PAR_EL1_write(s_769_502)
        let s_769_503: () = PAR_EL1_write(state, tracer, s_769_502);
        // C s_769_504: const #() : ()
        let s_769_504: () = ();
        // S s_769_505: call PAR_EL1_read(s_769_504)
        let s_769_505: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_504,
        );
        // D s_769_506: write-var ga#34496 <= s_769_505
        fn_state.ga_34496 = s_769_505;
        // D s_769_507: read-var ga#34496.0:struct
        let s_769_507: u128 = fn_state.ga_34496._0;
        // C s_769_508: const #1s : i
        let s_769_508: i128 = 1;
        // C s_769_509: const #7s : i
        let s_769_509: i128 = 7;
        // D s_769_510: cast zx s_769_507 -> bv
        let s_769_510: Bits = Bits::new(s_769_507 as u128, 128u16);
        // C s_769_511: const #0u : u8
        let s_769_511: bool = false;
        // C s_769_512: cast zx s_769_511 -> bv
        let s_769_512: Bits = Bits::new(s_769_511 as u128, 1u16);
        // C s_769_513: const #1u : u64
        let s_769_513: u64 = 1;
        // C s_769_514: cast zx s_769_513 -> bv
        let s_769_514: Bits = Bits::new(s_769_513 as u128, 64u16);
        // C s_769_515: lsl s_769_514 s_769_508
        let s_769_515: Bits = s_769_514 << s_769_508;
        // C s_769_516: sub s_769_515 s_769_514
        let s_769_516: Bits = ((s_769_515) - (s_769_514));
        // C s_769_517: and s_769_512 s_769_516
        let s_769_517: Bits = ((s_769_512) & (s_769_516));
        // C s_769_518: lsl s_769_517 s_769_509
        let s_769_518: Bits = s_769_517 << s_769_509;
        // C s_769_519: lsl s_769_516 s_769_509
        let s_769_519: Bits = s_769_516 << s_769_509;
        // C s_769_520: cmpl s_769_519
        let s_769_520: Bits = !s_769_519;
        // D s_769_521: and s_769_510 s_769_520
        let s_769_521: Bits = ((s_769_510) & (s_769_520));
        // D s_769_522: or s_769_521 s_769_518
        let s_769_522: Bits = ((s_769_521) | (s_769_518));
        // D s_769_523: cast reint s_769_522 -> u128
        let s_769_523: u128 = (s_769_522.value() as u128);
        // D s_769_524: call Mk_PAR_EL1_Type(s_769_523)
        let s_769_524: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_523,
        );
        // D s_769_525: call PAR_EL1_write(s_769_524)
        let s_769_525: () = PAR_EL1_write(state, tracer, s_769_524);
        // C s_769_526: const #() : ()
        let s_769_526: () = ();
        // S s_769_527: call PAR_EL1_read(s_769_526)
        let s_769_527: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_526,
        );
        // D s_769_528: write-var ga#34500 <= s_769_527
        fn_state.ga_34500 = s_769_527;
        // D s_769_529: read-var ga#34500.0:struct
        let s_769_529: u128 = fn_state.ga_34500._0;
        // C s_769_530: const #4s : i
        let s_769_530: i128 = 4;
        // C s_769_531: const #52s : i
        let s_769_531: i128 = 52;
        // D s_769_532: cast zx s_769_529 -> bv
        let s_769_532: Bits = Bits::new(s_769_529 as u128, 128u16);
        // C s_769_533: const #0u : u8
        let s_769_533: u8 = 0;
        // C s_769_534: cast zx s_769_533 -> bv
        let s_769_534: Bits = Bits::new(s_769_533 as u128, 4u16);
        // C s_769_535: const #1u : u64
        let s_769_535: u64 = 1;
        // C s_769_536: cast zx s_769_535 -> bv
        let s_769_536: Bits = Bits::new(s_769_535 as u128, 64u16);
        // C s_769_537: lsl s_769_536 s_769_530
        let s_769_537: Bits = s_769_536 << s_769_530;
        // C s_769_538: sub s_769_537 s_769_536
        let s_769_538: Bits = ((s_769_537) - (s_769_536));
        // C s_769_539: and s_769_534 s_769_538
        let s_769_539: Bits = ((s_769_534) & (s_769_538));
        // C s_769_540: lsl s_769_539 s_769_531
        let s_769_540: Bits = s_769_539 << s_769_531;
        // C s_769_541: lsl s_769_538 s_769_531
        let s_769_541: Bits = s_769_538 << s_769_531;
        // C s_769_542: cmpl s_769_541
        let s_769_542: Bits = !s_769_541;
        // D s_769_543: and s_769_532 s_769_542
        let s_769_543: Bits = ((s_769_532) & (s_769_542));
        // D s_769_544: or s_769_543 s_769_540
        let s_769_544: Bits = ((s_769_543) | (s_769_540));
        // D s_769_545: cast reint s_769_544 -> u128
        let s_769_545: u128 = (s_769_544.value() as u128);
        // D s_769_546: call Mk_PAR_EL1_Type(s_769_545)
        let s_769_546: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_545,
        );
        // D s_769_547: call PAR_EL1_write(s_769_546)
        let s_769_547: () = PAR_EL1_write(state, tracer, s_769_546);
        // C s_769_548: const #() : ()
        let s_769_548: () = ();
        // S s_769_549: call PAR_EL1_read(s_769_548)
        let s_769_549: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_548,
        );
        // D s_769_550: write-var ga#34504 <= s_769_549
        fn_state.ga_34504 = s_769_549;
        // D s_769_551: read-var ga#34504.0:struct
        let s_769_551: u128 = fn_state.ga_34504._0;
        // C s_769_552: const #6s : i
        let s_769_552: i128 = 6;
        // C s_769_553: const #1s : i
        let s_769_553: i128 = 1;
        // D s_769_554: cast zx s_769_551 -> bv
        let s_769_554: Bits = Bits::new(s_769_551 as u128, 128u16);
        // C s_769_555: const #0u : u8
        let s_769_555: u8 = 0;
        // C s_769_556: cast zx s_769_555 -> bv
        let s_769_556: Bits = Bits::new(s_769_555 as u128, 6u16);
        // C s_769_557: const #1u : u64
        let s_769_557: u64 = 1;
        // C s_769_558: cast zx s_769_557 -> bv
        let s_769_558: Bits = Bits::new(s_769_557 as u128, 64u16);
        // C s_769_559: lsl s_769_558 s_769_552
        let s_769_559: Bits = s_769_558 << s_769_552;
        // C s_769_560: sub s_769_559 s_769_558
        let s_769_560: Bits = ((s_769_559) - (s_769_558));
        // C s_769_561: and s_769_556 s_769_560
        let s_769_561: Bits = ((s_769_556) & (s_769_560));
        // C s_769_562: lsl s_769_561 s_769_553
        let s_769_562: Bits = s_769_561 << s_769_553;
        // C s_769_563: lsl s_769_560 s_769_553
        let s_769_563: Bits = s_769_560 << s_769_553;
        // C s_769_564: cmpl s_769_563
        let s_769_564: Bits = !s_769_563;
        // D s_769_565: and s_769_554 s_769_564
        let s_769_565: Bits = ((s_769_554) & (s_769_564));
        // D s_769_566: or s_769_565 s_769_562
        let s_769_566: Bits = ((s_769_565) | (s_769_562));
        // D s_769_567: cast reint s_769_566 -> u128
        let s_769_567: u128 = (s_769_566.value() as u128);
        // D s_769_568: call Mk_PAR_EL1_Type(s_769_567)
        let s_769_568: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_567,
        );
        // D s_769_569: call PAR_EL1_write(s_769_568)
        let s_769_569: () = PAR_EL1_write(state, tracer, s_769_568);
        // C s_769_570: const #() : ()
        let s_769_570: () = ();
        // S s_769_571: call PAR_EL1_read(s_769_570)
        let s_769_571: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_570,
        );
        // D s_769_572: write-var ga#34508 <= s_769_571
        fn_state.ga_34508 = s_769_571;
        // D s_769_573: read-var ga#34508.0:struct
        let s_769_573: u128 = fn_state.ga_34508._0;
        // C s_769_574: const #32s : i
        let s_769_574: i128 = 32;
        // C s_769_575: const #16s : i
        let s_769_575: i128 = 16;
        // D s_769_576: cast zx s_769_573 -> bv
        let s_769_576: Bits = Bits::new(s_769_573 as u128, 128u16);
        // C s_769_577: const #0u : u32
        let s_769_577: u32 = 0;
        // C s_769_578: cast zx s_769_577 -> bv
        let s_769_578: Bits = Bits::new(s_769_577 as u128, 32u16);
        // C s_769_579: const #1u : u64
        let s_769_579: u64 = 1;
        // C s_769_580: cast zx s_769_579 -> bv
        let s_769_580: Bits = Bits::new(s_769_579 as u128, 64u16);
        // C s_769_581: lsl s_769_580 s_769_574
        let s_769_581: Bits = s_769_580 << s_769_574;
        // C s_769_582: sub s_769_581 s_769_580
        let s_769_582: Bits = ((s_769_581) - (s_769_580));
        // C s_769_583: and s_769_578 s_769_582
        let s_769_583: Bits = ((s_769_578) & (s_769_582));
        // C s_769_584: lsl s_769_583 s_769_575
        let s_769_584: Bits = s_769_583 << s_769_575;
        // C s_769_585: lsl s_769_582 s_769_575
        let s_769_585: Bits = s_769_582 << s_769_575;
        // C s_769_586: cmpl s_769_585
        let s_769_586: Bits = !s_769_585;
        // D s_769_587: and s_769_576 s_769_586
        let s_769_587: Bits = ((s_769_576) & (s_769_586));
        // D s_769_588: or s_769_587 s_769_584
        let s_769_588: Bits = ((s_769_587) | (s_769_584));
        // D s_769_589: cast reint s_769_588 -> u128
        let s_769_589: u128 = (s_769_588.value() as u128);
        // D s_769_590: call Mk_PAR_EL1_Type(s_769_589)
        let s_769_590: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_589,
        );
        // D s_769_591: call PAR_EL1_write(s_769_590)
        let s_769_591: () = PAR_EL1_write(state, tracer, s_769_590);
        // C s_769_592: const #() : ()
        let s_769_592: () = ();
        // S s_769_593: call PAR_EL1_read(s_769_592)
        let s_769_593: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_592,
        );
        // D s_769_594: write-var ga#34512 <= s_769_593
        fn_state.ga_34512 = s_769_593;
        // D s_769_595: read-var ga#34512.0:struct
        let s_769_595: u128 = fn_state.ga_34512._0;
        // C s_769_596: const #1s : i
        let s_769_596: i128 = 1;
        // C s_769_597: const #11s : i
        let s_769_597: i128 = 11;
        // D s_769_598: cast zx s_769_595 -> bv
        let s_769_598: Bits = Bits::new(s_769_595 as u128, 128u16);
        // C s_769_599: const #1u : u8
        let s_769_599: bool = true;
        // C s_769_600: cast zx s_769_599 -> bv
        let s_769_600: Bits = Bits::new(s_769_599 as u128, 1u16);
        // C s_769_601: const #1u : u64
        let s_769_601: u64 = 1;
        // C s_769_602: cast zx s_769_601 -> bv
        let s_769_602: Bits = Bits::new(s_769_601 as u128, 64u16);
        // C s_769_603: lsl s_769_602 s_769_596
        let s_769_603: Bits = s_769_602 << s_769_596;
        // C s_769_604: sub s_769_603 s_769_602
        let s_769_604: Bits = ((s_769_603) - (s_769_602));
        // C s_769_605: and s_769_600 s_769_604
        let s_769_605: Bits = ((s_769_600) & (s_769_604));
        // C s_769_606: lsl s_769_605 s_769_597
        let s_769_606: Bits = s_769_605 << s_769_597;
        // C s_769_607: lsl s_769_604 s_769_597
        let s_769_607: Bits = s_769_604 << s_769_597;
        // C s_769_608: cmpl s_769_607
        let s_769_608: Bits = !s_769_607;
        // D s_769_609: and s_769_598 s_769_608
        let s_769_609: Bits = ((s_769_598) & (s_769_608));
        // D s_769_610: or s_769_609 s_769_606
        let s_769_610: Bits = ((s_769_609) | (s_769_606));
        // D s_769_611: cast reint s_769_610 -> u128
        let s_769_611: u128 = (s_769_610.value() as u128);
        // D s_769_612: call Mk_PAR_EL1_Type(s_769_611)
        let s_769_612: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_611,
        );
        // D s_769_613: call PAR_EL1_write(s_769_612)
        let s_769_613: () = PAR_EL1_write(state, tracer, s_769_612);
        // C s_769_614: const #() : ()
        let s_769_614: () = ();
        // S s_769_615: call PAR_EL1_read(s_769_614)
        let s_769_615: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_614,
        );
        // D s_769_616: write-var ga#34516 <= s_769_615
        fn_state.ga_34516 = s_769_615;
        // D s_769_617: read-var ga#34516.0:struct
        let s_769_617: u128 = fn_state.ga_34516._0;
        // C s_769_618: const #1s : i
        let s_769_618: i128 = 1;
        // C s_769_619: const #10s : i
        let s_769_619: i128 = 10;
        // D s_769_620: cast zx s_769_617 -> bv
        let s_769_620: Bits = Bits::new(s_769_617 as u128, 128u16);
        // C s_769_621: const #0u : u8
        let s_769_621: bool = false;
        // C s_769_622: cast zx s_769_621 -> bv
        let s_769_622: Bits = Bits::new(s_769_621 as u128, 1u16);
        // C s_769_623: const #1u : u64
        let s_769_623: u64 = 1;
        // C s_769_624: cast zx s_769_623 -> bv
        let s_769_624: Bits = Bits::new(s_769_623 as u128, 64u16);
        // C s_769_625: lsl s_769_624 s_769_618
        let s_769_625: Bits = s_769_624 << s_769_618;
        // C s_769_626: sub s_769_625 s_769_624
        let s_769_626: Bits = ((s_769_625) - (s_769_624));
        // C s_769_627: and s_769_622 s_769_626
        let s_769_627: Bits = ((s_769_622) & (s_769_626));
        // C s_769_628: lsl s_769_627 s_769_619
        let s_769_628: Bits = s_769_627 << s_769_619;
        // C s_769_629: lsl s_769_626 s_769_619
        let s_769_629: Bits = s_769_626 << s_769_619;
        // C s_769_630: cmpl s_769_629
        let s_769_630: Bits = !s_769_629;
        // D s_769_631: and s_769_620 s_769_630
        let s_769_631: Bits = ((s_769_620) & (s_769_630));
        // D s_769_632: or s_769_631 s_769_628
        let s_769_632: Bits = ((s_769_631) | (s_769_628));
        // D s_769_633: cast reint s_769_632 -> u128
        let s_769_633: u128 = (s_769_632.value() as u128);
        // D s_769_634: call Mk_PAR_EL1_Type(s_769_633)
        let s_769_634: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_633,
        );
        // D s_769_635: call PAR_EL1_write(s_769_634)
        let s_769_635: () = PAR_EL1_write(state, tracer, s_769_634);
        // C s_769_636: const #() : ()
        let s_769_636: () = ();
        // S s_769_637: call PAR_EL1_read(s_769_636)
        let s_769_637: ProductType782ac6922b48c20d = PAR_EL1_read(
            state,
            tracer,
            s_769_636,
        );
        // D s_769_638: write-var ga#34520 <= s_769_637
        fn_state.ga_34520 = s_769_637;
        // D s_769_639: read-var ga#34520.0:struct
        let s_769_639: u128 = fn_state.ga_34520._0;
        // C s_769_640: const #1s : i
        let s_769_640: i128 = 1;
        // C s_769_641: const #7s : i
        let s_769_641: i128 = 7;
        // D s_769_642: cast zx s_769_639 -> bv
        let s_769_642: Bits = Bits::new(s_769_639 as u128, 128u16);
        // C s_769_643: const #0u : u8
        let s_769_643: bool = false;
        // C s_769_644: cast zx s_769_643 -> bv
        let s_769_644: Bits = Bits::new(s_769_643 as u128, 1u16);
        // C s_769_645: const #1u : u64
        let s_769_645: u64 = 1;
        // C s_769_646: cast zx s_769_645 -> bv
        let s_769_646: Bits = Bits::new(s_769_645 as u128, 64u16);
        // C s_769_647: lsl s_769_646 s_769_640
        let s_769_647: Bits = s_769_646 << s_769_640;
        // C s_769_648: sub s_769_647 s_769_646
        let s_769_648: Bits = ((s_769_647) - (s_769_646));
        // C s_769_649: and s_769_644 s_769_648
        let s_769_649: Bits = ((s_769_644) & (s_769_648));
        // C s_769_650: lsl s_769_649 s_769_641
        let s_769_650: Bits = s_769_649 << s_769_641;
        // C s_769_651: lsl s_769_648 s_769_641
        let s_769_651: Bits = s_769_648 << s_769_641;
        // C s_769_652: cmpl s_769_651
        let s_769_652: Bits = !s_769_651;
        // D s_769_653: and s_769_642 s_769_652
        let s_769_653: Bits = ((s_769_642) & (s_769_652));
        // D s_769_654: or s_769_653 s_769_650
        let s_769_654: Bits = ((s_769_653) | (s_769_650));
        // D s_769_655: cast reint s_769_654 -> u128
        let s_769_655: u128 = (s_769_654.value() as u128);
        // D s_769_656: call Mk_PAR_EL1_Type(s_769_655)
        let s_769_656: ProductType782ac6922b48c20d = Mk_PAR_EL1_Type(
            state,
            tracer,
            s_769_655,
        );
        // D s_769_657: call PAR_EL1_write(s_769_656)
        let s_769_657: () = PAR_EL1_write(state, tracer, s_769_656);
        // C s_769_658: const #() : ()
        let s_769_658: () = ();
        // S s_769_659: call TTBR1_EL1_read(s_769_658)
        let s_769_659: ProductType782ac6922b48c20d = TTBR1_EL1_read(
            state,
            tracer,
            s_769_658,
        );
        // D s_769_660: write-var ga#34524 <= s_769_659
        fn_state.ga_34524 = s_769_659;
        // D s_769_661: read-var ga#34524.0:struct
        let s_769_661: u128 = fn_state.ga_34524._0;
        // C s_769_662: const #40s : i
        let s_769_662: i128 = 40;
        // C s_769_663: const #88s : i
        let s_769_663: i128 = 88;
        // D s_769_664: cast zx s_769_661 -> bv
        let s_769_664: Bits = Bits::new(s_769_661 as u128, 128u16);
        // C s_769_665: const #0u : u40
        let s_769_665: u64 = 0;
        // C s_769_666: cast zx s_769_665 -> bv
        let s_769_666: Bits = Bits::new(s_769_665 as u128, 40u16);
        // C s_769_667: const #1u : u64
        let s_769_667: u64 = 1;
        // C s_769_668: cast zx s_769_667 -> bv
        let s_769_668: Bits = Bits::new(s_769_667 as u128, 64u16);
        // C s_769_669: lsl s_769_668 s_769_662
        let s_769_669: Bits = s_769_668 << s_769_662;
        // C s_769_670: sub s_769_669 s_769_668
        let s_769_670: Bits = ((s_769_669) - (s_769_668));
        // C s_769_671: and s_769_666 s_769_670
        let s_769_671: Bits = ((s_769_666) & (s_769_670));
        // C s_769_672: lsl s_769_671 s_769_663
        let s_769_672: Bits = s_769_671 << s_769_663;
        // C s_769_673: lsl s_769_670 s_769_663
        let s_769_673: Bits = s_769_670 << s_769_663;
        // C s_769_674: cmpl s_769_673
        let s_769_674: Bits = !s_769_673;
        // D s_769_675: and s_769_664 s_769_674
        let s_769_675: Bits = ((s_769_664) & (s_769_674));
        // D s_769_676: or s_769_675 s_769_672
        let s_769_676: Bits = ((s_769_675) | (s_769_672));
        // D s_769_677: cast reint s_769_676 -> u128
        let s_769_677: u128 = (s_769_676.value() as u128);
        // D s_769_678: call Mk_TTBR1_EL1_Type(s_769_677)
        let s_769_678: ProductType782ac6922b48c20d = Mk_TTBR1_EL1_Type(
            state,
            tracer,
            s_769_677,
        );
        // D s_769_679: call TTBR1_EL1_write(s_769_678)
        let s_769_679: () = TTBR1_EL1_write(state, tracer, s_769_678);
        // C s_769_680: const #() : ()
        let s_769_680: () = ();
        // S s_769_681: call TTBR1_EL1_read(s_769_680)
        let s_769_681: ProductType782ac6922b48c20d = TTBR1_EL1_read(
            state,
            tracer,
            s_769_680,
        );
        // D s_769_682: write-var ga#34528 <= s_769_681
        fn_state.ga_34528 = s_769_681;
        // D s_769_683: read-var ga#34528.0:struct
        let s_769_683: u128 = fn_state.ga_34528._0;
        // C s_769_684: const #16s : i
        let s_769_684: i128 = 16;
        // C s_769_685: const #64s : i
        let s_769_685: i128 = 64;
        // D s_769_686: cast zx s_769_683 -> bv
        let s_769_686: Bits = Bits::new(s_769_683 as u128, 128u16);
        // C s_769_687: const #0u : u16
        let s_769_687: u16 = 0;
        // C s_769_688: cast zx s_769_687 -> bv
        let s_769_688: Bits = Bits::new(s_769_687 as u128, 16u16);
        // C s_769_689: const #1u : u64
        let s_769_689: u64 = 1;
        // C s_769_690: cast zx s_769_689 -> bv
        let s_769_690: Bits = Bits::new(s_769_689 as u128, 64u16);
        // C s_769_691: lsl s_769_690 s_769_684
        let s_769_691: Bits = s_769_690 << s_769_684;
        // C s_769_692: sub s_769_691 s_769_690
        let s_769_692: Bits = ((s_769_691) - (s_769_690));
        // C s_769_693: and s_769_688 s_769_692
        let s_769_693: Bits = ((s_769_688) & (s_769_692));
        // C s_769_694: lsl s_769_693 s_769_685
        let s_769_694: Bits = s_769_693 << s_769_685;
        // C s_769_695: lsl s_769_692 s_769_685
        let s_769_695: Bits = s_769_692 << s_769_685;
        // C s_769_696: cmpl s_769_695
        let s_769_696: Bits = !s_769_695;
        // D s_769_697: and s_769_686 s_769_696
        let s_769_697: Bits = ((s_769_686) & (s_769_696));
        // D s_769_698: or s_769_697 s_769_694
        let s_769_698: Bits = ((s_769_697) | (s_769_694));
        // D s_769_699: cast reint s_769_698 -> u128
        let s_769_699: u128 = (s_769_698.value() as u128);
        // D s_769_700: call Mk_TTBR1_EL1_Type(s_769_699)
        let s_769_700: ProductType782ac6922b48c20d = Mk_TTBR1_EL1_Type(
            state,
            tracer,
            s_769_699,
        );
        // D s_769_701: call TTBR1_EL1_write(s_769_700)
        let s_769_701: () = TTBR1_EL1_write(state, tracer, s_769_700);
        // C s_769_702: const #() : ()
        let s_769_702: () = ();
        // S s_769_703: call TTBR1_EL1_read(s_769_702)
        let s_769_703: ProductType782ac6922b48c20d = TTBR1_EL1_read(
            state,
            tracer,
            s_769_702,
        );
        // D s_769_704: write-var ga#34532 <= s_769_703
        fn_state.ga_34532 = s_769_703;
        // D s_769_705: read-var ga#34532.0:struct
        let s_769_705: u128 = fn_state.ga_34532._0;
        // C s_769_706: const #2s : i
        let s_769_706: i128 = 2;
        // C s_769_707: const #3s : i
        let s_769_707: i128 = 3;
        // D s_769_708: cast zx s_769_705 -> bv
        let s_769_708: Bits = Bits::new(s_769_705 as u128, 128u16);
        // C s_769_709: const #0u : u8
        let s_769_709: u8 = 0;
        // C s_769_710: cast zx s_769_709 -> bv
        let s_769_710: Bits = Bits::new(s_769_709 as u128, 2u16);
        // C s_769_711: const #1u : u64
        let s_769_711: u64 = 1;
        // C s_769_712: cast zx s_769_711 -> bv
        let s_769_712: Bits = Bits::new(s_769_711 as u128, 64u16);
        // C s_769_713: lsl s_769_712 s_769_706
        let s_769_713: Bits = s_769_712 << s_769_706;
        // C s_769_714: sub s_769_713 s_769_712
        let s_769_714: Bits = ((s_769_713) - (s_769_712));
        // C s_769_715: and s_769_710 s_769_714
        let s_769_715: Bits = ((s_769_710) & (s_769_714));
        // C s_769_716: lsl s_769_715 s_769_707
        let s_769_716: Bits = s_769_715 << s_769_707;
        // C s_769_717: lsl s_769_714 s_769_707
        let s_769_717: Bits = s_769_714 << s_769_707;
        // C s_769_718: cmpl s_769_717
        let s_769_718: Bits = !s_769_717;
        // D s_769_719: and s_769_708 s_769_718
        let s_769_719: Bits = ((s_769_708) & (s_769_718));
        // D s_769_720: or s_769_719 s_769_716
        let s_769_720: Bits = ((s_769_719) | (s_769_716));
        // D s_769_721: cast reint s_769_720 -> u128
        let s_769_721: u128 = (s_769_720.value() as u128);
        // D s_769_722: call Mk_TTBR1_EL1_Type(s_769_721)
        let s_769_722: ProductType782ac6922b48c20d = Mk_TTBR1_EL1_Type(
            state,
            tracer,
            s_769_721,
        );
        // D s_769_723: call TTBR1_EL1_write(s_769_722)
        let s_769_723: () = TTBR1_EL1_write(state, tracer, s_769_722);
        // C s_769_724: const #() : ()
        let s_769_724: () = ();
        // S s_769_725: call TTBR0_EL2_read(s_769_724)
        let s_769_725: ProductType782ac6922b48c20d = TTBR0_EL2_read(
            state,
            tracer,
            s_769_724,
        );
        // D s_769_726: write-var ga#34536 <= s_769_725
        fn_state.ga_34536 = s_769_725;
        // D s_769_727: read-var ga#34536.0:struct
        let s_769_727: u128 = fn_state.ga_34536._0;
        // C s_769_728: const #40s : i
        let s_769_728: i128 = 40;
        // C s_769_729: const #88s : i
        let s_769_729: i128 = 88;
        // D s_769_730: cast zx s_769_727 -> bv
        let s_769_730: Bits = Bits::new(s_769_727 as u128, 128u16);
        // C s_769_731: const #0u : u40
        let s_769_731: u64 = 0;
        // C s_769_732: cast zx s_769_731 -> bv
        let s_769_732: Bits = Bits::new(s_769_731 as u128, 40u16);
        // C s_769_733: const #1u : u64
        let s_769_733: u64 = 1;
        // C s_769_734: cast zx s_769_733 -> bv
        let s_769_734: Bits = Bits::new(s_769_733 as u128, 64u16);
        // C s_769_735: lsl s_769_734 s_769_728
        let s_769_735: Bits = s_769_734 << s_769_728;
        // C s_769_736: sub s_769_735 s_769_734
        let s_769_736: Bits = ((s_769_735) - (s_769_734));
        // C s_769_737: and s_769_732 s_769_736
        let s_769_737: Bits = ((s_769_732) & (s_769_736));
        // C s_769_738: lsl s_769_737 s_769_729
        let s_769_738: Bits = s_769_737 << s_769_729;
        // C s_769_739: lsl s_769_736 s_769_729
        let s_769_739: Bits = s_769_736 << s_769_729;
        // C s_769_740: cmpl s_769_739
        let s_769_740: Bits = !s_769_739;
        // D s_769_741: and s_769_730 s_769_740
        let s_769_741: Bits = ((s_769_730) & (s_769_740));
        // D s_769_742: or s_769_741 s_769_738
        let s_769_742: Bits = ((s_769_741) | (s_769_738));
        // D s_769_743: cast reint s_769_742 -> u128
        let s_769_743: u128 = (s_769_742.value() as u128);
        // D s_769_744: call Mk_TTBR0_EL2_Type(s_769_743)
        let s_769_744: ProductType782ac6922b48c20d = Mk_TTBR0_EL2_Type(
            state,
            tracer,
            s_769_743,
        );
        // D s_769_745: call TTBR0_EL2_write(s_769_744)
        let s_769_745: () = TTBR0_EL2_write(state, tracer, s_769_744);
        // C s_769_746: const #() : ()
        let s_769_746: () = ();
        // S s_769_747: call TTBR0_EL2_read(s_769_746)
        let s_769_747: ProductType782ac6922b48c20d = TTBR0_EL2_read(
            state,
            tracer,
            s_769_746,
        );
        // D s_769_748: write-var ga#34540 <= s_769_747
        fn_state.ga_34540 = s_769_747;
        // D s_769_749: read-var ga#34540.0:struct
        let s_769_749: u128 = fn_state.ga_34540._0;
        // C s_769_750: const #16s : i
        let s_769_750: i128 = 16;
        // C s_769_751: const #64s : i
        let s_769_751: i128 = 64;
        // D s_769_752: cast zx s_769_749 -> bv
        let s_769_752: Bits = Bits::new(s_769_749 as u128, 128u16);
        // C s_769_753: const #0u : u16
        let s_769_753: u16 = 0;
        // C s_769_754: cast zx s_769_753 -> bv
        let s_769_754: Bits = Bits::new(s_769_753 as u128, 16u16);
        // C s_769_755: const #1u : u64
        let s_769_755: u64 = 1;
        // C s_769_756: cast zx s_769_755 -> bv
        let s_769_756: Bits = Bits::new(s_769_755 as u128, 64u16);
        // C s_769_757: lsl s_769_756 s_769_750
        let s_769_757: Bits = s_769_756 << s_769_750;
        // C s_769_758: sub s_769_757 s_769_756
        let s_769_758: Bits = ((s_769_757) - (s_769_756));
        // C s_769_759: and s_769_754 s_769_758
        let s_769_759: Bits = ((s_769_754) & (s_769_758));
        // C s_769_760: lsl s_769_759 s_769_751
        let s_769_760: Bits = s_769_759 << s_769_751;
        // C s_769_761: lsl s_769_758 s_769_751
        let s_769_761: Bits = s_769_758 << s_769_751;
        // C s_769_762: cmpl s_769_761
        let s_769_762: Bits = !s_769_761;
        // D s_769_763: and s_769_752 s_769_762
        let s_769_763: Bits = ((s_769_752) & (s_769_762));
        // D s_769_764: or s_769_763 s_769_760
        let s_769_764: Bits = ((s_769_763) | (s_769_760));
        // D s_769_765: cast reint s_769_764 -> u128
        let s_769_765: u128 = (s_769_764.value() as u128);
        // D s_769_766: call Mk_TTBR0_EL2_Type(s_769_765)
        let s_769_766: ProductType782ac6922b48c20d = Mk_TTBR0_EL2_Type(
            state,
            tracer,
            s_769_765,
        );
        // D s_769_767: call TTBR0_EL2_write(s_769_766)
        let s_769_767: () = TTBR0_EL2_write(state, tracer, s_769_766);
        // C s_769_768: const #() : ()
        let s_769_768: () = ();
        // S s_769_769: call TTBR0_EL2_read(s_769_768)
        let s_769_769: ProductType782ac6922b48c20d = TTBR0_EL2_read(
            state,
            tracer,
            s_769_768,
        );
        // D s_769_770: write-var ga#34544 <= s_769_769
        fn_state.ga_34544 = s_769_769;
        // D s_769_771: read-var ga#34544.0:struct
        let s_769_771: u128 = fn_state.ga_34544._0;
        // C s_769_772: const #2s : i
        let s_769_772: i128 = 2;
        // C s_769_773: const #3s : i
        let s_769_773: i128 = 3;
        // D s_769_774: cast zx s_769_771 -> bv
        let s_769_774: Bits = Bits::new(s_769_771 as u128, 128u16);
        // C s_769_775: const #0u : u8
        let s_769_775: u8 = 0;
        // C s_769_776: cast zx s_769_775 -> bv
        let s_769_776: Bits = Bits::new(s_769_775 as u128, 2u16);
        // C s_769_777: const #1u : u64
        let s_769_777: u64 = 1;
        // C s_769_778: cast zx s_769_777 -> bv
        let s_769_778: Bits = Bits::new(s_769_777 as u128, 64u16);
        // C s_769_779: lsl s_769_778 s_769_772
        let s_769_779: Bits = s_769_778 << s_769_772;
        // C s_769_780: sub s_769_779 s_769_778
        let s_769_780: Bits = ((s_769_779) - (s_769_778));
        // C s_769_781: and s_769_776 s_769_780
        let s_769_781: Bits = ((s_769_776) & (s_769_780));
        // C s_769_782: lsl s_769_781 s_769_773
        let s_769_782: Bits = s_769_781 << s_769_773;
        // C s_769_783: lsl s_769_780 s_769_773
        let s_769_783: Bits = s_769_780 << s_769_773;
        // C s_769_784: cmpl s_769_783
        let s_769_784: Bits = !s_769_783;
        // D s_769_785: and s_769_774 s_769_784
        let s_769_785: Bits = ((s_769_774) & (s_769_784));
        // D s_769_786: or s_769_785 s_769_782
        let s_769_786: Bits = ((s_769_785) | (s_769_782));
        // D s_769_787: cast reint s_769_786 -> u128
        let s_769_787: u128 = (s_769_786.value() as u128);
        // D s_769_788: call Mk_TTBR0_EL2_Type(s_769_787)
        let s_769_788: ProductType782ac6922b48c20d = Mk_TTBR0_EL2_Type(
            state,
            tracer,
            s_769_787,
        );
        // D s_769_789: call TTBR0_EL2_write(s_769_788)
        let s_769_789: () = TTBR0_EL2_write(state, tracer, s_769_788);
        // C s_769_790: const #() : ()
        let s_769_790: () = ();
        // S s_769_791: call VTTBR_EL2_read(s_769_790)
        let s_769_791: ProductType782ac6922b48c20d = VTTBR_EL2_read(
            state,
            tracer,
            s_769_790,
        );
        // D s_769_792: write-var ga#34548 <= s_769_791
        fn_state.ga_34548 = s_769_791;
        // D s_769_793: read-var ga#34548.0:struct
        let s_769_793: u128 = fn_state.ga_34548._0;
        // C s_769_794: const #40s : i
        let s_769_794: i128 = 40;
        // C s_769_795: const #88s : i
        let s_769_795: i128 = 88;
        // D s_769_796: cast zx s_769_793 -> bv
        let s_769_796: Bits = Bits::new(s_769_793 as u128, 128u16);
        // C s_769_797: const #0u : u40
        let s_769_797: u64 = 0;
        // C s_769_798: cast zx s_769_797 -> bv
        let s_769_798: Bits = Bits::new(s_769_797 as u128, 40u16);
        // C s_769_799: const #1u : u64
        let s_769_799: u64 = 1;
        // C s_769_800: cast zx s_769_799 -> bv
        let s_769_800: Bits = Bits::new(s_769_799 as u128, 64u16);
        // C s_769_801: lsl s_769_800 s_769_794
        let s_769_801: Bits = s_769_800 << s_769_794;
        // C s_769_802: sub s_769_801 s_769_800
        let s_769_802: Bits = ((s_769_801) - (s_769_800));
        // C s_769_803: and s_769_798 s_769_802
        let s_769_803: Bits = ((s_769_798) & (s_769_802));
        // C s_769_804: lsl s_769_803 s_769_795
        let s_769_804: Bits = s_769_803 << s_769_795;
        // C s_769_805: lsl s_769_802 s_769_795
        let s_769_805: Bits = s_769_802 << s_769_795;
        // C s_769_806: cmpl s_769_805
        let s_769_806: Bits = !s_769_805;
        // D s_769_807: and s_769_796 s_769_806
        let s_769_807: Bits = ((s_769_796) & (s_769_806));
        // D s_769_808: or s_769_807 s_769_804
        let s_769_808: Bits = ((s_769_807) | (s_769_804));
        // D s_769_809: cast reint s_769_808 -> u128
        let s_769_809: u128 = (s_769_808.value() as u128);
        // D s_769_810: call Mk_VTTBR_EL2_Type(s_769_809)
        let s_769_810: ProductType782ac6922b48c20d = Mk_VTTBR_EL2_Type(
            state,
            tracer,
            s_769_809,
        );
        // D s_769_811: call VTTBR_EL2_write(s_769_810)
        let s_769_811: () = VTTBR_EL2_write(state, tracer, s_769_810);
        // C s_769_812: const #() : ()
        let s_769_812: () = ();
        // S s_769_813: call VTTBR_EL2_read(s_769_812)
        let s_769_813: ProductType782ac6922b48c20d = VTTBR_EL2_read(
            state,
            tracer,
            s_769_812,
        );
        // D s_769_814: write-var ga#34552 <= s_769_813
        fn_state.ga_34552 = s_769_813;
        // D s_769_815: read-var ga#34552.0:struct
        let s_769_815: u128 = fn_state.ga_34552._0;
        // C s_769_816: const #16s : i
        let s_769_816: i128 = 16;
        // C s_769_817: const #64s : i
        let s_769_817: i128 = 64;
        // D s_769_818: cast zx s_769_815 -> bv
        let s_769_818: Bits = Bits::new(s_769_815 as u128, 128u16);
        // C s_769_819: const #0u : u16
        let s_769_819: u16 = 0;
        // C s_769_820: cast zx s_769_819 -> bv
        let s_769_820: Bits = Bits::new(s_769_819 as u128, 16u16);
        // C s_769_821: const #1u : u64
        let s_769_821: u64 = 1;
        // C s_769_822: cast zx s_769_821 -> bv
        let s_769_822: Bits = Bits::new(s_769_821 as u128, 64u16);
        // C s_769_823: lsl s_769_822 s_769_816
        let s_769_823: Bits = s_769_822 << s_769_816;
        // C s_769_824: sub s_769_823 s_769_822
        let s_769_824: Bits = ((s_769_823) - (s_769_822));
        // C s_769_825: and s_769_820 s_769_824
        let s_769_825: Bits = ((s_769_820) & (s_769_824));
        // C s_769_826: lsl s_769_825 s_769_817
        let s_769_826: Bits = s_769_825 << s_769_817;
        // C s_769_827: lsl s_769_824 s_769_817
        let s_769_827: Bits = s_769_824 << s_769_817;
        // C s_769_828: cmpl s_769_827
        let s_769_828: Bits = !s_769_827;
        // D s_769_829: and s_769_818 s_769_828
        let s_769_829: Bits = ((s_769_818) & (s_769_828));
        // D s_769_830: or s_769_829 s_769_826
        let s_769_830: Bits = ((s_769_829) | (s_769_826));
        // D s_769_831: cast reint s_769_830 -> u128
        let s_769_831: u128 = (s_769_830.value() as u128);
        // D s_769_832: call Mk_VTTBR_EL2_Type(s_769_831)
        let s_769_832: ProductType782ac6922b48c20d = Mk_VTTBR_EL2_Type(
            state,
            tracer,
            s_769_831,
        );
        // D s_769_833: call VTTBR_EL2_write(s_769_832)
        let s_769_833: () = VTTBR_EL2_write(state, tracer, s_769_832);
        // C s_769_834: const #() : ()
        let s_769_834: () = ();
        // S s_769_835: call VTTBR_EL2_read(s_769_834)
        let s_769_835: ProductType782ac6922b48c20d = VTTBR_EL2_read(
            state,
            tracer,
            s_769_834,
        );
        // D s_769_836: write-var ga#34556 <= s_769_835
        fn_state.ga_34556 = s_769_835;
        // D s_769_837: read-var ga#34556.0:struct
        let s_769_837: u128 = fn_state.ga_34556._0;
        // C s_769_838: const #2s : i
        let s_769_838: i128 = 2;
        // C s_769_839: const #3s : i
        let s_769_839: i128 = 3;
        // D s_769_840: cast zx s_769_837 -> bv
        let s_769_840: Bits = Bits::new(s_769_837 as u128, 128u16);
        // C s_769_841: const #0u : u8
        let s_769_841: u8 = 0;
        // C s_769_842: cast zx s_769_841 -> bv
        let s_769_842: Bits = Bits::new(s_769_841 as u128, 2u16);
        // C s_769_843: const #1u : u64
        let s_769_843: u64 = 1;
        // C s_769_844: cast zx s_769_843 -> bv
        let s_769_844: Bits = Bits::new(s_769_843 as u128, 64u16);
        // C s_769_845: lsl s_769_844 s_769_838
        let s_769_845: Bits = s_769_844 << s_769_838;
        // C s_769_846: sub s_769_845 s_769_844
        let s_769_846: Bits = ((s_769_845) - (s_769_844));
        // C s_769_847: and s_769_842 s_769_846
        let s_769_847: Bits = ((s_769_842) & (s_769_846));
        // C s_769_848: lsl s_769_847 s_769_839
        let s_769_848: Bits = s_769_847 << s_769_839;
        // C s_769_849: lsl s_769_846 s_769_839
        let s_769_849: Bits = s_769_846 << s_769_839;
        // C s_769_850: cmpl s_769_849
        let s_769_850: Bits = !s_769_849;
        // D s_769_851: and s_769_840 s_769_850
        let s_769_851: Bits = ((s_769_840) & (s_769_850));
        // D s_769_852: or s_769_851 s_769_848
        let s_769_852: Bits = ((s_769_851) | (s_769_848));
        // D s_769_853: cast reint s_769_852 -> u128
        let s_769_853: u128 = (s_769_852.value() as u128);
        // D s_769_854: call Mk_VTTBR_EL2_Type(s_769_853)
        let s_769_854: ProductType782ac6922b48c20d = Mk_VTTBR_EL2_Type(
            state,
            tracer,
            s_769_853,
        );
        // D s_769_855: call VTTBR_EL2_write(s_769_854)
        let s_769_855: () = VTTBR_EL2_write(state, tracer, s_769_854);
        // C s_769_856: const #() : ()
        let s_769_856: () = ();
        // S s_769_857: call TTBR0_EL1_read(s_769_856)
        let s_769_857: ProductType782ac6922b48c20d = TTBR0_EL1_read(
            state,
            tracer,
            s_769_856,
        );
        // D s_769_858: write-var ga#34560 <= s_769_857
        fn_state.ga_34560 = s_769_857;
        // D s_769_859: read-var ga#34560.0:struct
        let s_769_859: u128 = fn_state.ga_34560._0;
        // C s_769_860: const #40s : i
        let s_769_860: i128 = 40;
        // C s_769_861: const #88s : i
        let s_769_861: i128 = 88;
        // D s_769_862: cast zx s_769_859 -> bv
        let s_769_862: Bits = Bits::new(s_769_859 as u128, 128u16);
        // C s_769_863: const #0u : u40
        let s_769_863: u64 = 0;
        // C s_769_864: cast zx s_769_863 -> bv
        let s_769_864: Bits = Bits::new(s_769_863 as u128, 40u16);
        // C s_769_865: const #1u : u64
        let s_769_865: u64 = 1;
        // C s_769_866: cast zx s_769_865 -> bv
        let s_769_866: Bits = Bits::new(s_769_865 as u128, 64u16);
        // C s_769_867: lsl s_769_866 s_769_860
        let s_769_867: Bits = s_769_866 << s_769_860;
        // C s_769_868: sub s_769_867 s_769_866
        let s_769_868: Bits = ((s_769_867) - (s_769_866));
        // C s_769_869: and s_769_864 s_769_868
        let s_769_869: Bits = ((s_769_864) & (s_769_868));
        // C s_769_870: lsl s_769_869 s_769_861
        let s_769_870: Bits = s_769_869 << s_769_861;
        // C s_769_871: lsl s_769_868 s_769_861
        let s_769_871: Bits = s_769_868 << s_769_861;
        // C s_769_872: cmpl s_769_871
        let s_769_872: Bits = !s_769_871;
        // D s_769_873: and s_769_862 s_769_872
        let s_769_873: Bits = ((s_769_862) & (s_769_872));
        // D s_769_874: or s_769_873 s_769_870
        let s_769_874: Bits = ((s_769_873) | (s_769_870));
        // D s_769_875: cast reint s_769_874 -> u128
        let s_769_875: u128 = (s_769_874.value() as u128);
        // D s_769_876: call Mk_TTBR0_EL1_Type(s_769_875)
        let s_769_876: ProductType782ac6922b48c20d = Mk_TTBR0_EL1_Type(
            state,
            tracer,
            s_769_875,
        );
        // D s_769_877: call TTBR0_EL1_write(s_769_876)
        let s_769_877: () = TTBR0_EL1_write(state, tracer, s_769_876);
        // C s_769_878: const #() : ()
        let s_769_878: () = ();
        // S s_769_879: call TTBR0_EL1_read(s_769_878)
        let s_769_879: ProductType782ac6922b48c20d = TTBR0_EL1_read(
            state,
            tracer,
            s_769_878,
        );
        // D s_769_880: write-var ga#34564 <= s_769_879
        fn_state.ga_34564 = s_769_879;
        // D s_769_881: read-var ga#34564.0:struct
        let s_769_881: u128 = fn_state.ga_34564._0;
        // C s_769_882: const #16s : i
        let s_769_882: i128 = 16;
        // C s_769_883: const #64s : i
        let s_769_883: i128 = 64;
        // D s_769_884: cast zx s_769_881 -> bv
        let s_769_884: Bits = Bits::new(s_769_881 as u128, 128u16);
        // C s_769_885: const #0u : u16
        let s_769_885: u16 = 0;
        // C s_769_886: cast zx s_769_885 -> bv
        let s_769_886: Bits = Bits::new(s_769_885 as u128, 16u16);
        // C s_769_887: const #1u : u64
        let s_769_887: u64 = 1;
        // C s_769_888: cast zx s_769_887 -> bv
        let s_769_888: Bits = Bits::new(s_769_887 as u128, 64u16);
        // C s_769_889: lsl s_769_888 s_769_882
        let s_769_889: Bits = s_769_888 << s_769_882;
        // C s_769_890: sub s_769_889 s_769_888
        let s_769_890: Bits = ((s_769_889) - (s_769_888));
        // C s_769_891: and s_769_886 s_769_890
        let s_769_891: Bits = ((s_769_886) & (s_769_890));
        // C s_769_892: lsl s_769_891 s_769_883
        let s_769_892: Bits = s_769_891 << s_769_883;
        // C s_769_893: lsl s_769_890 s_769_883
        let s_769_893: Bits = s_769_890 << s_769_883;
        // C s_769_894: cmpl s_769_893
        let s_769_894: Bits = !s_769_893;
        // D s_769_895: and s_769_884 s_769_894
        let s_769_895: Bits = ((s_769_884) & (s_769_894));
        // D s_769_896: or s_769_895 s_769_892
        let s_769_896: Bits = ((s_769_895) | (s_769_892));
        // D s_769_897: cast reint s_769_896 -> u128
        let s_769_897: u128 = (s_769_896.value() as u128);
        // D s_769_898: call Mk_TTBR0_EL1_Type(s_769_897)
        let s_769_898: ProductType782ac6922b48c20d = Mk_TTBR0_EL1_Type(
            state,
            tracer,
            s_769_897,
        );
        // D s_769_899: call TTBR0_EL1_write(s_769_898)
        let s_769_899: () = TTBR0_EL1_write(state, tracer, s_769_898);
        // C s_769_900: const #() : ()
        let s_769_900: () = ();
        // S s_769_901: call TTBR0_EL1_read(s_769_900)
        let s_769_901: ProductType782ac6922b48c20d = TTBR0_EL1_read(
            state,
            tracer,
            s_769_900,
        );
        // D s_769_902: write-var ga#34568 <= s_769_901
        fn_state.ga_34568 = s_769_901;
        // D s_769_903: read-var ga#34568.0:struct
        let s_769_903: u128 = fn_state.ga_34568._0;
        // C s_769_904: const #2s : i
        let s_769_904: i128 = 2;
        // C s_769_905: const #3s : i
        let s_769_905: i128 = 3;
        // D s_769_906: cast zx s_769_903 -> bv
        let s_769_906: Bits = Bits::new(s_769_903 as u128, 128u16);
        // C s_769_907: const #0u : u8
        let s_769_907: u8 = 0;
        // C s_769_908: cast zx s_769_907 -> bv
        let s_769_908: Bits = Bits::new(s_769_907 as u128, 2u16);
        // C s_769_909: const #1u : u64
        let s_769_909: u64 = 1;
        // C s_769_910: cast zx s_769_909 -> bv
        let s_769_910: Bits = Bits::new(s_769_909 as u128, 64u16);
        // C s_769_911: lsl s_769_910 s_769_904
        let s_769_911: Bits = s_769_910 << s_769_904;
        // C s_769_912: sub s_769_911 s_769_910
        let s_769_912: Bits = ((s_769_911) - (s_769_910));
        // C s_769_913: and s_769_908 s_769_912
        let s_769_913: Bits = ((s_769_908) & (s_769_912));
        // C s_769_914: lsl s_769_913 s_769_905
        let s_769_914: Bits = s_769_913 << s_769_905;
        // C s_769_915: lsl s_769_912 s_769_905
        let s_769_915: Bits = s_769_912 << s_769_905;
        // C s_769_916: cmpl s_769_915
        let s_769_916: Bits = !s_769_915;
        // D s_769_917: and s_769_906 s_769_916
        let s_769_917: Bits = ((s_769_906) & (s_769_916));
        // D s_769_918: or s_769_917 s_769_914
        let s_769_918: Bits = ((s_769_917) | (s_769_914));
        // D s_769_919: cast reint s_769_918 -> u128
        let s_769_919: u128 = (s_769_918.value() as u128);
        // D s_769_920: call Mk_TTBR0_EL1_Type(s_769_919)
        let s_769_920: ProductType782ac6922b48c20d = Mk_TTBR0_EL1_Type(
            state,
            tracer,
            s_769_919,
        );
        // D s_769_921: call TTBR0_EL1_write(s_769_920)
        let s_769_921: () = TTBR0_EL1_write(state, tracer, s_769_920);
        // C s_769_922: const #18432u : u32
        let s_769_922: u32 = 18432;
        // D s_769_923: read-reg s_769_922:struct
        let s_769_923: ProductType782ac6922b48c20d = {
            let value = state
                .read_register::<ProductType782ac6922b48c20d>(s_769_922 as isize);
            tracer.read_register(s_769_922 as isize, value);
            value
        };
        // C s_769_924: const #18432u : u32
        let s_769_924: u32 = 18432;
        // N s_769_925: write-reg s_769_924 <= s_769_923
        let s_769_925: () = {
            state
                .write_register::<
                    ProductType782ac6922b48c20d,
                >(s_769_924 as isize, s_769_923);
            tracer.write_register(s_769_924 as isize, s_769_923);
        };
        // C s_769_926: const #18432u : u32
        let s_769_926: u32 = 18432;
        // D s_769_927: read-reg s_769_926:struct
        let s_769_927: ProductType782ac6922b48c20d = {
            let value = state
                .read_register::<ProductType782ac6922b48c20d>(s_769_926 as isize);
            tracer.read_register(s_769_926 as isize, value);
            value
        };
        // C s_769_928: const #18432u : u32
        let s_769_928: u32 = 18432;
        // N s_769_929: write-reg s_769_928 <= s_769_927
        let s_769_929: () = {
            state
                .write_register::<
                    ProductType782ac6922b48c20d,
                >(s_769_928 as isize, s_769_927);
            tracer.write_register(s_769_928 as isize, s_769_927);
        };
        // C s_769_930: const #18432u : u32
        let s_769_930: u32 = 18432;
        // D s_769_931: read-reg s_769_930:struct
        let s_769_931: ProductType782ac6922b48c20d = {
            let value = state
                .read_register::<ProductType782ac6922b48c20d>(s_769_930 as isize);
            tracer.read_register(s_769_930 as isize, value);
            value
        };
        // C s_769_932: const #18432u : u32
        let s_769_932: u32 = 18432;
        // N s_769_933: write-reg s_769_932 <= s_769_931
        let s_769_933: () = {
            state
                .write_register::<
                    ProductType782ac6922b48c20d,
                >(s_769_932 as isize, s_769_931);
            tracer.write_register(s_769_932 as isize, s_769_931);
        };
        // N s_769_934: return
        return;
    }
    fn block_770<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_770_0: const #1s : i64
        let s_770_0: i64 = 1;
        // C s_770_1: cast zx s_770_0 -> i
        let s_770_1: i128 = (i128::try_from(s_770_0).unwrap());
        // S s_770_2: call __UNKNOWN_bits(s_770_1)
        let s_770_2: Bits = u__UNKNOWN_bits(state, tracer, s_770_1);
        // C s_770_3: const #90640u : u32
        let s_770_3: u32 = 90640;
        // D s_770_4: read-reg s_770_3:struct
        let s_770_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_770_3 as isize);
            tracer.read_register(s_770_3 as isize, value);
            value
        };
        // C s_770_5: const #90640u : u32
        let s_770_5: u32 = 90640;
        // N s_770_6: write-reg s_770_5 <= s_770_4
        let s_770_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_770_5 as isize, s_770_4);
            tracer.write_register(s_770_5 as isize, s_770_4);
        };
        // N s_770_7: jump b769
        return block_769(state, tracer, fn_state);
    }
    fn block_771<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_771_0: const #237u : u32
        let s_771_0: u32 = 237;
        // S s_771_1: call IsFeatureImplemented(s_771_0)
        let s_771_1: bool = IsFeatureImplemented(state, tracer, s_771_0);
        // S s_771_2: not s_771_1
        let s_771_2: bool = !s_771_1;
        // D s_771_3: write-var gs#41052 <= s_771_2
        fn_state.gs_41052 = s_771_2;
        // N s_771_4: jump b767
        return block_767(state, tracer, fn_state);
    }
    fn block_772<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_772_0: const #1s : i64
        let s_772_0: i64 = 1;
        // C s_772_1: cast zx s_772_0 -> i
        let s_772_1: i128 = (i128::try_from(s_772_0).unwrap());
        // S s_772_2: call __UNKNOWN_bits(s_772_1)
        let s_772_2: Bits = u__UNKNOWN_bits(state, tracer, s_772_1);
        // C s_772_3: const #90640u : u32
        let s_772_3: u32 = 90640;
        // D s_772_4: read-reg s_772_3:struct
        let s_772_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_772_3 as isize);
            tracer.read_register(s_772_3 as isize, value);
            value
        };
        // C s_772_5: const #90640u : u32
        let s_772_5: u32 = 90640;
        // N s_772_6: write-reg s_772_5 <= s_772_4
        let s_772_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_772_5 as isize, s_772_4);
            tracer.write_register(s_772_5 as isize, s_772_4);
        };
        // N s_772_7: jump b765
        return block_765(state, tracer, fn_state);
    }
    fn block_773<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_773_0: const #237u : u32
        let s_773_0: u32 = 237;
        // S s_773_1: call IsFeatureImplemented(s_773_0)
        let s_773_1: bool = IsFeatureImplemented(state, tracer, s_773_0);
        // D s_773_2: write-var gs#41051 <= s_773_1
        fn_state.gs_41051 = s_773_1;
        // N s_773_3: jump b763
        return block_763(state, tracer, fn_state);
    }
    fn block_774<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_774_0: const #1s : i64
        let s_774_0: i64 = 1;
        // C s_774_1: cast zx s_774_0 -> i
        let s_774_1: i128 = (i128::try_from(s_774_0).unwrap());
        // S s_774_2: call __UNKNOWN_bits(s_774_1)
        let s_774_2: Bits = u__UNKNOWN_bits(state, tracer, s_774_1);
        // C s_774_3: const #90640u : u32
        let s_774_3: u32 = 90640;
        // D s_774_4: read-reg s_774_3:struct
        let s_774_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_774_3 as isize);
            tracer.read_register(s_774_3 as isize, value);
            value
        };
        // C s_774_5: const #90640u : u32
        let s_774_5: u32 = 90640;
        // N s_774_6: write-reg s_774_5 <= s_774_4
        let s_774_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_774_5 as isize, s_774_4);
            tracer.write_register(s_774_5 as isize, s_774_4);
        };
        // N s_774_7: jump b761
        return block_761(state, tracer, fn_state);
    }
    fn block_775<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_775_0: const #237u : u32
        let s_775_0: u32 = 237;
        // S s_775_1: call IsFeatureImplemented(s_775_0)
        let s_775_1: bool = IsFeatureImplemented(state, tracer, s_775_0);
        // S s_775_2: not s_775_1
        let s_775_2: bool = !s_775_1;
        // D s_775_3: write-var gs#41050 <= s_775_2
        fn_state.gs_41050 = s_775_2;
        // N s_775_4: jump b759
        return block_759(state, tracer, fn_state);
    }
    fn block_776<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_776_0: const #1s : i64
        let s_776_0: i64 = 1;
        // C s_776_1: cast zx s_776_0 -> i
        let s_776_1: i128 = (i128::try_from(s_776_0).unwrap());
        // S s_776_2: call __UNKNOWN_bits(s_776_1)
        let s_776_2: Bits = u__UNKNOWN_bits(state, tracer, s_776_1);
        // C s_776_3: const #90640u : u32
        let s_776_3: u32 = 90640;
        // D s_776_4: read-reg s_776_3:struct
        let s_776_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_776_3 as isize);
            tracer.read_register(s_776_3 as isize, value);
            value
        };
        // C s_776_5: const #90640u : u32
        let s_776_5: u32 = 90640;
        // N s_776_6: write-reg s_776_5 <= s_776_4
        let s_776_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_776_5 as isize, s_776_4);
            tracer.write_register(s_776_5 as isize, s_776_4);
        };
        // N s_776_7: jump b757
        return block_757(state, tracer, fn_state);
    }
    fn block_777<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_777_0: const #237u : u32
        let s_777_0: u32 = 237;
        // S s_777_1: call IsFeatureImplemented(s_777_0)
        let s_777_1: bool = IsFeatureImplemented(state, tracer, s_777_0);
        // D s_777_2: write-var gs#41049 <= s_777_1
        fn_state.gs_41049 = s_777_1;
        // N s_777_3: jump b755
        return block_755(state, tracer, fn_state);
    }
    fn block_778<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_778_0: const #2s : i64
        let s_778_0: i64 = 2;
        // C s_778_1: cast zx s_778_0 -> i
        let s_778_1: i128 = (i128::try_from(s_778_0).unwrap());
        // S s_778_2: call __UNKNOWN_bits(s_778_1)
        let s_778_2: Bits = u__UNKNOWN_bits(state, tracer, s_778_1);
        // C s_778_3: const #90640u : u32
        let s_778_3: u32 = 90640;
        // D s_778_4: read-reg s_778_3:struct
        let s_778_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_778_3 as isize);
            tracer.read_register(s_778_3 as isize, value);
            value
        };
        // C s_778_5: const #90640u : u32
        let s_778_5: u32 = 90640;
        // N s_778_6: write-reg s_778_5 <= s_778_4
        let s_778_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_778_5 as isize, s_778_4);
            tracer.write_register(s_778_5 as isize, s_778_4);
        };
        // N s_778_7: jump b753
        return block_753(state, tracer, fn_state);
    }
    fn block_779<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_779_0: const #237u : u32
        let s_779_0: u32 = 237;
        // S s_779_1: call IsFeatureImplemented(s_779_0)
        let s_779_1: bool = IsFeatureImplemented(state, tracer, s_779_0);
        // S s_779_2: not s_779_1
        let s_779_2: bool = !s_779_1;
        // D s_779_3: write-var gs#41048 <= s_779_2
        fn_state.gs_41048 = s_779_2;
        // N s_779_4: jump b751
        return block_751(state, tracer, fn_state);
    }
    fn block_780<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_780_0: const #2s : i64
        let s_780_0: i64 = 2;
        // C s_780_1: cast zx s_780_0 -> i
        let s_780_1: i128 = (i128::try_from(s_780_0).unwrap());
        // S s_780_2: call __UNKNOWN_bits(s_780_1)
        let s_780_2: Bits = u__UNKNOWN_bits(state, tracer, s_780_1);
        // C s_780_3: const #90640u : u32
        let s_780_3: u32 = 90640;
        // D s_780_4: read-reg s_780_3:struct
        let s_780_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_780_3 as isize);
            tracer.read_register(s_780_3 as isize, value);
            value
        };
        // C s_780_5: const #90640u : u32
        let s_780_5: u32 = 90640;
        // N s_780_6: write-reg s_780_5 <= s_780_4
        let s_780_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_780_5 as isize, s_780_4);
            tracer.write_register(s_780_5 as isize, s_780_4);
        };
        // N s_780_7: jump b749
        return block_749(state, tracer, fn_state);
    }
    fn block_781<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_781_0: const #237u : u32
        let s_781_0: u32 = 237;
        // S s_781_1: call IsFeatureImplemented(s_781_0)
        let s_781_1: bool = IsFeatureImplemented(state, tracer, s_781_0);
        // D s_781_2: write-var gs#41047 <= s_781_1
        fn_state.gs_41047 = s_781_1;
        // N s_781_3: jump b747
        return block_747(state, tracer, fn_state);
    }
    fn block_782<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_782_0: const #1s : i64
        let s_782_0: i64 = 1;
        // C s_782_1: cast zx s_782_0 -> i
        let s_782_1: i128 = (i128::try_from(s_782_0).unwrap());
        // S s_782_2: call __UNKNOWN_bits(s_782_1)
        let s_782_2: Bits = u__UNKNOWN_bits(state, tracer, s_782_1);
        // C s_782_3: const #90640u : u32
        let s_782_3: u32 = 90640;
        // D s_782_4: read-reg s_782_3:struct
        let s_782_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_782_3 as isize);
            tracer.read_register(s_782_3 as isize, value);
            value
        };
        // C s_782_5: const #90640u : u32
        let s_782_5: u32 = 90640;
        // N s_782_6: write-reg s_782_5 <= s_782_4
        let s_782_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_782_5 as isize, s_782_4);
            tracer.write_register(s_782_5 as isize, s_782_4);
        };
        // N s_782_7: jump b745
        return block_745(state, tracer, fn_state);
    }
    fn block_783<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_783_0: const #237u : u32
        let s_783_0: u32 = 237;
        // S s_783_1: call IsFeatureImplemented(s_783_0)
        let s_783_1: bool = IsFeatureImplemented(state, tracer, s_783_0);
        // S s_783_2: not s_783_1
        let s_783_2: bool = !s_783_1;
        // D s_783_3: write-var gs#41044 <= s_783_2
        fn_state.gs_41044 = s_783_2;
        // N s_783_4: jump b743
        return block_743(state, tracer, fn_state);
    }
    fn block_784<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_784_0: const #1s : i64
        let s_784_0: i64 = 1;
        // C s_784_1: cast zx s_784_0 -> i
        let s_784_1: i128 = (i128::try_from(s_784_0).unwrap());
        // S s_784_2: call __UNKNOWN_bits(s_784_1)
        let s_784_2: Bits = u__UNKNOWN_bits(state, tracer, s_784_1);
        // C s_784_3: const #90640u : u32
        let s_784_3: u32 = 90640;
        // D s_784_4: read-reg s_784_3:struct
        let s_784_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_784_3 as isize);
            tracer.read_register(s_784_3 as isize, value);
            value
        };
        // C s_784_5: const #90640u : u32
        let s_784_5: u32 = 90640;
        // N s_784_6: write-reg s_784_5 <= s_784_4
        let s_784_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_784_5 as isize, s_784_4);
            tracer.write_register(s_784_5 as isize, s_784_4);
        };
        // N s_784_7: jump b741
        return block_741(state, tracer, fn_state);
    }
    fn block_785<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_785_0: const #237u : u32
        let s_785_0: u32 = 237;
        // S s_785_1: call IsFeatureImplemented(s_785_0)
        let s_785_1: bool = IsFeatureImplemented(state, tracer, s_785_0);
        // D s_785_2: write-var gs#41043 <= s_785_1
        fn_state.gs_41043 = s_785_1;
        // N s_785_3: jump b739
        return block_739(state, tracer, fn_state);
    }
    fn block_786<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_786_0: const #1s : i64
        let s_786_0: i64 = 1;
        // C s_786_1: cast zx s_786_0 -> i
        let s_786_1: i128 = (i128::try_from(s_786_0).unwrap());
        // S s_786_2: call __UNKNOWN_bits(s_786_1)
        let s_786_2: Bits = u__UNKNOWN_bits(state, tracer, s_786_1);
        // C s_786_3: const #90640u : u32
        let s_786_3: u32 = 90640;
        // D s_786_4: read-reg s_786_3:struct
        let s_786_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_786_3 as isize);
            tracer.read_register(s_786_3 as isize, value);
            value
        };
        // C s_786_5: const #90640u : u32
        let s_786_5: u32 = 90640;
        // N s_786_6: write-reg s_786_5 <= s_786_4
        let s_786_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_786_5 as isize, s_786_4);
            tracer.write_register(s_786_5 as isize, s_786_4);
        };
        // N s_786_7: jump b737
        return block_737(state, tracer, fn_state);
    }
    fn block_787<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_787_0: const #237u : u32
        let s_787_0: u32 = 237;
        // S s_787_1: call IsFeatureImplemented(s_787_0)
        let s_787_1: bool = IsFeatureImplemented(state, tracer, s_787_0);
        // S s_787_2: not s_787_1
        let s_787_2: bool = !s_787_1;
        // D s_787_3: write-var gs#41039 <= s_787_2
        fn_state.gs_41039 = s_787_2;
        // N s_787_4: jump b735
        return block_735(state, tracer, fn_state);
    }
    fn block_788<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_788_0: const #1s : i64
        let s_788_0: i64 = 1;
        // C s_788_1: cast zx s_788_0 -> i
        let s_788_1: i128 = (i128::try_from(s_788_0).unwrap());
        // S s_788_2: call __UNKNOWN_bits(s_788_1)
        let s_788_2: Bits = u__UNKNOWN_bits(state, tracer, s_788_1);
        // C s_788_3: const #90640u : u32
        let s_788_3: u32 = 90640;
        // D s_788_4: read-reg s_788_3:struct
        let s_788_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_788_3 as isize);
            tracer.read_register(s_788_3 as isize, value);
            value
        };
        // C s_788_5: const #90640u : u32
        let s_788_5: u32 = 90640;
        // N s_788_6: write-reg s_788_5 <= s_788_4
        let s_788_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_788_5 as isize, s_788_4);
            tracer.write_register(s_788_5 as isize, s_788_4);
        };
        // N s_788_7: jump b733
        return block_733(state, tracer, fn_state);
    }
    fn block_789<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_789_0: const #237u : u32
        let s_789_0: u32 = 237;
        // S s_789_1: call IsFeatureImplemented(s_789_0)
        let s_789_1: bool = IsFeatureImplemented(state, tracer, s_789_0);
        // D s_789_2: write-var gs#41038 <= s_789_1
        fn_state.gs_41038 = s_789_1;
        // N s_789_3: jump b731
        return block_731(state, tracer, fn_state);
    }
    fn block_790<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_790_0: const #1s : i64
        let s_790_0: i64 = 1;
        // C s_790_1: cast zx s_790_0 -> i
        let s_790_1: i128 = (i128::try_from(s_790_0).unwrap());
        // S s_790_2: call __UNKNOWN_bits(s_790_1)
        let s_790_2: Bits = u__UNKNOWN_bits(state, tracer, s_790_1);
        // C s_790_3: const #90640u : u32
        let s_790_3: u32 = 90640;
        // D s_790_4: read-reg s_790_3:struct
        let s_790_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_790_3 as isize);
            tracer.read_register(s_790_3 as isize, value);
            value
        };
        // C s_790_5: const #90640u : u32
        let s_790_5: u32 = 90640;
        // N s_790_6: write-reg s_790_5 <= s_790_4
        let s_790_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_790_5 as isize, s_790_4);
            tracer.write_register(s_790_5 as isize, s_790_4);
        };
        // N s_790_7: jump b729
        return block_729(state, tracer, fn_state);
    }
    fn block_791<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_791_0: const #237u : u32
        let s_791_0: u32 = 237;
        // S s_791_1: call IsFeatureImplemented(s_791_0)
        let s_791_1: bool = IsFeatureImplemented(state, tracer, s_791_0);
        // S s_791_2: not s_791_1
        let s_791_2: bool = !s_791_1;
        // D s_791_3: write-var gs#41037 <= s_791_2
        fn_state.gs_41037 = s_791_2;
        // N s_791_4: jump b727
        return block_727(state, tracer, fn_state);
    }
    fn block_792<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_792_0: const #1s : i64
        let s_792_0: i64 = 1;
        // C s_792_1: cast zx s_792_0 -> i
        let s_792_1: i128 = (i128::try_from(s_792_0).unwrap());
        // S s_792_2: call __UNKNOWN_bits(s_792_1)
        let s_792_2: Bits = u__UNKNOWN_bits(state, tracer, s_792_1);
        // C s_792_3: const #90640u : u32
        let s_792_3: u32 = 90640;
        // D s_792_4: read-reg s_792_3:struct
        let s_792_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_792_3 as isize);
            tracer.read_register(s_792_3 as isize, value);
            value
        };
        // C s_792_5: const #90640u : u32
        let s_792_5: u32 = 90640;
        // N s_792_6: write-reg s_792_5 <= s_792_4
        let s_792_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_792_5 as isize, s_792_4);
            tracer.write_register(s_792_5 as isize, s_792_4);
        };
        // N s_792_7: jump b725
        return block_725(state, tracer, fn_state);
    }
    fn block_793<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_793_0: const #237u : u32
        let s_793_0: u32 = 237;
        // S s_793_1: call IsFeatureImplemented(s_793_0)
        let s_793_1: bool = IsFeatureImplemented(state, tracer, s_793_0);
        // D s_793_2: write-var gs#41036 <= s_793_1
        fn_state.gs_41036 = s_793_1;
        // N s_793_3: jump b723
        return block_723(state, tracer, fn_state);
    }
    fn block_794<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_794_0: const #1s : i64
        let s_794_0: i64 = 1;
        // C s_794_1: cast zx s_794_0 -> i
        let s_794_1: i128 = (i128::try_from(s_794_0).unwrap());
        // S s_794_2: call __UNKNOWN_bits(s_794_1)
        let s_794_2: Bits = u__UNKNOWN_bits(state, tracer, s_794_1);
        // C s_794_3: const #16536u : u32
        let s_794_3: u32 = 16536;
        // D s_794_4: read-reg s_794_3:struct
        let s_794_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_794_3 as isize);
            tracer.read_register(s_794_3 as isize, value);
            value
        };
        // C s_794_5: const #16536u : u32
        let s_794_5: u32 = 16536;
        // N s_794_6: write-reg s_794_5 <= s_794_4
        let s_794_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_794_5 as isize, s_794_4);
            tracer.write_register(s_794_5 as isize, s_794_4);
        };
        // N s_794_7: jump b721
        return block_721(state, tracer, fn_state);
    }
    fn block_795<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_795_0: const #237u : u32
        let s_795_0: u32 = 237;
        // S s_795_1: call IsFeatureImplemented(s_795_0)
        let s_795_1: bool = IsFeatureImplemented(state, tracer, s_795_0);
        // S s_795_2: not s_795_1
        let s_795_2: bool = !s_795_1;
        // D s_795_3: write-var gs#41017 <= s_795_2
        fn_state.gs_41017 = s_795_2;
        // N s_795_4: jump b719
        return block_719(state, tracer, fn_state);
    }
    fn block_796<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_796_0: const #1s : i64
        let s_796_0: i64 = 1;
        // C s_796_1: cast zx s_796_0 -> i
        let s_796_1: i128 = (i128::try_from(s_796_0).unwrap());
        // S s_796_2: call __UNKNOWN_bits(s_796_1)
        let s_796_2: Bits = u__UNKNOWN_bits(state, tracer, s_796_1);
        // C s_796_3: const #16536u : u32
        let s_796_3: u32 = 16536;
        // D s_796_4: read-reg s_796_3:struct
        let s_796_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_796_3 as isize);
            tracer.read_register(s_796_3 as isize, value);
            value
        };
        // C s_796_5: const #16536u : u32
        let s_796_5: u32 = 16536;
        // N s_796_6: write-reg s_796_5 <= s_796_4
        let s_796_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_796_5 as isize, s_796_4);
            tracer.write_register(s_796_5 as isize, s_796_4);
        };
        // N s_796_7: jump b717
        return block_717(state, tracer, fn_state);
    }
    fn block_797<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_797_0: const #237u : u32
        let s_797_0: u32 = 237;
        // S s_797_1: call IsFeatureImplemented(s_797_0)
        let s_797_1: bool = IsFeatureImplemented(state, tracer, s_797_0);
        // D s_797_2: write-var gs#41016 <= s_797_1
        fn_state.gs_41016 = s_797_1;
        // N s_797_3: jump b715
        return block_715(state, tracer, fn_state);
    }
    fn block_798<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_798_0: const #1s : i64
        let s_798_0: i64 = 1;
        // C s_798_1: cast zx s_798_0 -> i
        let s_798_1: i128 = (i128::try_from(s_798_0).unwrap());
        // S s_798_2: call __UNKNOWN_bits(s_798_1)
        let s_798_2: Bits = u__UNKNOWN_bits(state, tracer, s_798_1);
        // C s_798_3: const #16536u : u32
        let s_798_3: u32 = 16536;
        // D s_798_4: read-reg s_798_3:struct
        let s_798_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_798_3 as isize);
            tracer.read_register(s_798_3 as isize, value);
            value
        };
        // C s_798_5: const #16536u : u32
        let s_798_5: u32 = 16536;
        // N s_798_6: write-reg s_798_5 <= s_798_4
        let s_798_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_798_5 as isize, s_798_4);
            tracer.write_register(s_798_5 as isize, s_798_4);
        };
        // N s_798_7: jump b713
        return block_713(state, tracer, fn_state);
    }
    fn block_799<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_799_0: const #237u : u32
        let s_799_0: u32 = 237;
        // S s_799_1: call IsFeatureImplemented(s_799_0)
        let s_799_1: bool = IsFeatureImplemented(state, tracer, s_799_0);
        // S s_799_2: not s_799_1
        let s_799_2: bool = !s_799_1;
        // D s_799_3: write-var gs#41015 <= s_799_2
        fn_state.gs_41015 = s_799_2;
        // N s_799_4: jump b711
        return block_711(state, tracer, fn_state);
    }
    fn block_800<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_800_0: const #1s : i64
        let s_800_0: i64 = 1;
        // C s_800_1: cast zx s_800_0 -> i
        let s_800_1: i128 = (i128::try_from(s_800_0).unwrap());
        // S s_800_2: call __UNKNOWN_bits(s_800_1)
        let s_800_2: Bits = u__UNKNOWN_bits(state, tracer, s_800_1);
        // C s_800_3: const #16536u : u32
        let s_800_3: u32 = 16536;
        // D s_800_4: read-reg s_800_3:struct
        let s_800_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_800_3 as isize);
            tracer.read_register(s_800_3 as isize, value);
            value
        };
        // C s_800_5: const #16536u : u32
        let s_800_5: u32 = 16536;
        // N s_800_6: write-reg s_800_5 <= s_800_4
        let s_800_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_800_5 as isize, s_800_4);
            tracer.write_register(s_800_5 as isize, s_800_4);
        };
        // N s_800_7: jump b709
        return block_709(state, tracer, fn_state);
    }
    fn block_801<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_801_0: const #237u : u32
        let s_801_0: u32 = 237;
        // S s_801_1: call IsFeatureImplemented(s_801_0)
        let s_801_1: bool = IsFeatureImplemented(state, tracer, s_801_0);
        // D s_801_2: write-var gs#41014 <= s_801_1
        fn_state.gs_41014 = s_801_1;
        // N s_801_3: jump b707
        return block_707(state, tracer, fn_state);
    }
    fn block_802<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_802_0: const #1s : i64
        let s_802_0: i64 = 1;
        // C s_802_1: cast zx s_802_0 -> i
        let s_802_1: i128 = (i128::try_from(s_802_0).unwrap());
        // S s_802_2: call __UNKNOWN_bits(s_802_1)
        let s_802_2: Bits = u__UNKNOWN_bits(state, tracer, s_802_1);
        // C s_802_3: const #16536u : u32
        let s_802_3: u32 = 16536;
        // D s_802_4: read-reg s_802_3:struct
        let s_802_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_802_3 as isize);
            tracer.read_register(s_802_3 as isize, value);
            value
        };
        // C s_802_5: const #16536u : u32
        let s_802_5: u32 = 16536;
        // N s_802_6: write-reg s_802_5 <= s_802_4
        let s_802_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_802_5 as isize, s_802_4);
            tracer.write_register(s_802_5 as isize, s_802_4);
        };
        // N s_802_7: jump b705
        return block_705(state, tracer, fn_state);
    }
    fn block_803<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_803_0: const #237u : u32
        let s_803_0: u32 = 237;
        // S s_803_1: call IsFeatureImplemented(s_803_0)
        let s_803_1: bool = IsFeatureImplemented(state, tracer, s_803_0);
        // S s_803_2: not s_803_1
        let s_803_2: bool = !s_803_1;
        // D s_803_3: write-var gs#41010 <= s_803_2
        fn_state.gs_41010 = s_803_2;
        // N s_803_4: jump b703
        return block_703(state, tracer, fn_state);
    }
    fn block_804<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_804_0: const #1s : i64
        let s_804_0: i64 = 1;
        // C s_804_1: cast zx s_804_0 -> i
        let s_804_1: i128 = (i128::try_from(s_804_0).unwrap());
        // S s_804_2: call __UNKNOWN_bits(s_804_1)
        let s_804_2: Bits = u__UNKNOWN_bits(state, tracer, s_804_1);
        // C s_804_3: const #16536u : u32
        let s_804_3: u32 = 16536;
        // D s_804_4: read-reg s_804_3:struct
        let s_804_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_804_3 as isize);
            tracer.read_register(s_804_3 as isize, value);
            value
        };
        // C s_804_5: const #16536u : u32
        let s_804_5: u32 = 16536;
        // N s_804_6: write-reg s_804_5 <= s_804_4
        let s_804_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_804_5 as isize, s_804_4);
            tracer.write_register(s_804_5 as isize, s_804_4);
        };
        // N s_804_7: jump b701
        return block_701(state, tracer, fn_state);
    }
    fn block_805<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_805_0: const #237u : u32
        let s_805_0: u32 = 237;
        // S s_805_1: call IsFeatureImplemented(s_805_0)
        let s_805_1: bool = IsFeatureImplemented(state, tracer, s_805_0);
        // D s_805_2: write-var gs#41009 <= s_805_1
        fn_state.gs_41009 = s_805_1;
        // N s_805_3: jump b699
        return block_699(state, tracer, fn_state);
    }
    fn block_806<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_806_0: const #1s : i64
        let s_806_0: i64 = 1;
        // C s_806_1: cast zx s_806_0 -> i
        let s_806_1: i128 = (i128::try_from(s_806_0).unwrap());
        // S s_806_2: call __UNKNOWN_bits(s_806_1)
        let s_806_2: Bits = u__UNKNOWN_bits(state, tracer, s_806_1);
        // C s_806_3: const #16536u : u32
        let s_806_3: u32 = 16536;
        // D s_806_4: read-reg s_806_3:struct
        let s_806_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_806_3 as isize);
            tracer.read_register(s_806_3 as isize, value);
            value
        };
        // C s_806_5: const #16536u : u32
        let s_806_5: u32 = 16536;
        // N s_806_6: write-reg s_806_5 <= s_806_4
        let s_806_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_806_5 as isize, s_806_4);
            tracer.write_register(s_806_5 as isize, s_806_4);
        };
        // N s_806_7: jump b697
        return block_697(state, tracer, fn_state);
    }
    fn block_807<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_807_0: const #237u : u32
        let s_807_0: u32 = 237;
        // S s_807_1: call IsFeatureImplemented(s_807_0)
        let s_807_1: bool = IsFeatureImplemented(state, tracer, s_807_0);
        // S s_807_2: not s_807_1
        let s_807_2: bool = !s_807_1;
        // D s_807_3: write-var gs#41008 <= s_807_2
        fn_state.gs_41008 = s_807_2;
        // N s_807_4: jump b695
        return block_695(state, tracer, fn_state);
    }
    fn block_808<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_808_0: const #1s : i64
        let s_808_0: i64 = 1;
        // C s_808_1: cast zx s_808_0 -> i
        let s_808_1: i128 = (i128::try_from(s_808_0).unwrap());
        // S s_808_2: call __UNKNOWN_bits(s_808_1)
        let s_808_2: Bits = u__UNKNOWN_bits(state, tracer, s_808_1);
        // C s_808_3: const #16536u : u32
        let s_808_3: u32 = 16536;
        // D s_808_4: read-reg s_808_3:struct
        let s_808_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_808_3 as isize);
            tracer.read_register(s_808_3 as isize, value);
            value
        };
        // C s_808_5: const #16536u : u32
        let s_808_5: u32 = 16536;
        // N s_808_6: write-reg s_808_5 <= s_808_4
        let s_808_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_808_5 as isize, s_808_4);
            tracer.write_register(s_808_5 as isize, s_808_4);
        };
        // N s_808_7: jump b693
        return block_693(state, tracer, fn_state);
    }
    fn block_809<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_809_0: const #237u : u32
        let s_809_0: u32 = 237;
        // S s_809_1: call IsFeatureImplemented(s_809_0)
        let s_809_1: bool = IsFeatureImplemented(state, tracer, s_809_0);
        // D s_809_2: write-var gs#41007 <= s_809_1
        fn_state.gs_41007 = s_809_1;
        // N s_809_3: jump b691
        return block_691(state, tracer, fn_state);
    }
    fn block_810<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_810_0: const #1s : i64
        let s_810_0: i64 = 1;
        // C s_810_1: cast zx s_810_0 -> i
        let s_810_1: i128 = (i128::try_from(s_810_0).unwrap());
        // S s_810_2: call __UNKNOWN_bits(s_810_1)
        let s_810_2: Bits = u__UNKNOWN_bits(state, tracer, s_810_1);
        // C s_810_3: const #16536u : u32
        let s_810_3: u32 = 16536;
        // D s_810_4: read-reg s_810_3:struct
        let s_810_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_810_3 as isize);
            tracer.read_register(s_810_3 as isize, value);
            value
        };
        // C s_810_5: const #16536u : u32
        let s_810_5: u32 = 16536;
        // N s_810_6: write-reg s_810_5 <= s_810_4
        let s_810_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_810_5 as isize, s_810_4);
            tracer.write_register(s_810_5 as isize, s_810_4);
        };
        // N s_810_7: jump b689
        return block_689(state, tracer, fn_state);
    }
    fn block_811<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_811_0: const #237u : u32
        let s_811_0: u32 = 237;
        // S s_811_1: call IsFeatureImplemented(s_811_0)
        let s_811_1: bool = IsFeatureImplemented(state, tracer, s_811_0);
        // S s_811_2: not s_811_1
        let s_811_2: bool = !s_811_1;
        // D s_811_3: write-var gs#41006 <= s_811_2
        fn_state.gs_41006 = s_811_2;
        // N s_811_4: jump b687
        return block_687(state, tracer, fn_state);
    }
    fn block_812<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_812_0: const #1s : i64
        let s_812_0: i64 = 1;
        // C s_812_1: cast zx s_812_0 -> i
        let s_812_1: i128 = (i128::try_from(s_812_0).unwrap());
        // S s_812_2: call __UNKNOWN_bits(s_812_1)
        let s_812_2: Bits = u__UNKNOWN_bits(state, tracer, s_812_1);
        // C s_812_3: const #16536u : u32
        let s_812_3: u32 = 16536;
        // D s_812_4: read-reg s_812_3:struct
        let s_812_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_812_3 as isize);
            tracer.read_register(s_812_3 as isize, value);
            value
        };
        // C s_812_5: const #16536u : u32
        let s_812_5: u32 = 16536;
        // N s_812_6: write-reg s_812_5 <= s_812_4
        let s_812_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_812_5 as isize, s_812_4);
            tracer.write_register(s_812_5 as isize, s_812_4);
        };
        // N s_812_7: jump b685
        return block_685(state, tracer, fn_state);
    }
    fn block_813<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_813_0: const #237u : u32
        let s_813_0: u32 = 237;
        // S s_813_1: call IsFeatureImplemented(s_813_0)
        let s_813_1: bool = IsFeatureImplemented(state, tracer, s_813_0);
        // D s_813_2: write-var gs#41005 <= s_813_1
        fn_state.gs_41005 = s_813_1;
        // N s_813_3: jump b683
        return block_683(state, tracer, fn_state);
    }
    fn block_814<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_814_0: const #1s : i64
        let s_814_0: i64 = 1;
        // C s_814_1: cast zx s_814_0 -> i
        let s_814_1: i128 = (i128::try_from(s_814_0).unwrap());
        // S s_814_2: call __UNKNOWN_bits(s_814_1)
        let s_814_2: Bits = u__UNKNOWN_bits(state, tracer, s_814_1);
        // C s_814_3: const #16536u : u32
        let s_814_3: u32 = 16536;
        // D s_814_4: read-reg s_814_3:struct
        let s_814_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_814_3 as isize);
            tracer.read_register(s_814_3 as isize, value);
            value
        };
        // C s_814_5: const #16536u : u32
        let s_814_5: u32 = 16536;
        // N s_814_6: write-reg s_814_5 <= s_814_4
        let s_814_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_814_5 as isize, s_814_4);
            tracer.write_register(s_814_5 as isize, s_814_4);
        };
        // N s_814_7: jump b681
        return block_681(state, tracer, fn_state);
    }
    fn block_815<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_815_0: const #237u : u32
        let s_815_0: u32 = 237;
        // S s_815_1: call IsFeatureImplemented(s_815_0)
        let s_815_1: bool = IsFeatureImplemented(state, tracer, s_815_0);
        // S s_815_2: not s_815_1
        let s_815_2: bool = !s_815_1;
        // D s_815_3: write-var gs#41004 <= s_815_2
        fn_state.gs_41004 = s_815_2;
        // N s_815_4: jump b679
        return block_679(state, tracer, fn_state);
    }
    fn block_816<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_816_0: const #1s : i64
        let s_816_0: i64 = 1;
        // C s_816_1: cast zx s_816_0 -> i
        let s_816_1: i128 = (i128::try_from(s_816_0).unwrap());
        // S s_816_2: call __UNKNOWN_bits(s_816_1)
        let s_816_2: Bits = u__UNKNOWN_bits(state, tracer, s_816_1);
        // C s_816_3: const #16536u : u32
        let s_816_3: u32 = 16536;
        // D s_816_4: read-reg s_816_3:struct
        let s_816_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_816_3 as isize);
            tracer.read_register(s_816_3 as isize, value);
            value
        };
        // C s_816_5: const #16536u : u32
        let s_816_5: u32 = 16536;
        // N s_816_6: write-reg s_816_5 <= s_816_4
        let s_816_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_816_5 as isize, s_816_4);
            tracer.write_register(s_816_5 as isize, s_816_4);
        };
        // N s_816_7: jump b677
        return block_677(state, tracer, fn_state);
    }
    fn block_817<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_817_0: const #237u : u32
        let s_817_0: u32 = 237;
        // S s_817_1: call IsFeatureImplemented(s_817_0)
        let s_817_1: bool = IsFeatureImplemented(state, tracer, s_817_0);
        // D s_817_2: write-var gs#41003 <= s_817_1
        fn_state.gs_41003 = s_817_1;
        // N s_817_3: jump b675
        return block_675(state, tracer, fn_state);
    }
    fn block_818<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_818_0: const #1s : i64
        let s_818_0: i64 = 1;
        // C s_818_1: cast zx s_818_0 -> i
        let s_818_1: i128 = (i128::try_from(s_818_0).unwrap());
        // S s_818_2: call __UNKNOWN_bits(s_818_1)
        let s_818_2: Bits = u__UNKNOWN_bits(state, tracer, s_818_1);
        // C s_818_3: const #16536u : u32
        let s_818_3: u32 = 16536;
        // D s_818_4: read-reg s_818_3:struct
        let s_818_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_818_3 as isize);
            tracer.read_register(s_818_3 as isize, value);
            value
        };
        // C s_818_5: const #16536u : u32
        let s_818_5: u32 = 16536;
        // N s_818_6: write-reg s_818_5 <= s_818_4
        let s_818_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_818_5 as isize, s_818_4);
            tracer.write_register(s_818_5 as isize, s_818_4);
        };
        // N s_818_7: jump b673
        return block_673(state, tracer, fn_state);
    }
    fn block_819<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_819_0: const #237u : u32
        let s_819_0: u32 = 237;
        // S s_819_1: call IsFeatureImplemented(s_819_0)
        let s_819_1: bool = IsFeatureImplemented(state, tracer, s_819_0);
        // S s_819_2: not s_819_1
        let s_819_2: bool = !s_819_1;
        // D s_819_3: write-var gs#41002 <= s_819_2
        fn_state.gs_41002 = s_819_2;
        // N s_819_4: jump b671
        return block_671(state, tracer, fn_state);
    }
    fn block_820<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_820_0: const #1s : i64
        let s_820_0: i64 = 1;
        // C s_820_1: cast zx s_820_0 -> i
        let s_820_1: i128 = (i128::try_from(s_820_0).unwrap());
        // S s_820_2: call __UNKNOWN_bits(s_820_1)
        let s_820_2: Bits = u__UNKNOWN_bits(state, tracer, s_820_1);
        // C s_820_3: const #16536u : u32
        let s_820_3: u32 = 16536;
        // D s_820_4: read-reg s_820_3:struct
        let s_820_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_820_3 as isize);
            tracer.read_register(s_820_3 as isize, value);
            value
        };
        // C s_820_5: const #16536u : u32
        let s_820_5: u32 = 16536;
        // N s_820_6: write-reg s_820_5 <= s_820_4
        let s_820_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_820_5 as isize, s_820_4);
            tracer.write_register(s_820_5 as isize, s_820_4);
        };
        // N s_820_7: jump b669
        return block_669(state, tracer, fn_state);
    }
    fn block_821<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_821_0: const #237u : u32
        let s_821_0: u32 = 237;
        // S s_821_1: call IsFeatureImplemented(s_821_0)
        let s_821_1: bool = IsFeatureImplemented(state, tracer, s_821_0);
        // D s_821_2: write-var gs#41001 <= s_821_1
        fn_state.gs_41001 = s_821_1;
        // N s_821_3: jump b667
        return block_667(state, tracer, fn_state);
    }
    fn block_822<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_822_0: const #1s : i64
        let s_822_0: i64 = 1;
        // C s_822_1: cast zx s_822_0 -> i
        let s_822_1: i128 = (i128::try_from(s_822_0).unwrap());
        // S s_822_2: call __UNKNOWN_bits(s_822_1)
        let s_822_2: Bits = u__UNKNOWN_bits(state, tracer, s_822_1);
        // C s_822_3: const #16536u : u32
        let s_822_3: u32 = 16536;
        // D s_822_4: read-reg s_822_3:struct
        let s_822_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_822_3 as isize);
            tracer.read_register(s_822_3 as isize, value);
            value
        };
        // C s_822_5: const #16536u : u32
        let s_822_5: u32 = 16536;
        // N s_822_6: write-reg s_822_5 <= s_822_4
        let s_822_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_822_5 as isize, s_822_4);
            tracer.write_register(s_822_5 as isize, s_822_4);
        };
        // N s_822_7: jump b665
        return block_665(state, tracer, fn_state);
    }
    fn block_823<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_823_0: const #237u : u32
        let s_823_0: u32 = 237;
        // S s_823_1: call IsFeatureImplemented(s_823_0)
        let s_823_1: bool = IsFeatureImplemented(state, tracer, s_823_0);
        // S s_823_2: not s_823_1
        let s_823_2: bool = !s_823_1;
        // D s_823_3: write-var gs#41000 <= s_823_2
        fn_state.gs_41000 = s_823_2;
        // N s_823_4: jump b663
        return block_663(state, tracer, fn_state);
    }
    fn block_824<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_824_0: const #1s : i64
        let s_824_0: i64 = 1;
        // C s_824_1: cast zx s_824_0 -> i
        let s_824_1: i128 = (i128::try_from(s_824_0).unwrap());
        // S s_824_2: call __UNKNOWN_bits(s_824_1)
        let s_824_2: Bits = u__UNKNOWN_bits(state, tracer, s_824_1);
        // C s_824_3: const #16536u : u32
        let s_824_3: u32 = 16536;
        // D s_824_4: read-reg s_824_3:struct
        let s_824_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_824_3 as isize);
            tracer.read_register(s_824_3 as isize, value);
            value
        };
        // C s_824_5: const #16536u : u32
        let s_824_5: u32 = 16536;
        // N s_824_6: write-reg s_824_5 <= s_824_4
        let s_824_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_824_5 as isize, s_824_4);
            tracer.write_register(s_824_5 as isize, s_824_4);
        };
        // N s_824_7: jump b661
        return block_661(state, tracer, fn_state);
    }
    fn block_825<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_825_0: const #237u : u32
        let s_825_0: u32 = 237;
        // S s_825_1: call IsFeatureImplemented(s_825_0)
        let s_825_1: bool = IsFeatureImplemented(state, tracer, s_825_0);
        // D s_825_2: write-var gs#40999 <= s_825_1
        fn_state.gs_40999 = s_825_1;
        // N s_825_3: jump b659
        return block_659(state, tracer, fn_state);
    }
    fn block_826<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_826_0: const #1s : i64
        let s_826_0: i64 = 1;
        // C s_826_1: cast zx s_826_0 -> i
        let s_826_1: i128 = (i128::try_from(s_826_0).unwrap());
        // S s_826_2: call __UNKNOWN_bits(s_826_1)
        let s_826_2: Bits = u__UNKNOWN_bits(state, tracer, s_826_1);
        // C s_826_3: const #16536u : u32
        let s_826_3: u32 = 16536;
        // D s_826_4: read-reg s_826_3:struct
        let s_826_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_826_3 as isize);
            tracer.read_register(s_826_3 as isize, value);
            value
        };
        // C s_826_5: const #16536u : u32
        let s_826_5: u32 = 16536;
        // N s_826_6: write-reg s_826_5 <= s_826_4
        let s_826_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_826_5 as isize, s_826_4);
            tracer.write_register(s_826_5 as isize, s_826_4);
        };
        // N s_826_7: jump b657
        return block_657(state, tracer, fn_state);
    }
    fn block_827<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_827_0: const #237u : u32
        let s_827_0: u32 = 237;
        // S s_827_1: call IsFeatureImplemented(s_827_0)
        let s_827_1: bool = IsFeatureImplemented(state, tracer, s_827_0);
        // S s_827_2: not s_827_1
        let s_827_2: bool = !s_827_1;
        // D s_827_3: write-var gs#40998 <= s_827_2
        fn_state.gs_40998 = s_827_2;
        // N s_827_4: jump b655
        return block_655(state, tracer, fn_state);
    }
    fn block_828<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_828_0: const #1s : i64
        let s_828_0: i64 = 1;
        // C s_828_1: cast zx s_828_0 -> i
        let s_828_1: i128 = (i128::try_from(s_828_0).unwrap());
        // S s_828_2: call __UNKNOWN_bits(s_828_1)
        let s_828_2: Bits = u__UNKNOWN_bits(state, tracer, s_828_1);
        // C s_828_3: const #16536u : u32
        let s_828_3: u32 = 16536;
        // D s_828_4: read-reg s_828_3:struct
        let s_828_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_828_3 as isize);
            tracer.read_register(s_828_3 as isize, value);
            value
        };
        // C s_828_5: const #16536u : u32
        let s_828_5: u32 = 16536;
        // N s_828_6: write-reg s_828_5 <= s_828_4
        let s_828_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_828_5 as isize, s_828_4);
            tracer.write_register(s_828_5 as isize, s_828_4);
        };
        // N s_828_7: jump b653
        return block_653(state, tracer, fn_state);
    }
    fn block_829<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_829_0: const #237u : u32
        let s_829_0: u32 = 237;
        // S s_829_1: call IsFeatureImplemented(s_829_0)
        let s_829_1: bool = IsFeatureImplemented(state, tracer, s_829_0);
        // D s_829_2: write-var gs#40997 <= s_829_1
        fn_state.gs_40997 = s_829_1;
        // N s_829_3: jump b651
        return block_651(state, tracer, fn_state);
    }
    fn block_830<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_830_0: const #1s : i64
        let s_830_0: i64 = 1;
        // C s_830_1: cast zx s_830_0 -> i
        let s_830_1: i128 = (i128::try_from(s_830_0).unwrap());
        // S s_830_2: call __UNKNOWN_bits(s_830_1)
        let s_830_2: Bits = u__UNKNOWN_bits(state, tracer, s_830_1);
        // C s_830_3: const #18272u : u32
        let s_830_3: u32 = 18272;
        // D s_830_4: read-reg s_830_3:struct
        let s_830_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_830_3 as isize);
            tracer.read_register(s_830_3 as isize, value);
            value
        };
        // C s_830_5: const #18272u : u32
        let s_830_5: u32 = 18272;
        // N s_830_6: write-reg s_830_5 <= s_830_4
        let s_830_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_830_5 as isize, s_830_4);
            tracer.write_register(s_830_5 as isize, s_830_4);
        };
        // N s_830_7: jump b649
        return block_649(state, tracer, fn_state);
    }
    fn block_831<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_831_0: const #237u : u32
        let s_831_0: u32 = 237;
        // S s_831_1: call IsFeatureImplemented(s_831_0)
        let s_831_1: bool = IsFeatureImplemented(state, tracer, s_831_0);
        // S s_831_2: not s_831_1
        let s_831_2: bool = !s_831_1;
        // D s_831_3: write-var gs#40979 <= s_831_2
        fn_state.gs_40979 = s_831_2;
        // N s_831_4: jump b647
        return block_647(state, tracer, fn_state);
    }
    fn block_832<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_832_0: const #1s : i64
        let s_832_0: i64 = 1;
        // C s_832_1: cast zx s_832_0 -> i
        let s_832_1: i128 = (i128::try_from(s_832_0).unwrap());
        // S s_832_2: call __UNKNOWN_bits(s_832_1)
        let s_832_2: Bits = u__UNKNOWN_bits(state, tracer, s_832_1);
        // C s_832_3: const #18272u : u32
        let s_832_3: u32 = 18272;
        // D s_832_4: read-reg s_832_3:struct
        let s_832_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_832_3 as isize);
            tracer.read_register(s_832_3 as isize, value);
            value
        };
        // C s_832_5: const #18272u : u32
        let s_832_5: u32 = 18272;
        // N s_832_6: write-reg s_832_5 <= s_832_4
        let s_832_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_832_5 as isize, s_832_4);
            tracer.write_register(s_832_5 as isize, s_832_4);
        };
        // N s_832_7: jump b645
        return block_645(state, tracer, fn_state);
    }
    fn block_833<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_833_0: const #237u : u32
        let s_833_0: u32 = 237;
        // S s_833_1: call IsFeatureImplemented(s_833_0)
        let s_833_1: bool = IsFeatureImplemented(state, tracer, s_833_0);
        // D s_833_2: write-var gs#40978 <= s_833_1
        fn_state.gs_40978 = s_833_1;
        // N s_833_3: jump b643
        return block_643(state, tracer, fn_state);
    }
    fn block_834<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_834_0: const #1s : i64
        let s_834_0: i64 = 1;
        // C s_834_1: cast zx s_834_0 -> i
        let s_834_1: i128 = (i128::try_from(s_834_0).unwrap());
        // S s_834_2: call __UNKNOWN_bits(s_834_1)
        let s_834_2: Bits = u__UNKNOWN_bits(state, tracer, s_834_1);
        // C s_834_3: const #18272u : u32
        let s_834_3: u32 = 18272;
        // D s_834_4: read-reg s_834_3:struct
        let s_834_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_834_3 as isize);
            tracer.read_register(s_834_3 as isize, value);
            value
        };
        // C s_834_5: const #18272u : u32
        let s_834_5: u32 = 18272;
        // N s_834_6: write-reg s_834_5 <= s_834_4
        let s_834_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_834_5 as isize, s_834_4);
            tracer.write_register(s_834_5 as isize, s_834_4);
        };
        // N s_834_7: jump b641
        return block_641(state, tracer, fn_state);
    }
    fn block_835<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_835_0: const #237u : u32
        let s_835_0: u32 = 237;
        // S s_835_1: call IsFeatureImplemented(s_835_0)
        let s_835_1: bool = IsFeatureImplemented(state, tracer, s_835_0);
        // S s_835_2: not s_835_1
        let s_835_2: bool = !s_835_1;
        // D s_835_3: write-var gs#40977 <= s_835_2
        fn_state.gs_40977 = s_835_2;
        // N s_835_4: jump b639
        return block_639(state, tracer, fn_state);
    }
    fn block_836<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_836_0: const #1s : i64
        let s_836_0: i64 = 1;
        // C s_836_1: cast zx s_836_0 -> i
        let s_836_1: i128 = (i128::try_from(s_836_0).unwrap());
        // S s_836_2: call __UNKNOWN_bits(s_836_1)
        let s_836_2: Bits = u__UNKNOWN_bits(state, tracer, s_836_1);
        // C s_836_3: const #18272u : u32
        let s_836_3: u32 = 18272;
        // D s_836_4: read-reg s_836_3:struct
        let s_836_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_836_3 as isize);
            tracer.read_register(s_836_3 as isize, value);
            value
        };
        // C s_836_5: const #18272u : u32
        let s_836_5: u32 = 18272;
        // N s_836_6: write-reg s_836_5 <= s_836_4
        let s_836_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_836_5 as isize, s_836_4);
            tracer.write_register(s_836_5 as isize, s_836_4);
        };
        // N s_836_7: jump b637
        return block_637(state, tracer, fn_state);
    }
    fn block_837<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_837_0: const #237u : u32
        let s_837_0: u32 = 237;
        // S s_837_1: call IsFeatureImplemented(s_837_0)
        let s_837_1: bool = IsFeatureImplemented(state, tracer, s_837_0);
        // D s_837_2: write-var gs#40976 <= s_837_1
        fn_state.gs_40976 = s_837_1;
        // N s_837_3: jump b635
        return block_635(state, tracer, fn_state);
    }
    fn block_838<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_838_0: const #2s : i64
        let s_838_0: i64 = 2;
        // C s_838_1: cast zx s_838_0 -> i
        let s_838_1: i128 = (i128::try_from(s_838_0).unwrap());
        // S s_838_2: call __UNKNOWN_bits(s_838_1)
        let s_838_2: Bits = u__UNKNOWN_bits(state, tracer, s_838_1);
        // C s_838_3: const #18272u : u32
        let s_838_3: u32 = 18272;
        // D s_838_4: read-reg s_838_3:struct
        let s_838_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_838_3 as isize);
            tracer.read_register(s_838_3 as isize, value);
            value
        };
        // C s_838_5: const #18272u : u32
        let s_838_5: u32 = 18272;
        // N s_838_6: write-reg s_838_5 <= s_838_4
        let s_838_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_838_5 as isize, s_838_4);
            tracer.write_register(s_838_5 as isize, s_838_4);
        };
        // N s_838_7: jump b633
        return block_633(state, tracer, fn_state);
    }
    fn block_839<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_839_0: const #237u : u32
        let s_839_0: u32 = 237;
        // S s_839_1: call IsFeatureImplemented(s_839_0)
        let s_839_1: bool = IsFeatureImplemented(state, tracer, s_839_0);
        // S s_839_2: not s_839_1
        let s_839_2: bool = !s_839_1;
        // D s_839_3: write-var gs#40975 <= s_839_2
        fn_state.gs_40975 = s_839_2;
        // N s_839_4: jump b631
        return block_631(state, tracer, fn_state);
    }
    fn block_840<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_840_0: const #2s : i64
        let s_840_0: i64 = 2;
        // C s_840_1: cast zx s_840_0 -> i
        let s_840_1: i128 = (i128::try_from(s_840_0).unwrap());
        // S s_840_2: call __UNKNOWN_bits(s_840_1)
        let s_840_2: Bits = u__UNKNOWN_bits(state, tracer, s_840_1);
        // C s_840_3: const #18272u : u32
        let s_840_3: u32 = 18272;
        // D s_840_4: read-reg s_840_3:struct
        let s_840_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_840_3 as isize);
            tracer.read_register(s_840_3 as isize, value);
            value
        };
        // C s_840_5: const #18272u : u32
        let s_840_5: u32 = 18272;
        // N s_840_6: write-reg s_840_5 <= s_840_4
        let s_840_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_840_5 as isize, s_840_4);
            tracer.write_register(s_840_5 as isize, s_840_4);
        };
        // N s_840_7: jump b629
        return block_629(state, tracer, fn_state);
    }
    fn block_841<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_841_0: const #237u : u32
        let s_841_0: u32 = 237;
        // S s_841_1: call IsFeatureImplemented(s_841_0)
        let s_841_1: bool = IsFeatureImplemented(state, tracer, s_841_0);
        // D s_841_2: write-var gs#40974 <= s_841_1
        fn_state.gs_40974 = s_841_1;
        // N s_841_3: jump b627
        return block_627(state, tracer, fn_state);
    }
    fn block_842<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_842_0: const #1s : i64
        let s_842_0: i64 = 1;
        // C s_842_1: cast zx s_842_0 -> i
        let s_842_1: i128 = (i128::try_from(s_842_0).unwrap());
        // S s_842_2: call __UNKNOWN_bits(s_842_1)
        let s_842_2: Bits = u__UNKNOWN_bits(state, tracer, s_842_1);
        // C s_842_3: const #18272u : u32
        let s_842_3: u32 = 18272;
        // D s_842_4: read-reg s_842_3:struct
        let s_842_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_842_3 as isize);
            tracer.read_register(s_842_3 as isize, value);
            value
        };
        // C s_842_5: const #18272u : u32
        let s_842_5: u32 = 18272;
        // N s_842_6: write-reg s_842_5 <= s_842_4
        let s_842_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_842_5 as isize, s_842_4);
            tracer.write_register(s_842_5 as isize, s_842_4);
        };
        // N s_842_7: jump b625
        return block_625(state, tracer, fn_state);
    }
    fn block_843<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_843_0: const #237u : u32
        let s_843_0: u32 = 237;
        // S s_843_1: call IsFeatureImplemented(s_843_0)
        let s_843_1: bool = IsFeatureImplemented(state, tracer, s_843_0);
        // S s_843_2: not s_843_1
        let s_843_2: bool = !s_843_1;
        // D s_843_3: write-var gs#40971 <= s_843_2
        fn_state.gs_40971 = s_843_2;
        // N s_843_4: jump b623
        return block_623(state, tracer, fn_state);
    }
    fn block_844<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_844_0: const #1s : i64
        let s_844_0: i64 = 1;
        // C s_844_1: cast zx s_844_0 -> i
        let s_844_1: i128 = (i128::try_from(s_844_0).unwrap());
        // S s_844_2: call __UNKNOWN_bits(s_844_1)
        let s_844_2: Bits = u__UNKNOWN_bits(state, tracer, s_844_1);
        // C s_844_3: const #18272u : u32
        let s_844_3: u32 = 18272;
        // D s_844_4: read-reg s_844_3:struct
        let s_844_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_844_3 as isize);
            tracer.read_register(s_844_3 as isize, value);
            value
        };
        // C s_844_5: const #18272u : u32
        let s_844_5: u32 = 18272;
        // N s_844_6: write-reg s_844_5 <= s_844_4
        let s_844_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_844_5 as isize, s_844_4);
            tracer.write_register(s_844_5 as isize, s_844_4);
        };
        // N s_844_7: jump b621
        return block_621(state, tracer, fn_state);
    }
    fn block_845<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_845_0: const #237u : u32
        let s_845_0: u32 = 237;
        // S s_845_1: call IsFeatureImplemented(s_845_0)
        let s_845_1: bool = IsFeatureImplemented(state, tracer, s_845_0);
        // D s_845_2: write-var gs#40970 <= s_845_1
        fn_state.gs_40970 = s_845_1;
        // N s_845_3: jump b619
        return block_619(state, tracer, fn_state);
    }
    fn block_846<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_846_0: const #1s : i64
        let s_846_0: i64 = 1;
        // C s_846_1: cast zx s_846_0 -> i
        let s_846_1: i128 = (i128::try_from(s_846_0).unwrap());
        // S s_846_2: call __UNKNOWN_bits(s_846_1)
        let s_846_2: Bits = u__UNKNOWN_bits(state, tracer, s_846_1);
        // C s_846_3: const #18272u : u32
        let s_846_3: u32 = 18272;
        // D s_846_4: read-reg s_846_3:struct
        let s_846_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_846_3 as isize);
            tracer.read_register(s_846_3 as isize, value);
            value
        };
        // C s_846_5: const #18272u : u32
        let s_846_5: u32 = 18272;
        // N s_846_6: write-reg s_846_5 <= s_846_4
        let s_846_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_846_5 as isize, s_846_4);
            tracer.write_register(s_846_5 as isize, s_846_4);
        };
        // N s_846_7: jump b617
        return block_617(state, tracer, fn_state);
    }
    fn block_847<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_847_0: const #237u : u32
        let s_847_0: u32 = 237;
        // S s_847_1: call IsFeatureImplemented(s_847_0)
        let s_847_1: bool = IsFeatureImplemented(state, tracer, s_847_0);
        // S s_847_2: not s_847_1
        let s_847_2: bool = !s_847_1;
        // D s_847_3: write-var gs#40966 <= s_847_2
        fn_state.gs_40966 = s_847_2;
        // N s_847_4: jump b615
        return block_615(state, tracer, fn_state);
    }
    fn block_848<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_848_0: const #1s : i64
        let s_848_0: i64 = 1;
        // C s_848_1: cast zx s_848_0 -> i
        let s_848_1: i128 = (i128::try_from(s_848_0).unwrap());
        // S s_848_2: call __UNKNOWN_bits(s_848_1)
        let s_848_2: Bits = u__UNKNOWN_bits(state, tracer, s_848_1);
        // C s_848_3: const #18272u : u32
        let s_848_3: u32 = 18272;
        // D s_848_4: read-reg s_848_3:struct
        let s_848_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_848_3 as isize);
            tracer.read_register(s_848_3 as isize, value);
            value
        };
        // C s_848_5: const #18272u : u32
        let s_848_5: u32 = 18272;
        // N s_848_6: write-reg s_848_5 <= s_848_4
        let s_848_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_848_5 as isize, s_848_4);
            tracer.write_register(s_848_5 as isize, s_848_4);
        };
        // N s_848_7: jump b613
        return block_613(state, tracer, fn_state);
    }
    fn block_849<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_849_0: const #237u : u32
        let s_849_0: u32 = 237;
        // S s_849_1: call IsFeatureImplemented(s_849_0)
        let s_849_1: bool = IsFeatureImplemented(state, tracer, s_849_0);
        // D s_849_2: write-var gs#40965 <= s_849_1
        fn_state.gs_40965 = s_849_1;
        // N s_849_3: jump b611
        return block_611(state, tracer, fn_state);
    }
    fn block_850<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_850_0: const #1s : i64
        let s_850_0: i64 = 1;
        // C s_850_1: cast zx s_850_0 -> i
        let s_850_1: i128 = (i128::try_from(s_850_0).unwrap());
        // S s_850_2: call __UNKNOWN_bits(s_850_1)
        let s_850_2: Bits = u__UNKNOWN_bits(state, tracer, s_850_1);
        // C s_850_3: const #18272u : u32
        let s_850_3: u32 = 18272;
        // D s_850_4: read-reg s_850_3:struct
        let s_850_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_850_3 as isize);
            tracer.read_register(s_850_3 as isize, value);
            value
        };
        // C s_850_5: const #18272u : u32
        let s_850_5: u32 = 18272;
        // N s_850_6: write-reg s_850_5 <= s_850_4
        let s_850_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_850_5 as isize, s_850_4);
            tracer.write_register(s_850_5 as isize, s_850_4);
        };
        // N s_850_7: jump b609
        return block_609(state, tracer, fn_state);
    }
    fn block_851<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_851_0: const #237u : u32
        let s_851_0: u32 = 237;
        // S s_851_1: call IsFeatureImplemented(s_851_0)
        let s_851_1: bool = IsFeatureImplemented(state, tracer, s_851_0);
        // S s_851_2: not s_851_1
        let s_851_2: bool = !s_851_1;
        // D s_851_3: write-var gs#40964 <= s_851_2
        fn_state.gs_40964 = s_851_2;
        // N s_851_4: jump b607
        return block_607(state, tracer, fn_state);
    }
    fn block_852<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_852_0: const #1s : i64
        let s_852_0: i64 = 1;
        // C s_852_1: cast zx s_852_0 -> i
        let s_852_1: i128 = (i128::try_from(s_852_0).unwrap());
        // S s_852_2: call __UNKNOWN_bits(s_852_1)
        let s_852_2: Bits = u__UNKNOWN_bits(state, tracer, s_852_1);
        // C s_852_3: const #18272u : u32
        let s_852_3: u32 = 18272;
        // D s_852_4: read-reg s_852_3:struct
        let s_852_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_852_3 as isize);
            tracer.read_register(s_852_3 as isize, value);
            value
        };
        // C s_852_5: const #18272u : u32
        let s_852_5: u32 = 18272;
        // N s_852_6: write-reg s_852_5 <= s_852_4
        let s_852_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_852_5 as isize, s_852_4);
            tracer.write_register(s_852_5 as isize, s_852_4);
        };
        // N s_852_7: jump b605
        return block_605(state, tracer, fn_state);
    }
    fn block_853<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_853_0: const #237u : u32
        let s_853_0: u32 = 237;
        // S s_853_1: call IsFeatureImplemented(s_853_0)
        let s_853_1: bool = IsFeatureImplemented(state, tracer, s_853_0);
        // D s_853_2: write-var gs#40963 <= s_853_1
        fn_state.gs_40963 = s_853_1;
        // N s_853_3: jump b603
        return block_603(state, tracer, fn_state);
    }
    fn block_854<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_854_0: const #101920u : u32
        let s_854_0: u32 = 101920;
        // D s_854_1: read-reg s_854_0:struct
        let s_854_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_854_0 as isize);
            tracer.read_register(s_854_0 as isize, value);
            value
        };
        // C s_854_2: const #101920u : u32
        let s_854_2: u32 = 101920;
        // N s_854_3: write-reg s_854_2 <= s_854_1
        let s_854_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_854_2 as isize, s_854_1);
            tracer.write_register(s_854_2 as isize, s_854_1);
        };
        // N s_854_4: jump b601
        return block_601(state, tracer, fn_state);
    }
    fn block_855<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_855_0: const #13440u : u32
        let s_855_0: u32 = 13440;
        // D s_855_1: read-reg s_855_0:struct
        let s_855_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_855_0 as isize);
            tracer.read_register(s_855_0 as isize, value);
            value
        };
        // C s_855_2: const #13440u : u32
        let s_855_2: u32 = 13440;
        // N s_855_3: write-reg s_855_2 <= s_855_1
        let s_855_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_855_2 as isize, s_855_1);
            tracer.write_register(s_855_2 as isize, s_855_1);
        };
        // N s_855_4: jump b599
        return block_599(state, tracer, fn_state);
    }
    fn block_856<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_856_0: const #22792u : u32
        let s_856_0: u32 = 22792;
        // D s_856_1: read-reg s_856_0:struct
        let s_856_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_856_0 as isize);
            tracer.read_register(s_856_0 as isize, value);
            value
        };
        // C s_856_2: const #22792u : u32
        let s_856_2: u32 = 22792;
        // N s_856_3: write-reg s_856_2 <= s_856_1
        let s_856_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_856_2 as isize, s_856_1);
            tracer.write_register(s_856_2 as isize, s_856_1);
        };
        // N s_856_4: jump b597
        return block_597(state, tracer, fn_state);
    }
    fn block_857<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_857_0: const #104808u : u32
        let s_857_0: u32 = 104808;
        // D s_857_1: read-reg s_857_0:struct
        let s_857_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_857_0 as isize);
            tracer.read_register(s_857_0 as isize, value);
            value
        };
        // C s_857_2: const #104808u : u32
        let s_857_2: u32 = 104808;
        // N s_857_3: write-reg s_857_2 <= s_857_1
        let s_857_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_857_2 as isize, s_857_1);
            tracer.write_register(s_857_2 as isize, s_857_1);
        };
        // N s_857_4: jump b595
        return block_595(state, tracer, fn_state);
    }
    fn block_858<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_858_0: const #90504u : u32
        let s_858_0: u32 = 90504;
        // D s_858_1: read-reg s_858_0:struct
        let s_858_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_858_0 as isize);
            tracer.read_register(s_858_0 as isize, value);
            value
        };
        // C s_858_2: const #90504u : u32
        let s_858_2: u32 = 90504;
        // N s_858_3: write-reg s_858_2 <= s_858_1
        let s_858_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_858_2 as isize, s_858_1);
            tracer.write_register(s_858_2 as isize, s_858_1);
        };
        // N s_858_4: jump b593
        return block_593(state, tracer, fn_state);
    }
    fn block_859<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_859_0: const #424u : u32
        let s_859_0: u32 = 424;
        // D s_859_1: read-reg s_859_0:u8
        let s_859_1: u8 = {
            let value = state.read_register::<u8>(s_859_0 as isize);
            tracer.read_register(s_859_0 as isize, value);
            value
        };
        // C s_859_2: const #2u : u8
        let s_859_2: u8 = 2;
        // D s_859_3: cmp-lt s_859_1 s_859_2
        let s_859_3: bool = ((s_859_1) < (s_859_2));
        // D s_859_4: not s_859_3
        let s_859_4: bool = !s_859_3;
        // D s_859_5: write-var gs#41672 <= s_859_4
        fn_state.gs_41672 = s_859_4;
        // N s_859_6: jump b591
        return block_591(state, tracer, fn_state);
    }
    fn block_860<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_860_0: const #1s : i64
        let s_860_0: i64 = 1;
        // C s_860_1: cast zx s_860_0 -> i
        let s_860_1: i128 = (i128::try_from(s_860_0).unwrap());
        // S s_860_2: call __UNKNOWN_bits(s_860_1)
        let s_860_2: Bits = u__UNKNOWN_bits(state, tracer, s_860_1);
        // C s_860_3: const #90504u : u32
        let s_860_3: u32 = 90504;
        // D s_860_4: read-reg s_860_3:struct
        let s_860_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_860_3 as isize);
            tracer.read_register(s_860_3 as isize, value);
            value
        };
        // C s_860_5: const #90504u : u32
        let s_860_5: u32 = 90504;
        // N s_860_6: write-reg s_860_5 <= s_860_4
        let s_860_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_860_5 as isize, s_860_4);
            tracer.write_register(s_860_5 as isize, s_860_4);
        };
        // N s_860_7: jump b593
        return block_593(state, tracer, fn_state);
    }
    fn block_861<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_861_0: const #90504u : u32
        let s_861_0: u32 = 90504;
        // D s_861_1: read-reg s_861_0:struct
        let s_861_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_861_0 as isize);
            tracer.read_register(s_861_0 as isize, value);
            value
        };
        // C s_861_2: const #90504u : u32
        let s_861_2: u32 = 90504;
        // N s_861_3: write-reg s_861_2 <= s_861_1
        let s_861_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_861_2 as isize, s_861_1);
            tracer.write_register(s_861_2 as isize, s_861_1);
        };
        // N s_861_4: jump b588
        return block_588(state, tracer, fn_state);
    }
    fn block_862<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_862_0: const #424u : u32
        let s_862_0: u32 = 424;
        // D s_862_1: read-reg s_862_0:u8
        let s_862_1: u8 = {
            let value = state.read_register::<u8>(s_862_0 as isize);
            tracer.read_register(s_862_0 as isize, value);
            value
        };
        // C s_862_2: const #2u : u8
        let s_862_2: u8 = 2;
        // D s_862_3: cmp-lt s_862_1 s_862_2
        let s_862_3: bool = ((s_862_1) < (s_862_2));
        // D s_862_4: not s_862_3
        let s_862_4: bool = !s_862_3;
        // D s_862_5: write-var gs#41681 <= s_862_4
        fn_state.gs_41681 = s_862_4;
        // N s_862_6: jump b586
        return block_586(state, tracer, fn_state);
    }
    fn block_863<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_863_0: const #1s : i64
        let s_863_0: i64 = 1;
        // C s_863_1: cast zx s_863_0 -> i
        let s_863_1: i128 = (i128::try_from(s_863_0).unwrap());
        // S s_863_2: call __UNKNOWN_bits(s_863_1)
        let s_863_2: Bits = u__UNKNOWN_bits(state, tracer, s_863_1);
        // C s_863_3: const #90504u : u32
        let s_863_3: u32 = 90504;
        // D s_863_4: read-reg s_863_3:struct
        let s_863_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_863_3 as isize);
            tracer.read_register(s_863_3 as isize, value);
            value
        };
        // C s_863_5: const #90504u : u32
        let s_863_5: u32 = 90504;
        // N s_863_6: write-reg s_863_5 <= s_863_4
        let s_863_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_863_5 as isize, s_863_4);
            tracer.write_register(s_863_5 as isize, s_863_4);
        };
        // N s_863_7: jump b588
        return block_588(state, tracer, fn_state);
    }
    fn block_864<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_864_0: const #17608u : u32
        let s_864_0: u32 = 17608;
        // D s_864_1: read-reg s_864_0:struct
        let s_864_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_864_0 as isize);
            tracer.read_register(s_864_0 as isize, value);
            value
        };
        // C s_864_2: const #17608u : u32
        let s_864_2: u32 = 17608;
        // N s_864_3: write-reg s_864_2 <= s_864_1
        let s_864_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_864_2 as isize, s_864_1);
            tracer.write_register(s_864_2 as isize, s_864_1);
        };
        // N s_864_4: jump b583
        return block_583(state, tracer, fn_state);
    }
    fn block_865<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_865_0: const #424u : u32
        let s_865_0: u32 = 424;
        // D s_865_1: read-reg s_865_0:u8
        let s_865_1: u8 = {
            let value = state.read_register::<u8>(s_865_0 as isize);
            tracer.read_register(s_865_0 as isize, value);
            value
        };
        // C s_865_2: const #2u : u8
        let s_865_2: u8 = 2;
        // D s_865_3: cmp-lt s_865_1 s_865_2
        let s_865_3: bool = ((s_865_1) < (s_865_2));
        // D s_865_4: not s_865_3
        let s_865_4: bool = !s_865_3;
        // D s_865_5: write-var gs#41700 <= s_865_4
        fn_state.gs_41700 = s_865_4;
        // N s_865_6: jump b581
        return block_581(state, tracer, fn_state);
    }
    fn block_866<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_866_0: const #1s : i64
        let s_866_0: i64 = 1;
        // C s_866_1: cast zx s_866_0 -> i
        let s_866_1: i128 = (i128::try_from(s_866_0).unwrap());
        // S s_866_2: call __UNKNOWN_bits(s_866_1)
        let s_866_2: Bits = u__UNKNOWN_bits(state, tracer, s_866_1);
        // C s_866_3: const #17608u : u32
        let s_866_3: u32 = 17608;
        // D s_866_4: read-reg s_866_3:struct
        let s_866_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_866_3 as isize);
            tracer.read_register(s_866_3 as isize, value);
            value
        };
        // C s_866_5: const #17608u : u32
        let s_866_5: u32 = 17608;
        // N s_866_6: write-reg s_866_5 <= s_866_4
        let s_866_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_866_5 as isize, s_866_4);
            tracer.write_register(s_866_5 as isize, s_866_4);
        };
        // N s_866_7: jump b583
        return block_583(state, tracer, fn_state);
    }
    fn block_867<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_867_0: const #21088u : u32
        let s_867_0: u32 = 21088;
        // D s_867_1: read-reg s_867_0:struct
        let s_867_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_867_0 as isize);
            tracer.read_register(s_867_0 as isize, value);
            value
        };
        // C s_867_2: const #21088u : u32
        let s_867_2: u32 = 21088;
        // N s_867_3: write-reg s_867_2 <= s_867_1
        let s_867_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_867_2 as isize, s_867_1);
            tracer.write_register(s_867_2 as isize, s_867_1);
        };
        // N s_867_4: jump b578
        return block_578(state, tracer, fn_state);
    }
    fn block_868<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_868_0: const #17360u : u32
        let s_868_0: u32 = 17360;
        // D s_868_1: read-reg s_868_0:struct
        let s_868_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_868_0 as isize);
            tracer.read_register(s_868_0 as isize, value);
            value
        };
        // C s_868_2: const #17360u : u32
        let s_868_2: u32 = 17360;
        // N s_868_3: write-reg s_868_2 <= s_868_1
        let s_868_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_868_2 as isize, s_868_1);
            tracer.write_register(s_868_2 as isize, s_868_1);
        };
        // N s_868_4: jump b576
        return block_576(state, tracer, fn_state);
    }
    fn block_869<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_869_0: const #424u : u32
        let s_869_0: u32 = 424;
        // D s_869_1: read-reg s_869_0:u8
        let s_869_1: u8 = {
            let value = state.read_register::<u8>(s_869_0 as isize);
            tracer.read_register(s_869_0 as isize, value);
            value
        };
        // C s_869_2: const #2u : u8
        let s_869_2: u8 = 2;
        // D s_869_3: cmp-lt s_869_1 s_869_2
        let s_869_3: bool = ((s_869_1) < (s_869_2));
        // D s_869_4: not s_869_3
        let s_869_4: bool = !s_869_3;
        // D s_869_5: write-var gs#40530 <= s_869_4
        fn_state.gs_40530 = s_869_4;
        // N s_869_6: jump b574
        return block_574(state, tracer, fn_state);
    }
    fn block_870<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_870_0: const #17360u : u32
        let s_870_0: u32 = 17360;
        // D s_870_1: read-reg s_870_0:struct
        let s_870_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_870_0 as isize);
            tracer.read_register(s_870_0 as isize, value);
            value
        };
        // C s_870_2: const #17360u : u32
        let s_870_2: u32 = 17360;
        // N s_870_3: write-reg s_870_2 <= s_870_1
        let s_870_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_870_2 as isize, s_870_1);
            tracer.write_register(s_870_2 as isize, s_870_1);
        };
        // N s_870_4: jump b572
        return block_572(state, tracer, fn_state);
    }
    fn block_871<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_871_0: const #424u : u32
        let s_871_0: u32 = 424;
        // D s_871_1: read-reg s_871_0:u8
        let s_871_1: u8 = {
            let value = state.read_register::<u8>(s_871_0 as isize);
            tracer.read_register(s_871_0 as isize, value);
            value
        };
        // C s_871_2: const #2u : u8
        let s_871_2: u8 = 2;
        // D s_871_3: cmp-lt s_871_1 s_871_2
        let s_871_3: bool = ((s_871_1) < (s_871_2));
        // D s_871_4: not s_871_3
        let s_871_4: bool = !s_871_3;
        // D s_871_5: write-var gs#40523 <= s_871_4
        fn_state.gs_40523 = s_871_4;
        // N s_871_6: jump b570
        return block_570(state, tracer, fn_state);
    }
    fn block_872<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_872_0: const #16376u : u32
        let s_872_0: u32 = 16376;
        // D s_872_1: read-reg s_872_0:struct
        let s_872_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_872_0 as isize);
            tracer.read_register(s_872_0 as isize, value);
            value
        };
        // C s_872_2: const #16376u : u32
        let s_872_2: u32 = 16376;
        // N s_872_3: write-reg s_872_2 <= s_872_1
        let s_872_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_872_2 as isize, s_872_1);
            tracer.write_register(s_872_2 as isize, s_872_1);
        };
        // N s_872_4: jump b568
        return block_568(state, tracer, fn_state);
    }
    fn block_873<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_873_0: const #424u : u32
        let s_873_0: u32 = 424;
        // D s_873_1: read-reg s_873_0:u8
        let s_873_1: u8 = {
            let value = state.read_register::<u8>(s_873_0 as isize);
            tracer.read_register(s_873_0 as isize, value);
            value
        };
        // C s_873_2: const #2u : u8
        let s_873_2: u8 = 2;
        // D s_873_3: cmp-lt s_873_1 s_873_2
        let s_873_3: bool = ((s_873_1) < (s_873_2));
        // D s_873_4: not s_873_3
        let s_873_4: bool = !s_873_3;
        // D s_873_5: write-var gs#40331 <= s_873_4
        fn_state.gs_40331 = s_873_4;
        // N s_873_6: jump b566
        return block_566(state, tracer, fn_state);
    }
    fn block_874<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_874_0: const #16376u : u32
        let s_874_0: u32 = 16376;
        // D s_874_1: read-reg s_874_0:struct
        let s_874_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_874_0 as isize);
            tracer.read_register(s_874_0 as isize, value);
            value
        };
        // C s_874_2: const #16376u : u32
        let s_874_2: u32 = 16376;
        // N s_874_3: write-reg s_874_2 <= s_874_1
        let s_874_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_874_2 as isize, s_874_1);
            tracer.write_register(s_874_2 as isize, s_874_1);
        };
        // N s_874_4: jump b564
        return block_564(state, tracer, fn_state);
    }
    fn block_875<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_875_0: const #424u : u32
        let s_875_0: u32 = 424;
        // D s_875_1: read-reg s_875_0:u8
        let s_875_1: u8 = {
            let value = state.read_register::<u8>(s_875_0 as isize);
            tracer.read_register(s_875_0 as isize, value);
            value
        };
        // C s_875_2: const #2u : u8
        let s_875_2: u8 = 2;
        // D s_875_3: cmp-lt s_875_1 s_875_2
        let s_875_3: bool = ((s_875_1) < (s_875_2));
        // D s_875_4: not s_875_3
        let s_875_4: bool = !s_875_3;
        // D s_875_5: write-var gs#40328 <= s_875_4
        fn_state.gs_40328 = s_875_4;
        // N s_875_6: jump b562
        return block_562(state, tracer, fn_state);
    }
    fn block_876<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_876_0: const #22528u : u32
        let s_876_0: u32 = 22528;
        // D s_876_1: read-reg s_876_0:struct
        let s_876_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_876_0 as isize);
            tracer.read_register(s_876_0 as isize, value);
            value
        };
        // C s_876_2: const #22528u : u32
        let s_876_2: u32 = 22528;
        // N s_876_3: write-reg s_876_2 <= s_876_1
        let s_876_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_876_2 as isize, s_876_1);
            tracer.write_register(s_876_2 as isize, s_876_1);
        };
        // N s_876_4: jump b560
        return block_560(state, tracer, fn_state);
    }
    fn block_877<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_877_0: const #424u : u32
        let s_877_0: u32 = 424;
        // D s_877_1: read-reg s_877_0:u8
        let s_877_1: u8 = {
            let value = state.read_register::<u8>(s_877_0 as isize);
            tracer.read_register(s_877_0 as isize, value);
            value
        };
        // C s_877_2: const #2u : u8
        let s_877_2: u8 = 2;
        // D s_877_3: cmp-lt s_877_1 s_877_2
        let s_877_3: bool = ((s_877_1) < (s_877_2));
        // D s_877_4: not s_877_3
        let s_877_4: bool = !s_877_3;
        // D s_877_5: write-var gs#40318 <= s_877_4
        fn_state.gs_40318 = s_877_4;
        // N s_877_6: jump b558
        return block_558(state, tracer, fn_state);
    }
    fn block_878<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_878_0: const #22528u : u32
        let s_878_0: u32 = 22528;
        // D s_878_1: read-reg s_878_0:struct
        let s_878_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_878_0 as isize);
            tracer.read_register(s_878_0 as isize, value);
            value
        };
        // C s_878_2: const #22528u : u32
        let s_878_2: u32 = 22528;
        // N s_878_3: write-reg s_878_2 <= s_878_1
        let s_878_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_878_2 as isize, s_878_1);
            tracer.write_register(s_878_2 as isize, s_878_1);
        };
        // N s_878_4: jump b556
        return block_556(state, tracer, fn_state);
    }
    fn block_879<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_879_0: const #424u : u32
        let s_879_0: u32 = 424;
        // D s_879_1: read-reg s_879_0:u8
        let s_879_1: u8 = {
            let value = state.read_register::<u8>(s_879_0 as isize);
            tracer.read_register(s_879_0 as isize, value);
            value
        };
        // C s_879_2: const #2u : u8
        let s_879_2: u8 = 2;
        // D s_879_3: cmp-lt s_879_1 s_879_2
        let s_879_3: bool = ((s_879_1) < (s_879_2));
        // D s_879_4: not s_879_3
        let s_879_4: bool = !s_879_3;
        // D s_879_5: write-var gs#40317 <= s_879_4
        fn_state.gs_40317 = s_879_4;
        // N s_879_6: jump b554
        return block_554(state, tracer, fn_state);
    }
    fn block_880<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_880_0: const #22528u : u32
        let s_880_0: u32 = 22528;
        // D s_880_1: read-reg s_880_0:struct
        let s_880_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_880_0 as isize);
            tracer.read_register(s_880_0 as isize, value);
            value
        };
        // C s_880_2: const #22528u : u32
        let s_880_2: u32 = 22528;
        // N s_880_3: write-reg s_880_2 <= s_880_1
        let s_880_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_880_2 as isize, s_880_1);
            tracer.write_register(s_880_2 as isize, s_880_1);
        };
        // N s_880_4: jump b552
        return block_552(state, tracer, fn_state);
    }
    fn block_881<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_881_0: const #424u : u32
        let s_881_0: u32 = 424;
        // D s_881_1: read-reg s_881_0:u8
        let s_881_1: u8 = {
            let value = state.read_register::<u8>(s_881_0 as isize);
            tracer.read_register(s_881_0 as isize, value);
            value
        };
        // C s_881_2: const #2u : u8
        let s_881_2: u8 = 2;
        // D s_881_3: cmp-lt s_881_1 s_881_2
        let s_881_3: bool = ((s_881_1) < (s_881_2));
        // D s_881_4: not s_881_3
        let s_881_4: bool = !s_881_3;
        // D s_881_5: write-var gs#40316 <= s_881_4
        fn_state.gs_40316 = s_881_4;
        // N s_881_6: jump b550
        return block_550(state, tracer, fn_state);
    }
    fn block_882<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_882_0: const #22528u : u32
        let s_882_0: u32 = 22528;
        // D s_882_1: read-reg s_882_0:struct
        let s_882_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_882_0 as isize);
            tracer.read_register(s_882_0 as isize, value);
            value
        };
        // C s_882_2: const #22528u : u32
        let s_882_2: u32 = 22528;
        // N s_882_3: write-reg s_882_2 <= s_882_1
        let s_882_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_882_2 as isize, s_882_1);
            tracer.write_register(s_882_2 as isize, s_882_1);
        };
        // N s_882_4: jump b548
        return block_548(state, tracer, fn_state);
    }
    fn block_883<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_883_0: const #424u : u32
        let s_883_0: u32 = 424;
        // D s_883_1: read-reg s_883_0:u8
        let s_883_1: u8 = {
            let value = state.read_register::<u8>(s_883_0 as isize);
            tracer.read_register(s_883_0 as isize, value);
            value
        };
        // C s_883_2: const #2u : u8
        let s_883_2: u8 = 2;
        // D s_883_3: cmp-lt s_883_1 s_883_2
        let s_883_3: bool = ((s_883_1) < (s_883_2));
        // D s_883_4: not s_883_3
        let s_883_4: bool = !s_883_3;
        // D s_883_5: write-var gs#40315 <= s_883_4
        fn_state.gs_40315 = s_883_4;
        // N s_883_6: jump b546
        return block_546(state, tracer, fn_state);
    }
    fn block_884<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_884_0: const #22528u : u32
        let s_884_0: u32 = 22528;
        // D s_884_1: read-reg s_884_0:struct
        let s_884_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_884_0 as isize);
            tracer.read_register(s_884_0 as isize, value);
            value
        };
        // C s_884_2: const #22528u : u32
        let s_884_2: u32 = 22528;
        // N s_884_3: write-reg s_884_2 <= s_884_1
        let s_884_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_884_2 as isize, s_884_1);
            tracer.write_register(s_884_2 as isize, s_884_1);
        };
        // N s_884_4: jump b544
        return block_544(state, tracer, fn_state);
    }
    fn block_885<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_885_0: const #424u : u32
        let s_885_0: u32 = 424;
        // D s_885_1: read-reg s_885_0:u8
        let s_885_1: u8 = {
            let value = state.read_register::<u8>(s_885_0 as isize);
            tracer.read_register(s_885_0 as isize, value);
            value
        };
        // C s_885_2: const #2u : u8
        let s_885_2: u8 = 2;
        // D s_885_3: cmp-lt s_885_1 s_885_2
        let s_885_3: bool = ((s_885_1) < (s_885_2));
        // D s_885_4: not s_885_3
        let s_885_4: bool = !s_885_3;
        // D s_885_5: write-var gs#40314 <= s_885_4
        fn_state.gs_40314 = s_885_4;
        // N s_885_6: jump b542
        return block_542(state, tracer, fn_state);
    }
    fn block_886<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_886_0: const #22528u : u32
        let s_886_0: u32 = 22528;
        // D s_886_1: read-reg s_886_0:struct
        let s_886_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_886_0 as isize);
            tracer.read_register(s_886_0 as isize, value);
            value
        };
        // C s_886_2: const #22528u : u32
        let s_886_2: u32 = 22528;
        // N s_886_3: write-reg s_886_2 <= s_886_1
        let s_886_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_886_2 as isize, s_886_1);
            tracer.write_register(s_886_2 as isize, s_886_1);
        };
        // N s_886_4: jump b540
        return block_540(state, tracer, fn_state);
    }
    fn block_887<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_887_0: const #424u : u32
        let s_887_0: u32 = 424;
        // D s_887_1: read-reg s_887_0:u8
        let s_887_1: u8 = {
            let value = state.read_register::<u8>(s_887_0 as isize);
            tracer.read_register(s_887_0 as isize, value);
            value
        };
        // C s_887_2: const #2u : u8
        let s_887_2: u8 = 2;
        // D s_887_3: cmp-lt s_887_1 s_887_2
        let s_887_3: bool = ((s_887_1) < (s_887_2));
        // D s_887_4: not s_887_3
        let s_887_4: bool = !s_887_3;
        // D s_887_5: write-var gs#40313 <= s_887_4
        fn_state.gs_40313 = s_887_4;
        // N s_887_6: jump b538
        return block_538(state, tracer, fn_state);
    }
    fn block_888<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_888_0: const #22528u : u32
        let s_888_0: u32 = 22528;
        // D s_888_1: read-reg s_888_0:struct
        let s_888_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_888_0 as isize);
            tracer.read_register(s_888_0 as isize, value);
            value
        };
        // C s_888_2: const #22528u : u32
        let s_888_2: u32 = 22528;
        // N s_888_3: write-reg s_888_2 <= s_888_1
        let s_888_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_888_2 as isize, s_888_1);
            tracer.write_register(s_888_2 as isize, s_888_1);
        };
        // N s_888_4: jump b536
        return block_536(state, tracer, fn_state);
    }
    fn block_889<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_889_0: const #424u : u32
        let s_889_0: u32 = 424;
        // D s_889_1: read-reg s_889_0:u8
        let s_889_1: u8 = {
            let value = state.read_register::<u8>(s_889_0 as isize);
            tracer.read_register(s_889_0 as isize, value);
            value
        };
        // C s_889_2: const #2u : u8
        let s_889_2: u8 = 2;
        // D s_889_3: cmp-lt s_889_1 s_889_2
        let s_889_3: bool = ((s_889_1) < (s_889_2));
        // D s_889_4: not s_889_3
        let s_889_4: bool = !s_889_3;
        // D s_889_5: write-var gs#40312 <= s_889_4
        fn_state.gs_40312 = s_889_4;
        // N s_889_6: jump b534
        return block_534(state, tracer, fn_state);
    }
    fn block_890<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_890_0: const #22528u : u32
        let s_890_0: u32 = 22528;
        // D s_890_1: read-reg s_890_0:struct
        let s_890_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_890_0 as isize);
            tracer.read_register(s_890_0 as isize, value);
            value
        };
        // C s_890_2: const #22528u : u32
        let s_890_2: u32 = 22528;
        // N s_890_3: write-reg s_890_2 <= s_890_1
        let s_890_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_890_2 as isize, s_890_1);
            tracer.write_register(s_890_2 as isize, s_890_1);
        };
        // N s_890_4: jump b532
        return block_532(state, tracer, fn_state);
    }
    fn block_891<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_891_0: const #424u : u32
        let s_891_0: u32 = 424;
        // D s_891_1: read-reg s_891_0:u8
        let s_891_1: u8 = {
            let value = state.read_register::<u8>(s_891_0 as isize);
            tracer.read_register(s_891_0 as isize, value);
            value
        };
        // C s_891_2: const #2u : u8
        let s_891_2: u8 = 2;
        // D s_891_3: cmp-lt s_891_1 s_891_2
        let s_891_3: bool = ((s_891_1) < (s_891_2));
        // D s_891_4: not s_891_3
        let s_891_4: bool = !s_891_3;
        // D s_891_5: write-var gs#40311 <= s_891_4
        fn_state.gs_40311 = s_891_4;
        // N s_891_6: jump b530
        return block_530(state, tracer, fn_state);
    }
    fn block_892<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_892_0: const #22528u : u32
        let s_892_0: u32 = 22528;
        // D s_892_1: read-reg s_892_0:struct
        let s_892_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_892_0 as isize);
            tracer.read_register(s_892_0 as isize, value);
            value
        };
        // C s_892_2: const #22528u : u32
        let s_892_2: u32 = 22528;
        // N s_892_3: write-reg s_892_2 <= s_892_1
        let s_892_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_892_2 as isize, s_892_1);
            tracer.write_register(s_892_2 as isize, s_892_1);
        };
        // N s_892_4: jump b528
        return block_528(state, tracer, fn_state);
    }
    fn block_893<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_893_0: const #424u : u32
        let s_893_0: u32 = 424;
        // D s_893_1: read-reg s_893_0:u8
        let s_893_1: u8 = {
            let value = state.read_register::<u8>(s_893_0 as isize);
            tracer.read_register(s_893_0 as isize, value);
            value
        };
        // C s_893_2: const #2u : u8
        let s_893_2: u8 = 2;
        // D s_893_3: cmp-lt s_893_1 s_893_2
        let s_893_3: bool = ((s_893_1) < (s_893_2));
        // D s_893_4: not s_893_3
        let s_893_4: bool = !s_893_3;
        // D s_893_5: write-var gs#40310 <= s_893_4
        fn_state.gs_40310 = s_893_4;
        // N s_893_6: jump b526
        return block_526(state, tracer, fn_state);
    }
    fn block_894<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_894_0: const #22528u : u32
        let s_894_0: u32 = 22528;
        // D s_894_1: read-reg s_894_0:struct
        let s_894_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_894_0 as isize);
            tracer.read_register(s_894_0 as isize, value);
            value
        };
        // C s_894_2: const #22528u : u32
        let s_894_2: u32 = 22528;
        // N s_894_3: write-reg s_894_2 <= s_894_1
        let s_894_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_894_2 as isize, s_894_1);
            tracer.write_register(s_894_2 as isize, s_894_1);
        };
        // N s_894_4: jump b524
        return block_524(state, tracer, fn_state);
    }
    fn block_895<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_895_0: const #424u : u32
        let s_895_0: u32 = 424;
        // D s_895_1: read-reg s_895_0:u8
        let s_895_1: u8 = {
            let value = state.read_register::<u8>(s_895_0 as isize);
            tracer.read_register(s_895_0 as isize, value);
            value
        };
        // C s_895_2: const #2u : u8
        let s_895_2: u8 = 2;
        // D s_895_3: cmp-lt s_895_1 s_895_2
        let s_895_3: bool = ((s_895_1) < (s_895_2));
        // D s_895_4: not s_895_3
        let s_895_4: bool = !s_895_3;
        // D s_895_5: write-var gs#40309 <= s_895_4
        fn_state.gs_40309 = s_895_4;
        // N s_895_6: jump b522
        return block_522(state, tracer, fn_state);
    }
    fn block_896<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_896_0: const #22528u : u32
        let s_896_0: u32 = 22528;
        // D s_896_1: read-reg s_896_0:struct
        let s_896_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_896_0 as isize);
            tracer.read_register(s_896_0 as isize, value);
            value
        };
        // C s_896_2: const #22528u : u32
        let s_896_2: u32 = 22528;
        // N s_896_3: write-reg s_896_2 <= s_896_1
        let s_896_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_896_2 as isize, s_896_1);
            tracer.write_register(s_896_2 as isize, s_896_1);
        };
        // N s_896_4: jump b520
        return block_520(state, tracer, fn_state);
    }
    fn block_897<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_897_0: const #424u : u32
        let s_897_0: u32 = 424;
        // D s_897_1: read-reg s_897_0:u8
        let s_897_1: u8 = {
            let value = state.read_register::<u8>(s_897_0 as isize);
            tracer.read_register(s_897_0 as isize, value);
            value
        };
        // C s_897_2: const #2u : u8
        let s_897_2: u8 = 2;
        // D s_897_3: cmp-lt s_897_1 s_897_2
        let s_897_3: bool = ((s_897_1) < (s_897_2));
        // D s_897_4: not s_897_3
        let s_897_4: bool = !s_897_3;
        // D s_897_5: write-var gs#40308 <= s_897_4
        fn_state.gs_40308 = s_897_4;
        // N s_897_6: jump b518
        return block_518(state, tracer, fn_state);
    }
    fn block_898<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_898_0: const #22528u : u32
        let s_898_0: u32 = 22528;
        // D s_898_1: read-reg s_898_0:struct
        let s_898_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_898_0 as isize);
            tracer.read_register(s_898_0 as isize, value);
            value
        };
        // C s_898_2: const #22528u : u32
        let s_898_2: u32 = 22528;
        // N s_898_3: write-reg s_898_2 <= s_898_1
        let s_898_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_898_2 as isize, s_898_1);
            tracer.write_register(s_898_2 as isize, s_898_1);
        };
        // N s_898_4: jump b516
        return block_516(state, tracer, fn_state);
    }
    fn block_899<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_899_0: const #424u : u32
        let s_899_0: u32 = 424;
        // D s_899_1: read-reg s_899_0:u8
        let s_899_1: u8 = {
            let value = state.read_register::<u8>(s_899_0 as isize);
            tracer.read_register(s_899_0 as isize, value);
            value
        };
        // C s_899_2: const #2u : u8
        let s_899_2: u8 = 2;
        // D s_899_3: cmp-lt s_899_1 s_899_2
        let s_899_3: bool = ((s_899_1) < (s_899_2));
        // D s_899_4: not s_899_3
        let s_899_4: bool = !s_899_3;
        // D s_899_5: write-var gs#40307 <= s_899_4
        fn_state.gs_40307 = s_899_4;
        // N s_899_6: jump b514
        return block_514(state, tracer, fn_state);
    }
    fn block_900<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_900_0: const #22528u : u32
        let s_900_0: u32 = 22528;
        // D s_900_1: read-reg s_900_0:struct
        let s_900_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_900_0 as isize);
            tracer.read_register(s_900_0 as isize, value);
            value
        };
        // C s_900_2: const #22528u : u32
        let s_900_2: u32 = 22528;
        // N s_900_3: write-reg s_900_2 <= s_900_1
        let s_900_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_900_2 as isize, s_900_1);
            tracer.write_register(s_900_2 as isize, s_900_1);
        };
        // N s_900_4: jump b512
        return block_512(state, tracer, fn_state);
    }
    fn block_901<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_901_0: const #424u : u32
        let s_901_0: u32 = 424;
        // D s_901_1: read-reg s_901_0:u8
        let s_901_1: u8 = {
            let value = state.read_register::<u8>(s_901_0 as isize);
            tracer.read_register(s_901_0 as isize, value);
            value
        };
        // C s_901_2: const #2u : u8
        let s_901_2: u8 = 2;
        // D s_901_3: cmp-lt s_901_1 s_901_2
        let s_901_3: bool = ((s_901_1) < (s_901_2));
        // D s_901_4: not s_901_3
        let s_901_4: bool = !s_901_3;
        // D s_901_5: write-var gs#40303 <= s_901_4
        fn_state.gs_40303 = s_901_4;
        // N s_901_6: jump b510
        return block_510(state, tracer, fn_state);
    }
    fn block_902<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_902_0: const #22528u : u32
        let s_902_0: u32 = 22528;
        // D s_902_1: read-reg s_902_0:struct
        let s_902_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_902_0 as isize);
            tracer.read_register(s_902_0 as isize, value);
            value
        };
        // C s_902_2: const #22528u : u32
        let s_902_2: u32 = 22528;
        // N s_902_3: write-reg s_902_2 <= s_902_1
        let s_902_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_902_2 as isize, s_902_1);
            tracer.write_register(s_902_2 as isize, s_902_1);
        };
        // N s_902_4: jump b508
        return block_508(state, tracer, fn_state);
    }
    fn block_903<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_903_0: const #424u : u32
        let s_903_0: u32 = 424;
        // D s_903_1: read-reg s_903_0:u8
        let s_903_1: u8 = {
            let value = state.read_register::<u8>(s_903_0 as isize);
            tracer.read_register(s_903_0 as isize, value);
            value
        };
        // C s_903_2: const #2u : u8
        let s_903_2: u8 = 2;
        // D s_903_3: cmp-lt s_903_1 s_903_2
        let s_903_3: bool = ((s_903_1) < (s_903_2));
        // D s_903_4: not s_903_3
        let s_903_4: bool = !s_903_3;
        // D s_903_5: write-var gs#40302 <= s_903_4
        fn_state.gs_40302 = s_903_4;
        // N s_903_6: jump b506
        return block_506(state, tracer, fn_state);
    }
    fn block_904<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_904_0: const #22528u : u32
        let s_904_0: u32 = 22528;
        // D s_904_1: read-reg s_904_0:struct
        let s_904_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_904_0 as isize);
            tracer.read_register(s_904_0 as isize, value);
            value
        };
        // C s_904_2: const #22528u : u32
        let s_904_2: u32 = 22528;
        // N s_904_3: write-reg s_904_2 <= s_904_1
        let s_904_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_904_2 as isize, s_904_1);
            tracer.write_register(s_904_2 as isize, s_904_1);
        };
        // N s_904_4: jump b504
        return block_504(state, tracer, fn_state);
    }
    fn block_905<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_905_0: const #424u : u32
        let s_905_0: u32 = 424;
        // D s_905_1: read-reg s_905_0:u8
        let s_905_1: u8 = {
            let value = state.read_register::<u8>(s_905_0 as isize);
            tracer.read_register(s_905_0 as isize, value);
            value
        };
        // C s_905_2: const #2u : u8
        let s_905_2: u8 = 2;
        // D s_905_3: cmp-lt s_905_1 s_905_2
        let s_905_3: bool = ((s_905_1) < (s_905_2));
        // D s_905_4: not s_905_3
        let s_905_4: bool = !s_905_3;
        // D s_905_5: write-var gs#40301 <= s_905_4
        fn_state.gs_40301 = s_905_4;
        // N s_905_6: jump b502
        return block_502(state, tracer, fn_state);
    }
    fn block_906<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_906_0: const #22528u : u32
        let s_906_0: u32 = 22528;
        // D s_906_1: read-reg s_906_0:struct
        let s_906_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_906_0 as isize);
            tracer.read_register(s_906_0 as isize, value);
            value
        };
        // C s_906_2: const #22528u : u32
        let s_906_2: u32 = 22528;
        // N s_906_3: write-reg s_906_2 <= s_906_1
        let s_906_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_906_2 as isize, s_906_1);
            tracer.write_register(s_906_2 as isize, s_906_1);
        };
        // N s_906_4: jump b500
        return block_500(state, tracer, fn_state);
    }
    fn block_907<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_907_0: const #424u : u32
        let s_907_0: u32 = 424;
        // D s_907_1: read-reg s_907_0:u8
        let s_907_1: u8 = {
            let value = state.read_register::<u8>(s_907_0 as isize);
            tracer.read_register(s_907_0 as isize, value);
            value
        };
        // C s_907_2: const #2u : u8
        let s_907_2: u8 = 2;
        // D s_907_3: cmp-lt s_907_1 s_907_2
        let s_907_3: bool = ((s_907_1) < (s_907_2));
        // D s_907_4: not s_907_3
        let s_907_4: bool = !s_907_3;
        // D s_907_5: write-var gs#40300 <= s_907_4
        fn_state.gs_40300 = s_907_4;
        // N s_907_6: jump b498
        return block_498(state, tracer, fn_state);
    }
    fn block_908<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_908_0: const #22528u : u32
        let s_908_0: u32 = 22528;
        // D s_908_1: read-reg s_908_0:struct
        let s_908_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_908_0 as isize);
            tracer.read_register(s_908_0 as isize, value);
            value
        };
        // C s_908_2: const #22528u : u32
        let s_908_2: u32 = 22528;
        // N s_908_3: write-reg s_908_2 <= s_908_1
        let s_908_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_908_2 as isize, s_908_1);
            tracer.write_register(s_908_2 as isize, s_908_1);
        };
        // N s_908_4: jump b496
        return block_496(state, tracer, fn_state);
    }
    fn block_909<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_909_0: const #424u : u32
        let s_909_0: u32 = 424;
        // D s_909_1: read-reg s_909_0:u8
        let s_909_1: u8 = {
            let value = state.read_register::<u8>(s_909_0 as isize);
            tracer.read_register(s_909_0 as isize, value);
            value
        };
        // C s_909_2: const #2u : u8
        let s_909_2: u8 = 2;
        // D s_909_3: cmp-lt s_909_1 s_909_2
        let s_909_3: bool = ((s_909_1) < (s_909_2));
        // D s_909_4: not s_909_3
        let s_909_4: bool = !s_909_3;
        // D s_909_5: write-var gs#40299 <= s_909_4
        fn_state.gs_40299 = s_909_4;
        // N s_909_6: jump b494
        return block_494(state, tracer, fn_state);
    }
    fn block_910<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_910_0: const #22528u : u32
        let s_910_0: u32 = 22528;
        // D s_910_1: read-reg s_910_0:struct
        let s_910_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_910_0 as isize);
            tracer.read_register(s_910_0 as isize, value);
            value
        };
        // C s_910_2: const #22528u : u32
        let s_910_2: u32 = 22528;
        // N s_910_3: write-reg s_910_2 <= s_910_1
        let s_910_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_910_2 as isize, s_910_1);
            tracer.write_register(s_910_2 as isize, s_910_1);
        };
        // N s_910_4: jump b492
        return block_492(state, tracer, fn_state);
    }
    fn block_911<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_911_0: const #424u : u32
        let s_911_0: u32 = 424;
        // D s_911_1: read-reg s_911_0:u8
        let s_911_1: u8 = {
            let value = state.read_register::<u8>(s_911_0 as isize);
            tracer.read_register(s_911_0 as isize, value);
            value
        };
        // C s_911_2: const #2u : u8
        let s_911_2: u8 = 2;
        // D s_911_3: cmp-lt s_911_1 s_911_2
        let s_911_3: bool = ((s_911_1) < (s_911_2));
        // D s_911_4: not s_911_3
        let s_911_4: bool = !s_911_3;
        // D s_911_5: write-var gs#40298 <= s_911_4
        fn_state.gs_40298 = s_911_4;
        // N s_911_6: jump b490
        return block_490(state, tracer, fn_state);
    }
    fn block_912<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_912_0: const #22528u : u32
        let s_912_0: u32 = 22528;
        // D s_912_1: read-reg s_912_0:struct
        let s_912_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_912_0 as isize);
            tracer.read_register(s_912_0 as isize, value);
            value
        };
        // C s_912_2: const #22528u : u32
        let s_912_2: u32 = 22528;
        // N s_912_3: write-reg s_912_2 <= s_912_1
        let s_912_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_912_2 as isize, s_912_1);
            tracer.write_register(s_912_2 as isize, s_912_1);
        };
        // N s_912_4: jump b488
        return block_488(state, tracer, fn_state);
    }
    fn block_913<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_913_0: const #424u : u32
        let s_913_0: u32 = 424;
        // D s_913_1: read-reg s_913_0:u8
        let s_913_1: u8 = {
            let value = state.read_register::<u8>(s_913_0 as isize);
            tracer.read_register(s_913_0 as isize, value);
            value
        };
        // C s_913_2: const #2u : u8
        let s_913_2: u8 = 2;
        // D s_913_3: cmp-lt s_913_1 s_913_2
        let s_913_3: bool = ((s_913_1) < (s_913_2));
        // D s_913_4: not s_913_3
        let s_913_4: bool = !s_913_3;
        // D s_913_5: write-var gs#40297 <= s_913_4
        fn_state.gs_40297 = s_913_4;
        // N s_913_6: jump b486
        return block_486(state, tracer, fn_state);
    }
    fn block_914<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_914_0: const #16592u : u32
        let s_914_0: u32 = 16592;
        // D s_914_1: read-reg s_914_0:struct
        let s_914_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_914_0 as isize);
            tracer.read_register(s_914_0 as isize, value);
            value
        };
        // C s_914_2: const #16592u : u32
        let s_914_2: u32 = 16592;
        // N s_914_3: write-reg s_914_2 <= s_914_1
        let s_914_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_914_2 as isize, s_914_1);
            tracer.write_register(s_914_2 as isize, s_914_1);
        };
        // N s_914_4: jump b484
        return block_484(state, tracer, fn_state);
    }
    fn block_915<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_915_0: const #424u : u32
        let s_915_0: u32 = 424;
        // D s_915_1: read-reg s_915_0:u8
        let s_915_1: u8 = {
            let value = state.read_register::<u8>(s_915_0 as isize);
            tracer.read_register(s_915_0 as isize, value);
            value
        };
        // C s_915_2: const #2u : u8
        let s_915_2: u8 = 2;
        // D s_915_3: cmp-lt s_915_1 s_915_2
        let s_915_3: bool = ((s_915_1) < (s_915_2));
        // D s_915_4: not s_915_3
        let s_915_4: bool = !s_915_3;
        // D s_915_5: write-var gs#40131 <= s_915_4
        fn_state.gs_40131 = s_915_4;
        // N s_915_6: jump b482
        return block_482(state, tracer, fn_state);
    }
    fn block_916<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_916_0: const #16592u : u32
        let s_916_0: u32 = 16592;
        // D s_916_1: read-reg s_916_0:struct
        let s_916_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_916_0 as isize);
            tracer.read_register(s_916_0 as isize, value);
            value
        };
        // C s_916_2: const #16592u : u32
        let s_916_2: u32 = 16592;
        // N s_916_3: write-reg s_916_2 <= s_916_1
        let s_916_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_916_2 as isize, s_916_1);
            tracer.write_register(s_916_2 as isize, s_916_1);
        };
        // N s_916_4: jump b480
        return block_480(state, tracer, fn_state);
    }
    fn block_917<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_917_0: const #424u : u32
        let s_917_0: u32 = 424;
        // D s_917_1: read-reg s_917_0:u8
        let s_917_1: u8 = {
            let value = state.read_register::<u8>(s_917_0 as isize);
            tracer.read_register(s_917_0 as isize, value);
            value
        };
        // C s_917_2: const #2u : u8
        let s_917_2: u8 = 2;
        // D s_917_3: cmp-lt s_917_1 s_917_2
        let s_917_3: bool = ((s_917_1) < (s_917_2));
        // D s_917_4: not s_917_3
        let s_917_4: bool = !s_917_3;
        // D s_917_5: write-var gs#40130 <= s_917_4
        fn_state.gs_40130 = s_917_4;
        // N s_917_6: jump b478
        return block_478(state, tracer, fn_state);
    }
    fn block_918<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_918_0: const #16592u : u32
        let s_918_0: u32 = 16592;
        // D s_918_1: read-reg s_918_0:struct
        let s_918_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_918_0 as isize);
            tracer.read_register(s_918_0 as isize, value);
            value
        };
        // C s_918_2: const #16592u : u32
        let s_918_2: u32 = 16592;
        // N s_918_3: write-reg s_918_2 <= s_918_1
        let s_918_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_918_2 as isize, s_918_1);
            tracer.write_register(s_918_2 as isize, s_918_1);
        };
        // N s_918_4: jump b476
        return block_476(state, tracer, fn_state);
    }
    fn block_919<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_919_0: const #424u : u32
        let s_919_0: u32 = 424;
        // D s_919_1: read-reg s_919_0:u8
        let s_919_1: u8 = {
            let value = state.read_register::<u8>(s_919_0 as isize);
            tracer.read_register(s_919_0 as isize, value);
            value
        };
        // C s_919_2: const #2u : u8
        let s_919_2: u8 = 2;
        // D s_919_3: cmp-lt s_919_1 s_919_2
        let s_919_3: bool = ((s_919_1) < (s_919_2));
        // D s_919_4: not s_919_3
        let s_919_4: bool = !s_919_3;
        // D s_919_5: write-var gs#40129 <= s_919_4
        fn_state.gs_40129 = s_919_4;
        // N s_919_6: jump b474
        return block_474(state, tracer, fn_state);
    }
    fn block_920<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_920_0: const #16592u : u32
        let s_920_0: u32 = 16592;
        // D s_920_1: read-reg s_920_0:struct
        let s_920_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_920_0 as isize);
            tracer.read_register(s_920_0 as isize, value);
            value
        };
        // C s_920_2: const #16592u : u32
        let s_920_2: u32 = 16592;
        // N s_920_3: write-reg s_920_2 <= s_920_1
        let s_920_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_920_2 as isize, s_920_1);
            tracer.write_register(s_920_2 as isize, s_920_1);
        };
        // N s_920_4: jump b472
        return block_472(state, tracer, fn_state);
    }
    fn block_921<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_921_0: const #424u : u32
        let s_921_0: u32 = 424;
        // D s_921_1: read-reg s_921_0:u8
        let s_921_1: u8 = {
            let value = state.read_register::<u8>(s_921_0 as isize);
            tracer.read_register(s_921_0 as isize, value);
            value
        };
        // C s_921_2: const #2u : u8
        let s_921_2: u8 = 2;
        // D s_921_3: cmp-lt s_921_1 s_921_2
        let s_921_3: bool = ((s_921_1) < (s_921_2));
        // D s_921_4: not s_921_3
        let s_921_4: bool = !s_921_3;
        // D s_921_5: write-var gs#40128 <= s_921_4
        fn_state.gs_40128 = s_921_4;
        // N s_921_6: jump b470
        return block_470(state, tracer, fn_state);
    }
    fn block_922<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_922_0: const #16592u : u32
        let s_922_0: u32 = 16592;
        // D s_922_1: read-reg s_922_0:struct
        let s_922_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_922_0 as isize);
            tracer.read_register(s_922_0 as isize, value);
            value
        };
        // C s_922_2: const #16592u : u32
        let s_922_2: u32 = 16592;
        // N s_922_3: write-reg s_922_2 <= s_922_1
        let s_922_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_922_2 as isize, s_922_1);
            tracer.write_register(s_922_2 as isize, s_922_1);
        };
        // N s_922_4: jump b468
        return block_468(state, tracer, fn_state);
    }
    fn block_923<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_923_0: const #424u : u32
        let s_923_0: u32 = 424;
        // D s_923_1: read-reg s_923_0:u8
        let s_923_1: u8 = {
            let value = state.read_register::<u8>(s_923_0 as isize);
            tracer.read_register(s_923_0 as isize, value);
            value
        };
        // C s_923_2: const #2u : u8
        let s_923_2: u8 = 2;
        // D s_923_3: cmp-lt s_923_1 s_923_2
        let s_923_3: bool = ((s_923_1) < (s_923_2));
        // D s_923_4: not s_923_3
        let s_923_4: bool = !s_923_3;
        // D s_923_5: write-var gs#40127 <= s_923_4
        fn_state.gs_40127 = s_923_4;
        // N s_923_6: jump b466
        return block_466(state, tracer, fn_state);
    }
    fn block_924<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_924_0: const #16592u : u32
        let s_924_0: u32 = 16592;
        // D s_924_1: read-reg s_924_0:struct
        let s_924_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_924_0 as isize);
            tracer.read_register(s_924_0 as isize, value);
            value
        };
        // C s_924_2: const #16592u : u32
        let s_924_2: u32 = 16592;
        // N s_924_3: write-reg s_924_2 <= s_924_1
        let s_924_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_924_2 as isize, s_924_1);
            tracer.write_register(s_924_2 as isize, s_924_1);
        };
        // N s_924_4: jump b464
        return block_464(state, tracer, fn_state);
    }
    fn block_925<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_925_0: const #424u : u32
        let s_925_0: u32 = 424;
        // D s_925_1: read-reg s_925_0:u8
        let s_925_1: u8 = {
            let value = state.read_register::<u8>(s_925_0 as isize);
            tracer.read_register(s_925_0 as isize, value);
            value
        };
        // C s_925_2: const #2u : u8
        let s_925_2: u8 = 2;
        // D s_925_3: cmp-lt s_925_1 s_925_2
        let s_925_3: bool = ((s_925_1) < (s_925_2));
        // D s_925_4: not s_925_3
        let s_925_4: bool = !s_925_3;
        // D s_925_5: write-var gs#40126 <= s_925_4
        fn_state.gs_40126 = s_925_4;
        // N s_925_6: jump b462
        return block_462(state, tracer, fn_state);
    }
    fn block_926<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_926_0: const #16592u : u32
        let s_926_0: u32 = 16592;
        // D s_926_1: read-reg s_926_0:struct
        let s_926_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_926_0 as isize);
            tracer.read_register(s_926_0 as isize, value);
            value
        };
        // C s_926_2: const #16592u : u32
        let s_926_2: u32 = 16592;
        // N s_926_3: write-reg s_926_2 <= s_926_1
        let s_926_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_926_2 as isize, s_926_1);
            tracer.write_register(s_926_2 as isize, s_926_1);
        };
        // N s_926_4: jump b460
        return block_460(state, tracer, fn_state);
    }
    fn block_927<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_927_0: const #424u : u32
        let s_927_0: u32 = 424;
        // D s_927_1: read-reg s_927_0:u8
        let s_927_1: u8 = {
            let value = state.read_register::<u8>(s_927_0 as isize);
            tracer.read_register(s_927_0 as isize, value);
            value
        };
        // C s_927_2: const #2u : u8
        let s_927_2: u8 = 2;
        // D s_927_3: cmp-lt s_927_1 s_927_2
        let s_927_3: bool = ((s_927_1) < (s_927_2));
        // D s_927_4: not s_927_3
        let s_927_4: bool = !s_927_3;
        // D s_927_5: write-var gs#40125 <= s_927_4
        fn_state.gs_40125 = s_927_4;
        // N s_927_6: jump b458
        return block_458(state, tracer, fn_state);
    }
    fn block_928<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_928_0: const #16592u : u32
        let s_928_0: u32 = 16592;
        // D s_928_1: read-reg s_928_0:struct
        let s_928_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_928_0 as isize);
            tracer.read_register(s_928_0 as isize, value);
            value
        };
        // C s_928_2: const #16592u : u32
        let s_928_2: u32 = 16592;
        // N s_928_3: write-reg s_928_2 <= s_928_1
        let s_928_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_928_2 as isize, s_928_1);
            tracer.write_register(s_928_2 as isize, s_928_1);
        };
        // N s_928_4: jump b456
        return block_456(state, tracer, fn_state);
    }
    fn block_929<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_929_0: const #424u : u32
        let s_929_0: u32 = 424;
        // D s_929_1: read-reg s_929_0:u8
        let s_929_1: u8 = {
            let value = state.read_register::<u8>(s_929_0 as isize);
            tracer.read_register(s_929_0 as isize, value);
            value
        };
        // C s_929_2: const #2u : u8
        let s_929_2: u8 = 2;
        // D s_929_3: cmp-lt s_929_1 s_929_2
        let s_929_3: bool = ((s_929_1) < (s_929_2));
        // D s_929_4: not s_929_3
        let s_929_4: bool = !s_929_3;
        // D s_929_5: write-var gs#40124 <= s_929_4
        fn_state.gs_40124 = s_929_4;
        // N s_929_6: jump b454
        return block_454(state, tracer, fn_state);
    }
    fn block_930<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_930_0: const #16592u : u32
        let s_930_0: u32 = 16592;
        // D s_930_1: read-reg s_930_0:struct
        let s_930_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_930_0 as isize);
            tracer.read_register(s_930_0 as isize, value);
            value
        };
        // C s_930_2: const #16592u : u32
        let s_930_2: u32 = 16592;
        // N s_930_3: write-reg s_930_2 <= s_930_1
        let s_930_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_930_2 as isize, s_930_1);
            tracer.write_register(s_930_2 as isize, s_930_1);
        };
        // N s_930_4: jump b452
        return block_452(state, tracer, fn_state);
    }
    fn block_931<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_931_0: const #424u : u32
        let s_931_0: u32 = 424;
        // D s_931_1: read-reg s_931_0:u8
        let s_931_1: u8 = {
            let value = state.read_register::<u8>(s_931_0 as isize);
            tracer.read_register(s_931_0 as isize, value);
            value
        };
        // C s_931_2: const #2u : u8
        let s_931_2: u8 = 2;
        // D s_931_3: cmp-lt s_931_1 s_931_2
        let s_931_3: bool = ((s_931_1) < (s_931_2));
        // D s_931_4: not s_931_3
        let s_931_4: bool = !s_931_3;
        // D s_931_5: write-var gs#40123 <= s_931_4
        fn_state.gs_40123 = s_931_4;
        // N s_931_6: jump b450
        return block_450(state, tracer, fn_state);
    }
    fn block_932<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_932_0: const #16592u : u32
        let s_932_0: u32 = 16592;
        // D s_932_1: read-reg s_932_0:struct
        let s_932_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_932_0 as isize);
            tracer.read_register(s_932_0 as isize, value);
            value
        };
        // C s_932_2: const #16592u : u32
        let s_932_2: u32 = 16592;
        // N s_932_3: write-reg s_932_2 <= s_932_1
        let s_932_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_932_2 as isize, s_932_1);
            tracer.write_register(s_932_2 as isize, s_932_1);
        };
        // N s_932_4: jump b448
        return block_448(state, tracer, fn_state);
    }
    fn block_933<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_933_0: const #424u : u32
        let s_933_0: u32 = 424;
        // D s_933_1: read-reg s_933_0:u8
        let s_933_1: u8 = {
            let value = state.read_register::<u8>(s_933_0 as isize);
            tracer.read_register(s_933_0 as isize, value);
            value
        };
        // C s_933_2: const #2u : u8
        let s_933_2: u8 = 2;
        // D s_933_3: cmp-lt s_933_1 s_933_2
        let s_933_3: bool = ((s_933_1) < (s_933_2));
        // D s_933_4: not s_933_3
        let s_933_4: bool = !s_933_3;
        // D s_933_5: write-var gs#40122 <= s_933_4
        fn_state.gs_40122 = s_933_4;
        // N s_933_6: jump b446
        return block_446(state, tracer, fn_state);
    }
    fn block_934<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_934_0: const #104880u : u32
        let s_934_0: u32 = 104880;
        // D s_934_1: read-reg s_934_0:struct
        let s_934_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_934_0 as isize);
            tracer.read_register(s_934_0 as isize, value);
            value
        };
        // C s_934_2: const #104880u : u32
        let s_934_2: u32 = 104880;
        // N s_934_3: write-reg s_934_2 <= s_934_1
        let s_934_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_934_2 as isize, s_934_1);
            tracer.write_register(s_934_2 as isize, s_934_1);
        };
        // N s_934_4: jump b444
        return block_444(state, tracer, fn_state);
    }
    fn block_935<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_935_0: const #104880u : u32
        let s_935_0: u32 = 104880;
        // D s_935_1: read-reg s_935_0:struct
        let s_935_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_935_0 as isize);
            tracer.read_register(s_935_0 as isize, value);
            value
        };
        // C s_935_2: const #104880u : u32
        let s_935_2: u32 = 104880;
        // N s_935_3: write-reg s_935_2 <= s_935_1
        let s_935_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_935_2 as isize, s_935_1);
            tracer.write_register(s_935_2 as isize, s_935_1);
        };
        // N s_935_4: jump b442
        return block_442(state, tracer, fn_state);
    }
    fn block_936<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_936_0: const #424u : u32
        let s_936_0: u32 = 424;
        // D s_936_1: read-reg s_936_0:u8
        let s_936_1: u8 = {
            let value = state.read_register::<u8>(s_936_0 as isize);
            tracer.read_register(s_936_0 as isize, value);
            value
        };
        // C s_936_2: const #2u : u8
        let s_936_2: u8 = 2;
        // D s_936_3: cmp-lt s_936_1 s_936_2
        let s_936_3: bool = ((s_936_1) < (s_936_2));
        // D s_936_4: not s_936_3
        let s_936_4: bool = !s_936_3;
        // D s_936_5: write-var gs#39999 <= s_936_4
        fn_state.gs_39999 = s_936_4;
        // N s_936_6: jump b440
        return block_440(state, tracer, fn_state);
    }
    fn block_937<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_937_0: const #104880u : u32
        let s_937_0: u32 = 104880;
        // D s_937_1: read-reg s_937_0:struct
        let s_937_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_937_0 as isize);
            tracer.read_register(s_937_0 as isize, value);
            value
        };
        // C s_937_2: const #104880u : u32
        let s_937_2: u32 = 104880;
        // N s_937_3: write-reg s_937_2 <= s_937_1
        let s_937_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_937_2 as isize, s_937_1);
            tracer.write_register(s_937_2 as isize, s_937_1);
        };
        // N s_937_4: jump b438
        return block_438(state, tracer, fn_state);
    }
    fn block_938<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_938_0: const #424u : u32
        let s_938_0: u32 = 424;
        // D s_938_1: read-reg s_938_0:u8
        let s_938_1: u8 = {
            let value = state.read_register::<u8>(s_938_0 as isize);
            tracer.read_register(s_938_0 as isize, value);
            value
        };
        // C s_938_2: const #2u : u8
        let s_938_2: u8 = 2;
        // D s_938_3: cmp-lt s_938_1 s_938_2
        let s_938_3: bool = ((s_938_1) < (s_938_2));
        // D s_938_4: not s_938_3
        let s_938_4: bool = !s_938_3;
        // D s_938_5: write-var gs#39990 <= s_938_4
        fn_state.gs_39990 = s_938_4;
        // N s_938_6: jump b436
        return block_436(state, tracer, fn_state);
    }
    fn block_939<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_939_0: const #101224u : u32
        let s_939_0: u32 = 101224;
        // D s_939_1: read-reg s_939_0:struct
        let s_939_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_939_0 as isize);
            tracer.read_register(s_939_0 as isize, value);
            value
        };
        // C s_939_2: const #101224u : u32
        let s_939_2: u32 = 101224;
        // N s_939_3: write-reg s_939_2 <= s_939_1
        let s_939_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_939_2 as isize, s_939_1);
            tracer.write_register(s_939_2 as isize, s_939_1);
        };
        // N s_939_4: jump b434
        return block_434(state, tracer, fn_state);
    }
    fn block_940<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_940_0: const #424u : u32
        let s_940_0: u32 = 424;
        // D s_940_1: read-reg s_940_0:u8
        let s_940_1: u8 = {
            let value = state.read_register::<u8>(s_940_0 as isize);
            tracer.read_register(s_940_0 as isize, value);
            value
        };
        // C s_940_2: const #2u : u8
        let s_940_2: u8 = 2;
        // D s_940_3: cmp-lt s_940_1 s_940_2
        let s_940_3: bool = ((s_940_1) < (s_940_2));
        // D s_940_4: not s_940_3
        let s_940_4: bool = !s_940_3;
        // D s_940_5: write-var gs#39925 <= s_940_4
        fn_state.gs_39925 = s_940_4;
        // N s_940_6: jump b432
        return block_432(state, tracer, fn_state);
    }
    fn block_941<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_941_0: const #101224u : u32
        let s_941_0: u32 = 101224;
        // D s_941_1: read-reg s_941_0:struct
        let s_941_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_941_0 as isize);
            tracer.read_register(s_941_0 as isize, value);
            value
        };
        // C s_941_2: const #101224u : u32
        let s_941_2: u32 = 101224;
        // N s_941_3: write-reg s_941_2 <= s_941_1
        let s_941_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_941_2 as isize, s_941_1);
            tracer.write_register(s_941_2 as isize, s_941_1);
        };
        // N s_941_4: jump b430
        return block_430(state, tracer, fn_state);
    }
    fn block_942<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_942_0: const #424u : u32
        let s_942_0: u32 = 424;
        // D s_942_1: read-reg s_942_0:u8
        let s_942_1: u8 = {
            let value = state.read_register::<u8>(s_942_0 as isize);
            tracer.read_register(s_942_0 as isize, value);
            value
        };
        // C s_942_2: const #2u : u8
        let s_942_2: u8 = 2;
        // D s_942_3: cmp-lt s_942_1 s_942_2
        let s_942_3: bool = ((s_942_1) < (s_942_2));
        // D s_942_4: not s_942_3
        let s_942_4: bool = !s_942_3;
        // D s_942_5: write-var gs#39924 <= s_942_4
        fn_state.gs_39924 = s_942_4;
        // N s_942_6: jump b428
        return block_428(state, tracer, fn_state);
    }
    fn block_943<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_943_0: const #101224u : u32
        let s_943_0: u32 = 101224;
        // D s_943_1: read-reg s_943_0:struct
        let s_943_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_943_0 as isize);
            tracer.read_register(s_943_0 as isize, value);
            value
        };
        // C s_943_2: const #101224u : u32
        let s_943_2: u32 = 101224;
        // N s_943_3: write-reg s_943_2 <= s_943_1
        let s_943_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_943_2 as isize, s_943_1);
            tracer.write_register(s_943_2 as isize, s_943_1);
        };
        // N s_943_4: jump b426
        return block_426(state, tracer, fn_state);
    }
    fn block_944<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_944_0: const #424u : u32
        let s_944_0: u32 = 424;
        // D s_944_1: read-reg s_944_0:u8
        let s_944_1: u8 = {
            let value = state.read_register::<u8>(s_944_0 as isize);
            tracer.read_register(s_944_0 as isize, value);
            value
        };
        // C s_944_2: const #2u : u8
        let s_944_2: u8 = 2;
        // D s_944_3: cmp-lt s_944_1 s_944_2
        let s_944_3: bool = ((s_944_1) < (s_944_2));
        // D s_944_4: not s_944_3
        let s_944_4: bool = !s_944_3;
        // D s_944_5: write-var gs#39923 <= s_944_4
        fn_state.gs_39923 = s_944_4;
        // N s_944_6: jump b424
        return block_424(state, tracer, fn_state);
    }
    fn block_945<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_945_0: const #101224u : u32
        let s_945_0: u32 = 101224;
        // D s_945_1: read-reg s_945_0:struct
        let s_945_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_945_0 as isize);
            tracer.read_register(s_945_0 as isize, value);
            value
        };
        // C s_945_2: const #101224u : u32
        let s_945_2: u32 = 101224;
        // N s_945_3: write-reg s_945_2 <= s_945_1
        let s_945_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_945_2 as isize, s_945_1);
            tracer.write_register(s_945_2 as isize, s_945_1);
        };
        // N s_945_4: jump b422
        return block_422(state, tracer, fn_state);
    }
    fn block_946<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_946_0: const #424u : u32
        let s_946_0: u32 = 424;
        // D s_946_1: read-reg s_946_0:u8
        let s_946_1: u8 = {
            let value = state.read_register::<u8>(s_946_0 as isize);
            tracer.read_register(s_946_0 as isize, value);
            value
        };
        // C s_946_2: const #2u : u8
        let s_946_2: u8 = 2;
        // D s_946_3: cmp-lt s_946_1 s_946_2
        let s_946_3: bool = ((s_946_1) < (s_946_2));
        // D s_946_4: not s_946_3
        let s_946_4: bool = !s_946_3;
        // D s_946_5: write-var gs#39922 <= s_946_4
        fn_state.gs_39922 = s_946_4;
        // N s_946_6: jump b420
        return block_420(state, tracer, fn_state);
    }
    fn block_947<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_947_0: const #101224u : u32
        let s_947_0: u32 = 101224;
        // D s_947_1: read-reg s_947_0:struct
        let s_947_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_947_0 as isize);
            tracer.read_register(s_947_0 as isize, value);
            value
        };
        // C s_947_2: const #101224u : u32
        let s_947_2: u32 = 101224;
        // N s_947_3: write-reg s_947_2 <= s_947_1
        let s_947_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_947_2 as isize, s_947_1);
            tracer.write_register(s_947_2 as isize, s_947_1);
        };
        // N s_947_4: jump b418
        return block_418(state, tracer, fn_state);
    }
    fn block_948<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_948_0: const #424u : u32
        let s_948_0: u32 = 424;
        // D s_948_1: read-reg s_948_0:u8
        let s_948_1: u8 = {
            let value = state.read_register::<u8>(s_948_0 as isize);
            tracer.read_register(s_948_0 as isize, value);
            value
        };
        // C s_948_2: const #2u : u8
        let s_948_2: u8 = 2;
        // D s_948_3: cmp-lt s_948_1 s_948_2
        let s_948_3: bool = ((s_948_1) < (s_948_2));
        // D s_948_4: not s_948_3
        let s_948_4: bool = !s_948_3;
        // D s_948_5: write-var gs#39921 <= s_948_4
        fn_state.gs_39921 = s_948_4;
        // N s_948_6: jump b416
        return block_416(state, tracer, fn_state);
    }
    fn block_949<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_949_0: const #101224u : u32
        let s_949_0: u32 = 101224;
        // D s_949_1: read-reg s_949_0:struct
        let s_949_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_949_0 as isize);
            tracer.read_register(s_949_0 as isize, value);
            value
        };
        // C s_949_2: const #101224u : u32
        let s_949_2: u32 = 101224;
        // N s_949_3: write-reg s_949_2 <= s_949_1
        let s_949_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_949_2 as isize, s_949_1);
            tracer.write_register(s_949_2 as isize, s_949_1);
        };
        // N s_949_4: jump b414
        return block_414(state, tracer, fn_state);
    }
    fn block_950<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_950_0: const #424u : u32
        let s_950_0: u32 = 424;
        // D s_950_1: read-reg s_950_0:u8
        let s_950_1: u8 = {
            let value = state.read_register::<u8>(s_950_0 as isize);
            tracer.read_register(s_950_0 as isize, value);
            value
        };
        // C s_950_2: const #2u : u8
        let s_950_2: u8 = 2;
        // D s_950_3: cmp-lt s_950_1 s_950_2
        let s_950_3: bool = ((s_950_1) < (s_950_2));
        // D s_950_4: not s_950_3
        let s_950_4: bool = !s_950_3;
        // D s_950_5: write-var gs#39920 <= s_950_4
        fn_state.gs_39920 = s_950_4;
        // N s_950_6: jump b412
        return block_412(state, tracer, fn_state);
    }
    fn block_951<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_951_0: const #101224u : u32
        let s_951_0: u32 = 101224;
        // D s_951_1: read-reg s_951_0:struct
        let s_951_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_951_0 as isize);
            tracer.read_register(s_951_0 as isize, value);
            value
        };
        // C s_951_2: const #101224u : u32
        let s_951_2: u32 = 101224;
        // N s_951_3: write-reg s_951_2 <= s_951_1
        let s_951_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_951_2 as isize, s_951_1);
            tracer.write_register(s_951_2 as isize, s_951_1);
        };
        // N s_951_4: jump b410
        return block_410(state, tracer, fn_state);
    }
    fn block_952<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_952_0: const #424u : u32
        let s_952_0: u32 = 424;
        // D s_952_1: read-reg s_952_0:u8
        let s_952_1: u8 = {
            let value = state.read_register::<u8>(s_952_0 as isize);
            tracer.read_register(s_952_0 as isize, value);
            value
        };
        // C s_952_2: const #2u : u8
        let s_952_2: u8 = 2;
        // D s_952_3: cmp-lt s_952_1 s_952_2
        let s_952_3: bool = ((s_952_1) < (s_952_2));
        // D s_952_4: not s_952_3
        let s_952_4: bool = !s_952_3;
        // D s_952_5: write-var gs#39919 <= s_952_4
        fn_state.gs_39919 = s_952_4;
        // N s_952_6: jump b408
        return block_408(state, tracer, fn_state);
    }
    fn block_953<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_953_0: const #101224u : u32
        let s_953_0: u32 = 101224;
        // D s_953_1: read-reg s_953_0:struct
        let s_953_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_953_0 as isize);
            tracer.read_register(s_953_0 as isize, value);
            value
        };
        // C s_953_2: const #101224u : u32
        let s_953_2: u32 = 101224;
        // N s_953_3: write-reg s_953_2 <= s_953_1
        let s_953_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_953_2 as isize, s_953_1);
            tracer.write_register(s_953_2 as isize, s_953_1);
        };
        // N s_953_4: jump b406
        return block_406(state, tracer, fn_state);
    }
    fn block_954<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_954_0: const #424u : u32
        let s_954_0: u32 = 424;
        // D s_954_1: read-reg s_954_0:u8
        let s_954_1: u8 = {
            let value = state.read_register::<u8>(s_954_0 as isize);
            tracer.read_register(s_954_0 as isize, value);
            value
        };
        // C s_954_2: const #2u : u8
        let s_954_2: u8 = 2;
        // D s_954_3: cmp-lt s_954_1 s_954_2
        let s_954_3: bool = ((s_954_1) < (s_954_2));
        // D s_954_4: not s_954_3
        let s_954_4: bool = !s_954_3;
        // D s_954_5: write-var gs#39918 <= s_954_4
        fn_state.gs_39918 = s_954_4;
        // N s_954_6: jump b404
        return block_404(state, tracer, fn_state);
    }
    fn block_955<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_955_0: const #101224u : u32
        let s_955_0: u32 = 101224;
        // D s_955_1: read-reg s_955_0:struct
        let s_955_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_955_0 as isize);
            tracer.read_register(s_955_0 as isize, value);
            value
        };
        // C s_955_2: const #101224u : u32
        let s_955_2: u32 = 101224;
        // N s_955_3: write-reg s_955_2 <= s_955_1
        let s_955_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_955_2 as isize, s_955_1);
            tracer.write_register(s_955_2 as isize, s_955_1);
        };
        // N s_955_4: jump b402
        return block_402(state, tracer, fn_state);
    }
    fn block_956<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_956_0: const #424u : u32
        let s_956_0: u32 = 424;
        // D s_956_1: read-reg s_956_0:u8
        let s_956_1: u8 = {
            let value = state.read_register::<u8>(s_956_0 as isize);
            tracer.read_register(s_956_0 as isize, value);
            value
        };
        // C s_956_2: const #2u : u8
        let s_956_2: u8 = 2;
        // D s_956_3: cmp-lt s_956_1 s_956_2
        let s_956_3: bool = ((s_956_1) < (s_956_2));
        // D s_956_4: not s_956_3
        let s_956_4: bool = !s_956_3;
        // D s_956_5: write-var gs#39917 <= s_956_4
        fn_state.gs_39917 = s_956_4;
        // N s_956_6: jump b400
        return block_400(state, tracer, fn_state);
    }
    fn block_957<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_957_0: const #101224u : u32
        let s_957_0: u32 = 101224;
        // D s_957_1: read-reg s_957_0:struct
        let s_957_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_957_0 as isize);
            tracer.read_register(s_957_0 as isize, value);
            value
        };
        // C s_957_2: const #101224u : u32
        let s_957_2: u32 = 101224;
        // N s_957_3: write-reg s_957_2 <= s_957_1
        let s_957_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_957_2 as isize, s_957_1);
            tracer.write_register(s_957_2 as isize, s_957_1);
        };
        // N s_957_4: jump b398
        return block_398(state, tracer, fn_state);
    }
    fn block_958<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_958_0: const #424u : u32
        let s_958_0: u32 = 424;
        // D s_958_1: read-reg s_958_0:u8
        let s_958_1: u8 = {
            let value = state.read_register::<u8>(s_958_0 as isize);
            tracer.read_register(s_958_0 as isize, value);
            value
        };
        // C s_958_2: const #2u : u8
        let s_958_2: u8 = 2;
        // D s_958_3: cmp-lt s_958_1 s_958_2
        let s_958_3: bool = ((s_958_1) < (s_958_2));
        // D s_958_4: not s_958_3
        let s_958_4: bool = !s_958_3;
        // D s_958_5: write-var gs#39916 <= s_958_4
        fn_state.gs_39916 = s_958_4;
        // N s_958_6: jump b396
        return block_396(state, tracer, fn_state);
    }
    fn block_959<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_959_0: const #101224u : u32
        let s_959_0: u32 = 101224;
        // D s_959_1: read-reg s_959_0:struct
        let s_959_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_959_0 as isize);
            tracer.read_register(s_959_0 as isize, value);
            value
        };
        // C s_959_2: const #101224u : u32
        let s_959_2: u32 = 101224;
        // N s_959_3: write-reg s_959_2 <= s_959_1
        let s_959_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_959_2 as isize, s_959_1);
            tracer.write_register(s_959_2 as isize, s_959_1);
        };
        // N s_959_4: jump b394
        return block_394(state, tracer, fn_state);
    }
    fn block_960<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_960_0: const #424u : u32
        let s_960_0: u32 = 424;
        // D s_960_1: read-reg s_960_0:u8
        let s_960_1: u8 = {
            let value = state.read_register::<u8>(s_960_0 as isize);
            tracer.read_register(s_960_0 as isize, value);
            value
        };
        // C s_960_2: const #2u : u8
        let s_960_2: u8 = 2;
        // D s_960_3: cmp-lt s_960_1 s_960_2
        let s_960_3: bool = ((s_960_1) < (s_960_2));
        // D s_960_4: not s_960_3
        let s_960_4: bool = !s_960_3;
        // D s_960_5: write-var gs#39915 <= s_960_4
        fn_state.gs_39915 = s_960_4;
        // N s_960_6: jump b392
        return block_392(state, tracer, fn_state);
    }
    fn block_961<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_961_0: const #101224u : u32
        let s_961_0: u32 = 101224;
        // D s_961_1: read-reg s_961_0:struct
        let s_961_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_961_0 as isize);
            tracer.read_register(s_961_0 as isize, value);
            value
        };
        // C s_961_2: const #101224u : u32
        let s_961_2: u32 = 101224;
        // N s_961_3: write-reg s_961_2 <= s_961_1
        let s_961_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_961_2 as isize, s_961_1);
            tracer.write_register(s_961_2 as isize, s_961_1);
        };
        // N s_961_4: jump b390
        return block_390(state, tracer, fn_state);
    }
    fn block_962<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_962_0: const #424u : u32
        let s_962_0: u32 = 424;
        // D s_962_1: read-reg s_962_0:u8
        let s_962_1: u8 = {
            let value = state.read_register::<u8>(s_962_0 as isize);
            tracer.read_register(s_962_0 as isize, value);
            value
        };
        // C s_962_2: const #2u : u8
        let s_962_2: u8 = 2;
        // D s_962_3: cmp-lt s_962_1 s_962_2
        let s_962_3: bool = ((s_962_1) < (s_962_2));
        // D s_962_4: not s_962_3
        let s_962_4: bool = !s_962_3;
        // D s_962_5: write-var gs#39914 <= s_962_4
        fn_state.gs_39914 = s_962_4;
        // N s_962_6: jump b388
        return block_388(state, tracer, fn_state);
    }
    fn block_963<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_963_0: const #101224u : u32
        let s_963_0: u32 = 101224;
        // D s_963_1: read-reg s_963_0:struct
        let s_963_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_963_0 as isize);
            tracer.read_register(s_963_0 as isize, value);
            value
        };
        // C s_963_2: const #101224u : u32
        let s_963_2: u32 = 101224;
        // N s_963_3: write-reg s_963_2 <= s_963_1
        let s_963_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_963_2 as isize, s_963_1);
            tracer.write_register(s_963_2 as isize, s_963_1);
        };
        // N s_963_4: jump b386
        return block_386(state, tracer, fn_state);
    }
    fn block_964<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_964_0: const #424u : u32
        let s_964_0: u32 = 424;
        // D s_964_1: read-reg s_964_0:u8
        let s_964_1: u8 = {
            let value = state.read_register::<u8>(s_964_0 as isize);
            tracer.read_register(s_964_0 as isize, value);
            value
        };
        // C s_964_2: const #2u : u8
        let s_964_2: u8 = 2;
        // D s_964_3: cmp-lt s_964_1 s_964_2
        let s_964_3: bool = ((s_964_1) < (s_964_2));
        // D s_964_4: not s_964_3
        let s_964_4: bool = !s_964_3;
        // D s_964_5: write-var gs#39913 <= s_964_4
        fn_state.gs_39913 = s_964_4;
        // N s_964_6: jump b384
        return block_384(state, tracer, fn_state);
    }
    fn block_965<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_965_0: const #101224u : u32
        let s_965_0: u32 = 101224;
        // D s_965_1: read-reg s_965_0:struct
        let s_965_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_965_0 as isize);
            tracer.read_register(s_965_0 as isize, value);
            value
        };
        // C s_965_2: const #101224u : u32
        let s_965_2: u32 = 101224;
        // N s_965_3: write-reg s_965_2 <= s_965_1
        let s_965_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_965_2 as isize, s_965_1);
            tracer.write_register(s_965_2 as isize, s_965_1);
        };
        // N s_965_4: jump b382
        return block_382(state, tracer, fn_state);
    }
    fn block_966<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_966_0: const #424u : u32
        let s_966_0: u32 = 424;
        // D s_966_1: read-reg s_966_0:u8
        let s_966_1: u8 = {
            let value = state.read_register::<u8>(s_966_0 as isize);
            tracer.read_register(s_966_0 as isize, value);
            value
        };
        // C s_966_2: const #2u : u8
        let s_966_2: u8 = 2;
        // D s_966_3: cmp-lt s_966_1 s_966_2
        let s_966_3: bool = ((s_966_1) < (s_966_2));
        // D s_966_4: not s_966_3
        let s_966_4: bool = !s_966_3;
        // D s_966_5: write-var gs#39912 <= s_966_4
        fn_state.gs_39912 = s_966_4;
        // N s_966_6: jump b380
        return block_380(state, tracer, fn_state);
    }
    fn block_967<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_967_0: const #101224u : u32
        let s_967_0: u32 = 101224;
        // D s_967_1: read-reg s_967_0:struct
        let s_967_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_967_0 as isize);
            tracer.read_register(s_967_0 as isize, value);
            value
        };
        // C s_967_2: const #101224u : u32
        let s_967_2: u32 = 101224;
        // N s_967_3: write-reg s_967_2 <= s_967_1
        let s_967_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_967_2 as isize, s_967_1);
            tracer.write_register(s_967_2 as isize, s_967_1);
        };
        // N s_967_4: jump b378
        return block_378(state, tracer, fn_state);
    }
    fn block_968<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_968_0: const #424u : u32
        let s_968_0: u32 = 424;
        // D s_968_1: read-reg s_968_0:u8
        let s_968_1: u8 = {
            let value = state.read_register::<u8>(s_968_0 as isize);
            tracer.read_register(s_968_0 as isize, value);
            value
        };
        // C s_968_2: const #2u : u8
        let s_968_2: u8 = 2;
        // D s_968_3: cmp-lt s_968_1 s_968_2
        let s_968_3: bool = ((s_968_1) < (s_968_2));
        // D s_968_4: not s_968_3
        let s_968_4: bool = !s_968_3;
        // D s_968_5: write-var gs#39911 <= s_968_4
        fn_state.gs_39911 = s_968_4;
        // N s_968_6: jump b376
        return block_376(state, tracer, fn_state);
    }
    fn block_969<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_969_0: const #101224u : u32
        let s_969_0: u32 = 101224;
        // D s_969_1: read-reg s_969_0:struct
        let s_969_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_969_0 as isize);
            tracer.read_register(s_969_0 as isize, value);
            value
        };
        // C s_969_2: const #101224u : u32
        let s_969_2: u32 = 101224;
        // N s_969_3: write-reg s_969_2 <= s_969_1
        let s_969_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_969_2 as isize, s_969_1);
            tracer.write_register(s_969_2 as isize, s_969_1);
        };
        // N s_969_4: jump b374
        return block_374(state, tracer, fn_state);
    }
    fn block_970<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_970_0: const #424u : u32
        let s_970_0: u32 = 424;
        // D s_970_1: read-reg s_970_0:u8
        let s_970_1: u8 = {
            let value = state.read_register::<u8>(s_970_0 as isize);
            tracer.read_register(s_970_0 as isize, value);
            value
        };
        // C s_970_2: const #2u : u8
        let s_970_2: u8 = 2;
        // D s_970_3: cmp-lt s_970_1 s_970_2
        let s_970_3: bool = ((s_970_1) < (s_970_2));
        // D s_970_4: not s_970_3
        let s_970_4: bool = !s_970_3;
        // D s_970_5: write-var gs#39910 <= s_970_4
        fn_state.gs_39910 = s_970_4;
        // N s_970_6: jump b372
        return block_372(state, tracer, fn_state);
    }
    fn block_971<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_971_0: const #101224u : u32
        let s_971_0: u32 = 101224;
        // D s_971_1: read-reg s_971_0:struct
        let s_971_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_971_0 as isize);
            tracer.read_register(s_971_0 as isize, value);
            value
        };
        // C s_971_2: const #101224u : u32
        let s_971_2: u32 = 101224;
        // N s_971_3: write-reg s_971_2 <= s_971_1
        let s_971_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_971_2 as isize, s_971_1);
            tracer.write_register(s_971_2 as isize, s_971_1);
        };
        // N s_971_4: jump b370
        return block_370(state, tracer, fn_state);
    }
    fn block_972<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_972_0: const #424u : u32
        let s_972_0: u32 = 424;
        // D s_972_1: read-reg s_972_0:u8
        let s_972_1: u8 = {
            let value = state.read_register::<u8>(s_972_0 as isize);
            tracer.read_register(s_972_0 as isize, value);
            value
        };
        // C s_972_2: const #2u : u8
        let s_972_2: u8 = 2;
        // D s_972_3: cmp-lt s_972_1 s_972_2
        let s_972_3: bool = ((s_972_1) < (s_972_2));
        // D s_972_4: not s_972_3
        let s_972_4: bool = !s_972_3;
        // D s_972_5: write-var gs#39909 <= s_972_4
        fn_state.gs_39909 = s_972_4;
        // N s_972_6: jump b368
        return block_368(state, tracer, fn_state);
    }
    fn block_973<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_973_0: const #101224u : u32
        let s_973_0: u32 = 101224;
        // D s_973_1: read-reg s_973_0:struct
        let s_973_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_973_0 as isize);
            tracer.read_register(s_973_0 as isize, value);
            value
        };
        // C s_973_2: const #101224u : u32
        let s_973_2: u32 = 101224;
        // N s_973_3: write-reg s_973_2 <= s_973_1
        let s_973_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_973_2 as isize, s_973_1);
            tracer.write_register(s_973_2 as isize, s_973_1);
        };
        // N s_973_4: jump b366
        return block_366(state, tracer, fn_state);
    }
    fn block_974<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_974_0: const #424u : u32
        let s_974_0: u32 = 424;
        // D s_974_1: read-reg s_974_0:u8
        let s_974_1: u8 = {
            let value = state.read_register::<u8>(s_974_0 as isize);
            tracer.read_register(s_974_0 as isize, value);
            value
        };
        // C s_974_2: const #2u : u8
        let s_974_2: u8 = 2;
        // D s_974_3: cmp-lt s_974_1 s_974_2
        let s_974_3: bool = ((s_974_1) < (s_974_2));
        // D s_974_4: not s_974_3
        let s_974_4: bool = !s_974_3;
        // D s_974_5: write-var gs#39908 <= s_974_4
        fn_state.gs_39908 = s_974_4;
        // N s_974_6: jump b364
        return block_364(state, tracer, fn_state);
    }
    fn block_975<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_975_0: const #101224u : u32
        let s_975_0: u32 = 101224;
        // D s_975_1: read-reg s_975_0:struct
        let s_975_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_975_0 as isize);
            tracer.read_register(s_975_0 as isize, value);
            value
        };
        // C s_975_2: const #101224u : u32
        let s_975_2: u32 = 101224;
        // N s_975_3: write-reg s_975_2 <= s_975_1
        let s_975_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_975_2 as isize, s_975_1);
            tracer.write_register(s_975_2 as isize, s_975_1);
        };
        // N s_975_4: jump b362
        return block_362(state, tracer, fn_state);
    }
    fn block_976<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_976_0: const #424u : u32
        let s_976_0: u32 = 424;
        // D s_976_1: read-reg s_976_0:u8
        let s_976_1: u8 = {
            let value = state.read_register::<u8>(s_976_0 as isize);
            tracer.read_register(s_976_0 as isize, value);
            value
        };
        // C s_976_2: const #2u : u8
        let s_976_2: u8 = 2;
        // D s_976_3: cmp-lt s_976_1 s_976_2
        let s_976_3: bool = ((s_976_1) < (s_976_2));
        // D s_976_4: not s_976_3
        let s_976_4: bool = !s_976_3;
        // D s_976_5: write-var gs#39907 <= s_976_4
        fn_state.gs_39907 = s_976_4;
        // N s_976_6: jump b360
        return block_360(state, tracer, fn_state);
    }
    fn block_977<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_977_0: const #101224u : u32
        let s_977_0: u32 = 101224;
        // D s_977_1: read-reg s_977_0:struct
        let s_977_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_977_0 as isize);
            tracer.read_register(s_977_0 as isize, value);
            value
        };
        // C s_977_2: const #101224u : u32
        let s_977_2: u32 = 101224;
        // N s_977_3: write-reg s_977_2 <= s_977_1
        let s_977_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_977_2 as isize, s_977_1);
            tracer.write_register(s_977_2 as isize, s_977_1);
        };
        // N s_977_4: jump b358
        return block_358(state, tracer, fn_state);
    }
    fn block_978<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_978_0: const #424u : u32
        let s_978_0: u32 = 424;
        // D s_978_1: read-reg s_978_0:u8
        let s_978_1: u8 = {
            let value = state.read_register::<u8>(s_978_0 as isize);
            tracer.read_register(s_978_0 as isize, value);
            value
        };
        // C s_978_2: const #2u : u8
        let s_978_2: u8 = 2;
        // D s_978_3: cmp-lt s_978_1 s_978_2
        let s_978_3: bool = ((s_978_1) < (s_978_2));
        // D s_978_4: not s_978_3
        let s_978_4: bool = !s_978_3;
        // D s_978_5: write-var gs#39906 <= s_978_4
        fn_state.gs_39906 = s_978_4;
        // N s_978_6: jump b356
        return block_356(state, tracer, fn_state);
    }
    fn block_979<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_979_0: const #21016u : u32
        let s_979_0: u32 = 21016;
        // D s_979_1: read-reg s_979_0:struct
        let s_979_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_979_0 as isize);
            tracer.read_register(s_979_0 as isize, value);
            value
        };
        // C s_979_2: const #21016u : u32
        let s_979_2: u32 = 21016;
        // N s_979_3: write-reg s_979_2 <= s_979_1
        let s_979_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_979_2 as isize, s_979_1);
            tracer.write_register(s_979_2 as isize, s_979_1);
        };
        // N s_979_4: jump b354
        return block_354(state, tracer, fn_state);
    }
    fn block_980<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_980_0: const #() : ()
        let s_980_0: () = ();
        // S s_980_1: call HaveAArch32(s_980_0)
        let s_980_1: bool = HaveAArch32(state, tracer, s_980_0);
        // D s_980_2: write-var gs#39895 <= s_980_1
        fn_state.gs_39895 = s_980_1;
        // N s_980_3: jump b352
        return block_352(state, tracer, fn_state);
    }
    fn block_981<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_981_0: const #102784u : u32
        let s_981_0: u32 = 102784;
        // D s_981_1: read-reg s_981_0:struct
        let s_981_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_981_0 as isize);
            tracer.read_register(s_981_0 as isize, value);
            value
        };
        // C s_981_2: const #102784u : u32
        let s_981_2: u32 = 102784;
        // N s_981_3: write-reg s_981_2 <= s_981_1
        let s_981_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_981_2 as isize, s_981_1);
            tracer.write_register(s_981_2 as isize, s_981_1);
        };
        // N s_981_4: jump b350
        return block_350(state, tracer, fn_state);
    }
    fn block_982<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_982_0: const #424u : u32
        let s_982_0: u32 = 424;
        // D s_982_1: read-reg s_982_0:u8
        let s_982_1: u8 = {
            let value = state.read_register::<u8>(s_982_0 as isize);
            tracer.read_register(s_982_0 as isize, value);
            value
        };
        // C s_982_2: const #2u : u8
        let s_982_2: u8 = 2;
        // D s_982_3: cmp-lt s_982_1 s_982_2
        let s_982_3: bool = ((s_982_1) < (s_982_2));
        // D s_982_4: not s_982_3
        let s_982_4: bool = !s_982_3;
        // D s_982_5: write-var gs#39799 <= s_982_4
        fn_state.gs_39799 = s_982_4;
        // N s_982_6: jump b348
        return block_348(state, tracer, fn_state);
    }
    fn block_983<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_983_0: const #102784u : u32
        let s_983_0: u32 = 102784;
        // D s_983_1: read-reg s_983_0:struct
        let s_983_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_983_0 as isize);
            tracer.read_register(s_983_0 as isize, value);
            value
        };
        // C s_983_2: const #102784u : u32
        let s_983_2: u32 = 102784;
        // N s_983_3: write-reg s_983_2 <= s_983_1
        let s_983_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_983_2 as isize, s_983_1);
            tracer.write_register(s_983_2 as isize, s_983_1);
        };
        // N s_983_4: jump b346
        return block_346(state, tracer, fn_state);
    }
    fn block_984<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_984_0: const #424u : u32
        let s_984_0: u32 = 424;
        // D s_984_1: read-reg s_984_0:u8
        let s_984_1: u8 = {
            let value = state.read_register::<u8>(s_984_0 as isize);
            tracer.read_register(s_984_0 as isize, value);
            value
        };
        // C s_984_2: const #2u : u8
        let s_984_2: u8 = 2;
        // D s_984_3: cmp-lt s_984_1 s_984_2
        let s_984_3: bool = ((s_984_1) < (s_984_2));
        // D s_984_4: not s_984_3
        let s_984_4: bool = !s_984_3;
        // D s_984_5: write-var gs#39798 <= s_984_4
        fn_state.gs_39798 = s_984_4;
        // N s_984_6: jump b344
        return block_344(state, tracer, fn_state);
    }
    fn block_985<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_985_0: const #102784u : u32
        let s_985_0: u32 = 102784;
        // D s_985_1: read-reg s_985_0:struct
        let s_985_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_985_0 as isize);
            tracer.read_register(s_985_0 as isize, value);
            value
        };
        // C s_985_2: const #102784u : u32
        let s_985_2: u32 = 102784;
        // N s_985_3: write-reg s_985_2 <= s_985_1
        let s_985_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_985_2 as isize, s_985_1);
            tracer.write_register(s_985_2 as isize, s_985_1);
        };
        // N s_985_4: jump b342
        return block_342(state, tracer, fn_state);
    }
    fn block_986<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_986_0: const #424u : u32
        let s_986_0: u32 = 424;
        // D s_986_1: read-reg s_986_0:u8
        let s_986_1: u8 = {
            let value = state.read_register::<u8>(s_986_0 as isize);
            tracer.read_register(s_986_0 as isize, value);
            value
        };
        // C s_986_2: const #2u : u8
        let s_986_2: u8 = 2;
        // D s_986_3: cmp-lt s_986_1 s_986_2
        let s_986_3: bool = ((s_986_1) < (s_986_2));
        // D s_986_4: not s_986_3
        let s_986_4: bool = !s_986_3;
        // D s_986_5: write-var gs#39797 <= s_986_4
        fn_state.gs_39797 = s_986_4;
        // N s_986_6: jump b340
        return block_340(state, tracer, fn_state);
    }
    fn block_987<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_987_0: const #22712u : u32
        let s_987_0: u32 = 22712;
        // D s_987_1: read-reg s_987_0:struct
        let s_987_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_987_0 as isize);
            tracer.read_register(s_987_0 as isize, value);
            value
        };
        // C s_987_2: const #22712u : u32
        let s_987_2: u32 = 22712;
        // N s_987_3: write-reg s_987_2 <= s_987_1
        let s_987_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_987_2 as isize, s_987_1);
            tracer.write_register(s_987_2 as isize, s_987_1);
        };
        // N s_987_4: jump b338
        return block_338(state, tracer, fn_state);
    }
    fn block_988<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_988_0: const #22712u : u32
        let s_988_0: u32 = 22712;
        // D s_988_1: read-reg s_988_0:struct
        let s_988_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_988_0 as isize);
            tracer.read_register(s_988_0 as isize, value);
            value
        };
        // C s_988_2: const #22712u : u32
        let s_988_2: u32 = 22712;
        // N s_988_3: write-reg s_988_2 <= s_988_1
        let s_988_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_988_2 as isize, s_988_1);
            tracer.write_register(s_988_2 as isize, s_988_1);
        };
        // N s_988_4: jump b336
        return block_336(state, tracer, fn_state);
    }
    fn block_989<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_989_0: const #22712u : u32
        let s_989_0: u32 = 22712;
        // D s_989_1: read-reg s_989_0:struct
        let s_989_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_989_0 as isize);
            tracer.read_register(s_989_0 as isize, value);
            value
        };
        // C s_989_2: const #22712u : u32
        let s_989_2: u32 = 22712;
        // N s_989_3: write-reg s_989_2 <= s_989_1
        let s_989_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_989_2 as isize, s_989_1);
            tracer.write_register(s_989_2 as isize, s_989_1);
        };
        // N s_989_4: jump b334
        return block_334(state, tracer, fn_state);
    }
    fn block_990<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_990_0: const #10128u : u32
        let s_990_0: u32 = 10128;
        // D s_990_1: read-reg s_990_0:struct
        let s_990_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_990_0 as isize);
            tracer.read_register(s_990_0 as isize, value);
            value
        };
        // C s_990_2: const #10128u : u32
        let s_990_2: u32 = 10128;
        // N s_990_3: write-reg s_990_2 <= s_990_1
        let s_990_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_990_2 as isize, s_990_1);
            tracer.write_register(s_990_2 as isize, s_990_1);
        };
        // N s_990_4: jump b332
        return block_332(state, tracer, fn_state);
    }
    fn block_991<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_991_0: const #14776u : u32
        let s_991_0: u32 = 14776;
        // D s_991_1: read-reg s_991_0:struct
        let s_991_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_991_0 as isize);
            tracer.read_register(s_991_0 as isize, value);
            value
        };
        // C s_991_2: const #14776u : u32
        let s_991_2: u32 = 14776;
        // N s_991_3: write-reg s_991_2 <= s_991_1
        let s_991_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_991_2 as isize, s_991_1);
            tracer.write_register(s_991_2 as isize, s_991_1);
        };
        // N s_991_4: jump b330
        return block_330(state, tracer, fn_state);
    }
    fn block_992<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_992_0: const #424u : u32
        let s_992_0: u32 = 424;
        // D s_992_1: read-reg s_992_0:u8
        let s_992_1: u8 = {
            let value = state.read_register::<u8>(s_992_0 as isize);
            tracer.read_register(s_992_0 as isize, value);
            value
        };
        // C s_992_2: const #2u : u8
        let s_992_2: u8 = 2;
        // D s_992_3: cmp-lt s_992_1 s_992_2
        let s_992_3: bool = ((s_992_1) < (s_992_2));
        // D s_992_4: not s_992_3
        let s_992_4: bool = !s_992_3;
        // D s_992_5: write-var gs#39425 <= s_992_4
        fn_state.gs_39425 = s_992_4;
        // N s_992_6: jump b328
        return block_328(state, tracer, fn_state);
    }
    fn block_993<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_993_0: const #432u : u32
        let s_993_0: u32 = 432;
        // D s_993_1: read-reg s_993_0:u8
        let s_993_1: u8 = {
            let value = state.read_register::<u8>(s_993_0 as isize);
            tracer.read_register(s_993_0 as isize, value);
            value
        };
        // C s_993_2: const #2u : u8
        let s_993_2: u8 = 2;
        // D s_993_3: cmp-lt s_993_1 s_993_2
        let s_993_3: bool = ((s_993_1) < (s_993_2));
        // D s_993_4: not s_993_3
        let s_993_4: bool = !s_993_3;
        // D s_993_5: write-var gs#39424 <= s_993_4
        fn_state.gs_39424 = s_993_4;
        // N s_993_6: jump b326
        return block_326(state, tracer, fn_state);
    }
    fn block_994<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_994_0: const #14776u : u32
        let s_994_0: u32 = 14776;
        // D s_994_1: read-reg s_994_0:struct
        let s_994_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_994_0 as isize);
            tracer.read_register(s_994_0 as isize, value);
            value
        };
        // C s_994_2: const #14776u : u32
        let s_994_2: u32 = 14776;
        // N s_994_3: write-reg s_994_2 <= s_994_1
        let s_994_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_994_2 as isize, s_994_1);
            tracer.write_register(s_994_2 as isize, s_994_1);
        };
        // N s_994_4: jump b324
        return block_324(state, tracer, fn_state);
    }
    fn block_995<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_995_0: const #424u : u32
        let s_995_0: u32 = 424;
        // D s_995_1: read-reg s_995_0:u8
        let s_995_1: u8 = {
            let value = state.read_register::<u8>(s_995_0 as isize);
            tracer.read_register(s_995_0 as isize, value);
            value
        };
        // C s_995_2: const #2u : u8
        let s_995_2: u8 = 2;
        // D s_995_3: cmp-lt s_995_1 s_995_2
        let s_995_3: bool = ((s_995_1) < (s_995_2));
        // D s_995_4: not s_995_3
        let s_995_4: bool = !s_995_3;
        // D s_995_5: write-var gs#39423 <= s_995_4
        fn_state.gs_39423 = s_995_4;
        // N s_995_6: jump b322
        return block_322(state, tracer, fn_state);
    }
    fn block_996<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_996_0: const #432u : u32
        let s_996_0: u32 = 432;
        // D s_996_1: read-reg s_996_0:u8
        let s_996_1: u8 = {
            let value = state.read_register::<u8>(s_996_0 as isize);
            tracer.read_register(s_996_0 as isize, value);
            value
        };
        // C s_996_2: const #2u : u8
        let s_996_2: u8 = 2;
        // D s_996_3: cmp-lt s_996_1 s_996_2
        let s_996_3: bool = ((s_996_1) < (s_996_2));
        // D s_996_4: not s_996_3
        let s_996_4: bool = !s_996_3;
        // D s_996_5: write-var gs#39422 <= s_996_4
        fn_state.gs_39422 = s_996_4;
        // N s_996_6: jump b320
        return block_320(state, tracer, fn_state);
    }
    fn block_997<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_997_0: const #14776u : u32
        let s_997_0: u32 = 14776;
        // D s_997_1: read-reg s_997_0:struct
        let s_997_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_997_0 as isize);
            tracer.read_register(s_997_0 as isize, value);
            value
        };
        // C s_997_2: const #14776u : u32
        let s_997_2: u32 = 14776;
        // N s_997_3: write-reg s_997_2 <= s_997_1
        let s_997_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_997_2 as isize, s_997_1);
            tracer.write_register(s_997_2 as isize, s_997_1);
        };
        // N s_997_4: jump b318
        return block_318(state, tracer, fn_state);
    }
    fn block_998<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_998_0: const #424u : u32
        let s_998_0: u32 = 424;
        // D s_998_1: read-reg s_998_0:u8
        let s_998_1: u8 = {
            let value = state.read_register::<u8>(s_998_0 as isize);
            tracer.read_register(s_998_0 as isize, value);
            value
        };
        // C s_998_2: const #2u : u8
        let s_998_2: u8 = 2;
        // D s_998_3: cmp-lt s_998_1 s_998_2
        let s_998_3: bool = ((s_998_1) < (s_998_2));
        // D s_998_4: not s_998_3
        let s_998_4: bool = !s_998_3;
        // D s_998_5: write-var gs#39421 <= s_998_4
        fn_state.gs_39421 = s_998_4;
        // N s_998_6: jump b316
        return block_316(state, tracer, fn_state);
    }
    fn block_999<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_999_0: const #432u : u32
        let s_999_0: u32 = 432;
        // D s_999_1: read-reg s_999_0:u8
        let s_999_1: u8 = {
            let value = state.read_register::<u8>(s_999_0 as isize);
            tracer.read_register(s_999_0 as isize, value);
            value
        };
        // C s_999_2: const #2u : u8
        let s_999_2: u8 = 2;
        // D s_999_3: cmp-lt s_999_1 s_999_2
        let s_999_3: bool = ((s_999_1) < (s_999_2));
        // D s_999_4: not s_999_3
        let s_999_4: bool = !s_999_3;
        // D s_999_5: write-var gs#39420 <= s_999_4
        fn_state.gs_39420 = s_999_4;
        // N s_999_6: jump b314
        return block_314(state, tracer, fn_state);
    }
    fn block_1000<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1000_0: const #14776u : u32
        let s_1000_0: u32 = 14776;
        // D s_1000_1: read-reg s_1000_0:struct
        let s_1000_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1000_0 as isize);
            tracer.read_register(s_1000_0 as isize, value);
            value
        };
        // C s_1000_2: const #14776u : u32
        let s_1000_2: u32 = 14776;
        // N s_1000_3: write-reg s_1000_2 <= s_1000_1
        let s_1000_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1000_2 as isize, s_1000_1);
            tracer.write_register(s_1000_2 as isize, s_1000_1);
        };
        // N s_1000_4: jump b312
        return block_312(state, tracer, fn_state);
    }
    fn block_1001<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1001_0: const #424u : u32
        let s_1001_0: u32 = 424;
        // D s_1001_1: read-reg s_1001_0:u8
        let s_1001_1: u8 = {
            let value = state.read_register::<u8>(s_1001_0 as isize);
            tracer.read_register(s_1001_0 as isize, value);
            value
        };
        // C s_1001_2: const #2u : u8
        let s_1001_2: u8 = 2;
        // D s_1001_3: cmp-lt s_1001_1 s_1001_2
        let s_1001_3: bool = ((s_1001_1) < (s_1001_2));
        // D s_1001_4: not s_1001_3
        let s_1001_4: bool = !s_1001_3;
        // D s_1001_5: write-var gs#39419 <= s_1001_4
        fn_state.gs_39419 = s_1001_4;
        // N s_1001_6: jump b310
        return block_310(state, tracer, fn_state);
    }
    fn block_1002<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1002_0: const #432u : u32
        let s_1002_0: u32 = 432;
        // D s_1002_1: read-reg s_1002_0:u8
        let s_1002_1: u8 = {
            let value = state.read_register::<u8>(s_1002_0 as isize);
            tracer.read_register(s_1002_0 as isize, value);
            value
        };
        // C s_1002_2: const #2u : u8
        let s_1002_2: u8 = 2;
        // D s_1002_3: cmp-lt s_1002_1 s_1002_2
        let s_1002_3: bool = ((s_1002_1) < (s_1002_2));
        // D s_1002_4: not s_1002_3
        let s_1002_4: bool = !s_1002_3;
        // D s_1002_5: write-var gs#39418 <= s_1002_4
        fn_state.gs_39418 = s_1002_4;
        // N s_1002_6: jump b308
        return block_308(state, tracer, fn_state);
    }
    fn block_1003<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1003_0: const #14776u : u32
        let s_1003_0: u32 = 14776;
        // D s_1003_1: read-reg s_1003_0:struct
        let s_1003_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1003_0 as isize);
            tracer.read_register(s_1003_0 as isize, value);
            value
        };
        // C s_1003_2: const #14776u : u32
        let s_1003_2: u32 = 14776;
        // N s_1003_3: write-reg s_1003_2 <= s_1003_1
        let s_1003_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1003_2 as isize, s_1003_1);
            tracer.write_register(s_1003_2 as isize, s_1003_1);
        };
        // N s_1003_4: jump b306
        return block_306(state, tracer, fn_state);
    }
    fn block_1004<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1004_0: const #424u : u32
        let s_1004_0: u32 = 424;
        // D s_1004_1: read-reg s_1004_0:u8
        let s_1004_1: u8 = {
            let value = state.read_register::<u8>(s_1004_0 as isize);
            tracer.read_register(s_1004_0 as isize, value);
            value
        };
        // C s_1004_2: const #2u : u8
        let s_1004_2: u8 = 2;
        // D s_1004_3: cmp-lt s_1004_1 s_1004_2
        let s_1004_3: bool = ((s_1004_1) < (s_1004_2));
        // D s_1004_4: not s_1004_3
        let s_1004_4: bool = !s_1004_3;
        // D s_1004_5: write-var gs#39417 <= s_1004_4
        fn_state.gs_39417 = s_1004_4;
        // N s_1004_6: jump b304
        return block_304(state, tracer, fn_state);
    }
    fn block_1005<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1005_0: const #432u : u32
        let s_1005_0: u32 = 432;
        // D s_1005_1: read-reg s_1005_0:u8
        let s_1005_1: u8 = {
            let value = state.read_register::<u8>(s_1005_0 as isize);
            tracer.read_register(s_1005_0 as isize, value);
            value
        };
        // C s_1005_2: const #2u : u8
        let s_1005_2: u8 = 2;
        // D s_1005_3: cmp-lt s_1005_1 s_1005_2
        let s_1005_3: bool = ((s_1005_1) < (s_1005_2));
        // D s_1005_4: not s_1005_3
        let s_1005_4: bool = !s_1005_3;
        // D s_1005_5: write-var gs#39416 <= s_1005_4
        fn_state.gs_39416 = s_1005_4;
        // N s_1005_6: jump b302
        return block_302(state, tracer, fn_state);
    }
    fn block_1006<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1006_0: const #14776u : u32
        let s_1006_0: u32 = 14776;
        // D s_1006_1: read-reg s_1006_0:struct
        let s_1006_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1006_0 as isize);
            tracer.read_register(s_1006_0 as isize, value);
            value
        };
        // C s_1006_2: const #14776u : u32
        let s_1006_2: u32 = 14776;
        // N s_1006_3: write-reg s_1006_2 <= s_1006_1
        let s_1006_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1006_2 as isize, s_1006_1);
            tracer.write_register(s_1006_2 as isize, s_1006_1);
        };
        // N s_1006_4: jump b300
        return block_300(state, tracer, fn_state);
    }
    fn block_1007<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1007_0: const #424u : u32
        let s_1007_0: u32 = 424;
        // D s_1007_1: read-reg s_1007_0:u8
        let s_1007_1: u8 = {
            let value = state.read_register::<u8>(s_1007_0 as isize);
            tracer.read_register(s_1007_0 as isize, value);
            value
        };
        // C s_1007_2: const #2u : u8
        let s_1007_2: u8 = 2;
        // D s_1007_3: cmp-lt s_1007_1 s_1007_2
        let s_1007_3: bool = ((s_1007_1) < (s_1007_2));
        // D s_1007_4: not s_1007_3
        let s_1007_4: bool = !s_1007_3;
        // D s_1007_5: write-var gs#39415 <= s_1007_4
        fn_state.gs_39415 = s_1007_4;
        // N s_1007_6: jump b298
        return block_298(state, tracer, fn_state);
    }
    fn block_1008<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1008_0: const #432u : u32
        let s_1008_0: u32 = 432;
        // D s_1008_1: read-reg s_1008_0:u8
        let s_1008_1: u8 = {
            let value = state.read_register::<u8>(s_1008_0 as isize);
            tracer.read_register(s_1008_0 as isize, value);
            value
        };
        // C s_1008_2: const #2u : u8
        let s_1008_2: u8 = 2;
        // D s_1008_3: cmp-lt s_1008_1 s_1008_2
        let s_1008_3: bool = ((s_1008_1) < (s_1008_2));
        // D s_1008_4: not s_1008_3
        let s_1008_4: bool = !s_1008_3;
        // D s_1008_5: write-var gs#39414 <= s_1008_4
        fn_state.gs_39414 = s_1008_4;
        // N s_1008_6: jump b296
        return block_296(state, tracer, fn_state);
    }
    fn block_1009<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1009_0: const #14776u : u32
        let s_1009_0: u32 = 14776;
        // D s_1009_1: read-reg s_1009_0:struct
        let s_1009_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1009_0 as isize);
            tracer.read_register(s_1009_0 as isize, value);
            value
        };
        // C s_1009_2: const #14776u : u32
        let s_1009_2: u32 = 14776;
        // N s_1009_3: write-reg s_1009_2 <= s_1009_1
        let s_1009_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1009_2 as isize, s_1009_1);
            tracer.write_register(s_1009_2 as isize, s_1009_1);
        };
        // N s_1009_4: jump b294
        return block_294(state, tracer, fn_state);
    }
    fn block_1010<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1010_0: const #424u : u32
        let s_1010_0: u32 = 424;
        // D s_1010_1: read-reg s_1010_0:u8
        let s_1010_1: u8 = {
            let value = state.read_register::<u8>(s_1010_0 as isize);
            tracer.read_register(s_1010_0 as isize, value);
            value
        };
        // C s_1010_2: const #2u : u8
        let s_1010_2: u8 = 2;
        // D s_1010_3: cmp-lt s_1010_1 s_1010_2
        let s_1010_3: bool = ((s_1010_1) < (s_1010_2));
        // D s_1010_4: not s_1010_3
        let s_1010_4: bool = !s_1010_3;
        // D s_1010_5: write-var gs#39410 <= s_1010_4
        fn_state.gs_39410 = s_1010_4;
        // N s_1010_6: jump b292
        return block_292(state, tracer, fn_state);
    }
    fn block_1011<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1011_0: const #432u : u32
        let s_1011_0: u32 = 432;
        // D s_1011_1: read-reg s_1011_0:u8
        let s_1011_1: u8 = {
            let value = state.read_register::<u8>(s_1011_0 as isize);
            tracer.read_register(s_1011_0 as isize, value);
            value
        };
        // C s_1011_2: const #2u : u8
        let s_1011_2: u8 = 2;
        // D s_1011_3: cmp-lt s_1011_1 s_1011_2
        let s_1011_3: bool = ((s_1011_1) < (s_1011_2));
        // D s_1011_4: not s_1011_3
        let s_1011_4: bool = !s_1011_3;
        // D s_1011_5: write-var gs#39409 <= s_1011_4
        fn_state.gs_39409 = s_1011_4;
        // N s_1011_6: jump b290
        return block_290(state, tracer, fn_state);
    }
    fn block_1012<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1012_0: const #14776u : u32
        let s_1012_0: u32 = 14776;
        // D s_1012_1: read-reg s_1012_0:struct
        let s_1012_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1012_0 as isize);
            tracer.read_register(s_1012_0 as isize, value);
            value
        };
        // C s_1012_2: const #14776u : u32
        let s_1012_2: u32 = 14776;
        // N s_1012_3: write-reg s_1012_2 <= s_1012_1
        let s_1012_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1012_2 as isize, s_1012_1);
            tracer.write_register(s_1012_2 as isize, s_1012_1);
        };
        // N s_1012_4: jump b288
        return block_288(state, tracer, fn_state);
    }
    fn block_1013<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1013_0: const #424u : u32
        let s_1013_0: u32 = 424;
        // D s_1013_1: read-reg s_1013_0:u8
        let s_1013_1: u8 = {
            let value = state.read_register::<u8>(s_1013_0 as isize);
            tracer.read_register(s_1013_0 as isize, value);
            value
        };
        // C s_1013_2: const #2u : u8
        let s_1013_2: u8 = 2;
        // D s_1013_3: cmp-lt s_1013_1 s_1013_2
        let s_1013_3: bool = ((s_1013_1) < (s_1013_2));
        // D s_1013_4: not s_1013_3
        let s_1013_4: bool = !s_1013_3;
        // D s_1013_5: write-var gs#39408 <= s_1013_4
        fn_state.gs_39408 = s_1013_4;
        // N s_1013_6: jump b286
        return block_286(state, tracer, fn_state);
    }
    fn block_1014<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1014_0: const #432u : u32
        let s_1014_0: u32 = 432;
        // D s_1014_1: read-reg s_1014_0:u8
        let s_1014_1: u8 = {
            let value = state.read_register::<u8>(s_1014_0 as isize);
            tracer.read_register(s_1014_0 as isize, value);
            value
        };
        // C s_1014_2: const #2u : u8
        let s_1014_2: u8 = 2;
        // D s_1014_3: cmp-lt s_1014_1 s_1014_2
        let s_1014_3: bool = ((s_1014_1) < (s_1014_2));
        // D s_1014_4: not s_1014_3
        let s_1014_4: bool = !s_1014_3;
        // D s_1014_5: write-var gs#39407 <= s_1014_4
        fn_state.gs_39407 = s_1014_4;
        // N s_1014_6: jump b284
        return block_284(state, tracer, fn_state);
    }
    fn block_1015<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1015_0: const #17664u : u32
        let s_1015_0: u32 = 17664;
        // D s_1015_1: read-reg s_1015_0:struct
        let s_1015_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1015_0 as isize);
            tracer.read_register(s_1015_0 as isize, value);
            value
        };
        // C s_1015_2: const #17664u : u32
        let s_1015_2: u32 = 17664;
        // N s_1015_3: write-reg s_1015_2 <= s_1015_1
        let s_1015_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1015_2 as isize, s_1015_1);
            tracer.write_register(s_1015_2 as isize, s_1015_1);
        };
        // N s_1015_4: jump b282
        return block_282(state, tracer, fn_state);
    }
    fn block_1016<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1016_0: const #424u : u32
        let s_1016_0: u32 = 424;
        // D s_1016_1: read-reg s_1016_0:u8
        let s_1016_1: u8 = {
            let value = state.read_register::<u8>(s_1016_0 as isize);
            tracer.read_register(s_1016_0 as isize, value);
            value
        };
        // C s_1016_2: const #2u : u8
        let s_1016_2: u8 = 2;
        // D s_1016_3: cmp-lt s_1016_1 s_1016_2
        let s_1016_3: bool = ((s_1016_1) < (s_1016_2));
        // D s_1016_4: not s_1016_3
        let s_1016_4: bool = !s_1016_3;
        // D s_1016_5: write-var gs#39400 <= s_1016_4
        fn_state.gs_39400 = s_1016_4;
        // N s_1016_6: jump b280
        return block_280(state, tracer, fn_state);
    }
    fn block_1017<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1017_0: const #17664u : u32
        let s_1017_0: u32 = 17664;
        // D s_1017_1: read-reg s_1017_0:struct
        let s_1017_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1017_0 as isize);
            tracer.read_register(s_1017_0 as isize, value);
            value
        };
        // C s_1017_2: const #17664u : u32
        let s_1017_2: u32 = 17664;
        // N s_1017_3: write-reg s_1017_2 <= s_1017_1
        let s_1017_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1017_2 as isize, s_1017_1);
            tracer.write_register(s_1017_2 as isize, s_1017_1);
        };
        // N s_1017_4: jump b278
        return block_278(state, tracer, fn_state);
    }
    fn block_1018<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1018_0: const #424u : u32
        let s_1018_0: u32 = 424;
        // D s_1018_1: read-reg s_1018_0:u8
        let s_1018_1: u8 = {
            let value = state.read_register::<u8>(s_1018_0 as isize);
            tracer.read_register(s_1018_0 as isize, value);
            value
        };
        // C s_1018_2: const #2u : u8
        let s_1018_2: u8 = 2;
        // D s_1018_3: cmp-lt s_1018_1 s_1018_2
        let s_1018_3: bool = ((s_1018_1) < (s_1018_2));
        // D s_1018_4: not s_1018_3
        let s_1018_4: bool = !s_1018_3;
        // D s_1018_5: write-var gs#39399 <= s_1018_4
        fn_state.gs_39399 = s_1018_4;
        // N s_1018_6: jump b276
        return block_276(state, tracer, fn_state);
    }
    fn block_1019<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1019_0: const #17664u : u32
        let s_1019_0: u32 = 17664;
        // D s_1019_1: read-reg s_1019_0:struct
        let s_1019_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1019_0 as isize);
            tracer.read_register(s_1019_0 as isize, value);
            value
        };
        // C s_1019_2: const #17664u : u32
        let s_1019_2: u32 = 17664;
        // N s_1019_3: write-reg s_1019_2 <= s_1019_1
        let s_1019_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1019_2 as isize, s_1019_1);
            tracer.write_register(s_1019_2 as isize, s_1019_1);
        };
        // N s_1019_4: jump b274
        return block_274(state, tracer, fn_state);
    }
    fn block_1020<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1020_0: const #424u : u32
        let s_1020_0: u32 = 424;
        // D s_1020_1: read-reg s_1020_0:u8
        let s_1020_1: u8 = {
            let value = state.read_register::<u8>(s_1020_0 as isize);
            tracer.read_register(s_1020_0 as isize, value);
            value
        };
        // C s_1020_2: const #2u : u8
        let s_1020_2: u8 = 2;
        // D s_1020_3: cmp-lt s_1020_1 s_1020_2
        let s_1020_3: bool = ((s_1020_1) < (s_1020_2));
        // D s_1020_4: not s_1020_3
        let s_1020_4: bool = !s_1020_3;
        // D s_1020_5: write-var gs#39398 <= s_1020_4
        fn_state.gs_39398 = s_1020_4;
        // N s_1020_6: jump b272
        return block_272(state, tracer, fn_state);
    }
    fn block_1021<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1021_0: const #17664u : u32
        let s_1021_0: u32 = 17664;
        // D s_1021_1: read-reg s_1021_0:struct
        let s_1021_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1021_0 as isize);
            tracer.read_register(s_1021_0 as isize, value);
            value
        };
        // C s_1021_2: const #17664u : u32
        let s_1021_2: u32 = 17664;
        // N s_1021_3: write-reg s_1021_2 <= s_1021_1
        let s_1021_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1021_2 as isize, s_1021_1);
            tracer.write_register(s_1021_2 as isize, s_1021_1);
        };
        // N s_1021_4: jump b270
        return block_270(state, tracer, fn_state);
    }
    fn block_1022<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1022_0: const #424u : u32
        let s_1022_0: u32 = 424;
        // D s_1022_1: read-reg s_1022_0:u8
        let s_1022_1: u8 = {
            let value = state.read_register::<u8>(s_1022_0 as isize);
            tracer.read_register(s_1022_0 as isize, value);
            value
        };
        // C s_1022_2: const #2u : u8
        let s_1022_2: u8 = 2;
        // D s_1022_3: cmp-lt s_1022_1 s_1022_2
        let s_1022_3: bool = ((s_1022_1) < (s_1022_2));
        // D s_1022_4: not s_1022_3
        let s_1022_4: bool = !s_1022_3;
        // D s_1022_5: write-var gs#39397 <= s_1022_4
        fn_state.gs_39397 = s_1022_4;
        // N s_1022_6: jump b268
        return block_268(state, tracer, fn_state);
    }
    fn block_1023<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1023_0: const #17664u : u32
        let s_1023_0: u32 = 17664;
        // D s_1023_1: read-reg s_1023_0:struct
        let s_1023_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1023_0 as isize);
            tracer.read_register(s_1023_0 as isize, value);
            value
        };
        // C s_1023_2: const #17664u : u32
        let s_1023_2: u32 = 17664;
        // N s_1023_3: write-reg s_1023_2 <= s_1023_1
        let s_1023_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1023_2 as isize, s_1023_1);
            tracer.write_register(s_1023_2 as isize, s_1023_1);
        };
        // N s_1023_4: jump b266
        return block_266(state, tracer, fn_state);
    }
    fn block_1024<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1024_0: const #424u : u32
        let s_1024_0: u32 = 424;
        // D s_1024_1: read-reg s_1024_0:u8
        let s_1024_1: u8 = {
            let value = state.read_register::<u8>(s_1024_0 as isize);
            tracer.read_register(s_1024_0 as isize, value);
            value
        };
        // C s_1024_2: const #2u : u8
        let s_1024_2: u8 = 2;
        // D s_1024_3: cmp-lt s_1024_1 s_1024_2
        let s_1024_3: bool = ((s_1024_1) < (s_1024_2));
        // D s_1024_4: not s_1024_3
        let s_1024_4: bool = !s_1024_3;
        // D s_1024_5: write-var gs#39396 <= s_1024_4
        fn_state.gs_39396 = s_1024_4;
        // N s_1024_6: jump b264
        return block_264(state, tracer, fn_state);
    }
    fn block_1025<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1025_0: const #17664u : u32
        let s_1025_0: u32 = 17664;
        // D s_1025_1: read-reg s_1025_0:struct
        let s_1025_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1025_0 as isize);
            tracer.read_register(s_1025_0 as isize, value);
            value
        };
        // C s_1025_2: const #17664u : u32
        let s_1025_2: u32 = 17664;
        // N s_1025_3: write-reg s_1025_2 <= s_1025_1
        let s_1025_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1025_2 as isize, s_1025_1);
            tracer.write_register(s_1025_2 as isize, s_1025_1);
        };
        // N s_1025_4: jump b262
        return block_262(state, tracer, fn_state);
    }
    fn block_1026<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1026_0: const #424u : u32
        let s_1026_0: u32 = 424;
        // D s_1026_1: read-reg s_1026_0:u8
        let s_1026_1: u8 = {
            let value = state.read_register::<u8>(s_1026_0 as isize);
            tracer.read_register(s_1026_0 as isize, value);
            value
        };
        // C s_1026_2: const #2u : u8
        let s_1026_2: u8 = 2;
        // D s_1026_3: cmp-lt s_1026_1 s_1026_2
        let s_1026_3: bool = ((s_1026_1) < (s_1026_2));
        // D s_1026_4: not s_1026_3
        let s_1026_4: bool = !s_1026_3;
        // D s_1026_5: write-var gs#39395 <= s_1026_4
        fn_state.gs_39395 = s_1026_4;
        // N s_1026_6: jump b260
        return block_260(state, tracer, fn_state);
    }
    fn block_1027<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1027_0: const #17664u : u32
        let s_1027_0: u32 = 17664;
        // D s_1027_1: read-reg s_1027_0:struct
        let s_1027_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1027_0 as isize);
            tracer.read_register(s_1027_0 as isize, value);
            value
        };
        // C s_1027_2: const #17664u : u32
        let s_1027_2: u32 = 17664;
        // N s_1027_3: write-reg s_1027_2 <= s_1027_1
        let s_1027_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1027_2 as isize, s_1027_1);
            tracer.write_register(s_1027_2 as isize, s_1027_1);
        };
        // N s_1027_4: jump b258
        return block_258(state, tracer, fn_state);
    }
    fn block_1028<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1028_0: const #424u : u32
        let s_1028_0: u32 = 424;
        // D s_1028_1: read-reg s_1028_0:u8
        let s_1028_1: u8 = {
            let value = state.read_register::<u8>(s_1028_0 as isize);
            tracer.read_register(s_1028_0 as isize, value);
            value
        };
        // C s_1028_2: const #2u : u8
        let s_1028_2: u8 = 2;
        // D s_1028_3: cmp-lt s_1028_1 s_1028_2
        let s_1028_3: bool = ((s_1028_1) < (s_1028_2));
        // D s_1028_4: not s_1028_3
        let s_1028_4: bool = !s_1028_3;
        // D s_1028_5: write-var gs#39392 <= s_1028_4
        fn_state.gs_39392 = s_1028_4;
        // N s_1028_6: jump b256
        return block_256(state, tracer, fn_state);
    }
    fn block_1029<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1029_0: const #17664u : u32
        let s_1029_0: u32 = 17664;
        // D s_1029_1: read-reg s_1029_0:struct
        let s_1029_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1029_0 as isize);
            tracer.read_register(s_1029_0 as isize, value);
            value
        };
        // C s_1029_2: const #17664u : u32
        let s_1029_2: u32 = 17664;
        // N s_1029_3: write-reg s_1029_2 <= s_1029_1
        let s_1029_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1029_2 as isize, s_1029_1);
            tracer.write_register(s_1029_2 as isize, s_1029_1);
        };
        // N s_1029_4: jump b254
        return block_254(state, tracer, fn_state);
    }
    fn block_1030<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1030_0: const #424u : u32
        let s_1030_0: u32 = 424;
        // D s_1030_1: read-reg s_1030_0:u8
        let s_1030_1: u8 = {
            let value = state.read_register::<u8>(s_1030_0 as isize);
            tracer.read_register(s_1030_0 as isize, value);
            value
        };
        // C s_1030_2: const #2u : u8
        let s_1030_2: u8 = 2;
        // D s_1030_3: cmp-lt s_1030_1 s_1030_2
        let s_1030_3: bool = ((s_1030_1) < (s_1030_2));
        // D s_1030_4: not s_1030_3
        let s_1030_4: bool = !s_1030_3;
        // D s_1030_5: write-var gs#39391 <= s_1030_4
        fn_state.gs_39391 = s_1030_4;
        // N s_1030_6: jump b252
        return block_252(state, tracer, fn_state);
    }
    fn block_1031<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1031_0: const #17664u : u32
        let s_1031_0: u32 = 17664;
        // D s_1031_1: read-reg s_1031_0:struct
        let s_1031_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1031_0 as isize);
            tracer.read_register(s_1031_0 as isize, value);
            value
        };
        // C s_1031_2: const #17664u : u32
        let s_1031_2: u32 = 17664;
        // N s_1031_3: write-reg s_1031_2 <= s_1031_1
        let s_1031_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1031_2 as isize, s_1031_1);
            tracer.write_register(s_1031_2 as isize, s_1031_1);
        };
        // N s_1031_4: jump b250
        return block_250(state, tracer, fn_state);
    }
    fn block_1032<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1032_0: const #424u : u32
        let s_1032_0: u32 = 424;
        // D s_1032_1: read-reg s_1032_0:u8
        let s_1032_1: u8 = {
            let value = state.read_register::<u8>(s_1032_0 as isize);
            tracer.read_register(s_1032_0 as isize, value);
            value
        };
        // C s_1032_2: const #2u : u8
        let s_1032_2: u8 = 2;
        // D s_1032_3: cmp-lt s_1032_1 s_1032_2
        let s_1032_3: bool = ((s_1032_1) < (s_1032_2));
        // D s_1032_4: not s_1032_3
        let s_1032_4: bool = !s_1032_3;
        // D s_1032_5: write-var gs#39390 <= s_1032_4
        fn_state.gs_39390 = s_1032_4;
        // N s_1032_6: jump b248
        return block_248(state, tracer, fn_state);
    }
    fn block_1033<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1033_0: const #17664u : u32
        let s_1033_0: u32 = 17664;
        // D s_1033_1: read-reg s_1033_0:struct
        let s_1033_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1033_0 as isize);
            tracer.read_register(s_1033_0 as isize, value);
            value
        };
        // C s_1033_2: const #17664u : u32
        let s_1033_2: u32 = 17664;
        // N s_1033_3: write-reg s_1033_2 <= s_1033_1
        let s_1033_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1033_2 as isize, s_1033_1);
            tracer.write_register(s_1033_2 as isize, s_1033_1);
        };
        // N s_1033_4: jump b246
        return block_246(state, tracer, fn_state);
    }
    fn block_1034<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1034_0: const #424u : u32
        let s_1034_0: u32 = 424;
        // D s_1034_1: read-reg s_1034_0:u8
        let s_1034_1: u8 = {
            let value = state.read_register::<u8>(s_1034_0 as isize);
            tracer.read_register(s_1034_0 as isize, value);
            value
        };
        // C s_1034_2: const #2u : u8
        let s_1034_2: u8 = 2;
        // D s_1034_3: cmp-lt s_1034_1 s_1034_2
        let s_1034_3: bool = ((s_1034_1) < (s_1034_2));
        // D s_1034_4: not s_1034_3
        let s_1034_4: bool = !s_1034_3;
        // D s_1034_5: write-var gs#39389 <= s_1034_4
        fn_state.gs_39389 = s_1034_4;
        // N s_1034_6: jump b244
        return block_244(state, tracer, fn_state);
    }
    fn block_1035<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1035_0: const #17664u : u32
        let s_1035_0: u32 = 17664;
        // D s_1035_1: read-reg s_1035_0:struct
        let s_1035_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1035_0 as isize);
            tracer.read_register(s_1035_0 as isize, value);
            value
        };
        // C s_1035_2: const #17664u : u32
        let s_1035_2: u32 = 17664;
        // N s_1035_3: write-reg s_1035_2 <= s_1035_1
        let s_1035_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1035_2 as isize, s_1035_1);
            tracer.write_register(s_1035_2 as isize, s_1035_1);
        };
        // N s_1035_4: jump b242
        return block_242(state, tracer, fn_state);
    }
    fn block_1036<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1036_0: const #424u : u32
        let s_1036_0: u32 = 424;
        // D s_1036_1: read-reg s_1036_0:u8
        let s_1036_1: u8 = {
            let value = state.read_register::<u8>(s_1036_0 as isize);
            tracer.read_register(s_1036_0 as isize, value);
            value
        };
        // C s_1036_2: const #2u : u8
        let s_1036_2: u8 = 2;
        // D s_1036_3: cmp-lt s_1036_1 s_1036_2
        let s_1036_3: bool = ((s_1036_1) < (s_1036_2));
        // D s_1036_4: not s_1036_3
        let s_1036_4: bool = !s_1036_3;
        // D s_1036_5: write-var gs#39388 <= s_1036_4
        fn_state.gs_39388 = s_1036_4;
        // N s_1036_6: jump b240
        return block_240(state, tracer, fn_state);
    }
    fn block_1037<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1037_0: const #17664u : u32
        let s_1037_0: u32 = 17664;
        // D s_1037_1: read-reg s_1037_0:struct
        let s_1037_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1037_0 as isize);
            tracer.read_register(s_1037_0 as isize, value);
            value
        };
        // C s_1037_2: const #17664u : u32
        let s_1037_2: u32 = 17664;
        // N s_1037_3: write-reg s_1037_2 <= s_1037_1
        let s_1037_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1037_2 as isize, s_1037_1);
            tracer.write_register(s_1037_2 as isize, s_1037_1);
        };
        // N s_1037_4: jump b238
        return block_238(state, tracer, fn_state);
    }
    fn block_1038<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1038_0: const #424u : u32
        let s_1038_0: u32 = 424;
        // D s_1038_1: read-reg s_1038_0:u8
        let s_1038_1: u8 = {
            let value = state.read_register::<u8>(s_1038_0 as isize);
            tracer.read_register(s_1038_0 as isize, value);
            value
        };
        // C s_1038_2: const #2u : u8
        let s_1038_2: u8 = 2;
        // D s_1038_3: cmp-lt s_1038_1 s_1038_2
        let s_1038_3: bool = ((s_1038_1) < (s_1038_2));
        // D s_1038_4: not s_1038_3
        let s_1038_4: bool = !s_1038_3;
        // D s_1038_5: write-var gs#39387 <= s_1038_4
        fn_state.gs_39387 = s_1038_4;
        // N s_1038_6: jump b236
        return block_236(state, tracer, fn_state);
    }
    fn block_1039<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1039_0: const #17664u : u32
        let s_1039_0: u32 = 17664;
        // D s_1039_1: read-reg s_1039_0:struct
        let s_1039_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1039_0 as isize);
            tracer.read_register(s_1039_0 as isize, value);
            value
        };
        // C s_1039_2: const #17664u : u32
        let s_1039_2: u32 = 17664;
        // N s_1039_3: write-reg s_1039_2 <= s_1039_1
        let s_1039_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1039_2 as isize, s_1039_1);
            tracer.write_register(s_1039_2 as isize, s_1039_1);
        };
        // N s_1039_4: jump b234
        return block_234(state, tracer, fn_state);
    }
    fn block_1040<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1040_0: const #424u : u32
        let s_1040_0: u32 = 424;
        // D s_1040_1: read-reg s_1040_0:u8
        let s_1040_1: u8 = {
            let value = state.read_register::<u8>(s_1040_0 as isize);
            tracer.read_register(s_1040_0 as isize, value);
            value
        };
        // C s_1040_2: const #2u : u8
        let s_1040_2: u8 = 2;
        // D s_1040_3: cmp-lt s_1040_1 s_1040_2
        let s_1040_3: bool = ((s_1040_1) < (s_1040_2));
        // D s_1040_4: not s_1040_3
        let s_1040_4: bool = !s_1040_3;
        // D s_1040_5: write-var gs#39386 <= s_1040_4
        fn_state.gs_39386 = s_1040_4;
        // N s_1040_6: jump b232
        return block_232(state, tracer, fn_state);
    }
    fn block_1041<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1041_0: const #17664u : u32
        let s_1041_0: u32 = 17664;
        // D s_1041_1: read-reg s_1041_0:struct
        let s_1041_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1041_0 as isize);
            tracer.read_register(s_1041_0 as isize, value);
            value
        };
        // C s_1041_2: const #17664u : u32
        let s_1041_2: u32 = 17664;
        // N s_1041_3: write-reg s_1041_2 <= s_1041_1
        let s_1041_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1041_2 as isize, s_1041_1);
            tracer.write_register(s_1041_2 as isize, s_1041_1);
        };
        // N s_1041_4: jump b230
        return block_230(state, tracer, fn_state);
    }
    fn block_1042<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1042_0: const #424u : u32
        let s_1042_0: u32 = 424;
        // D s_1042_1: read-reg s_1042_0:u8
        let s_1042_1: u8 = {
            let value = state.read_register::<u8>(s_1042_0 as isize);
            tracer.read_register(s_1042_0 as isize, value);
            value
        };
        // C s_1042_2: const #2u : u8
        let s_1042_2: u8 = 2;
        // D s_1042_3: cmp-lt s_1042_1 s_1042_2
        let s_1042_3: bool = ((s_1042_1) < (s_1042_2));
        // D s_1042_4: not s_1042_3
        let s_1042_4: bool = !s_1042_3;
        // D s_1042_5: write-var gs#39385 <= s_1042_4
        fn_state.gs_39385 = s_1042_4;
        // N s_1042_6: jump b228
        return block_228(state, tracer, fn_state);
    }
    fn block_1043<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1043_0: const #17664u : u32
        let s_1043_0: u32 = 17664;
        // D s_1043_1: read-reg s_1043_0:struct
        let s_1043_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1043_0 as isize);
            tracer.read_register(s_1043_0 as isize, value);
            value
        };
        // C s_1043_2: const #17664u : u32
        let s_1043_2: u32 = 17664;
        // N s_1043_3: write-reg s_1043_2 <= s_1043_1
        let s_1043_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1043_2 as isize, s_1043_1);
            tracer.write_register(s_1043_2 as isize, s_1043_1);
        };
        // N s_1043_4: jump b226
        return block_226(state, tracer, fn_state);
    }
    fn block_1044<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1044_0: const #424u : u32
        let s_1044_0: u32 = 424;
        // D s_1044_1: read-reg s_1044_0:u8
        let s_1044_1: u8 = {
            let value = state.read_register::<u8>(s_1044_0 as isize);
            tracer.read_register(s_1044_0 as isize, value);
            value
        };
        // C s_1044_2: const #2u : u8
        let s_1044_2: u8 = 2;
        // D s_1044_3: cmp-lt s_1044_1 s_1044_2
        let s_1044_3: bool = ((s_1044_1) < (s_1044_2));
        // D s_1044_4: not s_1044_3
        let s_1044_4: bool = !s_1044_3;
        // D s_1044_5: write-var gs#39384 <= s_1044_4
        fn_state.gs_39384 = s_1044_4;
        // N s_1044_6: jump b224
        return block_224(state, tracer, fn_state);
    }
    fn block_1045<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1045_0: const #17664u : u32
        let s_1045_0: u32 = 17664;
        // D s_1045_1: read-reg s_1045_0:struct
        let s_1045_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1045_0 as isize);
            tracer.read_register(s_1045_0 as isize, value);
            value
        };
        // C s_1045_2: const #17664u : u32
        let s_1045_2: u32 = 17664;
        // N s_1045_3: write-reg s_1045_2 <= s_1045_1
        let s_1045_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1045_2 as isize, s_1045_1);
            tracer.write_register(s_1045_2 as isize, s_1045_1);
        };
        // N s_1045_4: jump b222
        return block_222(state, tracer, fn_state);
    }
    fn block_1046<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1046_0: const #424u : u32
        let s_1046_0: u32 = 424;
        // D s_1046_1: read-reg s_1046_0:u8
        let s_1046_1: u8 = {
            let value = state.read_register::<u8>(s_1046_0 as isize);
            tracer.read_register(s_1046_0 as isize, value);
            value
        };
        // C s_1046_2: const #2u : u8
        let s_1046_2: u8 = 2;
        // D s_1046_3: cmp-lt s_1046_1 s_1046_2
        let s_1046_3: bool = ((s_1046_1) < (s_1046_2));
        // D s_1046_4: not s_1046_3
        let s_1046_4: bool = !s_1046_3;
        // D s_1046_5: write-var gs#39383 <= s_1046_4
        fn_state.gs_39383 = s_1046_4;
        // N s_1046_6: jump b220
        return block_220(state, tracer, fn_state);
    }
    fn block_1047<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1047_0: const #17664u : u32
        let s_1047_0: u32 = 17664;
        // D s_1047_1: read-reg s_1047_0:struct
        let s_1047_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1047_0 as isize);
            tracer.read_register(s_1047_0 as isize, value);
            value
        };
        // C s_1047_2: const #17664u : u32
        let s_1047_2: u32 = 17664;
        // N s_1047_3: write-reg s_1047_2 <= s_1047_1
        let s_1047_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1047_2 as isize, s_1047_1);
            tracer.write_register(s_1047_2 as isize, s_1047_1);
        };
        // N s_1047_4: jump b218
        return block_218(state, tracer, fn_state);
    }
    fn block_1048<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1048_0: const #424u : u32
        let s_1048_0: u32 = 424;
        // D s_1048_1: read-reg s_1048_0:u8
        let s_1048_1: u8 = {
            let value = state.read_register::<u8>(s_1048_0 as isize);
            tracer.read_register(s_1048_0 as isize, value);
            value
        };
        // C s_1048_2: const #2u : u8
        let s_1048_2: u8 = 2;
        // D s_1048_3: cmp-lt s_1048_1 s_1048_2
        let s_1048_3: bool = ((s_1048_1) < (s_1048_2));
        // D s_1048_4: not s_1048_3
        let s_1048_4: bool = !s_1048_3;
        // D s_1048_5: write-var gs#39379 <= s_1048_4
        fn_state.gs_39379 = s_1048_4;
        // N s_1048_6: jump b216
        return block_216(state, tracer, fn_state);
    }
    fn block_1049<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1049_0: const #17664u : u32
        let s_1049_0: u32 = 17664;
        // D s_1049_1: read-reg s_1049_0:struct
        let s_1049_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1049_0 as isize);
            tracer.read_register(s_1049_0 as isize, value);
            value
        };
        // C s_1049_2: const #17664u : u32
        let s_1049_2: u32 = 17664;
        // N s_1049_3: write-reg s_1049_2 <= s_1049_1
        let s_1049_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1049_2 as isize, s_1049_1);
            tracer.write_register(s_1049_2 as isize, s_1049_1);
        };
        // N s_1049_4: jump b214
        return block_214(state, tracer, fn_state);
    }
    fn block_1050<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1050_0: const #424u : u32
        let s_1050_0: u32 = 424;
        // D s_1050_1: read-reg s_1050_0:u8
        let s_1050_1: u8 = {
            let value = state.read_register::<u8>(s_1050_0 as isize);
            tracer.read_register(s_1050_0 as isize, value);
            value
        };
        // C s_1050_2: const #2u : u8
        let s_1050_2: u8 = 2;
        // D s_1050_3: cmp-lt s_1050_1 s_1050_2
        let s_1050_3: bool = ((s_1050_1) < (s_1050_2));
        // D s_1050_4: not s_1050_3
        let s_1050_4: bool = !s_1050_3;
        // D s_1050_5: write-var gs#39376 <= s_1050_4
        fn_state.gs_39376 = s_1050_4;
        // N s_1050_6: jump b212
        return block_212(state, tracer, fn_state);
    }
    fn block_1051<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1051_0: const #104648u : u32
        let s_1051_0: u32 = 104648;
        // D s_1051_1: read-reg s_1051_0:struct
        let s_1051_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1051_0 as isize);
            tracer.read_register(s_1051_0 as isize, value);
            value
        };
        // C s_1051_2: const #104648u : u32
        let s_1051_2: u32 = 104648;
        // N s_1051_3: write-reg s_1051_2 <= s_1051_1
        let s_1051_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1051_2 as isize, s_1051_1);
            tracer.write_register(s_1051_2 as isize, s_1051_1);
        };
        // N s_1051_4: jump b210
        return block_210(state, tracer, fn_state);
    }
    fn block_1052<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1052_0: const #424u : u32
        let s_1052_0: u32 = 424;
        // D s_1052_1: read-reg s_1052_0:u8
        let s_1052_1: u8 = {
            let value = state.read_register::<u8>(s_1052_0 as isize);
            tracer.read_register(s_1052_0 as isize, value);
            value
        };
        // C s_1052_2: const #2u : u8
        let s_1052_2: u8 = 2;
        // D s_1052_3: cmp-lt s_1052_1 s_1052_2
        let s_1052_3: bool = ((s_1052_1) < (s_1052_2));
        // D s_1052_4: not s_1052_3
        let s_1052_4: bool = !s_1052_3;
        // D s_1052_5: write-var gs#39323 <= s_1052_4
        fn_state.gs_39323 = s_1052_4;
        // N s_1052_6: jump b208
        return block_208(state, tracer, fn_state);
    }
    fn block_1053<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1053_0: const #432u : u32
        let s_1053_0: u32 = 432;
        // D s_1053_1: read-reg s_1053_0:u8
        let s_1053_1: u8 = {
            let value = state.read_register::<u8>(s_1053_0 as isize);
            tracer.read_register(s_1053_0 as isize, value);
            value
        };
        // C s_1053_2: const #2u : u8
        let s_1053_2: u8 = 2;
        // D s_1053_3: cmp-lt s_1053_1 s_1053_2
        let s_1053_3: bool = ((s_1053_1) < (s_1053_2));
        // D s_1053_4: not s_1053_3
        let s_1053_4: bool = !s_1053_3;
        // D s_1053_5: write-var gs#39322 <= s_1053_4
        fn_state.gs_39322 = s_1053_4;
        // N s_1053_6: jump b206
        return block_206(state, tracer, fn_state);
    }
    fn block_1054<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1054_0: const #104648u : u32
        let s_1054_0: u32 = 104648;
        // D s_1054_1: read-reg s_1054_0:struct
        let s_1054_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1054_0 as isize);
            tracer.read_register(s_1054_0 as isize, value);
            value
        };
        // C s_1054_2: const #104648u : u32
        let s_1054_2: u32 = 104648;
        // N s_1054_3: write-reg s_1054_2 <= s_1054_1
        let s_1054_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1054_2 as isize, s_1054_1);
            tracer.write_register(s_1054_2 as isize, s_1054_1);
        };
        // N s_1054_4: jump b204
        return block_204(state, tracer, fn_state);
    }
    fn block_1055<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1055_0: const #102680u : u32
        let s_1055_0: u32 = 102680;
        // D s_1055_1: read-reg s_1055_0:struct
        let s_1055_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1055_0 as isize);
            tracer.read_register(s_1055_0 as isize, value);
            value
        };
        // C s_1055_2: const #102680u : u32
        let s_1055_2: u32 = 102680;
        // N s_1055_3: write-reg s_1055_2 <= s_1055_1
        let s_1055_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1055_2 as isize, s_1055_1);
            tracer.write_register(s_1055_2 as isize, s_1055_1);
        };
        // N s_1055_4: jump b202
        return block_202(state, tracer, fn_state);
    }
    fn block_1056<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1056_0: const #424u : u32
        let s_1056_0: u32 = 424;
        // D s_1056_1: read-reg s_1056_0:u8
        let s_1056_1: u8 = {
            let value = state.read_register::<u8>(s_1056_0 as isize);
            tracer.read_register(s_1056_0 as isize, value);
            value
        };
        // C s_1056_2: const #2u : u8
        let s_1056_2: u8 = 2;
        // D s_1056_3: cmp-lt s_1056_1 s_1056_2
        let s_1056_3: bool = ((s_1056_1) < (s_1056_2));
        // D s_1056_4: not s_1056_3
        let s_1056_4: bool = !s_1056_3;
        // D s_1056_5: write-var gs#39190 <= s_1056_4
        fn_state.gs_39190 = s_1056_4;
        // N s_1056_6: jump b200
        return block_200(state, tracer, fn_state);
    }
    fn block_1057<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1057_0: const #102680u : u32
        let s_1057_0: u32 = 102680;
        // D s_1057_1: read-reg s_1057_0:struct
        let s_1057_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1057_0 as isize);
            tracer.read_register(s_1057_0 as isize, value);
            value
        };
        // C s_1057_2: const #102680u : u32
        let s_1057_2: u32 = 102680;
        // N s_1057_3: write-reg s_1057_2 <= s_1057_1
        let s_1057_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1057_2 as isize, s_1057_1);
            tracer.write_register(s_1057_2 as isize, s_1057_1);
        };
        // N s_1057_4: jump b198
        return block_198(state, tracer, fn_state);
    }
    fn block_1058<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1058_0: const #424u : u32
        let s_1058_0: u32 = 424;
        // D s_1058_1: read-reg s_1058_0:u8
        let s_1058_1: u8 = {
            let value = state.read_register::<u8>(s_1058_0 as isize);
            tracer.read_register(s_1058_0 as isize, value);
            value
        };
        // C s_1058_2: const #2u : u8
        let s_1058_2: u8 = 2;
        // D s_1058_3: cmp-lt s_1058_1 s_1058_2
        let s_1058_3: bool = ((s_1058_1) < (s_1058_2));
        // D s_1058_4: not s_1058_3
        let s_1058_4: bool = !s_1058_3;
        // D s_1058_5: write-var gs#39189 <= s_1058_4
        fn_state.gs_39189 = s_1058_4;
        // N s_1058_6: jump b196
        return block_196(state, tracer, fn_state);
    }
    fn block_1059<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1059_0: const #102680u : u32
        let s_1059_0: u32 = 102680;
        // D s_1059_1: read-reg s_1059_0:struct
        let s_1059_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1059_0 as isize);
            tracer.read_register(s_1059_0 as isize, value);
            value
        };
        // C s_1059_2: const #102680u : u32
        let s_1059_2: u32 = 102680;
        // N s_1059_3: write-reg s_1059_2 <= s_1059_1
        let s_1059_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1059_2 as isize, s_1059_1);
            tracer.write_register(s_1059_2 as isize, s_1059_1);
        };
        // N s_1059_4: jump b194
        return block_194(state, tracer, fn_state);
    }
    fn block_1060<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1060_0: const #424u : u32
        let s_1060_0: u32 = 424;
        // D s_1060_1: read-reg s_1060_0:u8
        let s_1060_1: u8 = {
            let value = state.read_register::<u8>(s_1060_0 as isize);
            tracer.read_register(s_1060_0 as isize, value);
            value
        };
        // C s_1060_2: const #2u : u8
        let s_1060_2: u8 = 2;
        // D s_1060_3: cmp-lt s_1060_1 s_1060_2
        let s_1060_3: bool = ((s_1060_1) < (s_1060_2));
        // D s_1060_4: not s_1060_3
        let s_1060_4: bool = !s_1060_3;
        // D s_1060_5: write-var gs#39188 <= s_1060_4
        fn_state.gs_39188 = s_1060_4;
        // N s_1060_6: jump b192
        return block_192(state, tracer, fn_state);
    }
    fn block_1061<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1061_0: const #102680u : u32
        let s_1061_0: u32 = 102680;
        // D s_1061_1: read-reg s_1061_0:struct
        let s_1061_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1061_0 as isize);
            tracer.read_register(s_1061_0 as isize, value);
            value
        };
        // C s_1061_2: const #102680u : u32
        let s_1061_2: u32 = 102680;
        // N s_1061_3: write-reg s_1061_2 <= s_1061_1
        let s_1061_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1061_2 as isize, s_1061_1);
            tracer.write_register(s_1061_2 as isize, s_1061_1);
        };
        // N s_1061_4: jump b190
        return block_190(state, tracer, fn_state);
    }
    fn block_1062<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1062_0: const #424u : u32
        let s_1062_0: u32 = 424;
        // D s_1062_1: read-reg s_1062_0:u8
        let s_1062_1: u8 = {
            let value = state.read_register::<u8>(s_1062_0 as isize);
            tracer.read_register(s_1062_0 as isize, value);
            value
        };
        // C s_1062_2: const #2u : u8
        let s_1062_2: u8 = 2;
        // D s_1062_3: cmp-lt s_1062_1 s_1062_2
        let s_1062_3: bool = ((s_1062_1) < (s_1062_2));
        // D s_1062_4: not s_1062_3
        let s_1062_4: bool = !s_1062_3;
        // D s_1062_5: write-var gs#39187 <= s_1062_4
        fn_state.gs_39187 = s_1062_4;
        // N s_1062_6: jump b188
        return block_188(state, tracer, fn_state);
    }
    fn block_1063<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1063_0: const #102680u : u32
        let s_1063_0: u32 = 102680;
        // D s_1063_1: read-reg s_1063_0:struct
        let s_1063_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1063_0 as isize);
            tracer.read_register(s_1063_0 as isize, value);
            value
        };
        // C s_1063_2: const #102680u : u32
        let s_1063_2: u32 = 102680;
        // N s_1063_3: write-reg s_1063_2 <= s_1063_1
        let s_1063_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1063_2 as isize, s_1063_1);
            tracer.write_register(s_1063_2 as isize, s_1063_1);
        };
        // N s_1063_4: jump b186
        return block_186(state, tracer, fn_state);
    }
    fn block_1064<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1064_0: const #424u : u32
        let s_1064_0: u32 = 424;
        // D s_1064_1: read-reg s_1064_0:u8
        let s_1064_1: u8 = {
            let value = state.read_register::<u8>(s_1064_0 as isize);
            tracer.read_register(s_1064_0 as isize, value);
            value
        };
        // C s_1064_2: const #2u : u8
        let s_1064_2: u8 = 2;
        // D s_1064_3: cmp-lt s_1064_1 s_1064_2
        let s_1064_3: bool = ((s_1064_1) < (s_1064_2));
        // D s_1064_4: not s_1064_3
        let s_1064_4: bool = !s_1064_3;
        // D s_1064_5: write-var gs#39186 <= s_1064_4
        fn_state.gs_39186 = s_1064_4;
        // N s_1064_6: jump b184
        return block_184(state, tracer, fn_state);
    }
    fn block_1065<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1065_0: const #102680u : u32
        let s_1065_0: u32 = 102680;
        // D s_1065_1: read-reg s_1065_0:struct
        let s_1065_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1065_0 as isize);
            tracer.read_register(s_1065_0 as isize, value);
            value
        };
        // C s_1065_2: const #102680u : u32
        let s_1065_2: u32 = 102680;
        // N s_1065_3: write-reg s_1065_2 <= s_1065_1
        let s_1065_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1065_2 as isize, s_1065_1);
            tracer.write_register(s_1065_2 as isize, s_1065_1);
        };
        // N s_1065_4: jump b182
        return block_182(state, tracer, fn_state);
    }
    fn block_1066<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1066_0: const #424u : u32
        let s_1066_0: u32 = 424;
        // D s_1066_1: read-reg s_1066_0:u8
        let s_1066_1: u8 = {
            let value = state.read_register::<u8>(s_1066_0 as isize);
            tracer.read_register(s_1066_0 as isize, value);
            value
        };
        // C s_1066_2: const #2u : u8
        let s_1066_2: u8 = 2;
        // D s_1066_3: cmp-lt s_1066_1 s_1066_2
        let s_1066_3: bool = ((s_1066_1) < (s_1066_2));
        // D s_1066_4: not s_1066_3
        let s_1066_4: bool = !s_1066_3;
        // D s_1066_5: write-var gs#39185 <= s_1066_4
        fn_state.gs_39185 = s_1066_4;
        // N s_1066_6: jump b180
        return block_180(state, tracer, fn_state);
    }
    fn block_1067<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1067_0: const #100992u : u32
        let s_1067_0: u32 = 100992;
        // D s_1067_1: read-reg s_1067_0:struct
        let s_1067_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1067_0 as isize);
            tracer.read_register(s_1067_0 as isize, value);
            value
        };
        // C s_1067_2: const #100992u : u32
        let s_1067_2: u32 = 100992;
        // N s_1067_3: write-reg s_1067_2 <= s_1067_1
        let s_1067_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1067_2 as isize, s_1067_1);
            tracer.write_register(s_1067_2 as isize, s_1067_1);
        };
        // N s_1067_4: jump b178
        return block_178(state, tracer, fn_state);
    }
    fn block_1068<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1068_0: const #424u : u32
        let s_1068_0: u32 = 424;
        // D s_1068_1: read-reg s_1068_0:u8
        let s_1068_1: u8 = {
            let value = state.read_register::<u8>(s_1068_0 as isize);
            tracer.read_register(s_1068_0 as isize, value);
            value
        };
        // C s_1068_2: const #2u : u8
        let s_1068_2: u8 = 2;
        // D s_1068_3: cmp-lt s_1068_1 s_1068_2
        let s_1068_3: bool = ((s_1068_1) < (s_1068_2));
        // D s_1068_4: not s_1068_3
        let s_1068_4: bool = !s_1068_3;
        // D s_1068_5: write-var gs#39066 <= s_1068_4
        fn_state.gs_39066 = s_1068_4;
        // N s_1068_6: jump b176
        return block_176(state, tracer, fn_state);
    }
    fn block_1069<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1069_0: const #100992u : u32
        let s_1069_0: u32 = 100992;
        // D s_1069_1: read-reg s_1069_0:struct
        let s_1069_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1069_0 as isize);
            tracer.read_register(s_1069_0 as isize, value);
            value
        };
        // C s_1069_2: const #100992u : u32
        let s_1069_2: u32 = 100992;
        // N s_1069_3: write-reg s_1069_2 <= s_1069_1
        let s_1069_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1069_2 as isize, s_1069_1);
            tracer.write_register(s_1069_2 as isize, s_1069_1);
        };
        // N s_1069_4: jump b174
        return block_174(state, tracer, fn_state);
    }
    fn block_1070<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1070_0: const #424u : u32
        let s_1070_0: u32 = 424;
        // D s_1070_1: read-reg s_1070_0:u8
        let s_1070_1: u8 = {
            let value = state.read_register::<u8>(s_1070_0 as isize);
            tracer.read_register(s_1070_0 as isize, value);
            value
        };
        // C s_1070_2: const #2u : u8
        let s_1070_2: u8 = 2;
        // D s_1070_3: cmp-lt s_1070_1 s_1070_2
        let s_1070_3: bool = ((s_1070_1) < (s_1070_2));
        // D s_1070_4: not s_1070_3
        let s_1070_4: bool = !s_1070_3;
        // D s_1070_5: write-var gs#39063 <= s_1070_4
        fn_state.gs_39063 = s_1070_4;
        // N s_1070_6: jump b172
        return block_172(state, tracer, fn_state);
    }
    fn block_1071<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1071_0: const #100992u : u32
        let s_1071_0: u32 = 100992;
        // D s_1071_1: read-reg s_1071_0:struct
        let s_1071_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1071_0 as isize);
            tracer.read_register(s_1071_0 as isize, value);
            value
        };
        // C s_1071_2: const #100992u : u32
        let s_1071_2: u32 = 100992;
        // N s_1071_3: write-reg s_1071_2 <= s_1071_1
        let s_1071_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1071_2 as isize, s_1071_1);
            tracer.write_register(s_1071_2 as isize, s_1071_1);
        };
        // N s_1071_4: jump b170
        return block_170(state, tracer, fn_state);
    }
    fn block_1072<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1072_0: const #424u : u32
        let s_1072_0: u32 = 424;
        // D s_1072_1: read-reg s_1072_0:u8
        let s_1072_1: u8 = {
            let value = state.read_register::<u8>(s_1072_0 as isize);
            tracer.read_register(s_1072_0 as isize, value);
            value
        };
        // C s_1072_2: const #2u : u8
        let s_1072_2: u8 = 2;
        // D s_1072_3: cmp-lt s_1072_1 s_1072_2
        let s_1072_3: bool = ((s_1072_1) < (s_1072_2));
        // D s_1072_4: not s_1072_3
        let s_1072_4: bool = !s_1072_3;
        // D s_1072_5: write-var gs#39062 <= s_1072_4
        fn_state.gs_39062 = s_1072_4;
        // N s_1072_6: jump b168
        return block_168(state, tracer, fn_state);
    }
    fn block_1073<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1073_0: const #100992u : u32
        let s_1073_0: u32 = 100992;
        // D s_1073_1: read-reg s_1073_0:struct
        let s_1073_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1073_0 as isize);
            tracer.read_register(s_1073_0 as isize, value);
            value
        };
        // C s_1073_2: const #100992u : u32
        let s_1073_2: u32 = 100992;
        // N s_1073_3: write-reg s_1073_2 <= s_1073_1
        let s_1073_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1073_2 as isize, s_1073_1);
            tracer.write_register(s_1073_2 as isize, s_1073_1);
        };
        // N s_1073_4: jump b166
        return block_166(state, tracer, fn_state);
    }
    fn block_1074<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1074_0: const #424u : u32
        let s_1074_0: u32 = 424;
        // D s_1074_1: read-reg s_1074_0:u8
        let s_1074_1: u8 = {
            let value = state.read_register::<u8>(s_1074_0 as isize);
            tracer.read_register(s_1074_0 as isize, value);
            value
        };
        // C s_1074_2: const #2u : u8
        let s_1074_2: u8 = 2;
        // D s_1074_3: cmp-lt s_1074_1 s_1074_2
        let s_1074_3: bool = ((s_1074_1) < (s_1074_2));
        // D s_1074_4: not s_1074_3
        let s_1074_4: bool = !s_1074_3;
        // D s_1074_5: write-var gs#39061 <= s_1074_4
        fn_state.gs_39061 = s_1074_4;
        // N s_1074_6: jump b164
        return block_164(state, tracer, fn_state);
    }
    fn block_1075<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1075_0: const #100992u : u32
        let s_1075_0: u32 = 100992;
        // D s_1075_1: read-reg s_1075_0:struct
        let s_1075_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1075_0 as isize);
            tracer.read_register(s_1075_0 as isize, value);
            value
        };
        // C s_1075_2: const #100992u : u32
        let s_1075_2: u32 = 100992;
        // N s_1075_3: write-reg s_1075_2 <= s_1075_1
        let s_1075_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1075_2 as isize, s_1075_1);
            tracer.write_register(s_1075_2 as isize, s_1075_1);
        };
        // N s_1075_4: jump b162
        return block_162(state, tracer, fn_state);
    }
    fn block_1076<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1076_0: const #424u : u32
        let s_1076_0: u32 = 424;
        // D s_1076_1: read-reg s_1076_0:u8
        let s_1076_1: u8 = {
            let value = state.read_register::<u8>(s_1076_0 as isize);
            tracer.read_register(s_1076_0 as isize, value);
            value
        };
        // C s_1076_2: const #2u : u8
        let s_1076_2: u8 = 2;
        // D s_1076_3: cmp-lt s_1076_1 s_1076_2
        let s_1076_3: bool = ((s_1076_1) < (s_1076_2));
        // D s_1076_4: not s_1076_3
        let s_1076_4: bool = !s_1076_3;
        // D s_1076_5: write-var gs#39058 <= s_1076_4
        fn_state.gs_39058 = s_1076_4;
        // N s_1076_6: jump b160
        return block_160(state, tracer, fn_state);
    }
    fn block_1077<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1077_0: const #100992u : u32
        let s_1077_0: u32 = 100992;
        // D s_1077_1: read-reg s_1077_0:struct
        let s_1077_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1077_0 as isize);
            tracer.read_register(s_1077_0 as isize, value);
            value
        };
        // C s_1077_2: const #100992u : u32
        let s_1077_2: u32 = 100992;
        // N s_1077_3: write-reg s_1077_2 <= s_1077_1
        let s_1077_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1077_2 as isize, s_1077_1);
            tracer.write_register(s_1077_2 as isize, s_1077_1);
        };
        // N s_1077_4: jump b158
        return block_158(state, tracer, fn_state);
    }
    fn block_1078<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1078_0: const #424u : u32
        let s_1078_0: u32 = 424;
        // D s_1078_1: read-reg s_1078_0:u8
        let s_1078_1: u8 = {
            let value = state.read_register::<u8>(s_1078_0 as isize);
            tracer.read_register(s_1078_0 as isize, value);
            value
        };
        // C s_1078_2: const #2u : u8
        let s_1078_2: u8 = 2;
        // D s_1078_3: cmp-lt s_1078_1 s_1078_2
        let s_1078_3: bool = ((s_1078_1) < (s_1078_2));
        // D s_1078_4: not s_1078_3
        let s_1078_4: bool = !s_1078_3;
        // D s_1078_5: write-var gs#39057 <= s_1078_4
        fn_state.gs_39057 = s_1078_4;
        // N s_1078_6: jump b156
        return block_156(state, tracer, fn_state);
    }
    fn block_1079<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1079_0: const #100992u : u32
        let s_1079_0: u32 = 100992;
        // D s_1079_1: read-reg s_1079_0:struct
        let s_1079_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1079_0 as isize);
            tracer.read_register(s_1079_0 as isize, value);
            value
        };
        // C s_1079_2: const #100992u : u32
        let s_1079_2: u32 = 100992;
        // N s_1079_3: write-reg s_1079_2 <= s_1079_1
        let s_1079_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1079_2 as isize, s_1079_1);
            tracer.write_register(s_1079_2 as isize, s_1079_1);
        };
        // N s_1079_4: jump b154
        return block_154(state, tracer, fn_state);
    }
    fn block_1080<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1080_0: const #424u : u32
        let s_1080_0: u32 = 424;
        // D s_1080_1: read-reg s_1080_0:u8
        let s_1080_1: u8 = {
            let value = state.read_register::<u8>(s_1080_0 as isize);
            tracer.read_register(s_1080_0 as isize, value);
            value
        };
        // C s_1080_2: const #2u : u8
        let s_1080_2: u8 = 2;
        // D s_1080_3: cmp-lt s_1080_1 s_1080_2
        let s_1080_3: bool = ((s_1080_1) < (s_1080_2));
        // D s_1080_4: not s_1080_3
        let s_1080_4: bool = !s_1080_3;
        // D s_1080_5: write-var gs#39056 <= s_1080_4
        fn_state.gs_39056 = s_1080_4;
        // N s_1080_6: jump b152
        return block_152(state, tracer, fn_state);
    }
    fn block_1081<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1081_0: const #11720u : u32
        let s_1081_0: u32 = 11720;
        // D s_1081_1: read-reg s_1081_0:struct
        let s_1081_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1081_0 as isize);
            tracer.read_register(s_1081_0 as isize, value);
            value
        };
        // C s_1081_2: const #11720u : u32
        let s_1081_2: u32 = 11720;
        // N s_1081_3: write-reg s_1081_2 <= s_1081_1
        let s_1081_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1081_2 as isize, s_1081_1);
            tracer.write_register(s_1081_2 as isize, s_1081_1);
        };
        // N s_1081_4: jump b150
        return block_150(state, tracer, fn_state);
    }
    fn block_1082<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1082_0: const #424u : u32
        let s_1082_0: u32 = 424;
        // D s_1082_1: read-reg s_1082_0:u8
        let s_1082_1: u8 = {
            let value = state.read_register::<u8>(s_1082_0 as isize);
            tracer.read_register(s_1082_0 as isize, value);
            value
        };
        // C s_1082_2: const #2u : u8
        let s_1082_2: u8 = 2;
        // D s_1082_3: cmp-lt s_1082_1 s_1082_2
        let s_1082_3: bool = ((s_1082_1) < (s_1082_2));
        // D s_1082_4: not s_1082_3
        let s_1082_4: bool = !s_1082_3;
        // D s_1082_5: write-var gs#38982 <= s_1082_4
        fn_state.gs_38982 = s_1082_4;
        // N s_1082_6: jump b148
        return block_148(state, tracer, fn_state);
    }
    fn block_1083<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1083_0: const #432u : u32
        let s_1083_0: u32 = 432;
        // D s_1083_1: read-reg s_1083_0:u8
        let s_1083_1: u8 = {
            let value = state.read_register::<u8>(s_1083_0 as isize);
            tracer.read_register(s_1083_0 as isize, value);
            value
        };
        // C s_1083_2: const #2u : u8
        let s_1083_2: u8 = 2;
        // D s_1083_3: cmp-lt s_1083_1 s_1083_2
        let s_1083_3: bool = ((s_1083_1) < (s_1083_2));
        // D s_1083_4: not s_1083_3
        let s_1083_4: bool = !s_1083_3;
        // D s_1083_5: write-var gs#38981 <= s_1083_4
        fn_state.gs_38981 = s_1083_4;
        // N s_1083_6: jump b146
        return block_146(state, tracer, fn_state);
    }
    fn block_1084<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1084_0: const #11720u : u32
        let s_1084_0: u32 = 11720;
        // D s_1084_1: read-reg s_1084_0:struct
        let s_1084_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1084_0 as isize);
            tracer.read_register(s_1084_0 as isize, value);
            value
        };
        // C s_1084_2: const #11720u : u32
        let s_1084_2: u32 = 11720;
        // N s_1084_3: write-reg s_1084_2 <= s_1084_1
        let s_1084_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1084_2 as isize, s_1084_1);
            tracer.write_register(s_1084_2 as isize, s_1084_1);
        };
        // N s_1084_4: jump b144
        return block_144(state, tracer, fn_state);
    }
    fn block_1085<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1085_0: const #424u : u32
        let s_1085_0: u32 = 424;
        // D s_1085_1: read-reg s_1085_0:u8
        let s_1085_1: u8 = {
            let value = state.read_register::<u8>(s_1085_0 as isize);
            tracer.read_register(s_1085_0 as isize, value);
            value
        };
        // C s_1085_2: const #2u : u8
        let s_1085_2: u8 = 2;
        // D s_1085_3: cmp-lt s_1085_1 s_1085_2
        let s_1085_3: bool = ((s_1085_1) < (s_1085_2));
        // D s_1085_4: not s_1085_3
        let s_1085_4: bool = !s_1085_3;
        // D s_1085_5: write-var gs#38980 <= s_1085_4
        fn_state.gs_38980 = s_1085_4;
        // N s_1085_6: jump b142
        return block_142(state, tracer, fn_state);
    }
    fn block_1086<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1086_0: const #432u : u32
        let s_1086_0: u32 = 432;
        // D s_1086_1: read-reg s_1086_0:u8
        let s_1086_1: u8 = {
            let value = state.read_register::<u8>(s_1086_0 as isize);
            tracer.read_register(s_1086_0 as isize, value);
            value
        };
        // C s_1086_2: const #2u : u8
        let s_1086_2: u8 = 2;
        // D s_1086_3: cmp-lt s_1086_1 s_1086_2
        let s_1086_3: bool = ((s_1086_1) < (s_1086_2));
        // D s_1086_4: not s_1086_3
        let s_1086_4: bool = !s_1086_3;
        // D s_1086_5: write-var gs#38979 <= s_1086_4
        fn_state.gs_38979 = s_1086_4;
        // N s_1086_6: jump b140
        return block_140(state, tracer, fn_state);
    }
    fn block_1087<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1087_0: const #11720u : u32
        let s_1087_0: u32 = 11720;
        // D s_1087_1: read-reg s_1087_0:struct
        let s_1087_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1087_0 as isize);
            tracer.read_register(s_1087_0 as isize, value);
            value
        };
        // C s_1087_2: const #11720u : u32
        let s_1087_2: u32 = 11720;
        // N s_1087_3: write-reg s_1087_2 <= s_1087_1
        let s_1087_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1087_2 as isize, s_1087_1);
            tracer.write_register(s_1087_2 as isize, s_1087_1);
        };
        // N s_1087_4: jump b138
        return block_138(state, tracer, fn_state);
    }
    fn block_1088<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1088_0: const #424u : u32
        let s_1088_0: u32 = 424;
        // D s_1088_1: read-reg s_1088_0:u8
        let s_1088_1: u8 = {
            let value = state.read_register::<u8>(s_1088_0 as isize);
            tracer.read_register(s_1088_0 as isize, value);
            value
        };
        // C s_1088_2: const #2u : u8
        let s_1088_2: u8 = 2;
        // D s_1088_3: cmp-lt s_1088_1 s_1088_2
        let s_1088_3: bool = ((s_1088_1) < (s_1088_2));
        // D s_1088_4: not s_1088_3
        let s_1088_4: bool = !s_1088_3;
        // D s_1088_5: write-var gs#38978 <= s_1088_4
        fn_state.gs_38978 = s_1088_4;
        // N s_1088_6: jump b136
        return block_136(state, tracer, fn_state);
    }
    fn block_1089<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1089_0: const #432u : u32
        let s_1089_0: u32 = 432;
        // D s_1089_1: read-reg s_1089_0:u8
        let s_1089_1: u8 = {
            let value = state.read_register::<u8>(s_1089_0 as isize);
            tracer.read_register(s_1089_0 as isize, value);
            value
        };
        // C s_1089_2: const #2u : u8
        let s_1089_2: u8 = 2;
        // D s_1089_3: cmp-lt s_1089_1 s_1089_2
        let s_1089_3: bool = ((s_1089_1) < (s_1089_2));
        // D s_1089_4: not s_1089_3
        let s_1089_4: bool = !s_1089_3;
        // D s_1089_5: write-var gs#38977 <= s_1089_4
        fn_state.gs_38977 = s_1089_4;
        // N s_1089_6: jump b134
        return block_134(state, tracer, fn_state);
    }
    fn block_1090<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1090_0: const #11720u : u32
        let s_1090_0: u32 = 11720;
        // D s_1090_1: read-reg s_1090_0:struct
        let s_1090_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1090_0 as isize);
            tracer.read_register(s_1090_0 as isize, value);
            value
        };
        // C s_1090_2: const #11720u : u32
        let s_1090_2: u32 = 11720;
        // N s_1090_3: write-reg s_1090_2 <= s_1090_1
        let s_1090_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1090_2 as isize, s_1090_1);
            tracer.write_register(s_1090_2 as isize, s_1090_1);
        };
        // N s_1090_4: jump b132
        return block_132(state, tracer, fn_state);
    }
    fn block_1091<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1091_0: const #424u : u32
        let s_1091_0: u32 = 424;
        // D s_1091_1: read-reg s_1091_0:u8
        let s_1091_1: u8 = {
            let value = state.read_register::<u8>(s_1091_0 as isize);
            tracer.read_register(s_1091_0 as isize, value);
            value
        };
        // C s_1091_2: const #2u : u8
        let s_1091_2: u8 = 2;
        // D s_1091_3: cmp-lt s_1091_1 s_1091_2
        let s_1091_3: bool = ((s_1091_1) < (s_1091_2));
        // D s_1091_4: not s_1091_3
        let s_1091_4: bool = !s_1091_3;
        // D s_1091_5: write-var gs#38976 <= s_1091_4
        fn_state.gs_38976 = s_1091_4;
        // N s_1091_6: jump b130
        return block_130(state, tracer, fn_state);
    }
    fn block_1092<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1092_0: const #432u : u32
        let s_1092_0: u32 = 432;
        // D s_1092_1: read-reg s_1092_0:u8
        let s_1092_1: u8 = {
            let value = state.read_register::<u8>(s_1092_0 as isize);
            tracer.read_register(s_1092_0 as isize, value);
            value
        };
        // C s_1092_2: const #2u : u8
        let s_1092_2: u8 = 2;
        // D s_1092_3: cmp-lt s_1092_1 s_1092_2
        let s_1092_3: bool = ((s_1092_1) < (s_1092_2));
        // D s_1092_4: not s_1092_3
        let s_1092_4: bool = !s_1092_3;
        // D s_1092_5: write-var gs#38975 <= s_1092_4
        fn_state.gs_38975 = s_1092_4;
        // N s_1092_6: jump b128
        return block_128(state, tracer, fn_state);
    }
    fn block_1093<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1093_0: const #11720u : u32
        let s_1093_0: u32 = 11720;
        // D s_1093_1: read-reg s_1093_0:struct
        let s_1093_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1093_0 as isize);
            tracer.read_register(s_1093_0 as isize, value);
            value
        };
        // C s_1093_2: const #11720u : u32
        let s_1093_2: u32 = 11720;
        // N s_1093_3: write-reg s_1093_2 <= s_1093_1
        let s_1093_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1093_2 as isize, s_1093_1);
            tracer.write_register(s_1093_2 as isize, s_1093_1);
        };
        // N s_1093_4: jump b126
        return block_126(state, tracer, fn_state);
    }
    fn block_1094<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1094_0: const #424u : u32
        let s_1094_0: u32 = 424;
        // D s_1094_1: read-reg s_1094_0:u8
        let s_1094_1: u8 = {
            let value = state.read_register::<u8>(s_1094_0 as isize);
            tracer.read_register(s_1094_0 as isize, value);
            value
        };
        // C s_1094_2: const #2u : u8
        let s_1094_2: u8 = 2;
        // D s_1094_3: cmp-lt s_1094_1 s_1094_2
        let s_1094_3: bool = ((s_1094_1) < (s_1094_2));
        // D s_1094_4: not s_1094_3
        let s_1094_4: bool = !s_1094_3;
        // D s_1094_5: write-var gs#38974 <= s_1094_4
        fn_state.gs_38974 = s_1094_4;
        // N s_1094_6: jump b124
        return block_124(state, tracer, fn_state);
    }
    fn block_1095<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1095_0: const #432u : u32
        let s_1095_0: u32 = 432;
        // D s_1095_1: read-reg s_1095_0:u8
        let s_1095_1: u8 = {
            let value = state.read_register::<u8>(s_1095_0 as isize);
            tracer.read_register(s_1095_0 as isize, value);
            value
        };
        // C s_1095_2: const #2u : u8
        let s_1095_2: u8 = 2;
        // D s_1095_3: cmp-lt s_1095_1 s_1095_2
        let s_1095_3: bool = ((s_1095_1) < (s_1095_2));
        // D s_1095_4: not s_1095_3
        let s_1095_4: bool = !s_1095_3;
        // D s_1095_5: write-var gs#38973 <= s_1095_4
        fn_state.gs_38973 = s_1095_4;
        // N s_1095_6: jump b122
        return block_122(state, tracer, fn_state);
    }
    fn block_1096<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1096_0: const #13608u : u32
        let s_1096_0: u32 = 13608;
        // D s_1096_1: read-reg s_1096_0:struct
        let s_1096_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1096_0 as isize);
            tracer.read_register(s_1096_0 as isize, value);
            value
        };
        // C s_1096_2: const #13608u : u32
        let s_1096_2: u32 = 13608;
        // N s_1096_3: write-reg s_1096_2 <= s_1096_1
        let s_1096_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1096_2 as isize, s_1096_1);
            tracer.write_register(s_1096_2 as isize, s_1096_1);
        };
        // N s_1096_4: jump b120
        return block_120(state, tracer, fn_state);
    }
    fn block_1097<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1097_0: const #424u : u32
        let s_1097_0: u32 = 424;
        // D s_1097_1: read-reg s_1097_0:u8
        let s_1097_1: u8 = {
            let value = state.read_register::<u8>(s_1097_0 as isize);
            tracer.read_register(s_1097_0 as isize, value);
            value
        };
        // C s_1097_2: const #2u : u8
        let s_1097_2: u8 = 2;
        // D s_1097_3: cmp-lt s_1097_1 s_1097_2
        let s_1097_3: bool = ((s_1097_1) < (s_1097_2));
        // D s_1097_4: not s_1097_3
        let s_1097_4: bool = !s_1097_3;
        // D s_1097_5: write-var gs#38520 <= s_1097_4
        fn_state.gs_38520 = s_1097_4;
        // N s_1097_6: jump b118
        return block_118(state, tracer, fn_state);
    }
    fn block_1098<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1098_0: const #13608u : u32
        let s_1098_0: u32 = 13608;
        // D s_1098_1: read-reg s_1098_0:struct
        let s_1098_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1098_0 as isize);
            tracer.read_register(s_1098_0 as isize, value);
            value
        };
        // C s_1098_2: const #13608u : u32
        let s_1098_2: u32 = 13608;
        // N s_1098_3: write-reg s_1098_2 <= s_1098_1
        let s_1098_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1098_2 as isize, s_1098_1);
            tracer.write_register(s_1098_2 as isize, s_1098_1);
        };
        // N s_1098_4: jump b116
        return block_116(state, tracer, fn_state);
    }
    fn block_1099<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1099_0: const #424u : u32
        let s_1099_0: u32 = 424;
        // D s_1099_1: read-reg s_1099_0:u8
        let s_1099_1: u8 = {
            let value = state.read_register::<u8>(s_1099_0 as isize);
            tracer.read_register(s_1099_0 as isize, value);
            value
        };
        // C s_1099_2: const #2u : u8
        let s_1099_2: u8 = 2;
        // D s_1099_3: cmp-lt s_1099_1 s_1099_2
        let s_1099_3: bool = ((s_1099_1) < (s_1099_2));
        // D s_1099_4: not s_1099_3
        let s_1099_4: bool = !s_1099_3;
        // D s_1099_5: write-var gs#38519 <= s_1099_4
        fn_state.gs_38519 = s_1099_4;
        // N s_1099_6: jump b114
        return block_114(state, tracer, fn_state);
    }
    fn block_1100<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1100_0: const #13608u : u32
        let s_1100_0: u32 = 13608;
        // D s_1100_1: read-reg s_1100_0:struct
        let s_1100_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1100_0 as isize);
            tracer.read_register(s_1100_0 as isize, value);
            value
        };
        // C s_1100_2: const #13608u : u32
        let s_1100_2: u32 = 13608;
        // N s_1100_3: write-reg s_1100_2 <= s_1100_1
        let s_1100_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1100_2 as isize, s_1100_1);
            tracer.write_register(s_1100_2 as isize, s_1100_1);
        };
        // N s_1100_4: jump b112
        return block_112(state, tracer, fn_state);
    }
    fn block_1101<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1101_0: const #424u : u32
        let s_1101_0: u32 = 424;
        // D s_1101_1: read-reg s_1101_0:u8
        let s_1101_1: u8 = {
            let value = state.read_register::<u8>(s_1101_0 as isize);
            tracer.read_register(s_1101_0 as isize, value);
            value
        };
        // C s_1101_2: const #2u : u8
        let s_1101_2: u8 = 2;
        // D s_1101_3: cmp-lt s_1101_1 s_1101_2
        let s_1101_3: bool = ((s_1101_1) < (s_1101_2));
        // D s_1101_4: not s_1101_3
        let s_1101_4: bool = !s_1101_3;
        // D s_1101_5: write-var gs#38518 <= s_1101_4
        fn_state.gs_38518 = s_1101_4;
        // N s_1101_6: jump b110
        return block_110(state, tracer, fn_state);
    }
    fn block_1102<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1102_0: const #90272u : u32
        let s_1102_0: u32 = 90272;
        // D s_1102_1: read-reg s_1102_0:struct
        let s_1102_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1102_0 as isize);
            tracer.read_register(s_1102_0 as isize, value);
            value
        };
        // C s_1102_2: const #90272u : u32
        let s_1102_2: u32 = 90272;
        // N s_1102_3: write-reg s_1102_2 <= s_1102_1
        let s_1102_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1102_2 as isize, s_1102_1);
            tracer.write_register(s_1102_2 as isize, s_1102_1);
        };
        // N s_1102_4: jump b108
        return block_108(state, tracer, fn_state);
    }
    fn block_1103<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1103_0: const #424u : u32
        let s_1103_0: u32 = 424;
        // D s_1103_1: read-reg s_1103_0:u8
        let s_1103_1: u8 = {
            let value = state.read_register::<u8>(s_1103_0 as isize);
            tracer.read_register(s_1103_0 as isize, value);
            value
        };
        // C s_1103_2: const #2u : u8
        let s_1103_2: u8 = 2;
        // D s_1103_3: cmp-lt s_1103_1 s_1103_2
        let s_1103_3: bool = ((s_1103_1) < (s_1103_2));
        // D s_1103_4: not s_1103_3
        let s_1103_4: bool = !s_1103_3;
        // D s_1103_5: write-var gs#38458 <= s_1103_4
        fn_state.gs_38458 = s_1103_4;
        // N s_1103_6: jump b106
        return block_106(state, tracer, fn_state);
    }
    fn block_1104<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1104_0: const #432u : u32
        let s_1104_0: u32 = 432;
        // D s_1104_1: read-reg s_1104_0:u8
        let s_1104_1: u8 = {
            let value = state.read_register::<u8>(s_1104_0 as isize);
            tracer.read_register(s_1104_0 as isize, value);
            value
        };
        // C s_1104_2: const #2u : u8
        let s_1104_2: u8 = 2;
        // D s_1104_3: cmp-lt s_1104_1 s_1104_2
        let s_1104_3: bool = ((s_1104_1) < (s_1104_2));
        // D s_1104_4: not s_1104_3
        let s_1104_4: bool = !s_1104_3;
        // D s_1104_5: write-var gs#38457 <= s_1104_4
        fn_state.gs_38457 = s_1104_4;
        // N s_1104_6: jump b104
        return block_104(state, tracer, fn_state);
    }
    fn block_1105<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1105_0: const #90272u : u32
        let s_1105_0: u32 = 90272;
        // D s_1105_1: read-reg s_1105_0:struct
        let s_1105_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1105_0 as isize);
            tracer.read_register(s_1105_0 as isize, value);
            value
        };
        // C s_1105_2: const #90272u : u32
        let s_1105_2: u32 = 90272;
        // N s_1105_3: write-reg s_1105_2 <= s_1105_1
        let s_1105_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1105_2 as isize, s_1105_1);
            tracer.write_register(s_1105_2 as isize, s_1105_1);
        };
        // N s_1105_4: jump b102
        return block_102(state, tracer, fn_state);
    }
    fn block_1106<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1106_0: const #424u : u32
        let s_1106_0: u32 = 424;
        // D s_1106_1: read-reg s_1106_0:u8
        let s_1106_1: u8 = {
            let value = state.read_register::<u8>(s_1106_0 as isize);
            tracer.read_register(s_1106_0 as isize, value);
            value
        };
        // C s_1106_2: const #2u : u8
        let s_1106_2: u8 = 2;
        // D s_1106_3: cmp-lt s_1106_1 s_1106_2
        let s_1106_3: bool = ((s_1106_1) < (s_1106_2));
        // D s_1106_4: not s_1106_3
        let s_1106_4: bool = !s_1106_3;
        // D s_1106_5: write-var gs#38456 <= s_1106_4
        fn_state.gs_38456 = s_1106_4;
        // N s_1106_6: jump b100
        return block_100(state, tracer, fn_state);
    }
    fn block_1107<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1107_0: const #432u : u32
        let s_1107_0: u32 = 432;
        // D s_1107_1: read-reg s_1107_0:u8
        let s_1107_1: u8 = {
            let value = state.read_register::<u8>(s_1107_0 as isize);
            tracer.read_register(s_1107_0 as isize, value);
            value
        };
        // C s_1107_2: const #2u : u8
        let s_1107_2: u8 = 2;
        // D s_1107_3: cmp-lt s_1107_1 s_1107_2
        let s_1107_3: bool = ((s_1107_1) < (s_1107_2));
        // D s_1107_4: not s_1107_3
        let s_1107_4: bool = !s_1107_3;
        // D s_1107_5: write-var gs#38455 <= s_1107_4
        fn_state.gs_38455 = s_1107_4;
        // N s_1107_6: jump b98
        return block_98(state, tracer, fn_state);
    }
    fn block_1108<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1108_0: const #90272u : u32
        let s_1108_0: u32 = 90272;
        // D s_1108_1: read-reg s_1108_0:struct
        let s_1108_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1108_0 as isize);
            tracer.read_register(s_1108_0 as isize, value);
            value
        };
        // C s_1108_2: const #90272u : u32
        let s_1108_2: u32 = 90272;
        // N s_1108_3: write-reg s_1108_2 <= s_1108_1
        let s_1108_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1108_2 as isize, s_1108_1);
            tracer.write_register(s_1108_2 as isize, s_1108_1);
        };
        // N s_1108_4: jump b96
        return block_96(state, tracer, fn_state);
    }
    fn block_1109<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1109_0: const #424u : u32
        let s_1109_0: u32 = 424;
        // D s_1109_1: read-reg s_1109_0:u8
        let s_1109_1: u8 = {
            let value = state.read_register::<u8>(s_1109_0 as isize);
            tracer.read_register(s_1109_0 as isize, value);
            value
        };
        // C s_1109_2: const #2u : u8
        let s_1109_2: u8 = 2;
        // D s_1109_3: cmp-lt s_1109_1 s_1109_2
        let s_1109_3: bool = ((s_1109_1) < (s_1109_2));
        // D s_1109_4: not s_1109_3
        let s_1109_4: bool = !s_1109_3;
        // D s_1109_5: write-var gs#38454 <= s_1109_4
        fn_state.gs_38454 = s_1109_4;
        // N s_1109_6: jump b94
        return block_94(state, tracer, fn_state);
    }
    fn block_1110<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1110_0: const #432u : u32
        let s_1110_0: u32 = 432;
        // D s_1110_1: read-reg s_1110_0:u8
        let s_1110_1: u8 = {
            let value = state.read_register::<u8>(s_1110_0 as isize);
            tracer.read_register(s_1110_0 as isize, value);
            value
        };
        // C s_1110_2: const #2u : u8
        let s_1110_2: u8 = 2;
        // D s_1110_3: cmp-lt s_1110_1 s_1110_2
        let s_1110_3: bool = ((s_1110_1) < (s_1110_2));
        // D s_1110_4: not s_1110_3
        let s_1110_4: bool = !s_1110_3;
        // D s_1110_5: write-var gs#38453 <= s_1110_4
        fn_state.gs_38453 = s_1110_4;
        // N s_1110_6: jump b92
        return block_92(state, tracer, fn_state);
    }
    fn block_1111<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1111_0: const #90272u : u32
        let s_1111_0: u32 = 90272;
        // D s_1111_1: read-reg s_1111_0:struct
        let s_1111_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1111_0 as isize);
            tracer.read_register(s_1111_0 as isize, value);
            value
        };
        // C s_1111_2: const #90272u : u32
        let s_1111_2: u32 = 90272;
        // N s_1111_3: write-reg s_1111_2 <= s_1111_1
        let s_1111_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1111_2 as isize, s_1111_1);
            tracer.write_register(s_1111_2 as isize, s_1111_1);
        };
        // N s_1111_4: jump b90
        return block_90(state, tracer, fn_state);
    }
    fn block_1112<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1112_0: const #424u : u32
        let s_1112_0: u32 = 424;
        // D s_1112_1: read-reg s_1112_0:u8
        let s_1112_1: u8 = {
            let value = state.read_register::<u8>(s_1112_0 as isize);
            tracer.read_register(s_1112_0 as isize, value);
            value
        };
        // C s_1112_2: const #2u : u8
        let s_1112_2: u8 = 2;
        // D s_1112_3: cmp-lt s_1112_1 s_1112_2
        let s_1112_3: bool = ((s_1112_1) < (s_1112_2));
        // D s_1112_4: not s_1112_3
        let s_1112_4: bool = !s_1112_3;
        // D s_1112_5: write-var gs#38448 <= s_1112_4
        fn_state.gs_38448 = s_1112_4;
        // N s_1112_6: jump b88
        return block_88(state, tracer, fn_state);
    }
    fn block_1113<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1113_0: const #432u : u32
        let s_1113_0: u32 = 432;
        // D s_1113_1: read-reg s_1113_0:u8
        let s_1113_1: u8 = {
            let value = state.read_register::<u8>(s_1113_0 as isize);
            tracer.read_register(s_1113_0 as isize, value);
            value
        };
        // C s_1113_2: const #2u : u8
        let s_1113_2: u8 = 2;
        // D s_1113_3: cmp-lt s_1113_1 s_1113_2
        let s_1113_3: bool = ((s_1113_1) < (s_1113_2));
        // D s_1113_4: not s_1113_3
        let s_1113_4: bool = !s_1113_3;
        // D s_1113_5: write-var gs#38447 <= s_1113_4
        fn_state.gs_38447 = s_1113_4;
        // N s_1113_6: jump b86
        return block_86(state, tracer, fn_state);
    }
    fn block_1114<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // N s_1114_0: jump b83
        return block_83(state, tracer, fn_state);
    }
    fn block_1115<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1115_0: const #424u : u32
        let s_1115_0: u32 = 424;
        // D s_1115_1: read-reg s_1115_0:u8
        let s_1115_1: u8 = {
            let value = state.read_register::<u8>(s_1115_0 as isize);
            tracer.read_register(s_1115_0 as isize, value);
            value
        };
        // C s_1115_2: const #2u : u8
        let s_1115_2: u8 = 2;
        // D s_1115_3: cmp-lt s_1115_1 s_1115_2
        let s_1115_3: bool = ((s_1115_1) < (s_1115_2));
        // D s_1115_4: not s_1115_3
        let s_1115_4: bool = !s_1115_3;
        // D s_1115_5: write-var gs#43402 <= s_1115_4
        fn_state.gs_43402 = s_1115_4;
        // N s_1115_6: jump b81
        return block_81(state, tracer, fn_state);
    }
    fn block_1116<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1116_0: const #2s : i64
        let s_1116_0: i64 = 2;
        // C s_1116_1: cast zx s_1116_0 -> i
        let s_1116_1: i128 = (i128::try_from(s_1116_0).unwrap());
        // S s_1116_2: call __UNKNOWN_bits(s_1116_1)
        let s_1116_2: Bits = u__UNKNOWN_bits(state, tracer, s_1116_1);
        // C s_1116_3: const #13616u : u32
        let s_1116_3: u32 = 13616;
        // D s_1116_4: read-reg s_1116_3:struct
        let s_1116_4: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1116_3 as isize);
            tracer.read_register(s_1116_3 as isize, value);
            value
        };
        // C s_1116_5: const #13616u : u32
        let s_1116_5: u32 = 13616;
        // N s_1116_6: write-reg s_1116_5 <= s_1116_4
        let s_1116_6: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1116_5 as isize, s_1116_4);
            tracer.write_register(s_1116_5 as isize, s_1116_4);
        };
        // N s_1116_7: jump b84
        return block_84(state, tracer, fn_state);
    }
    fn block_1117<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1117_0: const #1u : u8
        let s_1117_0: bool = true;
        // D s_1117_1: write-var gs#38163 <= s_1117_0
        fn_state.gs_38163 = s_1117_0;
        // N s_1117_2: jump b78
        return block_78(state, tracer, fn_state);
    }
    fn block_1118<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1118_0: const #15752u : u32
        let s_1118_0: u32 = 15752;
        // D s_1118_1: read-reg s_1118_0:struct
        let s_1118_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1118_0 as isize);
            tracer.read_register(s_1118_0 as isize, value);
            value
        };
        // C s_1118_2: const #15752u : u32
        let s_1118_2: u32 = 15752;
        // N s_1118_3: write-reg s_1118_2 <= s_1118_1
        let s_1118_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1118_2 as isize, s_1118_1);
            tracer.write_register(s_1118_2 as isize, s_1118_1);
        };
        // N s_1118_4: jump b76
        return block_76(state, tracer, fn_state);
    }
    fn block_1119<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1119_0: const #424u : u32
        let s_1119_0: u32 = 424;
        // D s_1119_1: read-reg s_1119_0:u8
        let s_1119_1: u8 = {
            let value = state.read_register::<u8>(s_1119_0 as isize);
            tracer.read_register(s_1119_0 as isize, value);
            value
        };
        // C s_1119_2: const #2u : u8
        let s_1119_2: u8 = 2;
        // D s_1119_3: cmp-lt s_1119_1 s_1119_2
        let s_1119_3: bool = ((s_1119_1) < (s_1119_2));
        // D s_1119_4: not s_1119_3
        let s_1119_4: bool = !s_1119_3;
        // D s_1119_5: write-var gs#38132 <= s_1119_4
        fn_state.gs_38132 = s_1119_4;
        // N s_1119_6: jump b74
        return block_74(state, tracer, fn_state);
    }
    fn block_1120<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1120_0: const #15752u : u32
        let s_1120_0: u32 = 15752;
        // D s_1120_1: read-reg s_1120_0:struct
        let s_1120_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1120_0 as isize);
            tracer.read_register(s_1120_0 as isize, value);
            value
        };
        // C s_1120_2: const #15752u : u32
        let s_1120_2: u32 = 15752;
        // N s_1120_3: write-reg s_1120_2 <= s_1120_1
        let s_1120_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1120_2 as isize, s_1120_1);
            tracer.write_register(s_1120_2 as isize, s_1120_1);
        };
        // N s_1120_4: jump b72
        return block_72(state, tracer, fn_state);
    }
    fn block_1121<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1121_0: const #424u : u32
        let s_1121_0: u32 = 424;
        // D s_1121_1: read-reg s_1121_0:u8
        let s_1121_1: u8 = {
            let value = state.read_register::<u8>(s_1121_0 as isize);
            tracer.read_register(s_1121_0 as isize, value);
            value
        };
        // C s_1121_2: const #2u : u8
        let s_1121_2: u8 = 2;
        // D s_1121_3: cmp-lt s_1121_1 s_1121_2
        let s_1121_3: bool = ((s_1121_1) < (s_1121_2));
        // D s_1121_4: not s_1121_3
        let s_1121_4: bool = !s_1121_3;
        // D s_1121_5: write-var gs#38131 <= s_1121_4
        fn_state.gs_38131 = s_1121_4;
        // N s_1121_6: jump b70
        return block_70(state, tracer, fn_state);
    }
    fn block_1122<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1122_0: const #15752u : u32
        let s_1122_0: u32 = 15752;
        // D s_1122_1: read-reg s_1122_0:struct
        let s_1122_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1122_0 as isize);
            tracer.read_register(s_1122_0 as isize, value);
            value
        };
        // C s_1122_2: const #15752u : u32
        let s_1122_2: u32 = 15752;
        // N s_1122_3: write-reg s_1122_2 <= s_1122_1
        let s_1122_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1122_2 as isize, s_1122_1);
            tracer.write_register(s_1122_2 as isize, s_1122_1);
        };
        // N s_1122_4: jump b68
        return block_68(state, tracer, fn_state);
    }
    fn block_1123<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1123_0: const #424u : u32
        let s_1123_0: u32 = 424;
        // D s_1123_1: read-reg s_1123_0:u8
        let s_1123_1: u8 = {
            let value = state.read_register::<u8>(s_1123_0 as isize);
            tracer.read_register(s_1123_0 as isize, value);
            value
        };
        // C s_1123_2: const #2u : u8
        let s_1123_2: u8 = 2;
        // D s_1123_3: cmp-lt s_1123_1 s_1123_2
        let s_1123_3: bool = ((s_1123_1) < (s_1123_2));
        // D s_1123_4: not s_1123_3
        let s_1123_4: bool = !s_1123_3;
        // D s_1123_5: write-var gs#38130 <= s_1123_4
        fn_state.gs_38130 = s_1123_4;
        // N s_1123_6: jump b66
        return block_66(state, tracer, fn_state);
    }
    fn block_1124<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1124_0: const #15752u : u32
        let s_1124_0: u32 = 15752;
        // D s_1124_1: read-reg s_1124_0:struct
        let s_1124_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1124_0 as isize);
            tracer.read_register(s_1124_0 as isize, value);
            value
        };
        // C s_1124_2: const #15752u : u32
        let s_1124_2: u32 = 15752;
        // N s_1124_3: write-reg s_1124_2 <= s_1124_1
        let s_1124_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1124_2 as isize, s_1124_1);
            tracer.write_register(s_1124_2 as isize, s_1124_1);
        };
        // N s_1124_4: jump b64
        return block_64(state, tracer, fn_state);
    }
    fn block_1125<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1125_0: const #424u : u32
        let s_1125_0: u32 = 424;
        // D s_1125_1: read-reg s_1125_0:u8
        let s_1125_1: u8 = {
            let value = state.read_register::<u8>(s_1125_0 as isize);
            tracer.read_register(s_1125_0 as isize, value);
            value
        };
        // C s_1125_2: const #2u : u8
        let s_1125_2: u8 = 2;
        // D s_1125_3: cmp-lt s_1125_1 s_1125_2
        let s_1125_3: bool = ((s_1125_1) < (s_1125_2));
        // D s_1125_4: not s_1125_3
        let s_1125_4: bool = !s_1125_3;
        // D s_1125_5: write-var gs#38129 <= s_1125_4
        fn_state.gs_38129 = s_1125_4;
        // N s_1125_6: jump b62
        return block_62(state, tracer, fn_state);
    }
    fn block_1126<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1126_0: const #15752u : u32
        let s_1126_0: u32 = 15752;
        // D s_1126_1: read-reg s_1126_0:struct
        let s_1126_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1126_0 as isize);
            tracer.read_register(s_1126_0 as isize, value);
            value
        };
        // C s_1126_2: const #15752u : u32
        let s_1126_2: u32 = 15752;
        // N s_1126_3: write-reg s_1126_2 <= s_1126_1
        let s_1126_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1126_2 as isize, s_1126_1);
            tracer.write_register(s_1126_2 as isize, s_1126_1);
        };
        // N s_1126_4: jump b60
        return block_60(state, tracer, fn_state);
    }
    fn block_1127<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1127_0: const #424u : u32
        let s_1127_0: u32 = 424;
        // D s_1127_1: read-reg s_1127_0:u8
        let s_1127_1: u8 = {
            let value = state.read_register::<u8>(s_1127_0 as isize);
            tracer.read_register(s_1127_0 as isize, value);
            value
        };
        // C s_1127_2: const #2u : u8
        let s_1127_2: u8 = 2;
        // D s_1127_3: cmp-lt s_1127_1 s_1127_2
        let s_1127_3: bool = ((s_1127_1) < (s_1127_2));
        // D s_1127_4: not s_1127_3
        let s_1127_4: bool = !s_1127_3;
        // D s_1127_5: write-var gs#38128 <= s_1127_4
        fn_state.gs_38128 = s_1127_4;
        // N s_1127_6: jump b58
        return block_58(state, tracer, fn_state);
    }
    fn block_1128<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1128_0: const #15752u : u32
        let s_1128_0: u32 = 15752;
        // D s_1128_1: read-reg s_1128_0:struct
        let s_1128_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1128_0 as isize);
            tracer.read_register(s_1128_0 as isize, value);
            value
        };
        // C s_1128_2: const #15752u : u32
        let s_1128_2: u32 = 15752;
        // N s_1128_3: write-reg s_1128_2 <= s_1128_1
        let s_1128_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1128_2 as isize, s_1128_1);
            tracer.write_register(s_1128_2 as isize, s_1128_1);
        };
        // N s_1128_4: jump b56
        return block_56(state, tracer, fn_state);
    }
    fn block_1129<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1129_0: const #424u : u32
        let s_1129_0: u32 = 424;
        // D s_1129_1: read-reg s_1129_0:u8
        let s_1129_1: u8 = {
            let value = state.read_register::<u8>(s_1129_0 as isize);
            tracer.read_register(s_1129_0 as isize, value);
            value
        };
        // C s_1129_2: const #2u : u8
        let s_1129_2: u8 = 2;
        // D s_1129_3: cmp-lt s_1129_1 s_1129_2
        let s_1129_3: bool = ((s_1129_1) < (s_1129_2));
        // D s_1129_4: not s_1129_3
        let s_1129_4: bool = !s_1129_3;
        // D s_1129_5: write-var gs#38127 <= s_1129_4
        fn_state.gs_38127 = s_1129_4;
        // N s_1129_6: jump b54
        return block_54(state, tracer, fn_state);
    }
    fn block_1130<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1130_0: const #15752u : u32
        let s_1130_0: u32 = 15752;
        // D s_1130_1: read-reg s_1130_0:struct
        let s_1130_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1130_0 as isize);
            tracer.read_register(s_1130_0 as isize, value);
            value
        };
        // C s_1130_2: const #15752u : u32
        let s_1130_2: u32 = 15752;
        // N s_1130_3: write-reg s_1130_2 <= s_1130_1
        let s_1130_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1130_2 as isize, s_1130_1);
            tracer.write_register(s_1130_2 as isize, s_1130_1);
        };
        // N s_1130_4: jump b52
        return block_52(state, tracer, fn_state);
    }
    fn block_1131<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1131_0: const #424u : u32
        let s_1131_0: u32 = 424;
        // D s_1131_1: read-reg s_1131_0:u8
        let s_1131_1: u8 = {
            let value = state.read_register::<u8>(s_1131_0 as isize);
            tracer.read_register(s_1131_0 as isize, value);
            value
        };
        // C s_1131_2: const #2u : u8
        let s_1131_2: u8 = 2;
        // D s_1131_3: cmp-lt s_1131_1 s_1131_2
        let s_1131_3: bool = ((s_1131_1) < (s_1131_2));
        // D s_1131_4: not s_1131_3
        let s_1131_4: bool = !s_1131_3;
        // D s_1131_5: write-var gs#38126 <= s_1131_4
        fn_state.gs_38126 = s_1131_4;
        // N s_1131_6: jump b50
        return block_50(state, tracer, fn_state);
    }
    fn block_1132<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1132_0: const #15752u : u32
        let s_1132_0: u32 = 15752;
        // D s_1132_1: read-reg s_1132_0:struct
        let s_1132_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1132_0 as isize);
            tracer.read_register(s_1132_0 as isize, value);
            value
        };
        // C s_1132_2: const #15752u : u32
        let s_1132_2: u32 = 15752;
        // N s_1132_3: write-reg s_1132_2 <= s_1132_1
        let s_1132_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1132_2 as isize, s_1132_1);
            tracer.write_register(s_1132_2 as isize, s_1132_1);
        };
        // N s_1132_4: jump b48
        return block_48(state, tracer, fn_state);
    }
    fn block_1133<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1133_0: const #424u : u32
        let s_1133_0: u32 = 424;
        // D s_1133_1: read-reg s_1133_0:u8
        let s_1133_1: u8 = {
            let value = state.read_register::<u8>(s_1133_0 as isize);
            tracer.read_register(s_1133_0 as isize, value);
            value
        };
        // C s_1133_2: const #2u : u8
        let s_1133_2: u8 = 2;
        // D s_1133_3: cmp-lt s_1133_1 s_1133_2
        let s_1133_3: bool = ((s_1133_1) < (s_1133_2));
        // D s_1133_4: not s_1133_3
        let s_1133_4: bool = !s_1133_3;
        // D s_1133_5: write-var gs#38125 <= s_1133_4
        fn_state.gs_38125 = s_1133_4;
        // N s_1133_6: jump b46
        return block_46(state, tracer, fn_state);
    }
    fn block_1134<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1134_0: const #15752u : u32
        let s_1134_0: u32 = 15752;
        // D s_1134_1: read-reg s_1134_0:struct
        let s_1134_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1134_0 as isize);
            tracer.read_register(s_1134_0 as isize, value);
            value
        };
        // C s_1134_2: const #15752u : u32
        let s_1134_2: u32 = 15752;
        // N s_1134_3: write-reg s_1134_2 <= s_1134_1
        let s_1134_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1134_2 as isize, s_1134_1);
            tracer.write_register(s_1134_2 as isize, s_1134_1);
        };
        // N s_1134_4: jump b44
        return block_44(state, tracer, fn_state);
    }
    fn block_1135<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1135_0: const #424u : u32
        let s_1135_0: u32 = 424;
        // D s_1135_1: read-reg s_1135_0:u8
        let s_1135_1: u8 = {
            let value = state.read_register::<u8>(s_1135_0 as isize);
            tracer.read_register(s_1135_0 as isize, value);
            value
        };
        // C s_1135_2: const #2u : u8
        let s_1135_2: u8 = 2;
        // D s_1135_3: cmp-lt s_1135_1 s_1135_2
        let s_1135_3: bool = ((s_1135_1) < (s_1135_2));
        // D s_1135_4: not s_1135_3
        let s_1135_4: bool = !s_1135_3;
        // D s_1135_5: write-var gs#38124 <= s_1135_4
        fn_state.gs_38124 = s_1135_4;
        // N s_1135_6: jump b42
        return block_42(state, tracer, fn_state);
    }
    fn block_1136<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1136_0: const #15752u : u32
        let s_1136_0: u32 = 15752;
        // D s_1136_1: read-reg s_1136_0:struct
        let s_1136_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1136_0 as isize);
            tracer.read_register(s_1136_0 as isize, value);
            value
        };
        // C s_1136_2: const #15752u : u32
        let s_1136_2: u32 = 15752;
        // N s_1136_3: write-reg s_1136_2 <= s_1136_1
        let s_1136_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1136_2 as isize, s_1136_1);
            tracer.write_register(s_1136_2 as isize, s_1136_1);
        };
        // N s_1136_4: jump b40
        return block_40(state, tracer, fn_state);
    }
    fn block_1137<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1137_0: const #424u : u32
        let s_1137_0: u32 = 424;
        // D s_1137_1: read-reg s_1137_0:u8
        let s_1137_1: u8 = {
            let value = state.read_register::<u8>(s_1137_0 as isize);
            tracer.read_register(s_1137_0 as isize, value);
            value
        };
        // C s_1137_2: const #2u : u8
        let s_1137_2: u8 = 2;
        // D s_1137_3: cmp-lt s_1137_1 s_1137_2
        let s_1137_3: bool = ((s_1137_1) < (s_1137_2));
        // D s_1137_4: not s_1137_3
        let s_1137_4: bool = !s_1137_3;
        // D s_1137_5: write-var gs#38123 <= s_1137_4
        fn_state.gs_38123 = s_1137_4;
        // N s_1137_6: jump b38
        return block_38(state, tracer, fn_state);
    }
    fn block_1138<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1138_0: const #15752u : u32
        let s_1138_0: u32 = 15752;
        // D s_1138_1: read-reg s_1138_0:struct
        let s_1138_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1138_0 as isize);
            tracer.read_register(s_1138_0 as isize, value);
            value
        };
        // C s_1138_2: const #15752u : u32
        let s_1138_2: u32 = 15752;
        // N s_1138_3: write-reg s_1138_2 <= s_1138_1
        let s_1138_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1138_2 as isize, s_1138_1);
            tracer.write_register(s_1138_2 as isize, s_1138_1);
        };
        // N s_1138_4: jump b36
        return block_36(state, tracer, fn_state);
    }
    fn block_1139<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1139_0: const #424u : u32
        let s_1139_0: u32 = 424;
        // D s_1139_1: read-reg s_1139_0:u8
        let s_1139_1: u8 = {
            let value = state.read_register::<u8>(s_1139_0 as isize);
            tracer.read_register(s_1139_0 as isize, value);
            value
        };
        // C s_1139_2: const #2u : u8
        let s_1139_2: u8 = 2;
        // D s_1139_3: cmp-lt s_1139_1 s_1139_2
        let s_1139_3: bool = ((s_1139_1) < (s_1139_2));
        // D s_1139_4: not s_1139_3
        let s_1139_4: bool = !s_1139_3;
        // D s_1139_5: write-var gs#38122 <= s_1139_4
        fn_state.gs_38122 = s_1139_4;
        // N s_1139_6: jump b34
        return block_34(state, tracer, fn_state);
    }
    fn block_1140<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1140_0: const #15752u : u32
        let s_1140_0: u32 = 15752;
        // D s_1140_1: read-reg s_1140_0:struct
        let s_1140_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1140_0 as isize);
            tracer.read_register(s_1140_0 as isize, value);
            value
        };
        // C s_1140_2: const #15752u : u32
        let s_1140_2: u32 = 15752;
        // N s_1140_3: write-reg s_1140_2 <= s_1140_1
        let s_1140_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1140_2 as isize, s_1140_1);
            tracer.write_register(s_1140_2 as isize, s_1140_1);
        };
        // N s_1140_4: jump b32
        return block_32(state, tracer, fn_state);
    }
    fn block_1141<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1141_0: const #424u : u32
        let s_1141_0: u32 = 424;
        // D s_1141_1: read-reg s_1141_0:u8
        let s_1141_1: u8 = {
            let value = state.read_register::<u8>(s_1141_0 as isize);
            tracer.read_register(s_1141_0 as isize, value);
            value
        };
        // C s_1141_2: const #2u : u8
        let s_1141_2: u8 = 2;
        // D s_1141_3: cmp-lt s_1141_1 s_1141_2
        let s_1141_3: bool = ((s_1141_1) < (s_1141_2));
        // D s_1141_4: not s_1141_3
        let s_1141_4: bool = !s_1141_3;
        // D s_1141_5: write-var gs#38121 <= s_1141_4
        fn_state.gs_38121 = s_1141_4;
        // N s_1141_6: jump b30
        return block_30(state, tracer, fn_state);
    }
    fn block_1142<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1142_0: const #15752u : u32
        let s_1142_0: u32 = 15752;
        // D s_1142_1: read-reg s_1142_0:struct
        let s_1142_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1142_0 as isize);
            tracer.read_register(s_1142_0 as isize, value);
            value
        };
        // C s_1142_2: const #15752u : u32
        let s_1142_2: u32 = 15752;
        // N s_1142_3: write-reg s_1142_2 <= s_1142_1
        let s_1142_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1142_2 as isize, s_1142_1);
            tracer.write_register(s_1142_2 as isize, s_1142_1);
        };
        // N s_1142_4: jump b28
        return block_28(state, tracer, fn_state);
    }
    fn block_1143<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1143_0: const #424u : u32
        let s_1143_0: u32 = 424;
        // D s_1143_1: read-reg s_1143_0:u8
        let s_1143_1: u8 = {
            let value = state.read_register::<u8>(s_1143_0 as isize);
            tracer.read_register(s_1143_0 as isize, value);
            value
        };
        // C s_1143_2: const #2u : u8
        let s_1143_2: u8 = 2;
        // D s_1143_3: cmp-lt s_1143_1 s_1143_2
        let s_1143_3: bool = ((s_1143_1) < (s_1143_2));
        // D s_1143_4: not s_1143_3
        let s_1143_4: bool = !s_1143_3;
        // D s_1143_5: write-var gs#38117 <= s_1143_4
        fn_state.gs_38117 = s_1143_4;
        // N s_1143_6: jump b26
        return block_26(state, tracer, fn_state);
    }
    fn block_1144<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1144_0: const #15752u : u32
        let s_1144_0: u32 = 15752;
        // D s_1144_1: read-reg s_1144_0:struct
        let s_1144_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1144_0 as isize);
            tracer.read_register(s_1144_0 as isize, value);
            value
        };
        // C s_1144_2: const #15752u : u32
        let s_1144_2: u32 = 15752;
        // N s_1144_3: write-reg s_1144_2 <= s_1144_1
        let s_1144_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1144_2 as isize, s_1144_1);
            tracer.write_register(s_1144_2 as isize, s_1144_1);
        };
        // N s_1144_4: jump b24
        return block_24(state, tracer, fn_state);
    }
    fn block_1145<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1145_0: const #424u : u32
        let s_1145_0: u32 = 424;
        // D s_1145_1: read-reg s_1145_0:u8
        let s_1145_1: u8 = {
            let value = state.read_register::<u8>(s_1145_0 as isize);
            tracer.read_register(s_1145_0 as isize, value);
            value
        };
        // C s_1145_2: const #2u : u8
        let s_1145_2: u8 = 2;
        // D s_1145_3: cmp-lt s_1145_1 s_1145_2
        let s_1145_3: bool = ((s_1145_1) < (s_1145_2));
        // D s_1145_4: not s_1145_3
        let s_1145_4: bool = !s_1145_3;
        // D s_1145_5: write-var gs#38116 <= s_1145_4
        fn_state.gs_38116 = s_1145_4;
        // N s_1145_6: jump b22
        return block_22(state, tracer, fn_state);
    }
    fn block_1146<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1146_0: const #15752u : u32
        let s_1146_0: u32 = 15752;
        // D s_1146_1: read-reg s_1146_0:struct
        let s_1146_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1146_0 as isize);
            tracer.read_register(s_1146_0 as isize, value);
            value
        };
        // C s_1146_2: const #15752u : u32
        let s_1146_2: u32 = 15752;
        // N s_1146_3: write-reg s_1146_2 <= s_1146_1
        let s_1146_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1146_2 as isize, s_1146_1);
            tracer.write_register(s_1146_2 as isize, s_1146_1);
        };
        // N s_1146_4: jump b20
        return block_20(state, tracer, fn_state);
    }
    fn block_1147<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1147_0: const #424u : u32
        let s_1147_0: u32 = 424;
        // D s_1147_1: read-reg s_1147_0:u8
        let s_1147_1: u8 = {
            let value = state.read_register::<u8>(s_1147_0 as isize);
            tracer.read_register(s_1147_0 as isize, value);
            value
        };
        // C s_1147_2: const #2u : u8
        let s_1147_2: u8 = 2;
        // D s_1147_3: cmp-lt s_1147_1 s_1147_2
        let s_1147_3: bool = ((s_1147_1) < (s_1147_2));
        // D s_1147_4: not s_1147_3
        let s_1147_4: bool = !s_1147_3;
        // D s_1147_5: write-var gs#38113 <= s_1147_4
        fn_state.gs_38113 = s_1147_4;
        // N s_1147_6: jump b18
        return block_18(state, tracer, fn_state);
    }
    fn block_1148<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1148_0: const #15752u : u32
        let s_1148_0: u32 = 15752;
        // D s_1148_1: read-reg s_1148_0:struct
        let s_1148_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1148_0 as isize);
            tracer.read_register(s_1148_0 as isize, value);
            value
        };
        // C s_1148_2: const #15752u : u32
        let s_1148_2: u32 = 15752;
        // N s_1148_3: write-reg s_1148_2 <= s_1148_1
        let s_1148_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1148_2 as isize, s_1148_1);
            tracer.write_register(s_1148_2 as isize, s_1148_1);
        };
        // N s_1148_4: jump b16
        return block_16(state, tracer, fn_state);
    }
    fn block_1149<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1149_0: const #424u : u32
        let s_1149_0: u32 = 424;
        // D s_1149_1: read-reg s_1149_0:u8
        let s_1149_1: u8 = {
            let value = state.read_register::<u8>(s_1149_0 as isize);
            tracer.read_register(s_1149_0 as isize, value);
            value
        };
        // C s_1149_2: const #2u : u8
        let s_1149_2: u8 = 2;
        // D s_1149_3: cmp-lt s_1149_1 s_1149_2
        let s_1149_3: bool = ((s_1149_1) < (s_1149_2));
        // D s_1149_4: not s_1149_3
        let s_1149_4: bool = !s_1149_3;
        // D s_1149_5: write-var gs#38112 <= s_1149_4
        fn_state.gs_38112 = s_1149_4;
        // N s_1149_6: jump b14
        return block_14(state, tracer, fn_state);
    }
    fn block_1150<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1150_0: const #15752u : u32
        let s_1150_0: u32 = 15752;
        // D s_1150_1: read-reg s_1150_0:struct
        let s_1150_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1150_0 as isize);
            tracer.read_register(s_1150_0 as isize, value);
            value
        };
        // C s_1150_2: const #15752u : u32
        let s_1150_2: u32 = 15752;
        // N s_1150_3: write-reg s_1150_2 <= s_1150_1
        let s_1150_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1150_2 as isize, s_1150_1);
            tracer.write_register(s_1150_2 as isize, s_1150_1);
        };
        // N s_1150_4: jump b12
        return block_12(state, tracer, fn_state);
    }
    fn block_1151<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1151_0: const #424u : u32
        let s_1151_0: u32 = 424;
        // D s_1151_1: read-reg s_1151_0:u8
        let s_1151_1: u8 = {
            let value = state.read_register::<u8>(s_1151_0 as isize);
            tracer.read_register(s_1151_0 as isize, value);
            value
        };
        // C s_1151_2: const #2u : u8
        let s_1151_2: u8 = 2;
        // D s_1151_3: cmp-lt s_1151_1 s_1151_2
        let s_1151_3: bool = ((s_1151_1) < (s_1151_2));
        // D s_1151_4: not s_1151_3
        let s_1151_4: bool = !s_1151_3;
        // D s_1151_5: write-var gs#38108 <= s_1151_4
        fn_state.gs_38108 = s_1151_4;
        // N s_1151_6: jump b10
        return block_10(state, tracer, fn_state);
    }
    fn block_1152<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1152_0: const #15752u : u32
        let s_1152_0: u32 = 15752;
        // D s_1152_1: read-reg s_1152_0:struct
        let s_1152_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1152_0 as isize);
            tracer.read_register(s_1152_0 as isize, value);
            value
        };
        // C s_1152_2: const #15752u : u32
        let s_1152_2: u32 = 15752;
        // N s_1152_3: write-reg s_1152_2 <= s_1152_1
        let s_1152_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1152_2 as isize, s_1152_1);
            tracer.write_register(s_1152_2 as isize, s_1152_1);
        };
        // N s_1152_4: jump b8
        return block_8(state, tracer, fn_state);
    }
    fn block_1153<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1153_0: const #424u : u32
        let s_1153_0: u32 = 424;
        // D s_1153_1: read-reg s_1153_0:u8
        let s_1153_1: u8 = {
            let value = state.read_register::<u8>(s_1153_0 as isize);
            tracer.read_register(s_1153_0 as isize, value);
            value
        };
        // C s_1153_2: const #2u : u8
        let s_1153_2: u8 = 2;
        // D s_1153_3: cmp-lt s_1153_1 s_1153_2
        let s_1153_3: bool = ((s_1153_1) < (s_1153_2));
        // D s_1153_4: not s_1153_3
        let s_1153_4: bool = !s_1153_3;
        // D s_1153_5: write-var gs#38107 <= s_1153_4
        fn_state.gs_38107 = s_1153_4;
        // N s_1153_6: jump b6
        return block_6(state, tracer, fn_state);
    }
    fn block_1154<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1154_0: const #15752u : u32
        let s_1154_0: u32 = 15752;
        // D s_1154_1: read-reg s_1154_0:struct
        let s_1154_1: ProductType5c790c8ef59cc8b2 = {
            let value = state
                .read_register::<ProductType5c790c8ef59cc8b2>(s_1154_0 as isize);
            tracer.read_register(s_1154_0 as isize, value);
            value
        };
        // C s_1154_2: const #15752u : u32
        let s_1154_2: u32 = 15752;
        // N s_1154_3: write-reg s_1154_2 <= s_1154_1
        let s_1154_3: () = {
            state
                .write_register::<
                    ProductType5c790c8ef59cc8b2,
                >(s_1154_2 as isize, s_1154_1);
            tracer.write_register(s_1154_2 as isize, s_1154_1);
        };
        // N s_1154_4: jump b4
        return block_4(state, tracer, fn_state);
    }
    fn block_1155<T: Tracer>(
        state: &mut State,
        tracer: &T,
        mut fn_state: FunctionState,
    ) -> () {
        // C s_1155_0: const #424u : u32
        let s_1155_0: u32 = 424;
        // D s_1155_1: read-reg s_1155_0:u8
        let s_1155_1: u8 = {
            let value = state.read_register::<u8>(s_1155_0 as isize);
            tracer.read_register(s_1155_0 as isize, value);
            value
        };
        // C s_1155_2: const #2u : u8
        let s_1155_2: u8 = 2;
        // D s_1155_3: cmp-lt s_1155_1 s_1155_2
        let s_1155_3: bool = ((s_1155_1) < (s_1155_2));
        // D s_1155_4: not s_1155_3
        let s_1155_4: bool = !s_1155_3;
        // D s_1155_5: write-var gs#38106 <= s_1155_4
        fn_state.gs_38106 = s_1155_4;
        // N s_1155_6: jump b2
        return block_2(state, tracer, fn_state);
    }
}
